!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$0mod8	mpn/alpha/ev6/aorsmul_1.asm	/^$0mod8:	ldq	r1,	8(up)		C$/;"	l
$1mod8	mpn/alpha/ev6/aorsmul_1.asm	/^$1mod8:	ldq	r5,	0(rp)		C$/;"	l
$2mod8	mpn/alpha/ev6/aorsmul_1.asm	/^$2mod8:	ldq	r1,	8(up)		C$/;"	l
$3mod8	mpn/alpha/ev6/aorsmul_1.asm	/^$3mod8:	ldq	r5,	0(rp)		C$/;"	l
$4mod8	mpn/alpha/ev6/aorsmul_1.asm	/^$4mod8:	ldq	r1,	8(up)		C$/;"	l
$5mod8	mpn/alpha/ev6/aorsmul_1.asm	/^$5mod8:	ldq	r5,	0(rp)		C$/;"	l
$6mod8	mpn/alpha/ev6/aorsmul_1.asm	/^$6mod8:	ldq	r1,	8(up)		C$/;"	l
$7mod8	mpn/alpha/ev6/aorsmul_1.asm	/^$7mod8:	ldq	r5,	0(rp)		C$/;"	l
$L00	mpn/alpha/ev5/diveby3.asm	/^$L00:$/;"	l
$L01	mpn/alpha/ev5/diveby3.asm	/^$L01:$/;"	l
$L1	mpn/alpha/ev6/aorsmul_1.asm	/^$L1:	lda	r8,	0(r31)		C zero carry reg$/;"	l
$L11	mpn/alpha/ev5/diveby3.asm	/^$L11:$/;"	l
$LC0	mpn/mips32/addmul_1.asm	/^$LC0:	lw	$10,0($4)$/;"	l
$LC0	mpn/mips32/mul_1.asm	/^$LC0:	mflo	$10$/;"	l
$LC0	mpn/mips32/submul_1.asm	/^$LC0:	lw	$10,0($4)$/;"	l
$LC0	mpn/mips64/addmul_1.asm	/^$LC0:	ld	$10,0($4)$/;"	l
$LC0	mpn/mips64/mul_1.asm	/^$LC0:	mflo	$10$/;"	l
$LC0	mpn/mips64/submul_1.asm	/^$LC0:	ld	$10,0($4)$/;"	l
$LC1	mpn/mips32/addmul_1.asm	/^$LC1:	lw	$10,0($4)$/;"	l
$LC1	mpn/mips32/mul_1.asm	/^$LC1:	mflo	$10$/;"	l
$LC1	mpn/mips32/submul_1.asm	/^$LC1:	lw	$10,0($4)$/;"	l
$LC1	mpn/mips64/addmul_1.asm	/^$LC1:	ld	$10,0($4)$/;"	l
$LC1	mpn/mips64/mul_1.asm	/^$LC1:	mflo	$10$/;"	l
$LC1	mpn/mips64/submul_1.asm	/^$LC1:	ld	$10,0($4)$/;"	l
$L_0	mpn/alpha/mod_34lsub1.asm	/^$L_0:	srl	a0, 48, r2$/;"	l
$L_012	mpn/alpha/mod_34lsub1.asm	/^$L_012:	lda	r17, 2(r17)$/;"	l
$L_16_or_more	mpn/alpha/ev6/mul_1.asm	/^$L_16_or_more:$/;"	l
$L_3_or_more	mpn/alpha/mod_34lsub1.asm	/^$L_3_or_more:$/;"	l
$L_6_or_more	mpn/alpha/mod_34lsub1.asm	/^$L_6_or_more:$/;"	l
$L_8_or_more	mpn/alpha/ev6/mul_1.asm	/^$L_8_or_more:$/;"	l
$L_9_or_more	mpn/alpha/ev6/mul_1.asm	/^$L_9_or_more:$/;"	l
$L_9_or_more	mpn/alpha/mod_34lsub1.asm	/^$L_9_or_more:$/;"	l
$L_end	mpn/alpha/mod_34lsub1.asm	/^$L_end:	cmpult	a0, l0, r0$/;"	l
$L_middle_of_unrolled_loop	mpn/alpha/ev6/mul_1.asm	/^$L_middle_of_unrolled_loop:$/;"	l
$Large	mpn/alpha/ev6/mul_1.asm	/^$Large:$/;"	l
$Lb00	mpn/alpha/ev5/diveby3.asm	/^$Lb00:	ldq	u2, 8(up)$/;"	l
$Lb01	mpn/alpha/ev5/diveby3.asm	/^$Lb01:	lda	rp, -8(rp)$/;"	l
$Lb10	mpn/alpha/ev5/diveby3.asm	/^$Lb10:	ldq	u0, 8(up)$/;"	l
$Lb11	mpn/alpha/ev5/diveby3.asm	/^$Lb11:	ldq	u3, 8(up)$/;"	l
$Lcj1	mpn/alpha/ev5/diveby3.asm	/^$Lcj1:$/;"	l
$Le1	mpn/alpha/mul_1.asm	/^$Le1:	stq	r3,0(r16)$/;"	l
$Le1a	mpn/alpha/ev6/mul_1.asm	/^$Le1a:	stq	r3,0(r16)$/;"	l
$Le1b	mpn/alpha/ev6/mul_1.asm	/^$Le1b:	stq	r3,0(r16)$/;"	l
$Le1c	mpn/alpha/mul_1.asm	/^$Le1c:	addq	r3,r20,r3	C r3 = cy_limb + cl$/;"	l
$Le2	mpn/alpha/mul_1.asm	/^$Le2:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Le2a	mpn/alpha/ev6/mul_1.asm	/^$Le2a:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Le2b	mpn/alpha/ev6/mul_1.asm	/^$Le2b:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Lend	mpn/alpha/copyd.asm	/^$Lend:	lda	r18,7(r18)		C E0$/;"	l
$Lend	mpn/alpha/copyi.asm	/^$Lend:	lda	r18,7(r18)		C E0$/;"	l
$Lend	mpn/alpha/ev5/diveby3.asm	/^$Lend:$/;"	l
$Lend	mpn/alpha/ev6/add_n.asm	/^$Lend:	addq	u0,	v0,	r2	C U1 add two data$/;"	l
$Lend	mpn/alpha/ev6/aorsmul_1.asm	/^$Lend:	CMPCY(	r2,	r22),	r21	C$/;"	l
$Lend	mpn/alpha/ev6/mul_1.asm	/^$Lend:$/;"	l
$Lend	mpn/alpha/ev6/sub_n.asm	/^$Lend:	subq	u0,	v0,	r2	C U1 sub two data$/;"	l
$Lend0	mpn/alpha/add_n.asm	/^$Lend0:	addq	r0,r4,r28		C main add$/;"	l
$Lend0	mpn/alpha/copyd.asm	/^$Lend0:	stq	r0,-8(r16)		C E0$/;"	l
$Lend0	mpn/alpha/copyi.asm	/^$Lend0:	stq	r0,0(r16)		C E0$/;"	l
$Lend0	mpn/alpha/ev6/add_n.asm	/^$Lend0:	addq	u1,	v1,	r2	C main add$/;"	l
$Lend0	mpn/alpha/ev6/sub_n.asm	/^$Lend0:	subq	u1,	v1,	r2	C main sub$/;"	l
$Lend0	mpn/alpha/sub_n.asm	/^$Lend0:	subq	r4,r0,r28		C main subtract$/;"	l
$Lend1	mpn/alpha/add_n.asm	/^$Lend1:	cmpult	r21,r28,r25		C compute cy from last add$/;"	l
$Lend1	mpn/alpha/addmul_1.asm	/^$Lend1:	addq	r5,r3,r3$/;"	l
$Lend1	mpn/alpha/sub_n.asm	/^$Lend1:	cmpult	r28,r25,r25		C compute cy from last subtract$/;"	l
$Lend1	mpn/alpha/submul_1.asm	/^$Lend1:	subq	r5,r3,r3$/;"	l
$Lend1	mpn/mips64/sqr_diagonal.asm	/^$Lend1: mflo	r10$/;"	l
$Lend2	mpn/alpha/add_n.asm	/^$Lend2:	addq	r19,4,r19		C restore loop cnt$/;"	l
$Lend2	mpn/alpha/addmul_1.asm	/^$Lend2:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Lend2	mpn/alpha/sub_n.asm	/^$Lend2:	addq	r19,4,r19		C restore loop cnt$/;"	l
$Lend2	mpn/alpha/submul_1.asm	/^$Lend2:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Lend2	mpn/mips64/sqr_diagonal.asm	/^$Lend2: mflo	r10$/;"	l
$Loop	mpn/alpha/add_n.asm	/^$Loop:	cmpult	r21,r28,r25		C compute cy from last add$/;"	l
$Loop	mpn/alpha/addmul_1.asm	/^$Loop:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Loop	mpn/alpha/copyd.asm	/^$Loop:	ldq	r0,-8(r17)		C E0$/;"	l
$Loop	mpn/alpha/copyi.asm	/^$Loop:	ldq	r0,0(r17)		C E0$/;"	l
$Loop	mpn/alpha/ev6/add_n.asm	/^$Loop:	addq	u0,	v0,	r2	C U1 add two data$/;"	l
$Loop	mpn/alpha/ev6/aorsmul_1.asm	/^$Loop:$/;"	l
$Loop	mpn/alpha/ev6/mul_1.asm	/^$Loop:$/;"	l
$Loop	mpn/alpha/ev6/sub_n.asm	/^$Loop:	subq	u0,	v0,	r2	C U1 sub two data$/;"	l
$Loop	mpn/alpha/mod_34lsub1.asm	/^$Loop:	cmpult	a0, l0, r0$/;"	l
$Loop	mpn/alpha/mul_1.asm	/^$Loop:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Loop	mpn/alpha/sub_n.asm	/^$Loop:	cmpult	r28,r25,r25		C compute cy from last subtract$/;"	l
$Loop	mpn/alpha/submul_1.asm	/^$Loop:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Loop	mpn/mips64/sqr_diagonal.asm	/^$Loop:	mflo	r10$/;"	l
$Loop0	mpn/alpha/add_n.asm	/^$Loop0:	addq	r0,r4,r28		C main add$/;"	l
$Loop0	mpn/alpha/copyd.asm	/^$Loop0:	stq	r0,-8(r16)		C E0$/;"	l
$Loop0	mpn/alpha/copyi.asm	/^$Loop0:	stq	r0,0(r16)		C E0$/;"	l
$Loop0	mpn/alpha/ev6/add_n.asm	/^$Loop0:	addq	u1,	v1,	r2	C main add$/;"	l
$Loop0	mpn/alpha/ev6/sub_n.asm	/^$Loop0:	subq	u1,	v1,	r2	C main sub$/;"	l
$Loop0	mpn/alpha/sub_n.asm	/^$Loop0:	subq	r4,r0,r28		C main subtract$/;"	l
$Lopa	mpn/alpha/ev6/mul_1.asm	/^$Lopa:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Lopb	mpn/alpha/ev6/mul_1.asm	/^$Lopb:	mulq	r2,r19,r3	C r3 = prod_low$/;"	l
$Lret	mpn/alpha/add_n.asm	/^$Lret:	bis	r25,r31,r0		C return cy$/;"	l
$Lret	mpn/alpha/copyd.asm	/^$Lret:	ret	r31,(r26),1		C E1$/;"	l
$Lret	mpn/alpha/copyi.asm	/^$Lret:	ret	r31,(r26),1		C E1$/;"	l
$Lret	mpn/alpha/ev6/add_n.asm	/^$Lret:	lda	r0,	0(cy0)		C copy carry into return register$/;"	l
$Lret	mpn/alpha/ev6/sub_n.asm	/^$Lret:	lda	r0,	0(cy0)		C copy borrow into return register$/;"	l
$Lret	mpn/alpha/sub_n.asm	/^$Lret:	bis	r25,r31,r0		C return cy$/;"	l
$Lsmall	mpn/alpha/ev6/add_n.asm	/^$Lsmall:$/;"	l
$Lsmall	mpn/alpha/ev6/mul_1.asm	/^$Lsmall:$/;"	l
$Lsmall	mpn/alpha/ev6/sub_n.asm	/^$Lsmall:$/;"	l
$Ltop	mpn/alpha/ev5/diveby3.asm	/^$Ltop:$/;"	l
$ent0	mpn/alpha/ev6/aorsmul_1.asm	/^$ent0:$/;"	l
$ent1	mpn/alpha/ev6/aorsmul_1.asm	/^$ent1:	lda	up,	8(up)		C$/;"	l
$ent2	mpn/alpha/ev6/aorsmul_1.asm	/^$ent2:$/;"	l
$ent6	mpn/alpha/ev6/aorsmul_1.asm	/^$ent6:$/;"	l
$entry	mpn/alpha/ev6/add_n.asm	/^$entry:	cmpult	r19,	5,	r22	C L1 move counter$/;"	l
$entry	mpn/alpha/ev6/sub_n.asm	/^$entry:	cmpult	r19,	5,	r22	C L1 move counter$/;"	l
$fix0	mpn/alpha/ev6/add_n.asm	/^$fix0:	bis	cy1,	r23,	cy1	C bring forward carry$/;"	l
$fix0	mpn/alpha/ev6/mul_1.asm	/^$fix0:	bis	r14,	r29,	r14	C join carries$/;"	l
$fix0	mpn/alpha/ev6/sub_n.asm	/^$fix0:	bis	cy1,	r23,	cy1	C bring forward borrow$/;"	l
$fix0c	mpn/alpha/ev6/add_n.asm	/^$fix0c:	bis	cy1,	r23,	cy1	C bring forward carry$/;"	l
$fix0c	mpn/alpha/ev6/mul_1.asm	/^$fix0c:	bis	r14,	r29,	r14	C join carries$/;"	l
$fix0c	mpn/alpha/ev6/sub_n.asm	/^$fix0c:	bis	cy1,	r23,	cy1	C bring forward borrow$/;"	l
$fix1	mpn/alpha/ev6/add_n.asm	/^$fix1:	bis	cy0,	cy1,	cy0	C bring forward carry$/;"	l
$fix1	mpn/alpha/ev6/mul_1.asm	/^$fix1:	bis	r24,	r14,	r24	C join carries$/;"	l
$fix1	mpn/alpha/ev6/sub_n.asm	/^$fix1:	bis	cy0,	cy1,	cy0	C bring forward borrow$/;"	l
$fix1c	mpn/alpha/ev6/add_n.asm	/^$fix1c:	bis	cy0,	cy1,	cy0	C bring forward carry$/;"	l
$fix1c	mpn/alpha/ev6/mul_1.asm	/^$fix1c:	bis	r24,	r14,	r24	C join carries$/;"	l
$fix1c	mpn/alpha/ev6/sub_n.asm	/^$fix1c:	bis	cy0,	cy1,	cy0	C bring forward borrow$/;"	l
$fix1w	mpn/alpha/ev6/mul_1.asm	/^$fix1w:	bis	r24,	r14,	r24	C join carries$/;"	l
$fix2	mpn/alpha/ev6/add_n.asm	/^$fix2:	bis	r22,	cy0,	r22	C bring forward carry$/;"	l
$fix2	mpn/alpha/ev6/mul_1.asm	/^$fix2:	bis	r25,	r24,	r25	C join carries$/;"	l
$fix2	mpn/alpha/ev6/sub_n.asm	/^$fix2:	bis	r22,	cy0,	r22	C bring forward borrow$/;"	l
$fix2c	mpn/alpha/ev6/mul_1.asm	/^$fix2c:	bis	r25,	r24,	r25	C join carries$/;"	l
$fix2w	mpn/alpha/ev6/mul_1.asm	/^$fix2w:	bis	r25,	r24,	r25	C join carries$/;"	l
$fix3	mpn/alpha/ev6/add_n.asm	/^$fix3:	bis	r23,	r22,	r23	C bring forward carry$/;"	l
$fix3	mpn/alpha/ev6/mul_1.asm	/^$fix3:	bis	r15,	r25,	r15	C join carries$/;"	l
$fix3	mpn/alpha/ev6/sub_n.asm	/^$fix3:	bis	r23,	r22,	r23	C bring forward borrow$/;"	l
$fix3c	mpn/alpha/ev6/mul_1.asm	/^$fix3c:	bis	r15,	r25,	r15	C join carries$/;"	l
$fix3w	mpn/alpha/ev6/mul_1.asm	/^$fix3w:	bis	r15,	r25,	r15	C join carries$/;"	l
$fix4	mpn/alpha/ev6/add_n.asm	/^$fix4:	bis	cy1,	r23,	cy1	C bring forward carry$/;"	l
$fix4	mpn/alpha/ev6/mul_1.asm	/^$fix4:	bis	r29,	r15,	r29	C join carries$/;"	l
$fix4	mpn/alpha/ev6/sub_n.asm	/^$fix4:	bis	cy1,	r23,	cy1	C bring forward borrow$/;"	l
$fix4c	mpn/alpha/ev6/mul_1.asm	/^$fix4c:	bis	r29,	r15,	r29	C join carries$/;"	l
$fix5	mpn/alpha/ev6/add_n.asm	/^$fix5:	bis	cy1,	cy0,	cy0	C bring forward carry$/;"	l
$fix5	mpn/alpha/ev6/mul_1.asm	/^$fix5:	bis	r4,	r29,	r4	C join carries$/;"	l
$fix5	mpn/alpha/ev6/sub_n.asm	/^$fix5:	bis	cy1,	cy0,	cy0	C bring forward borrow$/;"	l
$fix5c	mpn/alpha/ev6/mul_1.asm	/^$fix5c:	bis	r4,	r29,	r4	C join carries$/;"	l
$fix5f	mpn/alpha/ev6/add_n.asm	/^$fix5f:	bis	r23,	cy0,	r23	C bring forward carry$/;"	l
$fix5f	mpn/alpha/ev6/sub_n.asm	/^$fix5f:	bis	r23,	cy0,	r23	C bring forward borrow$/;"	l
$fix6	mpn/alpha/ev6/add_n.asm	/^$fix6:	bis	r22,	cy0,	r22	C bring forward carry$/;"	l
$fix6	mpn/alpha/ev6/mul_1.asm	/^$fix6:	addq	r5,	r4,	r5	C can't carry twice!$/;"	l
$fix6	mpn/alpha/ev6/sub_n.asm	/^$fix6:	bis	r22,	cy0,	r22	C bring forward borrow$/;"	l
$fix6c	mpn/alpha/ev6/mul_1.asm	/^$fix6c:	addq	r5,	r4,	r5	C can't carry twice!$/;"	l
$fix6f	mpn/alpha/ev6/add_n.asm	/^$fix6f:	bis	r22,	r23,	r22	C bring forward carry$/;"	l
$fix6f	mpn/alpha/ev6/sub_n.asm	/^$fix6f:	bis	r22,	r23,	r22	C bring forward borrow$/;"	l
$fix7	mpn/alpha/ev6/add_n.asm	/^$fix7:	bis	r23,	r22,	r23	C bring forward carry$/;"	l
$fix7	mpn/alpha/ev6/sub_n.asm	/^$fix7:	bis	r23,	r22,	r23	C bring forward borrow$/;"	l
$fix7c	mpn/alpha/ev6/add_n.asm	/^$fix7c:	bis	r23,	r22,	r23	C bring forward carry$/;"	l
$fix7c	mpn/alpha/ev6/sub_n.asm	/^$fix7c:	bis	r23,	r22,	r23	C bring forward borrow$/;"	l
$n23	mpn/alpha/ev6/aorsmul_1.asm	/^$n23:	ldq	r4,	0(rp)		C$/;"	l
$ret0	mpn/alpha/ev6/add_n.asm	/^$ret0:	cmpult	r5,	v1,	cy0	C U0 did it carry$/;"	l
$ret0	mpn/alpha/ev6/mul_1.asm	/^$ret0:	addq	r22,	r14,	r26	C L0$/;"	l
$ret0	mpn/alpha/ev6/sub_n.asm	/^$ret0:	cmpult	u1,	v1,	cy0	C U0 did it borrow$/;"	l
$ret0c	mpn/alpha/ev6/add_n.asm	/^$ret0c:	cmpult	r5,	v1,	cy0	C U0 did it carry$/;"	l
$ret0c	mpn/alpha/ev6/mul_1.asm	/^$ret0c:	addq	r22,	r14,	r26	C L0$/;"	l
$ret0c	mpn/alpha/ev6/sub_n.asm	/^$ret0c:	cmpult	u1,	v1,	cy0	C U0 did it borrow$/;"	l
$ret0w	mpn/alpha/ev6/mul_1.asm	/^$ret0w:	addq	r22,	r14,	r26	C L0$/;"	l
$ret1	mpn/alpha/ev6/add_n.asm	/^$ret1:	ldq	u0,	16(r17)		C L0 get next ones$/;"	l
$ret1	mpn/alpha/ev6/mul_1.asm	/^$ret1:	addq	r23,	r24,	r27	C L0$/;"	l
$ret1	mpn/alpha/ev6/sub_n.asm	/^$ret1:	ldq	u0,	16(r17)		C L0 get next ones$/;"	l
$ret1c	mpn/alpha/ev6/add_n.asm	/^$ret1c:	stq	r5,	40(r16)		C L0 put an answer$/;"	l
$ret1c	mpn/alpha/ev6/mul_1.asm	/^$ret1c:	addq	r23,	r24,	r27	C L0$/;"	l
$ret1c	mpn/alpha/ev6/sub_n.asm	/^$ret1c:	stq	r24,	40(r16)		C L0 put an answer$/;"	l
$ret1w	mpn/alpha/ev6/mul_1.asm	/^$ret1w:	addq	r23,	r24,	r27	C L0$/;"	l
$ret2	mpn/alpha/ev6/add_n.asm	/^$ret2:	cmpult	r7,	v1,	r23	C U0 did it carry$/;"	l
$ret2	mpn/alpha/ev6/mul_1.asm	/^$ret2:	addq	r28,	r25,	r28	C L0$/;"	l
$ret2	mpn/alpha/ev6/sub_n.asm	/^$ret2:	cmpult	u1,	v1,	r23	C U0 did it borrow$/;"	l
$ret2c	mpn/alpha/ev6/mul_1.asm	/^$ret2c:	addq	r28,	r25,	r28	C L0$/;"	l
$ret2w	mpn/alpha/ev6/mul_1.asm	/^$ret2w:	addq	r28,	r25,	r28	C L0$/;"	l
$ret3	mpn/alpha/ev6/add_n.asm	/^$ret3:	ldq	u0,	32(r17)		C L0 get next ones$/;"	l
$ret3	mpn/alpha/ev6/mul_1.asm	/^$ret3:	addq	r1,	r2,	r20	C L0 sum 2 mul's$/;"	l
$ret3	mpn/alpha/ev6/sub_n.asm	/^$ret3:	ldq	u0,	32(r17)		C L0 get next ones$/;"	l
$ret3c	mpn/alpha/ev6/mul_1.asm	/^$ret3c:	addq	r1,	r2,	r20	C L0 sum 2 mul's$/;"	l
$ret3w	mpn/alpha/ev6/mul_1.asm	/^$ret3w:	addq	r1,	r2,	r20	C L0 sum 2 mul's$/;"	l
$ret4	mpn/alpha/ev6/add_n.asm	/^$ret4:	cmpult	r5,	v1,	cy0	C U0 did it carry$/;"	l
$ret4	mpn/alpha/ev6/mul_1.asm	/^$ret4:	addq	r2,	r29,	r6	C L0$/;"	l
$ret4	mpn/alpha/ev6/sub_n.asm	/^$ret4:	cmpult	u1,	v1,	cy0	C U0 did it borrow$/;"	l
$ret4c	mpn/alpha/ev6/mul_1.asm	/^$ret4c:	addq	r2,	r29,	r6	C L0$/;"	l
$ret4w	mpn/alpha/ev6/mul_1.asm	/^$ret4w:	addq	r2,	r29,	r6	C L0$/;"	l
$ret5	mpn/alpha/ev6/add_n.asm	/^$ret5:	ldq	u0,	48(r17)		C L0 get next ones$/;"	l
$ret5	mpn/alpha/ev6/mul_1.asm	/^$ret5:	addq	r14,	r4,	r7	C L0$/;"	l
$ret5	mpn/alpha/ev6/sub_n.asm	/^$ret5:	ldq	u0,	48(r17)		C L0 get next ones$/;"	l
$ret5c	mpn/alpha/ev6/mul_1.asm	/^$ret5c:	addq	r14,	r4,	r7	C L0$/;"	l
$ret5f	mpn/alpha/ev6/add_n.asm	/^$ret5f:	ldq	u0,	24(r17)		C L0 get next ones$/;"	l
$ret5f	mpn/alpha/ev6/sub_n.asm	/^$ret5f:	ldq	u0,	24(r17)		C L0 get next ones$/;"	l
$ret5w	mpn/alpha/ev6/mul_1.asm	/^$ret5w:	addq	r14,	r4,	r7	C L0$/;"	l
$ret6	mpn/alpha/ev6/add_n.asm	/^$ret6:	cmpult	r7,	v1,	r23	C U0 did it carry$/;"	l
$ret6	mpn/alpha/ev6/mul_1.asm	/^$ret6:	addq	r5,	r8,	r8	C L0 sum 2$/;"	l
$ret6	mpn/alpha/ev6/sub_n.asm	/^$ret6:	cmpult	u1,	v1,	r23	C U0 did it borrow$/;"	l
$ret6c	mpn/alpha/ev6/mul_1.asm	/^$ret6c:	addq	r5,	r8,	r8	C L0 sum 2$/;"	l
$ret6f	mpn/alpha/ev6/add_n.asm	/^$ret6f:	cmpult	r7,	v1,	r23	C U0 did it carry$/;"	l
$ret6f	mpn/alpha/ev6/sub_n.asm	/^$ret6f:	cmpult	u1,	v1,	r23	C U0 did it borrow$/;"	l
$ret6w	mpn/alpha/ev6/mul_1.asm	/^$ret6w:	addq	r5,	r8,	r8	C L0 sum 2$/;"	l
$ret7	mpn/alpha/ev6/add_n.asm	/^$ret7:	ldq	u0,	0(r17)		C L0 get next ones$/;"	l
$ret7	mpn/alpha/ev6/sub_n.asm	/^$ret7:	ldq	u0,	0(r17)		C L0 get next ones$/;"	l
$ret7c	mpn/alpha/ev6/add_n.asm	/^$ret7c:	addq	r2,	r23,	r2	C U1 carry from last$/;"	l
$ret7c	mpn/alpha/ev6/sub_n.asm	/^$ret7c:	subq	r2,	r23,	r25	C U1 borrow from last$/;"	l
ABORT	tests/cxx/t-ostream.cc	66;"	d	file:
ABOVE_THRESHOLD	gmp-impl.h	1264;"	d
ABOVE_THRESHOLD	gmp-impl.h	1269;"	d
ABS	demos/calc/calc.c	/^     ABS = 264,$/;"	e	enum:yytokentype	file:
ABS	demos/calc/calc.c	281;"	d	file:
ABS	demos/calc/calc.h	/^     ABS = 264,$/;"	e	enum:yytokentype
ABS	demos/calc/calc.h	86;"	d
ABS	gmp-impl.h	533;"	d
ABSIZ	gmp-impl.h	544;"	d
ABS_CAST	gmp-impl.h	535;"	d
ACCUMULATE	mpz/import.c	125;"	d	file:
ADD	mpn/generic/mod_34lsub1.c	90;"	d	file:
ADD	mpn/mod_34lsub1.c	90;"	d	file:
ADD	tests/devel/tst-addsub.c	24;"	d	file:
ADDC_LIMB	gmp-impl.h	2599;"	d
ADDC_LIMB	gmp-impl.h	2608;"	d
ALIGNMENTS	tests/devel/try.c	195;"	d	file:
ALIGN_COUNT	tests/devel/try.c	3297;"	d	file:
ALIGN_ITERATION	tests/devel/try.c	3298;"	d	file:
ALLOC	gmp-impl.h	548;"	d
ALLOCATE_FUNC_LIMBS	demos/expr/expr.c	52;"	d	file:
ALLOCATE_FUNC_TYPE	demos/expr/expr.c	50;"	d	file:
ALLOCDAT_STEP	tune/tuneup.c	327;"	d	file:
ALPHA_CMPBGE_0	longlong.h	245;"	d
AND	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
ANYARGS	tests/tests.h	34;"	d
ANYARGS	tests/tests.h	36;"	d
AORS	tests/refmpn.c	1060;"	d	file:
AORSMUL_1C	tests/refmpn.c	1210;"	d	file:
AORSMUL_FASTER_2AORSLSH	mpn/generic/toom_interpolate_12pts.c	108;"	d	file:
AORSMUL_FASTER_2AORSLSH	mpn/generic/toom_interpolate_16pts.c	104;"	d	file:
AORSMUL_FASTER_2AORSLSH	mpn/toom_interpolate_12pts.c	108;"	d	file:
AORSMUL_FASTER_2AORSLSH	mpn/toom_interpolate_16pts.c	104;"	d	file:
AORSMUL_FASTER_3AORSLSH	mpn/generic/toom_interpolate_12pts.c	111;"	d	file:
AORSMUL_FASTER_3AORSLSH	mpn/generic/toom_interpolate_16pts.c	107;"	d	file:
AORSMUL_FASTER_3AORSLSH	mpn/toom_interpolate_12pts.c	111;"	d	file:
AORSMUL_FASTER_3AORSLSH	mpn/toom_interpolate_16pts.c	107;"	d	file:
AORSMUL_FASTER_AORS_2AORSLSH	mpn/generic/toom_interpolate_12pts.c	105;"	d	file:
AORSMUL_FASTER_AORS_2AORSLSH	mpn/generic/toom_interpolate_16pts.c	101;"	d	file:
AORSMUL_FASTER_AORS_2AORSLSH	mpn/toom_interpolate_12pts.c	105;"	d	file:
AORSMUL_FASTER_AORS_2AORSLSH	mpn/toom_interpolate_16pts.c	101;"	d	file:
AORSMUL_FASTER_AORS_AORSLSH	mpn/generic/toom_interpolate_12pts.c	102;"	d	file:
AORSMUL_FASTER_AORS_AORSLSH	mpn/generic/toom_interpolate_16pts.c	98;"	d	file:
AORSMUL_FASTER_AORS_AORSLSH	mpn/toom_interpolate_12pts.c	102;"	d	file:
AORSMUL_FASTER_AORS_AORSLSH	mpn/toom_interpolate_16pts.c	98;"	d	file:
AORS_1	tests/refmpn.c	533;"	d	file:
AORS_ERR1_N	tests/refmpn.c	622;"	d	file:
AORS_ERR2_N	tests/refmpn.c	672;"	d	file:
AORS_ERR3_N	tests/refmpn.c	729;"	d	file:
AORS_NC	tests/refmpn.c	558;"	d	file:
AR	Makefile	/^AR=ar$/;"	m
AR	mpn/Makefile	/^AR=ar$/;"	m
ARRAY_ITERATION	tests/devel/try.c	2190;"	d	file:
ASIZE	tests/mpn/t-aors_1.c	29;"	d	file:
ASM_L	gmp-impl.h	782;"	d
ASSERT	demos/expr/expr.c	60;"	d	file:
ASSERT	gmp-impl.h	2395;"	d
ASSERT	gmp-impl.h	2397;"	d
ASSERT_ALWAYS	gmp-impl.h	2388;"	d
ASSERT_ALWAYS_LIMB	gmp-impl.h	2452;"	d
ASSERT_ALWAYS_MPN	gmp-impl.h	2457;"	d
ASSERT_ALWAYS_PREC	tests/cxx/t-prec.cc	35;"	d	file:
ASSERT_CARRY	gmp-impl.h	2408;"	d
ASSERT_CARRY	gmp-impl.h	2411;"	d
ASSERT_CODE	gmp-impl.h	2419;"	d
ASSERT_CODE	gmp-impl.h	2421;"	d
ASSERT_FAIL	gmp-impl.h	2386;"	d
ASSERT_FILE	gmp-impl.h	2378;"	d
ASSERT_FILE	gmp-impl.h	2380;"	d
ASSERT_HIGH_PRODUCT	mpn/sparc64/sparc64.h	131;"	d
ASSERT_HIGH_PRODUCT	mpn/sparc64/sparc64.h	138;"	d
ASSERT_LIMB	gmp-impl.h	2468;"	d
ASSERT_LIMB	gmp-impl.h	2471;"	d
ASSERT_LINE	gmp-impl.h	2372;"	d
ASSERT_LINE	gmp-impl.h	2374;"	d
ASSERT_MPN	gmp-impl.h	2469;"	d
ASSERT_MPN	gmp-impl.h	2472;"	d
ASSERT_MPN_NONZERO_P	gmp-impl.h	2486;"	d
ASSERT_MPN_NONZERO_P	gmp-impl.h	2501;"	d
ASSERT_MPN_ZERO_P	gmp-impl.h	2479;"	d
ASSERT_MPN_ZERO_P	gmp-impl.h	2500;"	d
ASSERT_MPQ_CANONICAL	gmp-impl.h	2429;"	d
ASSERT_MPQ_CANONICAL	gmp-impl.h	2448;"	d
ASSERT_NOCARRY	gmp-impl.h	2409;"	d
ASSERT_NOCARRY	gmp-impl.h	2412;"	d
ASSERT_RETVAL	mpn/sparc64/mode1o.c	77;"	d	file:
ATTRIBUTE_CONST	gmp-impl.h	266;"	d
ATTRIBUTE_CONST	gmp-impl.h	268;"	d
ATTRIBUTE_MALLOC	gmp-impl.h	280;"	d
ATTRIBUTE_MALLOC	gmp-impl.h	282;"	d
ATTRIBUTE_NORETURN	gmp-impl.h	272;"	d
ATTRIBUTE_NORETURN	gmp-impl.h	274;"	d
B	gen-trialdivtab.c	/^mpz_t B;$/;"	v
B1	mpn/generic/mod_34lsub1.c	69;"	d	file:
B1	mpn/mod_34lsub1.c	69;"	d	file:
B2	mpn/generic/mod_34lsub1.c	70;"	d	file:
B2	mpn/mod_34lsub1.c	70;"	d	file:
B3	mpn/generic/mod_34lsub1.c	71;"	d	file:
B3	mpn/mod_34lsub1.c	71;"	d	file:
BAD	demos/calc/calc.c	/^     BAD = 259,$/;"	e	enum:yytokentype	file:
BAD	demos/calc/calc.c	276;"	d	file:
BAD	demos/calc/calc.h	/^     BAD = 259,$/;"	e	enum:yytokentype
BAD	demos/calc/calc.h	81;"	d
BASE	tests/rand/t-rand.c	26;"	d	file:
BEGIN	demos/calc/calclex.c	87;"	d	file:
BELOW_THRESHOLD	gmp-impl.h	1274;"	d
BIN	demos/calc/calc.c	/^     BIN = 265,$/;"	e	enum:yytokentype	file:
BIN	demos/calc/calc.c	282;"	d	file:
BIN	demos/calc/calc.h	/^     BIN = 265,$/;"	e	enum:yytokentype
BIN	demos/calc/calc.h	87;"	d
BINOM	demos/pexpr.c	/^	   LOG, LOG2, FERMAT, MERSENNE, FIBONACCI, RANDOM, NEXTPRIME, BINOM,$/;"	e	enum:op_t	file:
BINVERT_15	mpn/generic/toom_interpolate_7pts.c	46;"	d	file:
BINVERT_15	mpn/generic/toom_interpolate_8pts.c	42;"	d	file:
BINVERT_15	mpn/toom_interpolate_7pts.c	46;"	d	file:
BINVERT_15	mpn/toom_interpolate_8pts.c	42;"	d	file:
BINVERT_182712915	mpn/generic/toom_interpolate_16pts.c	128;"	d	file:
BINVERT_182712915	mpn/toom_interpolate_16pts.c	128;"	d	file:
BINVERT_188513325	mpn/generic/toom_interpolate_16pts.c	129;"	d	file:
BINVERT_188513325	mpn/toom_interpolate_16pts.c	129;"	d	file:
BINVERT_255	mpn/generic/toom_interpolate_12pts.c	117;"	d	file:
BINVERT_255	mpn/generic/toom_interpolate_16pts.c	121;"	d	file:
BINVERT_255	mpn/toom_interpolate_12pts.c	117;"	d	file:
BINVERT_255	mpn/toom_interpolate_16pts.c	121;"	d	file:
BINVERT_255x182712915	mpn/generic/toom_interpolate_16pts.c	145;"	d	file:
BINVERT_255x182712915	mpn/toom_interpolate_16pts.c	145;"	d	file:
BINVERT_255x182712915H	mpn/generic/toom_interpolate_16pts.c	133;"	d	file:
BINVERT_255x182712915H	mpn/generic/toom_interpolate_16pts.c	136;"	d	file:
BINVERT_255x182712915H	mpn/toom_interpolate_16pts.c	133;"	d	file:
BINVERT_255x182712915H	mpn/toom_interpolate_16pts.c	136;"	d	file:
BINVERT_255x182712915L	mpn/generic/toom_interpolate_16pts.c	130;"	d	file:
BINVERT_255x182712915L	mpn/toom_interpolate_16pts.c	130;"	d	file:
BINVERT_255x188513325	mpn/generic/toom_interpolate_16pts.c	146;"	d	file:
BINVERT_255x188513325	mpn/toom_interpolate_16pts.c	146;"	d	file:
BINVERT_255x188513325H	mpn/generic/toom_interpolate_16pts.c	134;"	d	file:
BINVERT_255x188513325H	mpn/generic/toom_interpolate_16pts.c	138;"	d	file:
BINVERT_255x188513325H	mpn/toom_interpolate_16pts.c	134;"	d	file:
BINVERT_255x188513325H	mpn/toom_interpolate_16pts.c	138;"	d	file:
BINVERT_255x188513325L	mpn/generic/toom_interpolate_16pts.c	131;"	d	file:
BINVERT_255x188513325L	mpn/toom_interpolate_16pts.c	131;"	d	file:
BINVERT_2835	mpn/generic/toom_interpolate_12pts.c	122;"	d	file:
BINVERT_2835	mpn/generic/toom_interpolate_12pts.c	126;"	d	file:
BINVERT_2835	mpn/generic/toom_interpolate_16pts.c	126;"	d	file:
BINVERT_2835	mpn/generic/toom_interpolate_16pts.c	143;"	d	file:
BINVERT_2835	mpn/toom_interpolate_12pts.c	122;"	d	file:
BINVERT_2835	mpn/toom_interpolate_12pts.c	126;"	d	file:
BINVERT_2835	mpn/toom_interpolate_16pts.c	126;"	d	file:
BINVERT_2835	mpn/toom_interpolate_16pts.c	143;"	d	file:
BINVERT_3	mpn/generic/toom_interpolate_7pts.c	41;"	d	file:
BINVERT_3	mpn/generic/toom_interpolate_8pts.c	40;"	d	file:
BINVERT_3	mpn/toom_interpolate_7pts.c	41;"	d	file:
BINVERT_3	mpn/toom_interpolate_8pts.c	40;"	d	file:
BINVERT_42525	mpn/generic/toom_interpolate_12pts.c	123;"	d	file:
BINVERT_42525	mpn/generic/toom_interpolate_12pts.c	127;"	d	file:
BINVERT_42525	mpn/generic/toom_interpolate_16pts.c	127;"	d	file:
BINVERT_42525	mpn/generic/toom_interpolate_16pts.c	144;"	d	file:
BINVERT_42525	mpn/toom_interpolate_12pts.c	123;"	d	file:
BINVERT_42525	mpn/toom_interpolate_12pts.c	127;"	d	file:
BINVERT_42525	mpn/toom_interpolate_16pts.c	127;"	d	file:
BINVERT_42525	mpn/toom_interpolate_16pts.c	144;"	d	file:
BINVERT_45	mpn/generic/toom_interpolate_8pts.c	45;"	d	file:
BINVERT_45	mpn/toom_interpolate_8pts.c	45;"	d	file:
BINVERT_9	mpn/generic/toom_interpolate_12pts.c	114;"	d	file:
BINVERT_9	mpn/generic/toom_interpolate_16pts.c	118;"	d	file:
BINVERT_9	mpn/generic/toom_interpolate_7pts.c	43;"	d	file:
BINVERT_9	mpn/toom_interpolate_12pts.c	114;"	d	file:
BINVERT_9	mpn/toom_interpolate_16pts.c	118;"	d	file:
BINVERT_9	mpn/toom_interpolate_7pts.c	43;"	d	file:
BINV_NEWTON_THRESHOLD	gmp-impl.h	2194;"	d
BINV_NEWTON_THRESHOLD	gmp-impl.h	4880;"	d
BINV_NEWTON_THRESHOLD	gmp-impl.h	4881;"	d
BINV_NEWTON_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	162;"	d
BINV_NEWTON_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	184;"	d
BINV_NEWTON_THRESHOLD	mpn/arm/gmp-mparam.h	109;"	d
BINV_NEWTON_THRESHOLD	mpn/arm/v6/gmp-mparam.h	162;"	d
BINV_NEWTON_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	167;"	d
BINV_NEWTON_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	168;"	d
BINV_NEWTON_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	181;"	d
BINV_NEWTON_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	183;"	d
BINV_NEWTON_THRESHOLD	mpn/arm64/gmp-mparam.h	214;"	d
BINV_NEWTON_THRESHOLD	mpn/ia64/gmp-mparam.h	178;"	d
BINV_NEWTON_THRESHOLD	mpn/minithres/gmp-mparam.h	92;"	d
BINV_NEWTON_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	149;"	d
BINV_NEWTON_THRESHOLD	mpn/pa64/gmp-mparam.h	227;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	174;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc32/gmp-mparam.h	197;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	137;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	179;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	136;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	145;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	139;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	148;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	154;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	187;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	196;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	135;"	d
BINV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	219;"	d
BINV_NEWTON_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	182;"	d
BINV_NEWTON_THRESHOLD	mpn/s390_32/gmp-mparam.h	120;"	d
BINV_NEWTON_THRESHOLD	mpn/s390_64/gmp-mparam.h	150;"	d
BINV_NEWTON_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	208;"	d
BINV_NEWTON_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	128;"	d
BINV_NEWTON_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	179;"	d
BINV_NEWTON_THRESHOLD	mpn/sparc64/gmp-mparam.h	120;"	d
BINV_NEWTON_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	196;"	d
BINV_NEWTON_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	129;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/atom/gmp-mparam.h	182;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	183;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	186;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	172;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/core2/gmp-mparam.h	175;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	185;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	199;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	178;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/geode/gmp-mparam.h	123;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/k10/gmp-mparam.h	189;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/k6/gmp-mparam.h	148;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/k7/gmp-mparam.h	228;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/k8/gmp-mparam.h	173;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/nano/gmp-mparam.h	142;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/p6/gmp-mparam.h	174;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	180;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	175;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	145;"	d
BINV_NEWTON_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	181;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	190;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	215;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	230;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	193;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	201;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	203;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	220;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	207;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	205;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/gmp-mparam.h	193;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	211;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	210;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	217;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	205;"	d
BINV_NEWTON_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	204;"	d
BIN_GOETGHELUCK_THRESHOLD	mpz/bin_uiui.c	38;"	d	file:
BIN_UIUI_ENABLE_SMALLDC	mpz/bin_uiui.c	41;"	d	file:
BIN_UIUI_RECURSIVE_SMALLDC	mpz/bin_uiui.c	44;"	d	file:
BITSIZE	tests/mpz/t-limbs.c	28;"	d	file:
BITS_FAIL	mpn/generic/jacobi.c	133;"	d	file:
BITS_FAIL	mpn/jacobi.c	133;"	d	file:
BITS_PER_PART	extract-dbl.c	50;"	d	file:
BITS_PER_RANDCALL	mpn/generic/random2.c	41;"	d	file:
BITS_PER_RANDCALL	mpn/generic/random2.c	43;"	d	file:
BITS_PER_RANDCALL	mpn/random2.c	41;"	d	file:
BITS_PER_RANDCALL	mpn/random2.c	43;"	d	file:
BITS_PER_RANDCALL	mpz/rrandomb.c	58;"	d	file:
BITS_PER_RANDCALL	mpz/rrandomb.c	60;"	d	file:
BITS_PER_ULONG	gmp-impl.h	227;"	d
BITS_TO_LIMBS	gmp-impl.h	2938;"	d
BIT_CORRECTION	mpn/generic/toom8_sqr.c	46;"	d	file:
BIT_CORRECTION	mpn/generic/toom8_sqr.c	49;"	d	file:
BIT_CORRECTION	mpn/generic/toom8h_mul.c	47;"	d	file:
BIT_CORRECTION	mpn/generic/toom8h_mul.c	50;"	d	file:
BIT_CORRECTION	mpn/generic/toom_interpolate_16pts.c	111;"	d	file:
BIT_CORRECTION	mpn/generic/toom_interpolate_16pts.c	114;"	d	file:
BIT_CORRECTION	mpn/toom8_sqr.c	46;"	d	file:
BIT_CORRECTION	mpn/toom8_sqr.c	49;"	d	file:
BIT_CORRECTION	mpn/toom8h_mul.c	47;"	d	file:
BIT_CORRECTION	mpn/toom8h_mul.c	50;"	d	file:
BIT_CORRECTION	mpn/toom_interpolate_16pts.c	111;"	d	file:
BIT_CORRECTION	mpn/toom_interpolate_16pts.c	114;"	d	file:
BLOCK_SIZE	primesieve.c	243;"	d	file:
BLOCK_SIZE	primesieve.c	289;"	d	file:
BMI2_BIT	mpn/x86_64/fat/fat.c	/^enum {BMI2_BIT = 8};$/;"	e	enum:__anon23	file:
BMOD_1_TO_MOD_1_THRESHOLD	gmp-impl.h	3204;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	55;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	57;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/arm/gmp-mparam.h	49;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v6/gmp-mparam.h	54;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/arm64/gmp-mparam.h	54;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/ia64/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/minithres/gmp-mparam.h	44;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	48;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/pa64/gmp-mparam.h	49;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/gmp-mparam.h	64;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	48;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	49;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	49;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	49;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	46;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	45;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	47;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	46;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	54;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/s390_32/gmp-mparam.h	49;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/s390_64/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	55;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	44;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	55;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/sparc64/gmp-mparam.h	48;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	55;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	50;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/atom/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/core2/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/fat/gmp-mparam.h	47;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/geode/gmp-mparam.h	45;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/k10/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/k6/gmp-mparam.h	47;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/k7/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/k8/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/nano/gmp-mparam.h	47;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/p6/gmp-mparam.h	54;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	53;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	53;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	52;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	54;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	55;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	54;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	50;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	51;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	50;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	48;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/gmp-mparam.h	45;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	58;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	55;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	54;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	57;"	d
BMOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	54;"	d
BSWAP_LIMB	gmp-impl.h	3408;"	d
BSWAP_LIMB	gmp-impl.h	3429;"	d
BSWAP_LIMB	gmp-impl.h	3437;"	d
BSWAP_LIMB	gmp-impl.h	3445;"	d
BSWAP_LIMB	gmp-impl.h	3454;"	d
BSWAP_LIMB	gmp-impl.h	3467;"	d
BSWAP_LIMB	gmp-impl.h	3471;"	d
BSWAP_LIMB	gmp-impl.h	3477;"	d
BSWAP_LIMB	gmp-impl.h	3487;"	d
BSWAP_LIMB	gmp-impl.h	3503;"	d
BSWAP_LIMB_FETCH	gmp-impl.h	3526;"	d
BSWAP_LIMB_FETCH	gmp-impl.h	3539;"	d
BSWAP_LIMB_STORE	gmp-impl.h	3551;"	d
BSWAP_LIMB_STORE	gmp-impl.h	3563;"	d
BUF_ALLOC	mpn/generic/get_str.c	160;"	d	file:
BUF_ALLOC	mpn/get_str.c	160;"	d	file:
BYTEVAL	tests/mpz/t-io_raw.c	58;"	d	file:
C	mpn/alpha/add_n.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/add_n.asm	/^C 1st loop handles groups of 4 limbs in a software pipeline$/;"	l
C	mpn/alpha/add_n.asm	/^C 2nd loop handles remaining 1-3 limbs$/;"	l
C	mpn/alpha/add_n.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/add_n.asm	/^C EV5:     4.75$/;"	l
C	mpn/alpha/add_n.asm	/^C EV6:     3$/;"	l
C	mpn/alpha/add_n.asm	/^C Finish software pipeline for 1st loop$/;"	l
C	mpn/alpha/add_n.asm	/^C Start software pipeline for 1st loop$/;"	l
C	mpn/alpha/add_n.asm	/^C Start software pipeline for 2nd loop$/;"	l
C	mpn/alpha/addmul_1.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/addmul_1.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/addmul_1.asm	/^C  n	r18$/;"	l
C	mpn/alpha/addmul_1.asm	/^C  rp	r16$/;"	l
C	mpn/alpha/addmul_1.asm	/^C  up	r17$/;"	l
C	mpn/alpha/addmul_1.asm	/^C  vl	r19$/;"	l
C	mpn/alpha/addmul_1.asm	/^C EV4:     42$/;"	l
C	mpn/alpha/addmul_1.asm	/^C EV5:     18$/;"	l
C	mpn/alpha/addmul_1.asm	/^C EV6:      7$/;"	l
C	mpn/alpha/aorslsh1_n.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/aorslsh1_n.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/aorslsh1_n.asm	/^C EV5:     6.25$/;"	l
C	mpn/alpha/aorslsh1_n.asm	/^C EV6:     4.5$/;"	l
C	mpn/alpha/aorslsh2_n.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/aorslsh2_n.asm	/^C  * Tune to reach 3.5 c\/l on ev6 and 5.75 c\/l on ev5.$/;"	l
C	mpn/alpha/aorslsh2_n.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/aorslsh2_n.asm	/^C EV5:     6$/;"	l
C	mpn/alpha/aorslsh2_n.asm	/^C EV6:     3.75$/;"	l
C	mpn/alpha/aorslsh2_n.asm	/^C TODO$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C    code size.$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C    it would be a good task for the GNU superoptimizer.$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C    path.  We have not tried very hard to find a better algorithm.  Perhaps$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C  * Optimize feed-in and wind-down code, for speed, and perhaps further for$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C  * This runs optimally given the algorithm, r8 is on a 3 operation recurrency$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C  * Try less unrolling, 2-way should give the same performance.$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C EV4:     42$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C EV5:     18$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C EV6:      3$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/alpha/bdiv_dbm1c.asm	/^C TODO$/;"	l
C	mpn/alpha/com.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/com.asm	/^C (and with a run of stqs that means neither of two cycles at the end of the$/;"	l
C	mpn/alpha/com.asm	/^C 2 cycles of loop control are unavoidable, for pointer updates and the$/;"	l
C	mpn/alpha/com.asm	/^C 2.0 c\/l.  In general, a pattern like this unrolled to N limbs per loop$/;"	l
C	mpn/alpha/com.asm	/^C An even number of limbs is handled by an explicit dst[0]=~src[0] in the$/;"	l
C	mpn/alpha/com.asm	/^C EV4:    4.75$/;"	l
C	mpn/alpha/com.asm	/^C EV5:    2.0$/;"	l
C	mpn/alpha/com.asm	/^C EV6:    1.5$/;"	l
C	mpn/alpha/com.asm	/^C For ev5 the main loop is 7 cycles plus 1 taken branch bubble, for a total$/;"	l
C	mpn/alpha/com.asm	/^C Note that the load for r24 after the possible pointer increment is done$/;"	l
C	mpn/alpha/com.asm	/^C The fbeq is forced into the second cycle of the loop using unops, since$/;"	l
C	mpn/alpha/com.asm	/^C The main loop handles an odd count of limbs, being two limbs loaded before$/;"	l
C	mpn/alpha/com.asm	/^C before the explicit store to dst[0], in case src==dst.$/;"	l
C	mpn/alpha/com.asm	/^C can issue together.$/;"	l
C	mpn/alpha/com.asm	/^C each size test, plus one pipelined around from the previous iteration (or$/;"	l
C	mpn/alpha/com.asm	/^C entry sequence, and an increment of the pointers.  For an odd size there's$/;"	l
C	mpn/alpha/com.asm	/^C loop.$/;"	l
C	mpn/alpha/com.asm	/^C mp_limb_t mpn_com (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/alpha/com.asm	/^C no increment and the first store in the loop (r24) is a repeat of dst[0].$/;"	l
C	mpn/alpha/com.asm	/^C result is ready (a 1 cycle stall) then both the branch and following loads$/;"	l
C	mpn/alpha/com.asm	/^C setup in the entry sequence).$/;"	l
C	mpn/alpha/com.asm	/^C taken branch bubble, but also since ldq cannot issue two cycles after stq$/;"	l
C	mpn/alpha/com.asm	/^C the first time through it must wait for the cvtqt result.  Once that$/;"	l
C	mpn/alpha/com.asm	/^C will be 1.5+2\/N c\/l.$/;"	l
C	mpn/alpha/com.asm	/^C$/;"	l
C	mpn/alpha/copyd.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/copyd.asm	/^C EV4:     4$/;"	l
C	mpn/alpha/copyd.asm	/^C EV5:     1.75$/;"	l
C	mpn/alpha/copyd.asm	/^C EV6:     1$/;"	l
C	mpn/alpha/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/alpha/copyd.asm	/^C n	r18$/;"	l
C	mpn/alpha/copyd.asm	/^C rp	r16$/;"	l
C	mpn/alpha/copyd.asm	/^C up	r17$/;"	l
C	mpn/alpha/copyi.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/copyi.asm	/^C EV4:     4$/;"	l
C	mpn/alpha/copyi.asm	/^C EV5:     1.75$/;"	l
C	mpn/alpha/copyi.asm	/^C EV6:     1$/;"	l
C	mpn/alpha/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/alpha/copyi.asm	/^C n	r18$/;"	l
C	mpn/alpha/copyi.asm	/^C rp	r16$/;"	l
C	mpn/alpha/copyi.asm	/^C up	r17$/;"	l
C	mpn/alpha/divrem_2.asm	/^C		norm	frac$/;"	l
C	mpn/alpha/divrem_2.asm	/^C	ldq	r14, 48(r30)$/;"	l
C	mpn/alpha/divrem_2.asm	/^C	stq	r14, 48(r30)$/;"	l
C	mpn/alpha/divrem_2.asm	/^C    any registers (thus save ~10 cycles per call).$/;"	l
C	mpn/alpha/divrem_2.asm	/^C    or two.$/;"	l
C	mpn/alpha/divrem_2.asm	/^C  * CAVEAT: We rely on r19 not being clobbered by mpn_invert_limb call.$/;"	l
C	mpn/alpha/divrem_2.asm	/^C  * Check cluster delays (for ev6).  We very likely could save some cycles.$/;"	l
C	mpn/alpha/divrem_2.asm	/^C  * Perhaps inline mpn_invert_limb, that would allow us to not save\/restore$/;"	l
C	mpn/alpha/divrem_2.asm	/^C  * Use branch-free code for computing di.$/;"	l
C	mpn/alpha/divrem_2.asm	/^C  * Use negated d1 and\/or d0 to speed carry propagation.  Might save a cycle$/;"	l
C	mpn/alpha/divrem_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/alpha/divrem_2.asm	/^C TODO$/;"	l
C	mpn/alpha/divrem_2.asm	/^C ev4$/;"	l
C	mpn/alpha/divrem_2.asm	/^C ev5		70	70$/;"	l
C	mpn/alpha/divrem_2.asm	/^C ev6		29	29$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C    to u0\/u0 to save some copying.$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C  * Combine u0 and u2, u1 and u3.$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C  * Improve feed-in code, by moving initial mulq earlier; make initial load$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C  * Remove the unops, they benefit just ev6, which no longer uses this file.$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C  * Try prefetch for destination, using lds.$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C 0$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C 1$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C 2$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C 3$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C 4$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C 5$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C Compute initial l0 value$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C EV4:    22$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C EV5:    11.5$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C EV6:     6.3		Note that mpn_bdiv_dbm1c is faster$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C Expand as: one(0)one(1)one(2)one(3)$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C Feed-in depending on (n mod 4)$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C Put magic constants in registers$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C TODO$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C This is useful for playing with various schedules.$/;"	l
C	mpn/alpha/ev5/diveby3.asm	/^C$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C   Finish cleaning up cy registers r22, r23 (make them use cy0\/cy1)$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C   Perform additional micro-tuning$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C   Use multi-pronged feed-in.$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  L moves because of loads and stores$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  Loads and stores are delayed by fills$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  Note dampers in L to limit damage$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  Pair loads and stores where possible$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  Store pairs oct-aligned where possible (didn't need it here)$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  Stores are delayed every third cycle$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  This code was written in cooperation with ev6 pipeline expert Steve Root.$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  This odd-looking optimization expects that were having random bits in our$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  U stays still, put code there where possible (note alternation of U1 and U0)$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  case to help the common case.$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  cy	r20   (for mpn_add_nc)$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  data, so that a pure zero result is unlikely. so we penalize the unlikely$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  n	r19$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  rp	r16$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  up	r17$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C  vp	r18$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C ==== main loop end$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C EV5:     5.4$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C EV6:     2.125$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C Main loop.  8-way unrolled.$/;"	l
C	mpn/alpha/ev6/add_n.asm	/^C TODO$/;"	l
C	mpn/alpha/ev6/aorslsh1_n.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/ev6/aorslsh1_n.asm	/^C  * Tune to reach 3.75 c\/l on ev6.$/;"	l
C	mpn/alpha/ev6/aorslsh1_n.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/ev6/aorslsh1_n.asm	/^C EV5:     7$/;"	l
C	mpn/alpha/ev6/aorslsh1_n.asm	/^C EV6:     4$/;"	l
C	mpn/alpha/ev6/aorslsh1_n.asm	/^C TODO$/;"	l
C	mpn/alpha/ev6/aorsmul_1.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/ev6/aorsmul_1.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/aorsmul_1.asm	/^C EV4:    42$/;"	l
C	mpn/alpha/ev6/aorsmul_1.asm	/^C EV5:    18$/;"	l
C	mpn/alpha/ev6/aorsmul_1.asm	/^C EV6:     3.5$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C    from their users.  Fixing this will allow us to use fewer registers.$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C  * Does this work for PIC?$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C  * If we cannot reduce register usage, write perhaps small-n basecase.$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C  * Optimise feed-in code, starting the sw pipeline in switch code.$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C  * Optimise.  2.75 c\/l should be possible.$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C  * Shorten software pipeline.  The mul instructions are scheduled too far$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C  * Write a proper mpn_mod_1s_4p_cps.  The code below was compiler generated.$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C EV5:    23$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C EV6:     3$/;"	l
C	mpn/alpha/ev6/mod_1_4.asm	/^C TODO:$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C						8-way unrolled loop$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C						wind-down code$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C			code for (n div 8)	feed-in code$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C	beq	r13,	$fix0w		C U0$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C	br	r31,	$ret0w$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C	bra	$L_middle_of_unrolled_loop$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C      faster than this for size < 3.$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C      that is too costly.$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   1. Speed up really small multiplies.  The default alpha\/mul_1.asm code is$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   2. Improve feed-in code, perhaps with the equivalent of switch(n%8) unless$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   3. Consider using 4-way unrolling, even if that runs slower.$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   4. Reduce register usage.  In particular, try to avoid using r29.$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   Software pipeline: a load in cycle #09, feeds a mul in cycle #16, feeds an$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   We're doing 7 of the 8 carry propagations with a br fixup code and 1 with a$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   add NEXT cycle #09 which feeds a store in NEXT cycle #02$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   put-the-carry-into-hi.  The idea is that these branches are very rarely$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   r0       -1$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   r1-r8     multiplies and workup$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   r20,r29,r13-r15  scramble$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   r21-r28   multiplies and workup$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   r9-r12    loads$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   taken, and since a non-taken branch consumes no resources, that is better$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C   than an addq.$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C  code for n < 8$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C  code for n > 8	code for (n mod 8)$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C $fix0w:	bis	r14,	r29,	r14	C join carries$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C ---------------------------------------------------------------$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C Code structure:$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C Some notes about unrolled loop:$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C Steve Root.  Any errors are tege's fault, though.$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C The code could use some further work:$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C This code runs at 2.25 cycles\/limb on EV6.$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C This code was written in close cooperation with ev6 pipeline expert$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C could do cross-jumping here:$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C res_ptr	r16$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C s1_ptr	r17$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C s2_limb	r19$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C size		r18$/;"	l
C	mpn/alpha/ev6/mul_1.asm	/^C$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C    and would work since the loop structure is really regular.$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C    umulh.$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C  * Reroll loop for 3.75 c\/l with current 4-way unrolling.$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C  * The loop is overscheduled wrt loads and wrt multiplies, in particular$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C  * Use FP loop count and multiple exit points, that would simplify feed-in lp0$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C EV4:    42$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C EV5:    18$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C EV6:     4$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C TODO$/;"	l
C	mpn/alpha/ev6/nails/addmul_1.asm	/^C$/;"	l
C	mpn/alpha/ev6/nails/addmul_2.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/nails/addmul_2.asm	/^C  This declaration is munged by configure$/;"	l
C	mpn/alpha/ev6/nails/addmul_2.asm	/^C  Useful register aliases$/;"	l
C	mpn/alpha/ev6/nails/addmul_2.asm	/^C Runs at 4.0 cycles\/limb.$/;"	l
C	mpn/alpha/ev6/nails/addmul_2.asm	/^C Used for temps: r8 r19 r28$/;"	l
C	mpn/alpha/ev6/nails/addmul_2.asm	/^C We could either go for 2-way unrolling over 11 cycles, or 2.75 c\/l,$/;"	l
C	mpn/alpha/ev6/nails/addmul_2.asm	/^C or 4-way unrolling over 20 cycles, for 2.5 c\/l.$/;"	l
C	mpn/alpha/ev6/nails/addmul_3.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/nails/addmul_3.asm	/^C  This declaration is munged by configure$/;"	l
C	mpn/alpha/ev6/nails/addmul_3.asm	/^C  Useful register aliases$/;"	l
C	mpn/alpha/ev6/nails/addmul_3.asm	/^C Runs at 3.0 cycles\/limb.$/;"	l
C	mpn/alpha/ev6/nails/addmul_3.asm	/^C Used for temps: r8 r19 r28$/;"	l
C	mpn/alpha/ev6/nails/addmul_3.asm	/^C With 2-way unrolling, we could probably reach 2.25 c\/l (3.33 i\/c).$/;"	l
C	mpn/alpha/ev6/nails/addmul_4.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/nails/addmul_4.asm	/^C  This declaration is munged by configure$/;"	l
C	mpn/alpha/ev6/nails/addmul_4.asm	/^C  Useful register aliases$/;"	l
C	mpn/alpha/ev6/nails/addmul_4.asm	/^C Runs at 2.5 cycles\/limb.$/;"	l
C	mpn/alpha/ev6/nails/addmul_4.asm	/^C Used for temps: r8 r19 r28$/;"	l
C	mpn/alpha/ev6/nails/addmul_4.asm	/^C We should go for 2-way unrolling over 17 cycles, for 2.125 c\/l corresponding$/;"	l
C	mpn/alpha/ev6/nails/addmul_4.asm	/^C to 3.24 insn\/cycle.$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C    and would work since the loop structure is really regular.$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C    umulh.$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C  * Reroll loop for 3.0 c\/l with current 4-way unrolling.$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C  * The loop is overscheduled wrt loads and wrt multiplies, in particular$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C  * Use FP loop count and multiple exit points, that would simplify feed-in lp0$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C EV4:    42$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C EV5:    18$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C EV6:     3.25$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C TODO$/;"	l
C	mpn/alpha/ev6/nails/mul_1.asm	/^C$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C    and would work since the loop structure is really regular.$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C    umulh.$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C  * Reroll loop for 3.75 c\/l with current 4-way unrolling.$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C  * The loop is overscheduled wrt loads and wrt multiplies, in particular$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C  * Use FP loop count and multiple exit points, that would simplify feed-in lp0$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C EV4:    42$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C EV5:    18$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C EV6:     4$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C TODO$/;"	l
C	mpn/alpha/ev6/nails/submul_1.asm	/^C$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C   Finish cleaning up cy registers r22, r23 (make them use cy0\/cy1)$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C   Perform additional micro-tuning$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C   Use multi-pronged feed-in.$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  L moves because of loads and stores$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  Loads and stores are delayed by fills$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  Note dampers in L to limit damage$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  Pair loads and stores where possible$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  Store pairs oct-aligned where possible (didn't need it here)$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  Stores are delayed every third cycle$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  This code was written in cooperation with ev6 pipeline expert Steve Root.$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  This odd-looking optimization expects that were having random bits in our$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  U stays still, put code there where possible (note alternation of U1 and U0)$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  case to help the common case.$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  cy	r20   (for mpn_add_nc)$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  data, so that a pure zero result is unlikely. so we penalize the unlikely$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  n	r19$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  rp	r16$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  up	r17$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C  vp	r18$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C ==== main loop end$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C EV5:     5.4$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C EV6:     2.125$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C Main loop.  8-way unrolled.$/;"	l
C	mpn/alpha/ev6/sub_n.asm	/^C TODO$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C Enhancement:$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C In the 1x1 part, the algorithm is to change x,y to abs(x-y),min(x,y) and$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C On the jsr, !lituse_jsr! (when available) would allow the linker to relax$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C The loop takes 5 cycles, and at 0.68 iterations per bit for two N-bit$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C The slottings shown are for SVR4 style systems, Unicos differs in the$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C The trailing zeros are calculated from just x-y, since in twos-complement$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C Would there be any worries about the size of the displacement?  Could$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C always put modexact and gcd_1 in the same .o to be certain.$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C bsr could perhaps be used explicitly anyway.  We should be able to assume$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C ev67: 3.4 cycles\/bitpair for 1x1 part$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C everywhere, but we prefer to schedule the GOT ldq (LEA) back earlier, for$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C initial gp setup and the LEA.$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C it to a bsr, but probably only in a static binary.  Plain "jsr foo" gives$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C modexact is in the same module as us (ie. shared library or mainline).$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C mp_limb_t mpn_gcd_1 (mp_srcptr xp, mp_size_t xsize, mp_limb_t y);$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C operands with this algorithm gives the measured 3.4 c\/l.$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C runs in parallel with abs(x-y).$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C strip trailing zeros from abs(x-y) to maintain x and y both odd.$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C the right object code for relaxation, and ought to be available$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C the usual case of running in a shared library.$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C there's the same number of trailing zeros on d or -d.  This means the cttz$/;"	l
C	mpn/alpha/ev67/gcd_1.asm	/^C$/;"	l
C	mpn/alpha/ev67/hamdist.asm	/^C The hope was for 2.0 c\/l here, but that isn't achieved.  We're limited by$/;"	l
C	mpn/alpha/ev67/hamdist.asm	/^C The main loop processes two limbs from each operand on each iteration.  An$/;"	l
C	mpn/alpha/ev67/hamdist.asm	/^C ev67: 2.5 cycles\/limb$/;"	l
C	mpn/alpha/ev67/hamdist.asm	/^C is even that result is discarded, and is repeated by the main loop.$/;"	l
C	mpn/alpha/ev67/hamdist.asm	/^C odd size is handled by processing xp[0]^yp[0] at the start.  If the size$/;"	l
C	mpn/alpha/ev67/hamdist.asm	/^C renaming register shortage.  Since we need 5 instructions per limb, further$/;"	l
C	mpn/alpha/ev67/hamdist.asm	/^C unrolling could approach 1.5 c\/l.$/;"	l
C	mpn/alpha/ev67/hamdist.asm	/^C unsigned long mpn_hamdist (mp_srcptr xp, mp_srcptr yp, mp_size_t size);$/;"	l
C	mpn/alpha/ev67/hamdist.asm	/^C$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C 1.0 c\/l.$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C Since we need just 3 instructions per limb, further unrolling could approach$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C The main loop processes two limbs at a time.  An odd size is handled by$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C This schedule seems necessary for the full 1.5 c\/l, the IQ can't quite hide$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C all latencies, the addq's must be deferred to the next iteration.$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C discarded, and src[0] is repeated by the main loop.$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C ev67: 1.5 cycles\/limb$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C processing src[0] at the start.  If the size is even that result is$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C unsigned long mpn_popcount (mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/alpha/ev67/popcount.asm	/^C$/;"	l
C	mpn/alpha/invert_limb.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/invert_limb.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/invert_limb.asm	/^C EV5:   137\/140  (with BWX\/without BWX)$/;"	l
C	mpn/alpha/invert_limb.asm	/^C EV6:    71\/72   (with BWX\/without BWX)$/;"	l
C	mpn/alpha/invert_limb.asm	/^C This was compiler generated, with minimal manual edits.  Surely several$/;"	l
C	mpn/alpha/invert_limb.asm	/^C cycles could be cut with some thought.$/;"	l
C	mpn/alpha/lshift.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/lshift.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/lshift.asm	/^C  cnt	r19$/;"	l
C	mpn/alpha/lshift.asm	/^C  n	r18$/;"	l
C	mpn/alpha/lshift.asm	/^C  rp	r16$/;"	l
C	mpn/alpha/lshift.asm	/^C  up	r17$/;"	l
C	mpn/alpha/lshift.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/lshift.asm	/^C EV5:     3.25$/;"	l
C	mpn/alpha/lshift.asm	/^C EV6:     1.75$/;"	l
C	mpn/alpha/lshift.asm	/^C cool down phase 1\/1$/;"	l
C	mpn/alpha/lshift.asm	/^C cool down phase 1\/2$/;"	l
C	mpn/alpha/lshift.asm	/^C cool down phase 2\/1$/;"	l
C	mpn/alpha/lshift.asm	/^C cool down phase 2\/2$/;"	l
C	mpn/alpha/lshift.asm	/^C cool down phase 2\/3$/;"	l
C	mpn/alpha/lshift.asm	/^C main loop$/;"	l
C	mpn/alpha/lshift.asm	/^C warm up phase 1$/;"	l
C	mpn/alpha/lshift.asm	/^C warm up phase 2$/;"	l
C	mpn/alpha/mod_34lsub1.asm	/^C	addq	r1, r3, r1$/;"	l
C	mpn/alpha/mod_34lsub1.asm	/^C	srl	c2, 48, r3		C This will be 0 in practise$/;"	l
C	mpn/alpha/mod_34lsub1.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/mod_34lsub1.asm	/^C EV4:     4 (?)$/;"	l
C	mpn/alpha/mod_34lsub1.asm	/^C EV5:     2.67$/;"	l
C	mpn/alpha/mod_34lsub1.asm	/^C EV6:     1.67$/;"	l
C	mpn/alpha/mod_34lsub1.asm	/^C Handle the last (n mod 3) limbs$/;"	l
C	mpn/alpha/mod_34lsub1.asm	/^C Main loop$/;"	l
C	mpn/alpha/mode1o.asm	/^C                                mp_limb_t c)$/;"	l
C	mpn/alpha/mode1o.asm	/^C         1     3     1    subq   y = x - h$/;"	l
C	mpn/alpha/mode1o.asm	/^C        --    --    --$/;"	l
C	mpn/alpha/mode1o.asm	/^C        23    13     7    mulq   q = y * inverse$/;"	l
C	mpn/alpha/mode1o.asm	/^C        23    14     7    umulh  h = high (q * d)$/;"	l
C	mpn/alpha/mode1o.asm	/^C        47    30    15$/;"	l
C	mpn/alpha/mode1o.asm	/^C        ev4   ev5   ev6$/;"	l
C	mpn/alpha/mode1o.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/mode1o.asm	/^C     instead of branching to the mulq in the main loop.  On ev4 a branch$/;"	l
C	mpn/alpha/mode1o.asm	/^C     there would cost cycles, but we can hide them under the mulq latency.$/;"	l
C	mpn/alpha/mode1o.asm	/^C     time from memory.$/;"	l
C	mpn/alpha/mode1o.asm	/^C   - The first ldq src[0] is near the start of the routine, for maximum$/;"	l
C	mpn/alpha/mode1o.asm	/^C   - The mulq y*inverse is replicated after the final subq for the inverse,$/;"	l
C	mpn/alpha/mode1o.asm	/^C   - The subq y=x-climb can be done without waiting for the inverse.$/;"	l
C	mpn/alpha/mode1o.asm	/^C EV4:    47$/;"	l
C	mpn/alpha/mode1o.asm	/^C EV5:    30$/;"	l
C	mpn/alpha/mode1o.asm	/^C EV6:    15$/;"	l
C	mpn/alpha/mode1o.asm	/^C Enhancements:$/;"	l
C	mpn/alpha/mode1o.asm	/^C For size==1, a plain division (done bitwise say) might be faster than$/;"	l
C	mpn/alpha/mode1o.asm	/^C For the first limb, some of the loop code is broken out and scheduled back$/;"	l
C	mpn/alpha/mode1o.asm	/^C For the last limb, high<divisor is tested and if that's true a subtract$/;"	l
C	mpn/alpha/mode1o.asm	/^C In each case, the load latency, loop control, and extra carry bit handling$/;"	l
C	mpn/alpha/mode1o.asm	/^C This code follows the "alternate" code in mpn\/generic\/mode1o.c,$/;"	l
C	mpn/alpha/mode1o.asm	/^C and addback is done, as per the main mpn\/generic\/mode1o.c code.  This is a$/;"	l
C	mpn/alpha/mode1o.asm	/^C calculating an inverse, the latter taking about 130 cycles on ev4 or 70 on$/;"	l
C	mpn/alpha/mode1o.asm	/^C data-dependent branch, but we're waiting for umulh so any penalty should$/;"	l
C	mpn/alpha/mode1o.asm	/^C eliminating cbit+climb from the dependent chain.  This leaves,$/;"	l
C	mpn/alpha/mode1o.asm	/^C ev5.  A call to gcc __remqu might be a possibility.$/;"	l
C	mpn/alpha/mode1o.asm	/^C hide there.  The multiplies saved would be worth the cost anyway.$/;"	l
C	mpn/alpha/mode1o.asm	/^C hide under the multiply latencies.  Those latencies are long enough that$/;"	l
C	mpn/alpha/mode1o.asm	/^C mp_limb_t mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size, mp_limb_t d,$/;"	l
C	mpn/alpha/mode1o.asm	/^C performance.$/;"	l
C	mpn/alpha/mode1o.asm	/^C since it can be done earlier.$/;"	l
C	mpn/alpha/mode1o.asm	/^C we don't need to worry about alignment or pairing to squeeze out$/;"	l
C	mpn/alpha/mode1o.asm	/^C$/;"	l
C	mpn/alpha/mul_1.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/mul_1.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/mul_1.asm	/^C  cl	r20$/;"	l
C	mpn/alpha/mul_1.asm	/^C  n	r18$/;"	l
C	mpn/alpha/mul_1.asm	/^C  rp	r16$/;"	l
C	mpn/alpha/mul_1.asm	/^C  up	r17$/;"	l
C	mpn/alpha/mul_1.asm	/^C  vl	r19$/;"	l
C	mpn/alpha/mul_1.asm	/^C EV4:     42$/;"	l
C	mpn/alpha/mul_1.asm	/^C EV5:     18$/;"	l
C	mpn/alpha/mul_1.asm	/^C EV6:      7$/;"	l
C	mpn/alpha/rshift.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/rshift.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/rshift.asm	/^C  cnt	r19$/;"	l
C	mpn/alpha/rshift.asm	/^C  n	r18$/;"	l
C	mpn/alpha/rshift.asm	/^C  rp	r16$/;"	l
C	mpn/alpha/rshift.asm	/^C  up	r17$/;"	l
C	mpn/alpha/rshift.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/rshift.asm	/^C EV5:     3.25$/;"	l
C	mpn/alpha/rshift.asm	/^C EV6:     1.75$/;"	l
C	mpn/alpha/rshift.asm	/^C cool down phase 1\/1$/;"	l
C	mpn/alpha/rshift.asm	/^C cool down phase 1\/2$/;"	l
C	mpn/alpha/rshift.asm	/^C cool down phase 2\/1$/;"	l
C	mpn/alpha/rshift.asm	/^C cool down phase 2\/2$/;"	l
C	mpn/alpha/rshift.asm	/^C cool down phase 2\/3$/;"	l
C	mpn/alpha/rshift.asm	/^C main loop$/;"	l
C	mpn/alpha/rshift.asm	/^C warm up phase 1$/;"	l
C	mpn/alpha/rshift.asm	/^C warm up phase 2$/;"	l
C	mpn/alpha/sec_tabselect.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/sec_tabselect.asm	/^C EV4:      ?$/;"	l
C	mpn/alpha/sec_tabselect.asm	/^C EV5:      2.25$/;"	l
C	mpn/alpha/sec_tabselect.asm	/^C EV6:      1.64$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C Algorithm: We allow ourselves to propagate carry to a product high word$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C B-2, i.e, will not spill.  We propagate carry similarly to a product low word$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C EV4:      ?$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C EV5:     10.2$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C EV6:      4.5$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C Ideally, one-way code could run at 9 c\/l (limited by mulq+umulh) on ev5 and$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C about 3.75 c\/l on ev6.  Two-way code could run at about 3.25 c\/l on ev6.$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C products are squares.$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C since the problem value B-1 is a quadratic non-residue mod B, but our$/;"	l
C	mpn/alpha/sqr_diag_addlsh1.asm	/^C without worrying for carry out, since (B-1)^2 = B^2-2B+1 has a high word of$/;"	l
C	mpn/alpha/sub_n.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/sub_n.asm	/^C 1st loop handles groups of 4 limbs in a software pipeline$/;"	l
C	mpn/alpha/sub_n.asm	/^C 2nd loop handles remaining 1-3 limbs$/;"	l
C	mpn/alpha/sub_n.asm	/^C EV4:     ?$/;"	l
C	mpn/alpha/sub_n.asm	/^C EV5:     4.75$/;"	l
C	mpn/alpha/sub_n.asm	/^C EV6:     3$/;"	l
C	mpn/alpha/sub_n.asm	/^C Finish software pipeline for 1st loop$/;"	l
C	mpn/alpha/sub_n.asm	/^C Start software pipeline for 1st loop$/;"	l
C	mpn/alpha/sub_n.asm	/^C Start software pipeline for 2nd loop$/;"	l
C	mpn/alpha/submul_1.asm	/^C      cycles\/limb$/;"	l
C	mpn/alpha/submul_1.asm	/^C  INPUT PARAMETERS$/;"	l
C	mpn/alpha/submul_1.asm	/^C  limb	r19$/;"	l
C	mpn/alpha/submul_1.asm	/^C  n	r18$/;"	l
C	mpn/alpha/submul_1.asm	/^C  rp	r16$/;"	l
C	mpn/alpha/submul_1.asm	/^C  up	r17$/;"	l
C	mpn/alpha/submul_1.asm	/^C EV4:     42$/;"	l
C	mpn/alpha/submul_1.asm	/^C EV5:     18$/;"	l
C	mpn/alpha/submul_1.asm	/^C EV6:      7$/;"	l
C	mpn/alpha/umul.asm	/^C mp_limb_t mpn_umul_ppmm (mp_limb_t *lowptr, mp_limb_t m1, mp_limb_t m2);$/;"	l
C	mpn/alpha/umul.asm	/^C$/;"	l
C	mpn/arm/aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/aors_n.asm	/^C Cortex-A15	 2.25$/;"	l
C	mpn/arm/aors_n.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/aors_n.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/aors_n.asm	/^C Cortex-A9	 2.5	slightly fluctuating$/;"	l
C	mpn/arm/aors_n.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/aors_n.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C	      addlsh1_n       sublsh1_n$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C	     cycles\/limb     cycles\/limb$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C    The sublsh1_n code could surely be tweaked, its REVCY slows down things$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C    for better micro-parallelism.$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C    very much.  If two insns are really needed, it might help to separate them$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C  * The addlsh1_n code runs well, but is only barely faster than mpn_addmul_1.$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C Cortex-A15	 ?		 ?$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C Cortex-A7	 ?		 ?$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C Cortex-A8	 ?		 ?$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C Cortex-A9	 3.12		 3.7$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C StrongARM	 ?		 ?$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C TODO$/;"	l
C	mpn/arm/aorslsh1_n.asm	/^C XScale	 ?		 ?$/;"	l
C	mpn/arm/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/aorsmul_1.asm	/^C Cortex-A15	 4$/;"	l
C	mpn/arm/aorsmul_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/aorsmul_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/aorsmul_1.asm	/^C Cortex-A9	 5.25$/;"	l
C	mpn/arm/aorsmul_1.asm	/^C StrongARM:     ?$/;"	l
C	mpn/arm/aorsmul_1.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C  * Try using ldm\/stm.$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C  * Try using umlal or umaal.$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C Cortex-A15	 2.5$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C Cortex-A9	 4.25$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C TODO$/;"	l
C	mpn/arm/bdiv_dbm1c.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/cnd_aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/cnd_aors_n.asm	/^C Cortex-A15	 2.5$/;"	l
C	mpn/arm/cnd_aors_n.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/cnd_aors_n.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/cnd_aors_n.asm	/^C Cortex-A9	 3$/;"	l
C	mpn/arm/cnd_aors_n.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/cnd_aors_n.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/com.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/com.asm	/^C Cortex-A15	 1.75$/;"	l
C	mpn/arm/com.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/com.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/com.asm	/^C Cortex-A9	 2.0$/;"	l
C	mpn/arm/com.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/com.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/copyd.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/copyd.asm	/^C    and A15.  But it probably slows things down for 8 <= n < a few dozen.$/;"	l
C	mpn/arm/copyd.asm	/^C  * Consider wider unrolling.  Analogous 8-way code runs 10% faster on both A9$/;"	l
C	mpn/arm/copyd.asm	/^C Cortex-A15	 1.25$/;"	l
C	mpn/arm/copyd.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/copyd.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/copyd.asm	/^C Cortex-A9	 1.25-1.5$/;"	l
C	mpn/arm/copyd.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/copyd.asm	/^C TODO$/;"	l
C	mpn/arm/copyd.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/copyi.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/copyi.asm	/^C    and A15.  But it probably slows things down for 8 <= n < a few dozen.$/;"	l
C	mpn/arm/copyi.asm	/^C  * Consider wider unrolling.  Analogous 8-way code runs 10% faster on both A9$/;"	l
C	mpn/arm/copyi.asm	/^C Cortex-A15	 1.25$/;"	l
C	mpn/arm/copyi.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/copyi.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/copyi.asm	/^C Cortex-A9	 1.25-1.5$/;"	l
C	mpn/arm/copyi.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/copyi.asm	/^C TODO$/;"	l
C	mpn/arm/copyi.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/dive_1.asm	/^C               cycles\/limb       cycles\/limb$/;"	l
C	mpn/arm/dive_1.asm	/^C               norm    unorm    modexact_1c_odd$/;"	l
C	mpn/arm/dive_1.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/dive_1.asm	/^C Cortex-A15	 9	 9$/;"	l
C	mpn/arm/dive_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/dive_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/dive_1.asm	/^C Cortex-A9	10	12$/;"	l
C	mpn/arm/dive_1.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/dive_1.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/dive_1.asm	/^C binvert limb$/;"	l
C	mpn/arm/dive_1.asm	/^C count trailing zeros$/;"	l
C	mpn/arm/dive_1.asm	/^C v5	-$/;"	l
C	mpn/arm/dive_1.asm	/^C v5t	-$/;"	l
C	mpn/arm/dive_1.asm	/^C v5te	-$/;"	l
C	mpn/arm/dive_1.asm	/^C v6	-$/;"	l
C	mpn/arm/dive_1.asm	/^C v6t2	-$/;"	l
C	mpn/arm/dive_1.asm	/^C v7a	-$/;"	l
C	mpn/arm/logops_n.asm	/^C            cycles\/limb             cycles\/limb$/;"	l
C	mpn/arm/logops_n.asm	/^C          and andn ior xor         nand iorn nior xnor$/;"	l
C	mpn/arm/logops_n.asm	/^C  * Debug popping issue, see comment below.$/;"	l
C	mpn/arm/logops_n.asm	/^C  * It seems that 2.25 c\/l and 2.75 c\/l is possible for A9.$/;"	l
C	mpn/arm/logops_n.asm	/^C Cortex-A15	2.25			2.75$/;"	l
C	mpn/arm/logops_n.asm	/^C Cortex-A7	 ?			 ?$/;"	l
C	mpn/arm/logops_n.asm	/^C Cortex-A8	 ?			 ?$/;"	l
C	mpn/arm/logops_n.asm	/^C Cortex-A9	2.5-2.72		2.75-3$/;"	l
C	mpn/arm/logops_n.asm	/^C StrongARM	 ?			 ?$/;"	l
C	mpn/arm/logops_n.asm	/^C TODO$/;"	l
C	mpn/arm/logops_n.asm	/^C XScale	 ?			 ?$/;"	l
C	mpn/arm/lshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/lshift.asm	/^C Cortex-A15	 ?$/;"	l
C	mpn/arm/lshift.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/lshift.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/lshift.asm	/^C Cortex-A9	 3.5$/;"	l
C	mpn/arm/lshift.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/lshift.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/lshiftc.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/lshiftc.asm	/^C Cortex-A15	 ?$/;"	l
C	mpn/arm/lshiftc.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/lshiftc.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/lshiftc.asm	/^C Cortex-A9	 4.0$/;"	l
C	mpn/arm/lshiftc.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/lshiftc.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C  * Consider loading 6 64-bit aligned registers at a time, to approach 1 c\/l.$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C  * Write cleverer summation code.$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C Cortex-A15	 1.33$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C Cortex-A9	 1.33$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C TODO$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr up, mp_size_t n)$/;"	l
C	mpn/arm/mode1o.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/mode1o.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/mode1o.asm	/^C Cortex-A15	 9$/;"	l
C	mpn/arm/mode1o.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/mode1o.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/mode1o.asm	/^C Cortex-A9	10$/;"	l
C	mpn/arm/mode1o.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/mode1o.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/mode1o.asm	/^C v5	-$/;"	l
C	mpn/arm/mode1o.asm	/^C v5t	-$/;"	l
C	mpn/arm/mode1o.asm	/^C v5te	-$/;"	l
C	mpn/arm/mode1o.asm	/^C v6	-$/;"	l
C	mpn/arm/mode1o.asm	/^C v6t2	-$/;"	l
C	mpn/arm/mode1o.asm	/^C v7a	-$/;"	l
C	mpn/arm/mul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/mul_1.asm	/^C Cortex-A15	 ?$/;"	l
C	mpn/arm/mul_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/mul_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/mul_1.asm	/^C Cortex-A9	 4.75$/;"	l
C	mpn/arm/mul_1.asm	/^C StrongARM	6-8$/;"	l
C	mpn/arm/mul_1.asm	/^C We should rewrite this along the lines of addmul_1.asm.  That should save a$/;"	l
C	mpn/arm/mul_1.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/mul_1.asm	/^C cycle on StrongARM, and several cycles on XScale.$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C    64-bits-at-a-time, which will mess up in big-endian mode.  Except not for$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C    popcount. Except perhaps also for popcount for the edge loads.)$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C    read-and-mask trick we use on PCs, for simplicity and performance.  (Sorry$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C    valgrind!)$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C  * Arrange to align the pointer, if that helps performance.  Use the same$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C  * Explore if explicit align directives, e.g., "[ptr:128]" help.$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C  * Explore using vldr and vldm.  Does it help on A9?  (These loads do$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C  * See rth's gmp-devel 2013-02\/03 messages about final summation tricks.$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C (8*2^16-1)\/32 = 0x3fff limbs.  We use a chunksize close to that, but which$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C Code for large count.  Splits operand and calls above code.$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C Cortex-A15	 0.95$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C Cortex-A9	 1.89$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C StrongARM:	 -$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C TODO$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C We sum into 16 16-bit counters in q8,q9, but at the end we sum them and end$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C XScale	 -$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C can be represented as a 8-bit ARM constant.$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C up with 8 16-bit counters.  Therefore, we can sum to 8(2^16-1) bits, or$/;"	l
C	mpn/arm/neon/hamdist.asm	/^C$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C    either A9 or A15.$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C    the loop, and most of the wind-down code are identical.$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C    which might make it tricky.$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C  * Clean up and simplify.$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C  * Consider sharing most of the code for lshift and rshift, since the feed-in code,$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C  * Optimise.  It is not clear that this loop insn permutation is optimal for$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C  * Replace the basecase code with code using 'extension' registers.$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C  * Try using 128-bit operations.  Note that Neon lacks pure 128-bit shifts,$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C Cortex-A15	 1.5		 1.5				Y$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C Cortex-A7	 ?		 ?$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C Cortex-A8	 ?		 ?$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C Cortex-A9	 3		 3				Y$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C It should be possible to read also using 64-bit alignment, by manipulating$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C Load last 2 - 3 limbs, store last 4 - 5 limbs$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C StrongARM	 -		 -$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C TODO$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C This will not work in big-endian mode.$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C We read 64 bits at a time at 32-bit aligned addresses, and except for the$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C XScale	 -		 -$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C first and last store, we write using 64-bit aligned addresses.  All shifting$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C is done on 64-bit words in 'extension' registers.$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C matter for A9 or A15.$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C the shift count for unaligned operands.  Not done, since it does not seem to$/;"	l
C	mpn/arm/neon/lorrshift.asm	/^C$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C    code, the loop, and most of the wind-down code are identical.$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C    either A9 or A15.$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C    which might make it tricky.$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C  * Clean up and simplify.$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C  * Consider sharing most of the code for lshift and rshift, since the feed-in$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C  * Optimise.  It is not clear that this loop insn permutation is optimal for$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C  * Replace the basecase code with code using 'extension' registers.$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C  * Try using 128-bit operations.  Note that Neon lacks pure 128-bit shifts,$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C Cortex-A15	 1.75		 1.75				Y$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C Cortex-A7	 ?		 ?$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C Cortex-A8	 ?		 ?$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C Cortex-A9	 3.5		 3.5				Y$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C It should be possible to read also using 64-bit alignment, by manipulating$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C Load last 2 - 3 limbs, store last 4 - 5 limbs$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C StrongARM	 -		 -$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C TODO$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C This will not work in big-endian mode.$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C We read 64 bits at a time at 32-bit aligned addresses, and except for the$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C XScale	 -		 -$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C first and last store, we write using 64-bit aligned addresses.  All shifting$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C is done on 64-bit words in 'extension' registers.$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C matter for A9 or A15.$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C the shift count for unaligned operands.  Not done, since it does not seem to$/;"	l
C	mpn/arm/neon/lshiftc.asm	/^C$/;"	l
C	mpn/arm/neon/popcount.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/neon/popcount.asm	/^C    64-bits-at-a-time, which will mess up in big-endian mode.  Except not for$/;"	l
C	mpn/arm/neon/popcount.asm	/^C    popcount. Except perhaps also for popcount for the edge loads.)$/;"	l
C	mpn/arm/neon/popcount.asm	/^C    read-and-mask trick we use on PCs, for simplicity and performance.  (Sorry$/;"	l
C	mpn/arm/neon/popcount.asm	/^C    valgrind!)$/;"	l
C	mpn/arm/neon/popcount.asm	/^C  * Arrange to align the pointer, if that helps performance.  Use the same$/;"	l
C	mpn/arm/neon/popcount.asm	/^C  * Explore if explicit align directives, e.g., "[ptr:128]" help.$/;"	l
C	mpn/arm/neon/popcount.asm	/^C  * Explore using vldr and vldm.  Does it help on A9?  (These loads do$/;"	l
C	mpn/arm/neon/popcount.asm	/^C  * See rth's gmp-devel 2013-02\/03 messages about final summation tricks.$/;"	l
C	mpn/arm/neon/popcount.asm	/^C (8*2^16-1)\/32 = 0x3fff limbs.  We use a chunksize close to that, but which$/;"	l
C	mpn/arm/neon/popcount.asm	/^C Code for large count.  Splits operand and calls above code.$/;"	l
C	mpn/arm/neon/popcount.asm	/^C Cortex-A15	 0.56$/;"	l
C	mpn/arm/neon/popcount.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/neon/popcount.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/neon/popcount.asm	/^C Cortex-A9	 1.125$/;"	l
C	mpn/arm/neon/popcount.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm/neon/popcount.asm	/^C StrongARM:	 -$/;"	l
C	mpn/arm/neon/popcount.asm	/^C TODO$/;"	l
C	mpn/arm/neon/popcount.asm	/^C We sum into 16 16-bit counters in q8,q9, but at the end we sum them and end$/;"	l
C	mpn/arm/neon/popcount.asm	/^C XScale	 -$/;"	l
C	mpn/arm/neon/popcount.asm	/^C can be represented as a 8-bit ARM constant.$/;"	l
C	mpn/arm/neon/popcount.asm	/^C up with 8 16-bit counters.  Therefore, we can sum to 8(2^16-1) bits, or$/;"	l
C	mpn/arm/neon/popcount.asm	/^C$/;"	l
C	mpn/arm/neon/sec_tabselect.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/neon/sec_tabselect.asm	/^C Cortex-A15	 0.65$/;"	l
C	mpn/arm/neon/sec_tabselect.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/neon/sec_tabselect.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/neon/sec_tabselect.asm	/^C Cortex-A9	 1.15$/;"	l
C	mpn/arm/neon/sec_tabselect.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/neon/sec_tabselect.asm	/^C XScale	 -$/;"	l
C	mpn/arm/neon/sec_tabselect.asm	/^C define(`which',  on stack)$/;"	l
C	mpn/arm/rsh1aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/rsh1aors_n.asm	/^C  * Not optimised.$/;"	l
C	mpn/arm/rsh1aors_n.asm	/^C Cortex-A15	 2.5$/;"	l
C	mpn/arm/rsh1aors_n.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/rsh1aors_n.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/rsh1aors_n.asm	/^C Cortex-A9	3.64-3.7$/;"	l
C	mpn/arm/rsh1aors_n.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/rsh1aors_n.asm	/^C TODO$/;"	l
C	mpn/arm/rsh1aors_n.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/rshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/rshift.asm	/^C Cortex-A15	 ?$/;"	l
C	mpn/arm/rshift.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/rshift.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/rshift.asm	/^C Cortex-A9	 3.5$/;"	l
C	mpn/arm/rshift.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/rshift.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C      which  on stack$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C    outer loops, or providing a few completely unrolling the inner loops.$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C  * Consider using special code for small nents, either swapping the inner and$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C Cortex-A15	 2.2$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C Cortex-A9	 2.33$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C TODO$/;"	l
C	mpn/arm/sec_tabselect.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/udiv.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm/udiv.asm	/^C Quotient bit is shifted into $2.$/;"	l
C	mpn/arm/udiv.asm	/^C divstep -- develop one quotient bit.  Dividend in $1$2, divisor in $3.$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C	     cycles\/bit (approx)$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C  * Optimise inner-loop better.$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C (time_in_cycles(bmod_1,1) + call_overhead) \/ (cycles\/bit).$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C Both U and V are single limbs, reduce with bmod if u0 >> v0.$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C Cortex-A15	 ?$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C Cortex-A9	 5.9$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C Numbers measured with: speed -CD -s8-32 -t24 mpn_gcd_1$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C TODO$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C Threshold of when to call bmod when U is one limb.  Should be about$/;"	l
C	mpn/arm/v5/gcd_1.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v5/mod_1_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v5/mod_1_1.asm	/^C Cortex-A15	 6$/;"	l
C	mpn/arm/v5/mod_1_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v5/mod_1_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v5/mod_1_1.asm	/^C Cortex-A9	 7$/;"	l
C	mpn/arm/v5/mod_1_1.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/v5/mod_1_1.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v5/mod_1_2.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v5/mod_1_2.asm	/^C Cortex-A15	 3$/;"	l
C	mpn/arm/v5/mod_1_2.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v5/mod_1_2.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v5/mod_1_2.asm	/^C Cortex-A9	 4.25$/;"	l
C	mpn/arm/v5/mod_1_2.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/v5/mod_1_2.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C  * Micro-optimise feed-in code.$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C  * Optimise for n=1,2 by delaying register saving.$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C  * Try using ldm\/stm.$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C ARM11		 6.4$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C Cortex-A15	 4$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C Cortex-A7	 5.25$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C Cortex-A8	 7$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C Cortex-A9	 3.25$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C StrongARM:	 -$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C TODO$/;"	l
C	mpn/arm/v6/addmul_1.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v6/addmul_2.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v6/addmul_2.asm	/^C ARM11		 4.68$/;"	l
C	mpn/arm/v6/addmul_2.asm	/^C Cortex-A15	 2.5$/;"	l
C	mpn/arm/v6/addmul_2.asm	/^C Cortex-A7	 3.625$/;"	l
C	mpn/arm/v6/addmul_2.asm	/^C Cortex-A8	 4$/;"	l
C	mpn/arm/v6/addmul_2.asm	/^C Cortex-A9	 2.25$/;"	l
C	mpn/arm/v6/addmul_2.asm	/^C StrongARM:	 -$/;"	l
C	mpn/arm/v6/addmul_2.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C    avoiding the current multiply.$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C  * Start the first multiply or multiplies early.$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C  * Use a fast path for n <= KARATSUBA_MUL_THRESHOLD using a jump table,$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C ARM11		 4.33$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C Cortex-A15	 2$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C Cortex-A7	 3.23$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C Cortex-A8	 3.19$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C Cortex-A9	 2.125$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C StrongARM:	 -$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C TODO$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C Tricky n mod 6$/;"	l
C	mpn/arm/v6/addmul_3.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C               cycles\/limb       cycles\/limb$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C               norm    unorm    modexact_1c_odd$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C Cortex-A15	 7	 7		 7$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C Cortex-A7	 ?	 ?$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C Cortex-A8	 ?	 ?$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C Cortex-A9	 9	10		 9$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C StrongARM	 -	 -$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C XScale	 -	 -$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C binvert limb$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C v5	-$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C v5t	clz$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C v5te	-$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C v6	umaal$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C v6t2	-$/;"	l
C	mpn/arm/v6/dive_1.asm	/^C v7a	-$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C Cortex-A15	 7$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C Cortex-A9	 9$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C v5	-$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C v5t	-$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C v5te	smulbb$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C v6	umaal$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C v6t2	-$/;"	l
C	mpn/arm/v6/mode1o.asm	/^C v7a	-$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C  * Micro-optimise feed-in code.$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C  * Optimise for n=1,2 by delaying register saving.$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C  * Try using ldm\/stm.$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C ARM11		 6.4$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C Cortex-A15	 4$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C Cortex-A7	 5.25$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C Cortex-A8	 7$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C Cortex-A9	 3.25$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C StrongARM:	 -$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C TODO$/;"	l
C	mpn/arm/v6/mul_1.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C    and possible speedups to 2.0 c\/l.$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C  * This is a trivial edit of the addmul_2 code.  Check for simplifications,$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C ARM11		 5.25$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C Cortex-A15	 2.5$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C Cortex-A7	 3.13$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C Cortex-A8	 5$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C Cortex-A9	 2.25$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C StrongARM:	 -$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C TODO$/;"	l
C	mpn/arm/v6/mul_2.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v6/popham.asm	/^C		     popcount	      hamdist$/;"	l
C	mpn/arm/v6/popham.asm	/^C		    cycles\/limb	    cycles\/limb$/;"	l
C	mpn/arm/v6/popham.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/v6/popham.asm	/^C Cortex-A15		 5.67		 6.44$/;"	l
C	mpn/arm/v6/popham.asm	/^C Cortex-A7		 ?$/;"	l
C	mpn/arm/v6/popham.asm	/^C Cortex-A8		 ?$/;"	l
C	mpn/arm/v6/popham.asm	/^C Cortex-A9		 8.94		 9.47$/;"	l
C	mpn/arm/v6/popham.asm	/^C StrongARM		 -$/;"	l
C	mpn/arm/v6/popham.asm	/^C XScale		 -$/;"	l
C	mpn/arm/v6/popham.asm	/^C v5	-$/;"	l
C	mpn/arm/v6/popham.asm	/^C v5t	-$/;"	l
C	mpn/arm/v6/popham.asm	/^C v5te	ldrd strd$/;"	l
C	mpn/arm/v6/popham.asm	/^C v6	usada8$/;"	l
C	mpn/arm/v6/popham.asm	/^C v6t2	-$/;"	l
C	mpn/arm/v6/popham.asm	/^C v7a	-$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C	b	L(sqr_diag_addlsh1)$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C	cmn	r0, #0			C clear cy (already clear)$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C                             \\            \/$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C                            \\              \/$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C                            sqr_diag_addlsh1$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C                         \\                    \/$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C                         cor3             cor2$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C                        \\                      \/$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C                       \\                        \/$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C              ____________                   ____________$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C             \/            \\                 \/            \\$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C             \\____________\/                  \\____________\/$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C            \\            \/|\\                \\            \/|\\$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C            \\|\/            \\               \\|\/            \\$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C           |               |               |               |$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C          \\|\/             \\|\/             \\|\/             \\|\/$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C         am_2(3m4)       am_2(1m4)       am_2(0m4)       am_2(2m4)$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C        m_2(0m4)        m_2(2m4)        m_2(1m4)        m_2(3m4)$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C    (This could save 2-3 cycles for n > 4.)$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C    initialise loop counter i with a right shift.$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C    particularly on Cortex-A8.$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C    perhaps 5n cycles).$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C    propagation.$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C  * Align more labels.$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C  * Avoid sub-with-lsl in outer loops.  We could keep n up-shifted, then$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C  * Further tweak counter and updates in outer loops.  (This could save$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C  * Optimise sqr_diag_addlsh1 loop.  The current code uses old-style carry$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C  * Stop loops earlier suppressing writes of upper-most rp[] values.$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C  * The addmul_2 loops here runs well on all cores, but mul_2 runs poorly$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C  * Try to use fewer register.  Perhaps coalesce r9 branch target and n_saved.$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C Code structure:$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C Straight line code for n <= 4$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C TODO$/;"	l
C	mpn/arm/v6/sqr_basecase.asm	/^C$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C   R - U*v = R + U'*v + v - B^n v$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C   U' = B^n - 1 - U$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C  * Micro-optimise feed-in code.$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C  * Optimise for n=1,2 by delaying register saving.$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C  * Try using ldm\/stm.$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C Cortex-A15	 4.0$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C Cortex-A9	 3.75$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C StrongARM:	 -$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C TODO$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C This loop complements U on the fly,$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v6/submul_1.asm	/^C and then uses that$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C		norm	unorm	frac$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C  * Decrease register usage, streamline non-loop code.$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C  * Optimise inner-loops better, they could likely run a cycle or two faster.$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C Cortex-A15	11.4	11.8	11.1$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C Cortex-A7	 ?	 ?	 ?$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C Cortex-A8	 ?	 ?	 ?$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C Cortex-A9	13	14	13$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C StrongARM	 -	 -	 -$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C TODO$/;"	l
C	mpn/arm/v6t2/divrem_1.asm	/^C XScale	 -	 -	 -$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C	     cycles\/bit (approx)$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C  * Optimise inner-loop better.$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C  * Push saving\/restoring of callee-user regs into call code$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C (time_in_cycles(bmod_1,1) + call_overhead) \/ (cycles\/bit).$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C Both U and V are single limbs, reduce with bmod if u0 >> v0.$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C Cortex-A15	 3.5$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C Cortex-A9	 5.3$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C Numbers measured with: speed -CD -s8-32 -t24 mpn_gcd_1$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C TODO$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C Threshold of when to call bmod when U is one limb.  Should be about$/;"	l
C	mpn/arm/v6t2/gcd_1.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C	     cycles\/limb		best$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C An A9 variant should perhaps stick to 3-way unrolling, and use ldm and stm$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C Cortex-A15	 2			this$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C Cortex-A9	 6			3.25$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C StrongARM:     -$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C This code uses umlal for adding in the rp[] data, keeping the recurrency path$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C We don't use r12 due to ldrd and strd limitations.$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C bandwidth.$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C for all loads and stores.  Alternatively, it could do 2-way or 4-way, but$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C overhead).$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C separate from any multiply instructions.  It performs well on A15, at umlal's$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C then alignment aware code will be necessary (adding O(1) bookkeeping$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C v5	-$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C v5t	-$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C v5te	ldrd strd$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C v6	-$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C v6t2	-$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C v7a	-$/;"	l
C	mpn/arm/v7a/cora15/addmul_1.asm	/^C$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C	     cycles\/limb		best$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C Cortex-A15	 1.27			this$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C Cortex-A9	 3.55			2.5$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C StrongARM:     -$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C This was a major improvement compared to the code we had before, but it might$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C increments and separate pointer updates, but they all ran at the same speed$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C not be the best 8-way code possible.  We've tried some permutations of auto-$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C on A15.$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C v5	-$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C v5t	-$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C v5te	ldrd strd$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C v6	-$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C v6t2	-$/;"	l
C	mpn/arm/v7a/cora15/aors_n.asm	/^C v7a	-$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C	     cycles\/limb		best$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C Cortex-A15	 1.78			this$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C Cortex-A9	 3.75			 3$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C StrongARM:     -$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C This code does not run as well as one could have hoped, since 1.5 c\/l seems$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C realistic for this insn mix.$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C v5	-$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C v5t	-$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C v5te	ldrd strd$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C v6	-$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C v6t2	-$/;"	l
C	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^C v7a	-$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C            cycles\/limb$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C Cortex-A15	1.0$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C Cortex-A9	2.5$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C This is great A15 core register code, but it is a bit large.$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C We use FEEDIN_VARIANT 1 to save some space, but use 8-way unrolling.$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C v5	-$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C v5t	-$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C v5te	ldrd strd$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C v6	-$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C v6t2	-$/;"	l
C	mpn/arm/v7a/cora15/com.asm	/^C v7a	-$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C            cycles\/limb             cycles\/limb$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C          and andn ior xor         nand iorn nior xnor$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C Cortex-A15	1.27			1.64$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C Cortex-A7	 ?			 ?$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C Cortex-A8	 ?			 ?$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C Cortex-A9	3.5			3.56$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C StrongARM	 ?			 ?$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C This is great A15 core register code, but it is a bit large.$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C We use FEEDIN_VARIANT 1 to save some space, but use 8-way unrolling.$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C XScale	 ?			 ?$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C v5	-$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C v5t	-$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C v5te	ldrd strd$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C v6	-$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C v6t2	-$/;"	l
C	mpn/arm/v7a/cora15/logops_n.asm	/^C v7a	-$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C	     cycles\/limb		best$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C Cortex-A15	 2.25			this$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C Cortex-A9	 5.25			3.25$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C GMP file structure might be misleading.$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C StrongARM:	 -$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C This is armv5 code, optimized for the armv7a cpu A15.  Its location in the$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C This runs well on A15 but very poorly on A9.  By scheduling loads and adds$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C it is possible to get good A9 performance as well, but at the cost of using$/;"	l
C	mpn/arm/v7a/cora15/mul_1.asm	/^C many more (callee-saves) registers.$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C    insufficiently for A7 and A8.$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C  * Consider using 4-way feed-in code.$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C  * This is ad-hoc scheduled, perhaps unnecessarily so for A15, and perhaps$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C Cortex-A15	 2.25$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C Cortex-A9	 5.25$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C TODO$/;"	l
C	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v7a/cora15/neon/com.asm	/^C            cycles\/limb$/;"	l
C	mpn/arm/v7a/cora15/neon/com.asm	/^C Cortex-A15	 0.65$/;"	l
C	mpn/arm/v7a/cora15/neon/com.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/com.asm	/^C Cortex-A9	 2.1$/;"	l
C	mpn/arm/v7a/cora15/neon/com.asm	/^C Handle last 0-7 limbs.  Note that rp is aligned after loop, but not when we$/;"	l
C	mpn/arm/v7a/cora15/neon/com.asm	/^C Perform a few initial operation until rp is 128-bit aligned$/;"	l
C	mpn/arm/v7a/cora15/neon/com.asm	/^C StrongARM	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/com.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/com.asm	/^C arrive here via L(bc)$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C Copy last 0-7 limbs.  Note that rp is aligned after loop, but not when we$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C Copy until rp is 128-bit aligned$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C Cortex-A15	 0.52$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C Cortex-A9	 1.75		slower than core register code$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v7a/cora15/neon/copyd.asm	/^C arrive here via L(bc)$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C Copy last 0-7 limbs.  Note that rp is aligned after loop, but not when we$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C Copy until rp is 128-bit aligned$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C Cortex-A15	 0.52$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C Cortex-A9	 1.75		slower than core register code$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v7a/cora15/neon/copyi.asm	/^C arrive here via L(bc)$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C    insufficiently for A7 and A8.$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C  * This is ad-hoc scheduled, perhaps unnecessarily so for A15, and perhaps$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C  * Try to make this smaller, its size (384 bytes) is excessive.$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C  * Try to reach 2.25 c\/l on A15, to match the addlsh_1 family.$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C Cortex-A15	 2.5$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C Cortex-A9	4-5$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C StrongARM	 -$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C TODO$/;"	l
C	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^C XScale	 -$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C	     cycles\/limb		best$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C	ALIGN(16)$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C	push	{ r4-r11 }$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C   R - U*v = R + U'*v + v - B^n v$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C   U' = B^n - 1 - U$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C A15, but not quite at the multiply bandwidth like the corresponding addmul_1$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C Architecture requirements:$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C Cortex-A15	 2.32			this$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C Cortex-A7	 ?$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C Cortex-A8	 ?$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C Cortex-A9	 5.75			3.75$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C StrongARM:     -$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C This code uses umlal and umaal for adding in the rp[] data, keeping the$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C This loop complements U on the fly,$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C We don't use r12 due to ldrd and strd limitations.$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C XScale	 ?$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C and then uses that$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C code.$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C recurrency path separate from any multiply instructions.  It performs well on$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C v5	-$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C v5t	-$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C v5te	ldrd strd$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C v6	umaal$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C v6t2	-$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C v7a	-$/;"	l
C	mpn/arm/v7a/cora15/submul_1.asm	/^C$/;"	l
C	mpn/arm64/aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/aors_n.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/aors_n.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/aorsmul_1.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/aorsmul_1.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/bdiv_dbm1c.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/bdiv_dbm1c.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/bdiv_dbm1c.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/cnd_aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/cnd_aors_n.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/cnd_aors_n.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/com.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/com.asm	/^C Copy last 0-3 limbs.  Note that rp is aligned after loop, but not when we$/;"	l
C	mpn/arm64/com.asm	/^C Copy until rp is 128-bit aligned$/;"	l
C	mpn/arm64/com.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/com.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/com.asm	/^C arrive here via L(bc)$/;"	l
C	mpn/arm64/copyd.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/copyd.asm	/^C Copy last 0-3 limbs.  Note that rp is aligned after loop, but not when we$/;"	l
C	mpn/arm64/copyd.asm	/^C Copy until rp is 128-bit aligned$/;"	l
C	mpn/arm64/copyd.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/copyd.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/copyd.asm	/^C arrive here via L(bc)$/;"	l
C	mpn/arm64/copyi.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/copyi.asm	/^C Copy last 0-3 limbs.  Note that rp is aligned after loop, but not when we$/;"	l
C	mpn/arm64/copyi.asm	/^C Copy until rp is 128-bit aligned$/;"	l
C	mpn/arm64/copyi.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/copyi.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/copyi.asm	/^C arrive here via L(bc)$/;"	l
C	mpn/arm64/gcd_1.asm	/^C	     cycles\/bit (approx)$/;"	l
C	mpn/arm64/gcd_1.asm	/^C  * Optimise inner-loop better.$/;"	l
C	mpn/arm64/gcd_1.asm	/^C  * Push saving\/restoring of callee-user regs into call code$/;"	l
C	mpn/arm64/gcd_1.asm	/^C (time_in_cycles(bmod_1,1) + call_overhead) \/ (cycles\/bit).$/;"	l
C	mpn/arm64/gcd_1.asm	/^C Both U and V are single limbs, reduce with bmod if u0 >> v0.$/;"	l
C	mpn/arm64/gcd_1.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/gcd_1.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/gcd_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm64/gcd_1.asm	/^C TODO$/;"	l
C	mpn/arm64/gcd_1.asm	/^C This shorter variant makes full use of armv8 insns$/;"	l
C	mpn/arm64/gcd_1.asm	/^C This variant is akin to the 32-bit v6t2 code$/;"	l
C	mpn/arm64/gcd_1.asm	/^C Threshold of when to call bmod when U is one limb.  Should be about$/;"	l
C	mpn/arm64/hamdist.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/hamdist.asm	/^C    read-and-mask trick we use on PCs, for simplicity and performance.  (Sorry$/;"	l
C	mpn/arm64/hamdist.asm	/^C    valgrind!)$/;"	l
C	mpn/arm64/hamdist.asm	/^C  * Arrange to align the pointer, if that helps performance.  Use the same$/;"	l
C	mpn/arm64/hamdist.asm	/^C  * Consider greater unrolling.$/;"	l
C	mpn/arm64/hamdist.asm	/^C  * Explore if explicit align directives, e.g., "[ptr:128]" help.$/;"	l
C	mpn/arm64/hamdist.asm	/^C  * See rth's gmp-devel 2013-02\/03 messages about final summation tricks.$/;"	l
C	mpn/arm64/hamdist.asm	/^C  allows the huge count code to jump deep into the code (at L(chu)).$/;"	l
C	mpn/arm64/hamdist.asm	/^C (8*2^16-1)\/64 = 0x1fff limbs.  We use a chunksize close to that, but which$/;"	l
C	mpn/arm64/hamdist.asm	/^C Code for count > maxsize.  Splits operand and calls above code.$/;"	l
C	mpn/arm64/hamdist.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/hamdist.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/hamdist.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm64/hamdist.asm	/^C TODO$/;"	l
C	mpn/arm64/hamdist.asm	/^C We sum into 16 16-bit counters in v4,v5, but at the end we sum them and end$/;"	l
C	mpn/arm64/hamdist.asm	/^C up with 8 16-bit counters.  Therefore, we can sum to 8(2^16-1) bits, or$/;"	l
C	mpn/arm64/invert_limb.asm	/^C            cycles\/limb$/;"	l
C	mpn/arm64/invert_limb.asm	/^C Compiler generated, mildly edited.  Could surely be further optimised.$/;"	l
C	mpn/arm64/invert_limb.asm	/^C Cortex-A53     ?$/;"	l
C	mpn/arm64/invert_limb.asm	/^C Cortex-A57     ?$/;"	l
C	mpn/arm64/logops_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/logops_n.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/logops_n.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/lshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/lshift.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/lshift.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	adc	x12, x12, xzr$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	adcs	x10, x10, x4$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	adcs	x10, x10, x7$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	adcs	x9, x9, x3$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	adcs	x9, x9, x6$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	adds	x8, x8, x2$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	adds	x8, x8, x5$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	ldp	x2, x3, [ap, #-32]$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	ldp	x4, x5, [ap, #-16]$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	ldp	x6, x7, [ap], #48$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	sub	n, n, #6$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C	tbz	n, #63, L(top)$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C  * An alternative inner loop which could run at 0.722 c\/l:$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C TODO$/;"	l
C	mpn/arm64/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr up, mp_size_t n)$/;"	l
C	mpn/arm64/mul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/mul_1.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/mul_1.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/popcount.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/popcount.asm	/^C    read-and-mask trick we use on PCs, for simplicity and performance.  (Sorry$/;"	l
C	mpn/arm64/popcount.asm	/^C    valgrind!)$/;"	l
C	mpn/arm64/popcount.asm	/^C  * Arrange to align the pointer, if that helps performance.  Use the same$/;"	l
C	mpn/arm64/popcount.asm	/^C  * Consider greater unrolling.$/;"	l
C	mpn/arm64/popcount.asm	/^C  * Explore if explicit align directives, e.g., "[ptr:128]" help.$/;"	l
C	mpn/arm64/popcount.asm	/^C  * See rth's gmp-devel 2013-02\/03 messages about final summation tricks.$/;"	l
C	mpn/arm64/popcount.asm	/^C  allows the huge count code to jump deep into the code (at L(chu)).$/;"	l
C	mpn/arm64/popcount.asm	/^C (8*2^16-1)\/64 = 0x1fff limbs.  We use a chunksize close to that, but which$/;"	l
C	mpn/arm64/popcount.asm	/^C Code for count > maxsize.  Splits operand and calls above code.$/;"	l
C	mpn/arm64/popcount.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/popcount.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/popcount.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/arm64/popcount.asm	/^C TODO$/;"	l
C	mpn/arm64/popcount.asm	/^C We sum into 16 16-bit counters in v4,v5, but at the end we sum them and end$/;"	l
C	mpn/arm64/popcount.asm	/^C up with 8 16-bit counters.  Therefore, we can sum to 8(2^16-1) bits, or$/;"	l
C	mpn/arm64/rshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/rshift.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/rshift.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/sec_tabselect.asm	/^C		     mp_size_t n, mp_size_t nents, mp_size_t which)$/;"	l
C	mpn/arm64/sec_tabselect.asm	/^C	     cycles\/limb$/;"	l
C	mpn/arm64/sec_tabselect.asm	/^C Cortex-A53	 ?$/;"	l
C	mpn/arm64/sec_tabselect.asm	/^C Cortex-A57	 ?$/;"	l
C	mpn/arm64/sec_tabselect.asm	/^C mpn_sec_tabselect (mp_ptr rp, mp_srcptr *tab,$/;"	l
C	mpn/arm64/sec_tabselect.asm	/^C void$/;"	l
C	mpn/ia64/add_n_sub_n.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/add_n_sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/add_n_sub_n.asm	/^C Itanium 2:    2.25$/;"	l
C	mpn/ia64/add_n_sub_n.asm	/^C Itanium:      ?$/;"	l
C	mpn/ia64/add_n_sub_n.asm	/^C Some useful aliases for registers we use$/;"	l
C	mpn/ia64/addmul_1.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/addmul_1.asm	/^C    code.$/;"	l
C	mpn/ia64/addmul_1.asm	/^C    epilogue.$/;"	l
C	mpn/ia64/addmul_1.asm	/^C    smaller than this due to better loop scheduling and thus simpler feed-in$/;"	l
C	mpn/ia64/addmul_1.asm	/^C  * Further optimize feed-in and wind-down code, both for speed and code size.$/;"	l
C	mpn/ia64/addmul_1.asm	/^C  * Handle low limb input and results specially, using a common stf8 in the$/;"	l
C	mpn/ia64/addmul_1.asm	/^C  * Use 1 c\/l carry propagation scheme in wind-down code.$/;"	l
C	mpn/ia64/addmul_1.asm	/^C  * Use extra pointer registers for `up' and rp to speed up feed-in loads.$/;"	l
C	mpn/ia64/addmul_1.asm	/^C  * Work out final differences with mul_1.asm.  That function is 300 bytes$/;"	l
C	mpn/ia64/addmul_1.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/addmul_1.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/addmul_1.asm	/^C Itanium 2:  2.0$/;"	l
C	mpn/ia64/addmul_1.asm	/^C Itanium:    3.0$/;"	l
C	mpn/ia64/addmul_1.asm	/^C TODO$/;"	l
C	mpn/ia64/addmul_2.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/addmul_2.asm	/^C    loaded u value in one xma pair, then leaves it live over several unrelated$/;"	l
C	mpn/ia64/addmul_2.asm	/^C    registers used.$/;"	l
C	mpn/ia64/addmul_2.asm	/^C    to just swap some aligned xma pairs around.  But we should then schedule$/;"	l
C	mpn/ia64/addmul_2.asm	/^C    u loads further from the first use.$/;"	l
C	mpn/ia64/addmul_2.asm	/^C    wind-down code.$/;"	l
C	mpn/ia64/addmul_2.asm	/^C    xma pairs, before it uses it again.  It should actually be quite possible$/;"	l
C	mpn/ia64/addmul_2.asm	/^C  * Clean up feed-in code to not require zeroing several registers.$/;"	l
C	mpn/ia64/addmul_2.asm	/^C  * Clean up variable names, and try to decrease the number of distinct$/;"	l
C	mpn/ia64/addmul_2.asm	/^C  * Could perhaps save a few cycles by using 1 c\/l carry propagation in$/;"	l
C	mpn/ia64/addmul_2.asm	/^C  * Make sure we don't depend on uninitialised predicate registers.$/;"	l
C	mpn/ia64/addmul_2.asm	/^C  * Ultimately rewrite.  The problem with this code is that it first uses a$/;"	l
C	mpn/ia64/addmul_2.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/addmul_2.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/addmul_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/addmul_2.asm	/^C Itanium 2:  1.625$/;"	l
C	mpn/ia64/addmul_2.asm	/^C Itanium:    3.65$/;"	l
C	mpn/ia64/addmul_2.asm	/^C TODO$/;"	l
C	mpn/ia64/aors_n.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/aors_n.asm	/^C    "switch (8 * (n >= 8) + (n mod 8))" to enter it and feed-in code.$/;"	l
C	mpn/ia64/aors_n.asm	/^C    code; the nc code adds over 1000 bytes.  We should perhaps sacrifice a$/;"	l
C	mpn/ia64/aors_n.asm	/^C    cruder (since tune\/speed doesn't have any applicable direct measurements).$/;"	l
C	mpn/ia64/aors_n.asm	/^C    few cycles for the non-nc code and let it fall into the nc code.$/;"	l
C	mpn/ia64/aors_n.asm	/^C    probably hard to save more that an odd cycle there.  The nc code is much$/;"	l
C	mpn/ia64/aors_n.asm	/^C  * Consider using special code for small n, using something like$/;"	l
C	mpn/ia64/aors_n.asm	/^C  * The non-nc code was trimmed cycle for cycle to its current state.  It is$/;"	l
C	mpn/ia64/aors_n.asm	/^C  * Without the nc entry points, this becomes around 1800 bytes of object$/;"	l
C	mpn/ia64/aors_n.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/aors_n.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/aors_n.asm	/^C Itanium 2:    1.25$/;"	l
C	mpn/ia64/aors_n.asm	/^C Itanium:      2.67$/;"	l
C	mpn/ia64/aors_n.asm	/^C Some useful aliases for registers we use$/;"	l
C	mpn/ia64/aors_n.asm	/^C TODO$/;"	l
C	mpn/ia64/aorsorrlsh1_n.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/aorsorrlsh1_n.asm	/^C Itanium 2:    1.5$/;"	l
C	mpn/ia64/aorsorrlsh1_n.asm	/^C Itanium:      3.0$/;"	l
C	mpn/ia64/aorsorrlsh2_n.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/aorsorrlsh2_n.asm	/^C Itanium 2:    1.5$/;"	l
C	mpn/ia64/aorsorrlsh2_n.asm	/^C Itanium:      3.0$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C  * Rewrite loop to schedule loads closer to use, since we do prefetch.$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C  * Use shladd in feed-in code (for mpn_addlshC_n).$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C Itanium 2:    1.5$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C Itanium:      ?$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C TODO$/;"	l
C	mpn/ia64/aorsorrlshC_n.asm	/^C r3 r8 r9 r10 r11$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C	.mfi$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C	.mib$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C  * Optimize feed-in and wind-down code, both for speed and code size.$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C Itanium 2:  2$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C Itanium:    4$/;"	l
C	mpn/ia64/bdiv_dbm1c.asm	/^C TODO$/;"	l
C	mpn/ia64/cnd_aors_n.asm	/^C	ALIGN(32)$/;"	l
C	mpn/ia64/cnd_aors_n.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/cnd_aors_n.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/cnd_aors_n.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/cnd_aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/cnd_aors_n.asm	/^C Itanium 2:    1.5$/;"	l
C	mpn/ia64/cnd_aors_n.asm	/^C Itanium:      ?$/;"	l
C	mpn/ia64/cnd_aors_n.asm	/^C Some useful aliases for registers we use$/;"	l
C	mpn/ia64/copyd.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/copyd.asm	/^C Itanium 2:  0.5$/;"	l
C	mpn/ia64/copyd.asm	/^C Itanium:    1$/;"	l
C	mpn/ia64/copyd.asm	/^C n = r34$/;"	l
C	mpn/ia64/copyd.asm	/^C rp = r32$/;"	l
C	mpn/ia64/copyd.asm	/^C sp = r33$/;"	l
C	mpn/ia64/copyi.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/copyi.asm	/^C Itanium 2:  0.5$/;"	l
C	mpn/ia64/copyi.asm	/^C Itanium:    1$/;"	l
C	mpn/ia64/copyi.asm	/^C n = r34$/;"	l
C	mpn/ia64/copyi.asm	/^C rp = r32$/;"	l
C	mpn/ia64/copyi.asm	/^C sp = r33$/;"	l
C	mpn/ia64/dive_1.asm	/^C            cycles\/limb$/;"	l
C	mpn/ia64/dive_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/dive_1.asm	/^C Itanium 2:     8$/;"	l
C	mpn/ia64/dive_1.asm	/^C Itanium:      16$/;"	l
C	mpn/ia64/dive_1.asm	/^C Possible improvement: Merge more of the feed-in code into the inverse$/;"	l
C	mpn/ia64/dive_1.asm	/^C The critical path during initialization is for computing the inverse of the$/;"	l
C	mpn/ia64/dive_1.asm	/^C This code is a bit messy, and not as similar to mode1o.asm as desired.$/;"	l
C	mpn/ia64/dive_1.asm	/^C computation.$/;"	l
C	mpn/ia64/dive_1.asm	/^C divisor.  Since odd divisors are probably common, we conditionally execute$/;"	l
C	mpn/ia64/dive_1.asm	/^C the initial count_trailing_zeros code and the downshift.$/;"	l
C	mpn/ia64/divrem_1.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/divrem_1.asm	/^C    computing leading limb.$/;"	l
C	mpn/ia64/divrem_1.asm	/^C  * Consider delaying inversion for normalized mpn_divrem_1 entry till after$/;"	l
C	mpn/ia64/divrem_1.asm	/^C  * Inline and interleave limb inversion code with loop setup code.$/;"	l
C	mpn/ia64/divrem_1.asm	/^C Develop quotient limbs for normalized divisor$/;"	l
C	mpn/ia64/divrem_1.asm	/^C Develop quotient limbs for unnormalized divisor$/;"	l
C	mpn/ia64/divrem_1.asm	/^C HP's assembler requires these declarations for importing mpn_invert_limb$/;"	l
C	mpn/ia64/divrem_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/divrem_1.asm	/^C Itanium 2:  29-30$/;"	l
C	mpn/ia64/divrem_1.asm	/^C Itanium:    40-42$/;"	l
C	mpn/ia64/divrem_1.asm	/^C TODO$/;"	l
C	mpn/ia64/divrem_1.asm	/^C This was generated by gcc, then the loops were optimized.  The preinv entry$/;"	l
C	mpn/ia64/divrem_1.asm	/^C all loops, if the ld8 were made conditional.$/;"	l
C	mpn/ia64/divrem_1.asm	/^C be streamlined.  It would probably be a good idea to merge the loops for$/;"	l
C	mpn/ia64/divrem_1.asm	/^C cnt = r38    (preinv only)$/;"	l
C	mpn/ia64/divrem_1.asm	/^C free in parallel with other operations.  It would even be possible to merge$/;"	l
C	mpn/ia64/divrem_1.asm	/^C n     = r35$/;"	l
C	mpn/ia64/divrem_1.asm	/^C normalized and unnormalized divisor, since the shifting stuff is done for$/;"	l
C	mpn/ia64/divrem_1.asm	/^C point was shoehorned into the file.  Lots of things outside the loops could$/;"	l
C	mpn/ia64/divrem_1.asm	/^C qxn   = r33$/;"	l
C	mpn/ia64/divrem_1.asm	/^C rp    = r32$/;"	l
C	mpn/ia64/divrem_1.asm	/^C up    = r34$/;"	l
C	mpn/ia64/divrem_1.asm	/^C vl    = r36$/;"	l
C	mpn/ia64/divrem_1.asm	/^C vlinv = r37  (preinv only)$/;"	l
C	mpn/ia64/divrem_2.asm	/^C               norm   frac$/;"	l
C	mpn/ia64/divrem_2.asm	/^C    cuts some cycles with the GNU assembler.$/;"	l
C	mpn/ia64/divrem_2.asm	/^C  * Inline and interleave limb inversion code with loop setup code.$/;"	l
C	mpn/ia64/divrem_2.asm	/^C  * We should use explicit bundling in much of the code, since it typically$/;"	l
C	mpn/ia64/divrem_2.asm	/^C HP's assembler requires these declarations for importing mpn_invert_limb$/;"	l
C	mpn/ia64/divrem_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/divrem_2.asm	/^C TODO$/;"	l
C	mpn/ia64/divrem_2.asm	/^C dp   = r36$/;"	d
C	mpn/ia64/divrem_2.asm	/^C fn   = r33$/;"	l
C	mpn/ia64/divrem_2.asm	/^C itanium 1$/;"	l
C	mpn/ia64/divrem_2.asm	/^C itanium 2     29     29$/;"	l
C	mpn/ia64/divrem_2.asm	/^C nn   = r35$/;"	l
C	mpn/ia64/divrem_2.asm	/^C np   = r34$/;"	l
C	mpn/ia64/divrem_2.asm	/^C qp   = r32$/;"	l
C	mpn/ia64/gcd_1.asm	/^C	.section	".rodata"$/;"	l
C	mpn/ia64/gcd_1.asm	/^C           cycles\/bitpair (1x1 gcd)$/;"	l
C	mpn/ia64/gcd_1.asm	/^C  * Call bmod_1 even for n=1 when up[0] >> v0 (like other gcd_1 impls).$/;"	l
C	mpn/ia64/gcd_1.asm	/^C  * Once mod_1_N exists in assembly for Itanium, add conditional calls.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C  * Probably avoid popcnt also outside of loop, instead use ctz_table.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C Alternatives:$/;"	l
C	mpn/ia64/gcd_1.asm	/^C An alternate algorithm which didn't strip all twos, but instead applied$/;"	l
C	mpn/ia64/gcd_1.asm	/^C HP's assembler requires these declarations for importing mpn_modexact_1c_odd$/;"	l
C	mpn/ia64/gcd_1.asm	/^C It's possible xp[0] is zero.  In this case the trailing zeros calculation$/;"	l
C	mpn/ia64/gcd_1.asm	/^C Itanium 2:     5.1$/;"	l
C	mpn/ia64/gcd_1.asm	/^C Itanium:       ?$/;"	l
C	mpn/ia64/gcd_1.asm	/^C Not done:$/;"	l
C	mpn/ia64/gcd_1.asm	/^C Perhaps we could do something tricky by extracting a few high bits and a$/;"	l
C	mpn/ia64/gcd_1.asm	/^C TODO:$/;"	l
C	mpn/ia64/gcd_1.asm	/^C The algorithm takes about 0.68 iterations per bit (two N bit operands) on$/;"	l
C	mpn/ia64/gcd_1.asm	/^C The common factors of 2 between x and y must be determined using the$/;"	l
C	mpn/ia64/gcd_1.asm	/^C The entry sequence is designed to expect xsize>1 and hence a modexact$/;"	l
C	mpn/ia64/gcd_1.asm	/^C The main loop consists of transforming x,y to abs(x-y),min(x,y), and then$/;"	l
C	mpn/ia64/gcd_1.asm	/^C The right shifts are a bit of a bottleneck (shr at 2 or 3 cycles, or extr$/;"	l
C	mpn/ia64/gcd_1.asm	/^C The selection of x-y versus y-x for abs(x-y), and the selection of the$/;"	l
C	mpn/ia64/gcd_1.asm	/^C average, hence the final 5.8 cycles\/bitpair.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C bit, using some sort of mask.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C call.  This ought to be more common than a 1x1 operation.  Our critical$/;"	l
C	mpn/ia64/gcd_1.asm	/^C could knock off multiple bits per iteration.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C ctz_table[n] is the number of trailing zeros on n, or MAXSHIFT if n==0.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C cycles, but the algorithm is an average 1.25 iterations per bitpair for a$/;"	l
C	mpn/ia64/gcd_1.asm	/^C dependent chain 8 cycles deep.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C determined from just y-x, without the abs(), since there's the same$/;"	l
C	mpn/ia64/gcd_1.asm	/^C few low bits from the operands, and looking up a table which would give a$/;"	l
C	mpn/ia64/gcd_1.asm	/^C have, making min(x_twos,y_twos) == y_twos.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C minimum of x and y, is done in parallel with the critical path.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C mpn_gcd_1 (mp_srcptr xp, mp_size_t xsize, mp_limb_t y);$/;"	l
C	mpn/ia64/gcd_1.asm	/^C number of trailing zeros on n or -n in twos complement.  That makes the$/;"	l
C	mpn/ia64/gcd_1.asm	/^C of the modexact etc is happening.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C only going down I0), perhaps it'd be possible to shift left instead,$/;"	l
C	mpn/ia64/gcd_1.asm	/^C original x, not the remainder from the modexact.  This is done with$/;"	l
C	mpn/ia64/gcd_1.asm	/^C path is thus stripping factors of 2 from y, calling modexact, then$/;"	l
C	mpn/ia64/gcd_1.asm	/^C popc((x-1)&~x) gives 63, and that's clearly no less than what y will$/;"	l
C	mpn/ia64/gcd_1.asm	/^C set of predicates to control some shifts or subtracts or whatever.  That$/;"	d
C	mpn/ia64/gcd_1.asm	/^C stripping factors of 2 from abs(x-y).  Those factors of two are$/;"	l
C	mpn/ia64/gcd_1.asm	/^C stripping factors of 2 from the x remainder returned.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C tbit and predicated extr on x, and then y, was attempted.  The loop was 6$/;"	l
C	mpn/ia64/gcd_1.asm	/^C total 7.25 c\/bp, which is slower than the current approach.$/;"	l
C	mpn/ia64/gcd_1.asm	/^C using add.  That would mean keeping track of the lowest not-yet-zeroed$/;"	l
C	mpn/ia64/gcd_1.asm	/^C x_orig which is xp[0].  There's plenty of time to do this while the rest$/;"	l
C	mpn/ia64/gcd_1.asm	/^C$/;"	l
C	mpn/ia64/hamdist.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/hamdist.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/hamdist.asm	/^C Itanium 2:     1$/;"	l
C	mpn/ia64/hamdist.asm	/^C Itanium:       2$/;"	l
C	mpn/ia64/invert_limb.asm	/^C           cycles$/;"	l
C	mpn/ia64/invert_limb.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/invert_limb.asm	/^C It should be possible to avoid the xmpy.hu and the following tests by$/;"	l
C	mpn/ia64/invert_limb.asm	/^C Itanium 2:  50+6$/;"	l
C	mpn/ia64/invert_limb.asm	/^C Itanium:    74$/;"	l
C	mpn/ia64/invert_limb.asm	/^C d = r32$/;"	l
C	mpn/ia64/invert_limb.asm	/^C explicitly chopping in the last fma.  That would save about 10 cycles.$/;"	l
C	mpn/ia64/logops_n.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/logops_n.asm	/^C    wind-down code).$/;"	l
C	mpn/ia64/logops_n.asm	/^C  * Use rp,rpx scheme of aors_n.asm to allow parallel stores (useful in$/;"	l
C	mpn/ia64/logops_n.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/logops_n.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/logops_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/logops_n.asm	/^C Itanium 2:    1$/;"	l
C	mpn/ia64/logops_n.asm	/^C Itanium:      2$/;"	l
C	mpn/ia64/logops_n.asm	/^C TODO$/;"	l
C	mpn/ia64/lorrshift.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/lorrshift.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/lorrshift.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/lorrshift.asm	/^C Good lfetch  will make sure we never stall anyway.$/;"	l
C	mpn/ia64/lorrshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/lorrshift.asm	/^C Itanium 2:    1$/;"	l
C	mpn/ia64/lorrshift.asm	/^C Itanium:      2$/;"	l
C	mpn/ia64/lorrshift.asm	/^C The ld8 scheduling should probably be decreased to make the function smaller.$/;"	l
C	mpn/ia64/lorrshift.asm	/^C This code is scheduled deeply since the plain shift instructions shr and shl$/;"	l
C	mpn/ia64/lorrshift.asm	/^C We should actually issue the first ld8 at cycle 0, and the first BSH\/FSH pair$/;"	l
C	mpn/ia64/lorrshift.asm	/^C at cycle 2.  Judicious use of predicates could allow us to issue more ld8's$/;"	l
C	mpn/ia64/lorrshift.asm	/^C have a latency of 4 (on Itanium) or 3 (on Itanium 2).  Poor scheduling of$/;"	l
C	mpn/ia64/lorrshift.asm	/^C in the prologue.$/;"	l
C	mpn/ia64/lorrshift.asm	/^C these instructions cause a 10 cycle replay trap on Itanium.$/;"	l
C	mpn/ia64/lshiftc.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/lshiftc.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/lshiftc.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/lshiftc.asm	/^C Good lfetch  will make sure we never stall anyway.$/;"	l
C	mpn/ia64/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/lshiftc.asm	/^C Itanium 2:    1.25$/;"	l
C	mpn/ia64/lshiftc.asm	/^C Itanium:      ?$/;"	l
C	mpn/ia64/lshiftc.asm	/^C The ld8 scheduling should probably be decreased to make the function smaller.$/;"	l
C	mpn/ia64/lshiftc.asm	/^C This code is scheduled deeply since the plain shift instructions shr and shl$/;"	l
C	mpn/ia64/lshiftc.asm	/^C We should actually issue the first ld8 at cycle 0, and the first BSH\/FSH pair$/;"	l
C	mpn/ia64/lshiftc.asm	/^C at cycle 2.  Judicious use of predicates could allow us to issue more ld8's$/;"	l
C	mpn/ia64/lshiftc.asm	/^C have a latency of 4 (on Itanium) or 3 (on Itanium 2).  Poor scheduling of$/;"	l
C	mpn/ia64/lshiftc.asm	/^C in the prologue.$/;"	l
C	mpn/ia64/lshiftc.asm	/^C these instructions cause a 10 cycle replay trap on Itanium.$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C	add		n = -3, n$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C	cmp.le		p9, p0 = 3, n$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C  (p9)	br.cond		.Loop$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C 16-cycle code.$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C Alternatively, we could table n\/3 for, say, n < 256, and predicate the$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C Computing n\/3 needs 16 cycles, which is a lot of startup overhead.$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C Itanium 2:    1$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C Itanium:      ?$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C Some useful aliases for registers we use$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C The summing-up code at the end was written quickly, and could surely be$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C This is a fairly simple-minded implementation.  One could approach 0.67 c\/l$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C We therefore use a plain while-style loop:$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C a general register, and population count them from there.  That'd bring us$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C close to 3 insn\/limb, for nearly 0.5 c\/l.$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C super-unroll, storing carries just in predicate registers, then copy them to$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C vastly improved.$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C with a more sophisticated implementation.  If we're really crazy, we could$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C |        |        |        |        |$/;"	l
C	mpn/ia64/mod_34lsub1.asm	/^C |     a2    |     a1    |     a0    |$/;"	l
C	mpn/ia64/mode1o.asm	/^C	c = high(q*divisor + c)$/;"	l
C	mpn/ia64/mode1o.asm	/^C	c = high(q*divisor) + (src[i]<c)$/;"	l
C	mpn/ia64/mode1o.asm	/^C	cl = high (ql * d + c)		carry out of low$/;"	l
C	mpn/ia64/mode1o.asm	/^C	l = src[i] - c$/;"	l
C	mpn/ia64/mode1o.asm	/^C	new c = high (qh * d + cl)	carry out of high$/;"	l
C	mpn/ia64/mode1o.asm	/^C	q = low(c * inverse + si)$/;"	l
C	mpn/ia64/mode1o.asm	/^C	q = low(l * inverse)$/;"	l
C	mpn/ia64/mode1o.asm	/^C	qh = low (qlc * 1 + qh1)	quotient high limb$/;"	l
C	mpn/ia64/mode1o.asm	/^C	qh1 = low (c * ih + sih)	quotient high, partial$/;"	l
C	mpn/ia64/mode1o.asm	/^C	ql  = low (c * il + sil)	quotient low limb$/;"	l
C	mpn/ia64/mode1o.asm	/^C	qlc = high(c * il + sil)$/;"	l
C	mpn/ia64/mode1o.asm	/^C                                mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/ia64/mode1o.asm	/^C            cycles\/limb$/;"	l
C	mpn/ia64/mode1o.asm	/^C 6 cycles for the data ready to use.  In fact we end up 7 cycles ahead.  In$/;"	l
C	mpn/ia64/mode1o.asm	/^C And the load for the low limbs src[0] and src[1] can be initiated long$/;"	l
C	mpn/ia64/mode1o.asm	/^C At .Lentry the first two instructions in the loop have been done already.$/;"	l
C	mpn/ia64/mode1o.asm	/^C Branching on high<divisor wouldn't be good since a mispredict would cost$/;"	l
C	mpn/ia64/mode1o.asm	/^C Consideration was given to a test for high<divisor and replacing the last$/;"	l
C	mpn/ia64/mode1o.asm	/^C Consideration was given to using a plain "(src[0]-c) % divisor" for$/;"	l
C	mpn/ia64/mode1o.asm	/^C Enhancement:$/;"	l
C	mpn/ia64/mode1o.asm	/^C Entry Sequence:$/;"	l
C	mpn/ia64/mode1o.asm	/^C First Limb:$/;"	l
C	mpn/ia64/mode1o.asm	/^C Having the table in .text allows us to use IP-relative addressing,$/;"	l
C	mpn/ia64/mode1o.asm	/^C IP-relative, it gets a linker relocation overflow on GNU\/Linux.$/;"	l
C	mpn/ia64/mode1o.asm	/^C In the entry sequence, the critical path is the calculation of the$/;"	l
C	mpn/ia64/mode1o.asm	/^C In the main loop, the data loads are scheduled for an L2 hit, which means$/;"	l
C	mpn/ia64/mode1o.asm	/^C Incidentally, fcmp is not an option for treating src[i]-c, since it$/;"	l
C	mpn/ia64/mode1o.asm	/^C Inverse Calculation:$/;"	l
C	mpn/ia64/mode1o.asm	/^C Itanium 2:     8$/;"	l
C	mpn/ia64/mode1o.asm	/^C Itanium:      15$/;"	l
C	mpn/ia64/mode1o.asm	/^C L1 (which is likely if we're called several times) then it should take a$/;"	l
C	mpn/ia64/mode1o.asm	/^C L1 hits for their respective fetching.)$/;"	l
C	mpn/ia64/mode1o.asm	/^C Load Scheduling:$/;"	l
C	mpn/ia64/mode1o.asm	/^C Not done:$/;"	l
C	mpn/ia64/mode1o.asm	/^C Perhaps this could even extend to a 3 limb inverse, which might promise 17$/;"	l
C	mpn/ia64/mode1o.asm	/^C Process two source limbs per iteration using a two-limb inverse and a$/;"	l
C	mpn/ia64/mode1o.asm	/^C The first limb uses q = (src[0]-c) * inverse shown in the first style.$/;"	l
C	mpn/ia64/mode1o.asm	/^C The initial 8-bit inverse is calculated using a table lookup.  If it hits$/;"	l
C	mpn/ia64/mode1o.asm	/^C The load of f11=src[1] at the start (predicated on size>=2), and the$/;"	l
C	mpn/ia64/mode1o.asm	/^C The main loop requires size >= 2, and we handle size==1 by an initial$/;"	l
C	mpn/ia64/mode1o.asm	/^C The modexact algorithm is usually conceived as a dependent chain$/;"	l
C	mpn/ia64/mode1o.asm	/^C The reason xma.hu works for the new c is that the low of q*divisor is$/;"	l
C	mpn/ia64/mode1o.asm	/^C The table is not the same as binvert_limb_table, instead it's 256 bytes,$/;"	l
C	mpn/ia64/mode1o.asm	/^C This lets us get the first q as soon as the inverse is ready, without$/;"	l
C	mpn/ia64/mode1o.asm	/^C This means the dependent chain is simply xma.l followed by xma.hu, for a$/;"	l
C	mpn/ia64/mode1o.asm	/^C This would be 13 cycles\/iteration, giving 6.5 cycles\/limb.  The two limb$/;"	l
C	mpn/ia64/mode1o.asm	/^C Whether such a tradeoff is a win on average depends on assumptions about$/;"	l
C	mpn/ia64/mode1o.asm	/^C a gain of 6 when high<divisor, or a cost of 2 if not.$/;"	l
C	mpn/ia64/mode1o.asm	/^C ahead of where they're needed.$/;"	l
C	mpn/ia64/mode1o.asm	/^C always odd, so the relevant data is every second byte in the table.  The$/;"	l
C	mpn/ia64/mode1o.asm	/^C and generated by ldf8 and xma.  On one GNU\/Linux system it took about 1200$/;"	l
C	mpn/ia64/mode1o.asm	/^C any case that scheduling is achieved simply by doing the load (and xmpy.l$/;"	l
C	mpn/ia64/mode1o.asm	/^C apparently traps to the kernel for unnormalized operands like those used$/;"	l
C	mpn/ia64/mode1o.asm	/^C applications (mpz_divisible_ui, mpz_gcd_ui, etc).  Though biggish divisors$/;"	l
C	mpn/ia64/mode1o.asm	/^C avoiding a fetch from ltoff.  .rodata is apparently not suitable for use$/;"	l
C	mpn/ia64/mode1o.asm	/^C br.cloop to enter the loop only if size>1.  Since ar.lc is established$/;"	l
C	mpn/ia64/mode1o.asm	/^C but that would be about 11 cycles.$/;"	l
C	mpn/ia64/mode1o.asm	/^C but we can work the src[i]-c into an xma by calculating si=src[i]*inverse$/;"	l
C	mpn/ia64/mode1o.asm	/^C calculate, but a one limb iteration to handle an odd size could be done as$/;"	l
C	mpn/ia64/mode1o.asm	/^C calculation of q by the initial different scheme.$/;"	l
C	mpn/ia64/mode1o.asm	/^C chain with 4 multiplies.  The bigger inverse would take extra time to$/;"	l
C	mpn/ia64/mode1o.asm	/^C could be taken from 4 bits to 8 with xmpy doubling as used beyond 8 bits,$/;"	l
C	mpn/ia64/mode1o.asm	/^C cycle because it must go down I0, and we're using the first I0 slot to get$/;"	l
C	mpn/ia64/mode1o.asm	/^C cycles.$/;"	l
C	mpn/ia64/mode1o.asm	/^C dependent.  So the theory would be to shorten the loop count if$/;"	l
C	mpn/ia64/mode1o.asm	/^C designed to be indexed by the low byte of the divisor.  The divisor is$/;"	l
C	mpn/ia64/mode1o.asm	/^C distributed then high<divisor about 50% of the time.  But smallish$/;"	l
C	mpn/ia64/mode1o.asm	/^C divisors (less chance of high<divisor) might be more likely from$/;"	l
C	mpn/ia64/mode1o.asm	/^C early, this should predict perfectly.$/;"	l
C	mpn/ia64/mode1o.asm	/^C established nice and early so the br.cloop's should predict perfectly.$/;"	l
C	mpn/ia64/mode1o.asm	/^C for "si") in the immediately preceding iteration.$/;"	l
C	mpn/ia64/mode1o.asm	/^C for c.$/;"	l
C	mpn/ia64/mode1o.asm	/^C for the moment, it's felt the gain is not really enough to be worth the$/;"	l
C	mpn/ia64/mode1o.asm	/^C going through si=s*inverse.  Basically at the start we have c and can use$/;"	l
C	mpn/ia64/mode1o.asm	/^C high<divisor, and predicate extra operations at the end.  That would mean$/;"	l
C	mpn/ia64/mode1o.asm	/^C how many bits in the high and the divisor.  If both are uniformly$/;"	l
C	mpn/ia64/mode1o.asm	/^C inverse, so this is begun first and optimized.  Apart from that, ar.lc is$/;"	l
C	mpn/ia64/mode1o.asm	/^C ip.  The extra 128 bytes of padding should be insignificant compared to$/;"	l
C	mpn/ia64/mode1o.asm	/^C it while waiting for the inverse, whereas for the second and subsequent$/;"	l
C	mpn/ia64/mode1o.asm	/^C limbs it's the other way around, ie. we have the inverse and are waiting$/;"	l
C	mpn/ia64/mode1o.asm	/^C loop iteration with instead c-=src[size-1] followed by c+=d if underflow.$/;"	l
C	mpn/ia64/mode1o.asm	/^C more than the loop iteration saved, and the condition is of course data$/;"	l
C	mpn/ia64/mode1o.asm	/^C mp_limb_t mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/ia64/mode1o.asm	/^C or 18 cycles for 3 limbs, giving 5.66 or 6.0 cycles\/limb.$/;"	l
C	mpn/ia64/mode1o.asm	/^C padding lets us use zxt1 instead of extr.u, the latter would cost an extra$/;"	l
C	mpn/ia64/mode1o.asm	/^C probably be about 14 cycles (2 per bit beyond the first couple).  Or it$/;"	l
C	mpn/ia64/mode1o.asm	/^C s*inverse as sih:sil = sh:sl * ih:il would be calculated off the dependent$/;"	l
C	mpn/ia64/mode1o.asm	/^C separately (off the dependent chain) and using$/;"	l
C	mpn/ia64/mode1o.asm	/^C sequence like$/;"	l
C	mpn/ia64/mode1o.asm	/^C size==1, but cycle counting suggests about 50 for the sort of approach$/;"	l
C	mpn/ia64/mode1o.asm	/^C soon as 64-bits of inverse were ready.$/;"	l
C	mpn/ia64/mode1o.asm	/^C src[i]-c (being the whole purpose of the q generated, and it can be$/;"	l
C	mpn/ia64/mode1o.asm	/^C taken by gcc __umodsi3, versus about 47 for the modexact.  (Both assuming$/;"	l
C	mpn/ia64/mode1o.asm	/^C the best approach, on balance.  It could be done bitwise, but that would$/;"	l
C	mpn/ia64/mode1o.asm	/^C the same as the borrow bit (src[i]<c) gives in the first style shown.$/;"	l
C	mpn/ia64/mode1o.asm	/^C there will be an overflow from (src-c)+c, thereby adding 1 to the new c$/;"	l
C	mpn/ia64/mode1o.asm	/^C total 4 cycles, otherwise hopefully L2 for 9 cycles.  This is considered$/;"	l
C	mpn/ia64/mode1o.asm	/^C total 8 cycles\/limb on itanium-2.$/;"	l
C	mpn/ia64/mode1o.asm	/^C trouble.$/;"	l
C	mpn/ia64/mode1o.asm	/^C typical ia64 code bloat.$/;"	l
C	mpn/ia64/mode1o.asm	/^C verified algebraically).  If there was an underflow from src[i]-c, then$/;"	l
C	mpn/ia64/mode1o.asm	/^C would be normal internally from say mpn\/generic\/perfsqr.c.  On balance,$/;"	l
C	mpn/ia64/mode1o.asm	/^C$/;"	l
C	mpn/ia64/mul_1.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/mul_1.asm	/^C    epilogue.$/;"	l
C	mpn/ia64/mul_1.asm	/^C  * Further optimize feed-in and wind-down code, both for speed and code size.$/;"	l
C	mpn/ia64/mul_1.asm	/^C  * Handle low limb input and results specially, using a common stf8 in the$/;"	l
C	mpn/ia64/mul_1.asm	/^C  * Use 1 c\/l carry propagation scheme in wind-down code.$/;"	l
C	mpn/ia64/mul_1.asm	/^C  * Use extra pointer register for `up' to speed up feed-in loads.$/;"	l
C	mpn/ia64/mul_1.asm	/^C  * Work out final differences with addmul_1.asm.$/;"	l
C	mpn/ia64/mul_1.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/mul_1.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/mul_1.asm	/^C Itanium 2:  2.0$/;"	l
C	mpn/ia64/mul_1.asm	/^C Itanium:    4.0$/;"	l
C	mpn/ia64/mul_1.asm	/^C TODO$/;"	l
C	mpn/ia64/mul_2.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/mul_2.asm	/^C    loaded u value in one xma pair, then leaves it live over several unrelated$/;"	l
C	mpn/ia64/mul_2.asm	/^C    registers used.$/;"	l
C	mpn/ia64/mul_2.asm	/^C    to just swap some aligned xma pairs around.  But we should then schedule$/;"	l
C	mpn/ia64/mul_2.asm	/^C    u loads further from the first use.$/;"	l
C	mpn/ia64/mul_2.asm	/^C    wind-down code.$/;"	l
C	mpn/ia64/mul_2.asm	/^C    xma pairs, before it uses it again.  It should actually be quite possible$/;"	l
C	mpn/ia64/mul_2.asm	/^C  * Clean up feed-in code to not require zeroing several registers.$/;"	l
C	mpn/ia64/mul_2.asm	/^C  * Clean up variable names, and try to decrease the number of distinct$/;"	l
C	mpn/ia64/mul_2.asm	/^C  * Could perhaps save a few cycles by using 1 c\/l carry propagation in$/;"	l
C	mpn/ia64/mul_2.asm	/^C  * Make sure we don't depend on uninitialized predicate registers.$/;"	l
C	mpn/ia64/mul_2.asm	/^C  * Ultimately rewrite.  The problem with this code is that it first uses a$/;"	l
C	mpn/ia64/mul_2.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/mul_2.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/mul_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/mul_2.asm	/^C Itanium 2:  1.5$/;"	l
C	mpn/ia64/mul_2.asm	/^C Itanium:    ?$/;"	l
C	mpn/ia64/mul_2.asm	/^C TODO$/;"	l
C	mpn/ia64/popcount.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/popcount.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/popcount.asm	/^C Itanium 2:     1$/;"	l
C	mpn/ia64/popcount.asm	/^C Itanium:       1.5$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C  * Micro-optimize feed-in and wind-down code.$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C  * Rewrite function entry code using aorslsh1_n.asm style.$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C *** MAIN LOOP END ***$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C *** MAIN LOOP START ***$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C Itanium 2:  1.5$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C Itanium:    2.5$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C Some useful aliases for registers we use$/;"	l
C	mpn/ia64/rsh1aors_n.asm	/^C TODO$/;"	l
C	mpn/ia64/sec_tabselect.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/sec_tabselect.asm	/^C    code, for simplicity.)$/;"	l
C	mpn/ia64/sec_tabselect.asm	/^C    or 1+epsilon with unrolling.  (This code was modelled after the powerpc64$/;"	l
C	mpn/ia64/sec_tabselect.asm	/^C  * Using software pipelining could trivially yield 2 c\/l without unrolling,$/;"	l
C	mpn/ia64/sec_tabselect.asm	/^C Itanium 2:     2.5$/;"	l
C	mpn/ia64/sec_tabselect.asm	/^C Itanium:       ?$/;"	l
C	mpn/ia64/sec_tabselect.asm	/^C NOTES$/;"	l
C	mpn/ia64/sec_tabselect.asm	/^C mpn_sec_tabselect (mp_limb_t *rp, mp_limb_t *tp, mp_size_t n, mp_size_t nents, mp_size_t which)$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C           cycles\/limb$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C  * Make sure we don't depend on uninitialised r-registers, f-registers, or$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C  * Optimise by doing first two loop iterations in function header.$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C  * p-registers.$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C -  13  16  17  18  20  21  23  25  26  30  31  31  33  34  36  38  39  42  43$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C -  20  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50  52  54  56 Needs updating$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C Exact performance table.  The 2nd line is this code, the 3rd line is ctop-$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C Itanium 2:    2	Unrolling could bring it to 1.5 + epsilon$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C Itanium:      ?$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C TODO$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C We should keep in mind that this code takes linear time in a O(n^2) context$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C and that it will only be used under SQR_TOOM2_THRESHOLD, which might become$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C around 60.  Keeping overhead down for smallish operands (< 10) is more$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C few cycles better since we can mitigate the many I0 instructions.$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C important than optimal cycle counts.$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C less code.  In an assembly sqr_basecase, the ctop-full numbers will become a$/;"	l
C	mpn/ia64/sqr_diag_addlsh1.asm	/^C$/;"	l
C	mpn/ia64/submul_1.asm	/^C         cycles\/limb$/;"	l
C	mpn/ia64/submul_1.asm	/^C    2nd bundle.  This will allow the bbb bundle to be one cycle earlier and$/;"	l
C	mpn/ia64/submul_1.asm	/^C    epilogue.$/;"	l
C	mpn/ia64/submul_1.asm	/^C    save a cycle.$/;"	l
C	mpn/ia64/submul_1.asm	/^C  * Delay r8, r10 initialization, put cmp-p6 in 1st bundle and br .Ldone in$/;"	l
C	mpn/ia64/submul_1.asm	/^C  * Handle low limb input and results specially, using a common stf8 in the$/;"	l
C	mpn/ia64/submul_1.asm	/^C  * Optimize feed-in and wind-down code, both for speed and code size.$/;"	l
C	mpn/ia64/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/ia64/submul_1.asm	/^C Itanium 2:  2.25 (alignment dependent, sometimes it seems to need 3 c\/l)$/;"	l
C	mpn/ia64/submul_1.asm	/^C Itanium:    4.0$/;"	l
C	mpn/ia64/submul_1.asm	/^C TODO$/;"	l
C	mpn/m68k/aors_n.asm	/^C         cycles\/limb$/;"	l
C	mpn/m68k/aors_n.asm	/^C 68040:      6$/;"	l
C	mpn/m68k/aors_n.asm	/^C Copy the arguments to registers.  Better use movem?$/;"	l
C	mpn/m68k/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/m68k/aors_n.asm	/^C Restore used registers from stack frame.$/;"	l
C	mpn/m68k/aors_n.asm	/^C Save used registers on the stack.$/;"	l
C	mpn/m68k/aors_n.asm	/^C res_ptr	(sp + 4)$/;"	l
C	mpn/m68k/aors_n.asm	/^C s1_ptr	(sp + 8)$/;"	l
C	mpn/m68k/aors_n.asm	/^C s2_ptr	(sp + 12)$/;"	l
C	mpn/m68k/aors_n.asm	/^C size		(sp + 16)$/;"	l
C	mpn/m68k/lshift.asm	/^C                       unsigned cnt);$/;"	l
C	mpn/m68k/lshift.asm	/^C           cycles\/limb$/;"	l
C	mpn/m68k/lshift.asm	/^C        shift==1  shift>1$/;"	l
C	mpn/m68k/lshift.asm	/^C 68040:    5         12$/;"	l
C	mpn/m68k/lshift.asm	/^C Copy the arguments to registers.$/;"	l
C	mpn/m68k/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/m68k/lshift.asm	/^C Restore used registers from stack frame.$/;"	l
C	mpn/m68k/lshift.asm	/^C SIZEOF_UNSIGNED (see ABI notes in mpn\/m68k\/README).  The value is of$/;"	l
C	mpn/m68k/lshift.asm	/^C Save used registers on the stack.$/;"	l
C	mpn/m68k/lshift.asm	/^C The "cnt" parameter is either 16 bits or 32 bits depending on$/;"	l
C	mpn/m68k/lshift.asm	/^C We loop from least significant end of the arrays, which is only$/;"	l
C	mpn/m68k/lshift.asm	/^C cnt		(sp + 16)$/;"	l
C	mpn/m68k/lshift.asm	/^C course only 1 to 31.  When loaded as 16 bits there's garbage in the upper$/;"	l
C	mpn/m68k/lshift.asm	/^C function is documented to work for overlapping source and destination.$/;"	l
C	mpn/m68k/lshift.asm	/^C half, hence the use of cmpw.  The shift instructions take the their count$/;"	l
C	mpn/m68k/lshift.asm	/^C modulo 64, so the upper part doesn't matter to them either.$/;"	l
C	mpn/m68k/lshift.asm	/^C mp_limb_t mpn_lshift (mp_ptr res_ptr, mp_srcptr s_ptr, mp_size_t s_size,$/;"	l
C	mpn/m68k/lshift.asm	/^C permissable if the source and destination don't overlap, since the$/;"	l
C	mpn/m68k/lshift.asm	/^C res_ptr	(sp + 4)$/;"	l
C	mpn/m68k/lshift.asm	/^C s_ptr		(sp + 8)$/;"	l
C	mpn/m68k/lshift.asm	/^C s_size	(sp + 12)$/;"	l
C	mpn/m68k/lshift.asm	/^C$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C         cycles\/limb$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C 68040:     25$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C Copy the arguments to registers.  Better use movem?$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C Restore used registers from stack frame.$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C Save used registers on the stack.$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C res_ptr	(sp + 4)$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C s1_ptr	(sp + 8)$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C s1_size	(sp + 12)$/;"	l
C	mpn/m68k/mc68020/aorsmul_1.asm	/^C s2_limb	(sp + 16)$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C	movel	M(sp,+),d2$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C	movel	M(sp,+),d3$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C	movel	M(sp,+),d4$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C	movel	d2, M(-,sp)$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C	movel	d3, M(-,sp)$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C	movel	d4, M(-,sp)$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C         cycles\/limb$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C 68040:     24$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C Copy the arguments to registers.  Better use movem?$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C Restore used registers from stack frame.$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C Save used registers on the stack.$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C res_ptr	(sp + 4)$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C s1_ptr	(sp + 8)$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C s1_size	(sp + 12)$/;"	l
C	mpn/m68k/mc68020/mul_1.asm	/^C s2_limb	(sp + 16)$/;"	l
C	mpn/m68k/mc68020/udiv.asm	/^C                           mp_limb_t nh, mp_limb_t nl, mp_limb_t d);$/;"	l
C	mpn/m68k/mc68020/udiv.asm	/^C mp_limb_t mpn_udiv_qrnnd (mp_limb_t *rp,$/;"	l
C	mpn/m68k/mc68020/udiv.asm	/^C$/;"	l
C	mpn/m68k/mc68020/umul.asm	/^C mp_limb_t mpn_umul_ppmm (mp_limb_t *lp, mp_limb_t x, mp_limb_t y);$/;"	l
C	mpn/m68k/mc68020/umul.asm	/^C$/;"	l
C	mpn/m68k/rshift.asm	/^C                       unsigned cnt);$/;"	l
C	mpn/m68k/rshift.asm	/^C           cycles\/limb$/;"	l
C	mpn/m68k/rshift.asm	/^C        shift==1  shift>1$/;"	l
C	mpn/m68k/rshift.asm	/^C 68040:    9         12$/;"	l
C	mpn/m68k/rshift.asm	/^C Copy the arguments to registers.$/;"	l
C	mpn/m68k/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/m68k/rshift.asm	/^C Restore used registers from stack frame.$/;"	l
C	mpn/m68k/rshift.asm	/^C SIZEOF_UNSIGNED (see ABI notes in mpn\/m68k\/README).  The value is of$/;"	l
C	mpn/m68k/rshift.asm	/^C Save used registers on the stack.$/;"	l
C	mpn/m68k/rshift.asm	/^C The "cnt" parameter is either 16 bits or 32 bits depending on$/;"	l
C	mpn/m68k/rshift.asm	/^C We loop from most significant end of the arrays, which is only permissable$/;"	l
C	mpn/m68k/rshift.asm	/^C cnt		(sp + 16)$/;"	l
C	mpn/m68k/rshift.asm	/^C course only 1 to 31.  When loaded as 16 bits there's garbage in the upper$/;"	l
C	mpn/m68k/rshift.asm	/^C documented to work for overlapping source and destination.$/;"	l
C	mpn/m68k/rshift.asm	/^C half, hence the use of cmpw.  The shift instructions take the their count$/;"	l
C	mpn/m68k/rshift.asm	/^C if the source and destination don't overlap, since the function is$/;"	l
C	mpn/m68k/rshift.asm	/^C modulo 64, so the upper part doesn't matter to them either.$/;"	l
C	mpn/m68k/rshift.asm	/^C mp_limb_t mpn_rshift (mp_ptr res_ptr, mp_srcptr s_ptr, mp_size_t s_size,$/;"	l
C	mpn/m68k/rshift.asm	/^C res_ptr	(sp + 4)$/;"	l
C	mpn/m68k/rshift.asm	/^C s_ptr		(sp + 8)$/;"	l
C	mpn/m68k/rshift.asm	/^C s_size	(sp + 12)$/;"	l
C	mpn/m68k/rshift.asm	/^C$/;"	l
C	mpn/mips32/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips32/add_n.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips32/add_n.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips32/add_n.asm	/^C s2_ptr	$6$/;"	l
C	mpn/mips32/add_n.asm	/^C size		$7$/;"	l
C	mpn/mips32/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips32/addmul_1.asm	/^C feed-in phase 0$/;"	l
C	mpn/mips32/addmul_1.asm	/^C feed-in phase 1$/;"	l
C	mpn/mips32/addmul_1.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips32/addmul_1.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips32/addmul_1.asm	/^C s2_limb	$7$/;"	l
C	mpn/mips32/addmul_1.asm	/^C size		$6$/;"	l
C	mpn/mips32/addmul_1.asm	/^C wind-down phase 0$/;"	l
C	mpn/mips32/addmul_1.asm	/^C wind-down phase 1$/;"	l
C	mpn/mips32/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips32/lshift.asm	/^C cnt		$7$/;"	l
C	mpn/mips32/lshift.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips32/lshift.asm	/^C size		$6$/;"	l
C	mpn/mips32/lshift.asm	/^C src_ptr	$5$/;"	l
C	mpn/mips32/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips32/mul_1.asm	/^C feed-in phase 0$/;"	l
C	mpn/mips32/mul_1.asm	/^C feed-in phase 1$/;"	l
C	mpn/mips32/mul_1.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips32/mul_1.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips32/mul_1.asm	/^C s2_limb	$7$/;"	l
C	mpn/mips32/mul_1.asm	/^C size		$6$/;"	l
C	mpn/mips32/mul_1.asm	/^C wind-down phase 0$/;"	l
C	mpn/mips32/mul_1.asm	/^C wind-down phase 1$/;"	l
C	mpn/mips32/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips32/rshift.asm	/^C cnt		$7$/;"	l
C	mpn/mips32/rshift.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips32/rshift.asm	/^C size		$6$/;"	l
C	mpn/mips32/rshift.asm	/^C src_ptr	$5$/;"	l
C	mpn/mips32/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips32/sub_n.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips32/sub_n.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips32/sub_n.asm	/^C s2_ptr	$6$/;"	l
C	mpn/mips32/sub_n.asm	/^C size		$7$/;"	l
C	mpn/mips32/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips32/submul_1.asm	/^C feed-in phase 0$/;"	l
C	mpn/mips32/submul_1.asm	/^C feed-in phase 1$/;"	l
C	mpn/mips32/submul_1.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips32/submul_1.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips32/submul_1.asm	/^C s2_limb	$7$/;"	l
C	mpn/mips32/submul_1.asm	/^C size		$6$/;"	l
C	mpn/mips32/submul_1.asm	/^C wind-down phase 0$/;"	l
C	mpn/mips32/submul_1.asm	/^C wind-down phase 1$/;"	l
C	mpn/mips32/umul.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips32/umul.asm	/^C plp   $4$/;"	l
C	mpn/mips32/umul.asm	/^C u     $5$/;"	l
C	mpn/mips32/umul.asm	/^C v     $6$/;"	l
C	mpn/mips64/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips64/add_n.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips64/add_n.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips64/add_n.asm	/^C s2_ptr	$6$/;"	l
C	mpn/mips64/add_n.asm	/^C size		$7$/;"	l
C	mpn/mips64/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips64/addmul_1.asm	/^C feed-in phase 0$/;"	l
C	mpn/mips64/addmul_1.asm	/^C feed-in phase 1$/;"	l
C	mpn/mips64/addmul_1.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips64/addmul_1.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips64/addmul_1.asm	/^C s2_limb	$7$/;"	l
C	mpn/mips64/addmul_1.asm	/^C size		$6$/;"	l
C	mpn/mips64/addmul_1.asm	/^C wind-down phase 0$/;"	l
C	mpn/mips64/addmul_1.asm	/^C wind-down phase 1$/;"	l
C	mpn/mips64/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips64/lshift.asm	/^C cnt		$7$/;"	l
C	mpn/mips64/lshift.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips64/lshift.asm	/^C size		$6$/;"	l
C	mpn/mips64/lshift.asm	/^C src_ptr	$5$/;"	l
C	mpn/mips64/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips64/mul_1.asm	/^C feed-in phase 0$/;"	l
C	mpn/mips64/mul_1.asm	/^C feed-in phase 1$/;"	l
C	mpn/mips64/mul_1.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips64/mul_1.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips64/mul_1.asm	/^C s2_limb	$7$/;"	l
C	mpn/mips64/mul_1.asm	/^C size		$6$/;"	l
C	mpn/mips64/mul_1.asm	/^C wind-down phase 0$/;"	l
C	mpn/mips64/mul_1.asm	/^C wind-down phase 1$/;"	l
C	mpn/mips64/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips64/rshift.asm	/^C cnt		$7$/;"	l
C	mpn/mips64/rshift.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips64/rshift.asm	/^C size		$6$/;"	l
C	mpn/mips64/rshift.asm	/^C src_ptr	$5$/;"	l
C	mpn/mips64/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips64/sub_n.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips64/sub_n.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips64/sub_n.asm	/^C s2_ptr	$6$/;"	l
C	mpn/mips64/sub_n.asm	/^C size		$7$/;"	l
C	mpn/mips64/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips64/submul_1.asm	/^C feed-in phase 0$/;"	l
C	mpn/mips64/submul_1.asm	/^C feed-in phase 1$/;"	l
C	mpn/mips64/submul_1.asm	/^C res_ptr	$4$/;"	l
C	mpn/mips64/submul_1.asm	/^C s1_ptr	$5$/;"	l
C	mpn/mips64/submul_1.asm	/^C s2_limb	$7$/;"	l
C	mpn/mips64/submul_1.asm	/^C size		$6$/;"	l
C	mpn/mips64/submul_1.asm	/^C wind-down phase 0$/;"	l
C	mpn/mips64/submul_1.asm	/^C wind-down phase 1$/;"	l
C	mpn/mips64/umul.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/mips64/umul.asm	/^C plp   $4$/;"	l
C	mpn/mips64/umul.asm	/^C u     $5$/;"	l
C	mpn/mips64/umul.asm	/^C v     $6$/;"	l
C	mpn/pa32/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/add_n.asm	/^C One might want to unroll this as for other processors, but it turns out that$/;"	l
C	mpn/pa32/add_n.asm	/^C can't come under 5 cycles\/limb anyway.$/;"	l
C	mpn/pa32/add_n.asm	/^C res_ptr	gr26$/;"	l
C	mpn/pa32/add_n.asm	/^C s1_ptr	gr25$/;"	l
C	mpn/pa32/add_n.asm	/^C s2_ptr	gr24$/;"	l
C	mpn/pa32/add_n.asm	/^C size		gr23$/;"	l
C	mpn/pa32/add_n.asm	/^C the data cache contention after a store makes such unrolling useless.  We$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C	.callinfo	frame=64,no_calls$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C Main loop$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C There are some ideas described in mul_1.asm that applies to this code too.$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C This runs at 11 cycles\/limb on a PA7000.  With the used instructions, it can$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C it runs at 10 cycles\/limb.$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C not become faster due to data cache contention after a store.  On the PA7100$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C res_ptr	r26$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C s1_ptr	r25$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C s2_limb	r23$/;"	l
C	mpn/pa32/hppa1_1/addmul_1.asm	/^C size		r24$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C	.callinfo	frame=64,no_calls$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C (alignment) troubles...$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C At least the PA7100 is rumored to be able to deal with cache-misses without$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C Main loop$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C PA7100, respectively.  We don't do that since it does not seem worth the$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C This runs at 9 cycles\/limb on a PA7000.  With the used instructions, it can$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C We could use fldds to read two limbs at a time from the S1 array, and that$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C could bring down the times to 8.5 and 6.5 cycles\/limb for the PA7000 and$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C early!  (The loads and stores to -12(sp) will surely be in the cache.)$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C it runs at 7 cycles\/limb.$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C lockup-free, we should use a deeper software pipeline, and load from S1 very$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C not become faster due to data cache contention after a store.  On the PA7100$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C res_ptr	r26$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C s1_ptr	r25$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C s2_limb	r23$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C size		r24$/;"	l
C	mpn/pa32/hppa1_1/mul_1.asm	/^C stalling instruction issue.  If this is true, and the cache is actually also$/;"	l
C	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^C res_ptr	r26$/;"	l
C	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^C s1_ptr	r25$/;"	l
C	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^C s2_ptr	r24$/;"	l
C	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^C size		r23$/;"	l
C	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^C	.callinfo	frame=128,no_calls$/;"	l
C	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^C finish software pipeline ---------------------------------------------------$/;"	l
C	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^C main loop ------------------------------------------------------------------$/;"	l
C	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^C restore callee-saves registers ---------------------------------------------$/;"	l
C	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^C start software pipeline ----------------------------------------------------$/;"	l
C	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^C cnt		r23$/;"	l
C	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^C res_ptr	r26$/;"	l
C	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^C s_ptr		r25$/;"	l
C	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^C size		r24$/;"	l
C	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^C cnt		r23$/;"	l
C	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^C res_ptr	r26$/;"	l
C	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^C s_ptr		r25$/;"	l
C	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^C size		r24$/;"	l
C	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^C res_ptr	r26$/;"	l
C	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^C s1_ptr	r25$/;"	l
C	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^C s2_ptr	r24$/;"	l
C	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^C size		r23$/;"	l
C	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^C	.callinfo	frame=128,no_calls$/;"	l
C	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^C finish software pipeline ---------------------------------------------------$/;"	l
C	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^C main loop ------------------------------------------------------------------$/;"	l
C	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^C restore callee-saves registers ---------------------------------------------$/;"	l
C	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^C start software pipeline ----------------------------------------------------$/;"	l
C	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^C 2-way unrolling wouldn't help the PA7100; it could however bring times down$/;"	l
C	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^C This code runs at 6 cycles\/limb on the PA7100 and 2.5 cycles\/limb on PA8x00.$/;"	l
C	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^C to 2.0 cycles\/limb for the PA8x00.$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C	.callinfo	frame=64,no_calls$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C	addi	1,%r28,%r28$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C	sub,>>=	%r29,%r19,%r22$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C It seems possible to make this run as fast as mpn_addmul_1, if we use$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C Main loop$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C There are some ideas described in mul_1.asm that applies to this code too.$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C This runs at 12 cycles\/limb on a PA7000.  With the used instructions, it can$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C but that requires reworking the hairy software pipeline...$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C it runs at 11 cycles\/limb.$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C not become faster due to data cache contention after a store.  On the PA7100$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C res_ptr	r26$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C s1_ptr	r25$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C s2_limb	r23$/;"	l
C	mpn/pa32/hppa1_1/submul_1.asm	/^C size		r24$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C	.callinfo	frame=64,no_calls$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C 2.11.2).  When the bug is triggered, many bogus relocs are generated.  The$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C This file has caused a lot of trouble, since it demands PIC reference to$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C absolute offsets.  Fragile to be sure, but nothing else seems to work.$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C current solution is to stuff data right into the code, and refer it using$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C d		gr23$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C n0		gr24$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C n1		gr25$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C rem_ptr	gr26$/;"	l
C	mpn/pa32/hppa1_1/udiv.asm	/^C static data, which triggers bugs in gas (at least version 2.7 through$/;"	l
C	mpn/pa32/hppa1_1/umul.asm	/^C	.callinfo frame=64,no_calls$/;"	l
C	mpn/pa32/hppa2_0/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa2_0/add_n.asm	/^C This runs at 2 cycles\/limb on PA8000.$/;"	l
C	mpn/pa32/hppa2_0/add_n.asm	/^C res_ptr	gr26$/;"	l
C	mpn/pa32/hppa2_0/add_n.asm	/^C s1_ptr	gr25$/;"	l
C	mpn/pa32/hppa2_0/add_n.asm	/^C s2_ptr	gr24$/;"	l
C	mpn/pa32/hppa2_0/add_n.asm	/^C size		gr23$/;"	l
C	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^C The 2-way unrolling is actually not helping the PA7100.$/;"	l
C	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^C This code runs at 6 cycles\/limb on the PA7100 and 2 cycles\/limb on PA8x00.$/;"	l
C	mpn/pa32/hppa2_0/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/hppa2_0/sub_n.asm	/^C This runs at 2 cycles\/limb on PA8000.$/;"	l
C	mpn/pa32/hppa2_0/sub_n.asm	/^C res_ptr	gr26$/;"	l
C	mpn/pa32/hppa2_0/sub_n.asm	/^C s1_ptr	gr25$/;"	l
C	mpn/pa32/hppa2_0/sub_n.asm	/^C s2_ptr	gr24$/;"	l
C	mpn/pa32/hppa2_0/sub_n.asm	/^C size		gr23$/;"	l
C	mpn/pa32/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/lshift.asm	/^C cnt		gr23$/;"	l
C	mpn/pa32/lshift.asm	/^C res_ptr	gr26$/;"	l
C	mpn/pa32/lshift.asm	/^C s_ptr		gr25$/;"	l
C	mpn/pa32/lshift.asm	/^C size		gr24$/;"	l
C	mpn/pa32/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/rshift.asm	/^C cnt		gr23$/;"	l
C	mpn/pa32/rshift.asm	/^C res_ptr	gr26$/;"	l
C	mpn/pa32/rshift.asm	/^C s_ptr		gr25$/;"	l
C	mpn/pa32/rshift.asm	/^C size		gr24$/;"	l
C	mpn/pa32/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/sub_n.asm	/^C One might want to unroll this as for other processors, but it turns out that$/;"	l
C	mpn/pa32/sub_n.asm	/^C can't come under 5 cycles\/limb anyway.$/;"	l
C	mpn/pa32/sub_n.asm	/^C res_ptr	gr26$/;"	l
C	mpn/pa32/sub_n.asm	/^C s1_ptr	gr25$/;"	l
C	mpn/pa32/sub_n.asm	/^C s2_ptr	gr24$/;"	l
C	mpn/pa32/sub_n.asm	/^C size		gr23$/;"	l
C	mpn/pa32/sub_n.asm	/^C the data cache contention after a store makes such unrolling useless.  We$/;"	l
C	mpn/pa32/udiv.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa32/udiv.asm	/^C The code size is a bit excessive.  We could merge the last two ds;addc$/;"	l
C	mpn/pa32/udiv.asm	/^C This is just a special case of the code above.$/;"	l
C	mpn/pa32/udiv.asm	/^C We come here when d == 0xFFFFFFFF$/;"	l
C	mpn/pa32/udiv.asm	/^C We have computed (n1,,n0) \/ (d + 1), q' = r28, r' = r25$/;"	l
C	mpn/pa32/udiv.asm	/^C d		gr23$/;"	l
C	mpn/pa32/udiv.asm	/^C n0		gr24$/;"	l
C	mpn/pa32/udiv.asm	/^C n1		gr25$/;"	l
C	mpn/pa32/udiv.asm	/^C rem_ptr	gr26$/;"	l
C	mpn/pa32/udiv.asm	/^C sequences by simply moving the "bb,< Odd" instruction down.  The only$/;"	l
C	mpn/pa32/udiv.asm	/^C trouble is the FFFFFFFF code that would need some hacking.$/;"	l
C	mpn/pa64/addmul_1.asm	/^C		    cycles\/limb$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	add		climb, p000a, s000$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	add		ma000, s000, s000$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	add		p032a1, p032a2, m032$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	add		r000, s000, s000$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	add,dc		%r0, %r0, m096$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	add,dc		%r0, climb, climb$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	add,dc		ma064, climb, climb$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	add,dc		p064a, %r0, climb$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	addib,<>	-1, %r5, L(loop0)$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	addib,=		-1, %r5, L(0_out)$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	depd		m096, 31, 32, ma064$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	depd,z		m032, 31, 32, ma000$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	extrd,u		m032, 31, 32, ma064$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	fldd		0(up), %fr4$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	fstd		%fr22, -0x78(%r30)	C mid product to  -0x78..-0x71$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	fstd		%fr23, -0x70(%r30)	C mid product to  -0x70..-0x69$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	fstd		%fr24, -0x80(%r30)	C low product to  -0x80..-0x79$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	fstd		%fr25, -0x68(%r30)	C high product to -0x68..-0x61$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	ldd		-0x68(%r30), p064a$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	ldd		-0x70(%r30), p032a2$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	ldd		-0x78(%r30), p032a1$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	ldd		-0x80(%r30), p000a$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	ldd		0(rp), r000$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	ldo		8(rp), rp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	ldo		8(up), up$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	std		s000, -8(rp)$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	xmpyu		%fr8L, %fr4L, %fr25$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	xmpyu		%fr8L, %fr4R, %fr23$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	xmpyu		%fr8R, %fr4L, %fr22$/;"	l
C	mpn/pa64/addmul_1.asm	/^C	xmpyu		%fr8R, %fr4R, %fr24$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  CODE STRUCTURE:$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  DESCRIPTION:$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  HP-PA stack grows upwards.  We could allocate 8 fewer slots by using the$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  Previous frame:$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  STACK LAYOUT:$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  The feed-in and wind-down code has not yet been scheduled.  Many cycles$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  The main loop "BIG" is 4-way unrolled, mainly to allow$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  [unused area]$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  a lot of stack slots for partial products in flight.$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  could be saved there per call.$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  do 0, 1, 2, or 3 limbs$/;"	d
C	mpn/pa64/addmul_1.asm	/^C  do 4, 8, ... limb$/;"	d
C	mpn/pa64/addmul_1.asm	/^C  effective use of ADD,DC.  Delays in moving data via the cache from the FP$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  if done, restore-some-regs and return$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  registers to the IU registers, have demanded a deep software pipeline, and$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  restore-all-regs$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  save-many-regs$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  save-some-registers$/;"	l
C	mpn/pa64/addmul_1.asm	/^C  slots marked FREE, as well as some slots in the caller's "frame marker".$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -00 <- r30$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -08  FREE$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -10  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -100 r3$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -18  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -20  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -28  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -30  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -38  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -38\/-138 vlimb home slot.  For 2.0N, the vlimb arg will arrive here.$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -40  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -48  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -50  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -58  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -60  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -68  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -70  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -78  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -80  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -88  tmp$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -90  FREE$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -98  FREE$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -a0  FREE$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -a8  FREE$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -b0  r13$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -b8  r12$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -c0  r11$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -c8  r10$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -d0  r8$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -d8  r8$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -e0  r7$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -e8  r6$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -f0  r5$/;"	l
C	mpn/pa64/addmul_1.asm	/^C -f8  r4$/;"	l
C	mpn/pa64/addmul_1.asm	/^C 4-way unrolled code.$/;"	l
C	mpn/pa64/addmul_1.asm	/^C 8000,8200:		7$/;"	l
C	mpn/pa64/addmul_1.asm	/^C 8500,8600,8700:	6.375$/;"	l
C	mpn/pa64/addmul_1.asm	/^C INPUT PARAMETERS:$/;"	l
C	mpn/pa64/addmul_1.asm	/^C$/;"	l
C	mpn/pa64/aorslsh1_n.asm	/^C		    cycles\/limb$/;"	l
C	mpn/pa64/aorslsh1_n.asm	/^C  * Explicitly align loop.$/;"	l
C	mpn/pa64/aorslsh1_n.asm	/^C  * Set up register aliases (define(`u0',`%r19')).$/;"	l
C	mpn/pa64/aorslsh1_n.asm	/^C  * Try to make this run at closer to 1.5 c\/l.$/;"	l
C	mpn/pa64/aorslsh1_n.asm	/^C  * Write special feed-in code for each (n mod 8). (See the ia64 code.)$/;"	l
C	mpn/pa64/aorslsh1_n.asm	/^C 8000,8200:		2$/;"	l
C	mpn/pa64/aorslsh1_n.asm	/^C 8500,8600,8700:	1.75$/;"	l
C	mpn/pa64/aorslsh1_n.asm	/^C Primitive code for the first (n mod 8) limbs:$/;"	l
C	mpn/pa64/aorslsh1_n.asm	/^C TODO$/;"	l
C	mpn/pa64/mul_1.asm	/^C		    cycles\/limb$/;"	l
C	mpn/pa64/mul_1.asm	/^C	add		climb, p000a, s000$/;"	l
C	mpn/pa64/mul_1.asm	/^C	add		ma000, s000, s000$/;"	l
C	mpn/pa64/mul_1.asm	/^C	add		p032a1, p032a2, m032$/;"	l
C	mpn/pa64/mul_1.asm	/^C	add,dc		%r0, %r0, m096$/;"	l
C	mpn/pa64/mul_1.asm	/^C	add,dc		ma064, climb, climb$/;"	l
C	mpn/pa64/mul_1.asm	/^C	add,dc		p064a, %r0, climb$/;"	l
C	mpn/pa64/mul_1.asm	/^C	addib,<>	-1, %r5, L(loop0)$/;"	l
C	mpn/pa64/mul_1.asm	/^C	addib,=		-1, %r5, L(0_out)$/;"	l
C	mpn/pa64/mul_1.asm	/^C	depd		m096, 31, 32, ma064$/;"	l
C	mpn/pa64/mul_1.asm	/^C	depd,z		m032, 31, 32, ma000$/;"	l
C	mpn/pa64/mul_1.asm	/^C	extrd,u		m032, 31, 32, ma064$/;"	l
C	mpn/pa64/mul_1.asm	/^C	fldd		0(up), %fr4$/;"	l
C	mpn/pa64/mul_1.asm	/^C	fstd		%fr22, -0x78(%r30)	C mid product to  -0x78..-0x71$/;"	l
C	mpn/pa64/mul_1.asm	/^C	fstd		%fr23, -0x70(%r30)	C mid product to  -0x70..-0x69$/;"	l
C	mpn/pa64/mul_1.asm	/^C	fstd		%fr24, -0x80(%r30)	C low product to  -0x80..-0x79$/;"	l
C	mpn/pa64/mul_1.asm	/^C	fstd		%fr25, -0x68(%r30)	C high product to -0x68..-0x61$/;"	l
C	mpn/pa64/mul_1.asm	/^C	ldd		-0x68(%r30), p064a$/;"	l
C	mpn/pa64/mul_1.asm	/^C	ldd		-0x70(%r30), p032a2$/;"	l
C	mpn/pa64/mul_1.asm	/^C	ldd		-0x78(%r30), p032a1$/;"	l
C	mpn/pa64/mul_1.asm	/^C	ldd		-0x80(%r30), p000a$/;"	l
C	mpn/pa64/mul_1.asm	/^C	ldo		8(rp), rp$/;"	l
C	mpn/pa64/mul_1.asm	/^C	ldo		8(up), up$/;"	l
C	mpn/pa64/mul_1.asm	/^C	std		s000, -8(rp)$/;"	l
C	mpn/pa64/mul_1.asm	/^C	xmpyu		%fr8L, %fr4L, %fr25$/;"	l
C	mpn/pa64/mul_1.asm	/^C	xmpyu		%fr8L, %fr4R, %fr23$/;"	l
C	mpn/pa64/mul_1.asm	/^C	xmpyu		%fr8R, %fr4L, %fr22$/;"	l
C	mpn/pa64/mul_1.asm	/^C	xmpyu		%fr8R, %fr4R, %fr24$/;"	l
C	mpn/pa64/mul_1.asm	/^C  CODE STRUCTURE:$/;"	l
C	mpn/pa64/mul_1.asm	/^C  DESCRIPTION:$/;"	l
C	mpn/pa64/mul_1.asm	/^C  HP-PA stack grows upwards.  We could allocate 8 fewer slots by using the$/;"	l
C	mpn/pa64/mul_1.asm	/^C  Previous frame:$/;"	l
C	mpn/pa64/mul_1.asm	/^C  STACK LAYOUT:$/;"	l
C	mpn/pa64/mul_1.asm	/^C  The feed-in and wind-down code has not yet been scheduled.  Many cycles$/;"	l
C	mpn/pa64/mul_1.asm	/^C  The main loop "BIG" is 4-way unrolled, mainly to allow$/;"	l
C	mpn/pa64/mul_1.asm	/^C  [unused area]$/;"	l
C	mpn/pa64/mul_1.asm	/^C  a lot of stack slots for partial products in flight.$/;"	l
C	mpn/pa64/mul_1.asm	/^C  could be saved there per call.$/;"	l
C	mpn/pa64/mul_1.asm	/^C  do 0, 1, 2, or 3 limbs$/;"	d
C	mpn/pa64/mul_1.asm	/^C  do 4, 8, ... limb$/;"	d
C	mpn/pa64/mul_1.asm	/^C  effective use of ADD,DC.  Delays in moving data via the cache from the FP$/;"	l
C	mpn/pa64/mul_1.asm	/^C  if done, restore-some-regs and return$/;"	l
C	mpn/pa64/mul_1.asm	/^C  registers to the IU registers, have demanded a deep software pipeline, and$/;"	l
C	mpn/pa64/mul_1.asm	/^C  restore-all-regs$/;"	l
C	mpn/pa64/mul_1.asm	/^C  save-many-regs$/;"	l
C	mpn/pa64/mul_1.asm	/^C  save-some-registers$/;"	l
C	mpn/pa64/mul_1.asm	/^C  slots marked FREE, as well as some slots in the caller's "frame marker".$/;"	l
C	mpn/pa64/mul_1.asm	/^C -00 <- r30$/;"	l
C	mpn/pa64/mul_1.asm	/^C -08  FREE$/;"	l
C	mpn/pa64/mul_1.asm	/^C -10  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -100 r3$/;"	l
C	mpn/pa64/mul_1.asm	/^C -18  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -20  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -28  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -30  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -38  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -38\/-138 vlimb home slot.  For 2.0N, the vlimb arg will arrive here.$/;"	l
C	mpn/pa64/mul_1.asm	/^C -40  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -48  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -50  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -58  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -60  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -68  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -70  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -78  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -80  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -88  tmp$/;"	l
C	mpn/pa64/mul_1.asm	/^C -90  FREE$/;"	l
C	mpn/pa64/mul_1.asm	/^C -98  FREE$/;"	l
C	mpn/pa64/mul_1.asm	/^C -a0  FREE$/;"	l
C	mpn/pa64/mul_1.asm	/^C -a8  FREE$/;"	l
C	mpn/pa64/mul_1.asm	/^C -b0  r13$/;"	l
C	mpn/pa64/mul_1.asm	/^C -b8  r12$/;"	l
C	mpn/pa64/mul_1.asm	/^C -c0  r11$/;"	l
C	mpn/pa64/mul_1.asm	/^C -c8  r10$/;"	l
C	mpn/pa64/mul_1.asm	/^C -d0  r8$/;"	l
C	mpn/pa64/mul_1.asm	/^C -d8  r8$/;"	l
C	mpn/pa64/mul_1.asm	/^C -e0  r7$/;"	l
C	mpn/pa64/mul_1.asm	/^C -e8  r6$/;"	l
C	mpn/pa64/mul_1.asm	/^C -f0  r5$/;"	l
C	mpn/pa64/mul_1.asm	/^C -f8  r4$/;"	l
C	mpn/pa64/mul_1.asm	/^C 4-way unrolled code.$/;"	l
C	mpn/pa64/mul_1.asm	/^C 8000,8200:		6.5$/;"	l
C	mpn/pa64/mul_1.asm	/^C 8500,8600,8700:	5.625$/;"	l
C	mpn/pa64/mul_1.asm	/^C INPUT PARAMETERS:$/;"	l
C	mpn/pa64/mul_1.asm	/^C define(`r000',`%r3')	C	FIXME don't save r3 for n < 4.$/;"	l
C	mpn/pa64/mul_1.asm	/^C$/;"	l
C	mpn/pa64/sqr_diagonal.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa64/submul_1.asm	/^C		    cycles\/limb$/;"	l
C	mpn/pa64/submul_1.asm	/^C	add		climb, p000a, s000$/;"	l
C	mpn/pa64/submul_1.asm	/^C	add		ma000, s000, s000$/;"	l
C	mpn/pa64/submul_1.asm	/^C	add		p032a1, p032a2, m032$/;"	l
C	mpn/pa64/submul_1.asm	/^C	add,dc		%r0, %r0, m096$/;"	l
C	mpn/pa64/submul_1.asm	/^C	add,dc		ma064, climb, climb$/;"	l
C	mpn/pa64/submul_1.asm	/^C	add,dc		p064a, %r0, climb$/;"	l
C	mpn/pa64/submul_1.asm	/^C	addib,<>	-1, %r5, L(loop0)$/;"	l
C	mpn/pa64/submul_1.asm	/^C	addib,=		-1, %r5, L(0_out)$/;"	l
C	mpn/pa64/submul_1.asm	/^C	depd		m096, 31, 32, ma064$/;"	l
C	mpn/pa64/submul_1.asm	/^C	depd,z		m032, 31, 32, ma000$/;"	l
C	mpn/pa64/submul_1.asm	/^C	extrd,u		m032, 31, 32, ma064$/;"	l
C	mpn/pa64/submul_1.asm	/^C	fldd		0(up), %fr4$/;"	l
C	mpn/pa64/submul_1.asm	/^C	fstd		%fr22, -0x78(%r30)	C mid product to  -0x78..-0x71$/;"	l
C	mpn/pa64/submul_1.asm	/^C	fstd		%fr23, -0x70(%r30)	C mid product to  -0x70..-0x69$/;"	l
C	mpn/pa64/submul_1.asm	/^C	fstd		%fr24, -0x80(%r30)	C low product to  -0x80..-0x79$/;"	l
C	mpn/pa64/submul_1.asm	/^C	fstd		%fr25, -0x68(%r30)	C high product to -0x68..-0x61$/;"	l
C	mpn/pa64/submul_1.asm	/^C	ldd		-0x68(%r30), p064a$/;"	l
C	mpn/pa64/submul_1.asm	/^C	ldd		-0x70(%r30), p032a2$/;"	l
C	mpn/pa64/submul_1.asm	/^C	ldd		-0x78(%r30), p032a1$/;"	l
C	mpn/pa64/submul_1.asm	/^C	ldd		-0x80(%r30), p000a$/;"	l
C	mpn/pa64/submul_1.asm	/^C	ldd		0(rp), r000$/;"	l
C	mpn/pa64/submul_1.asm	/^C	ldo		8(rp), rp$/;"	l
C	mpn/pa64/submul_1.asm	/^C	ldo		8(up), up$/;"	l
C	mpn/pa64/submul_1.asm	/^C	std		s000, -8(rp)$/;"	l
C	mpn/pa64/submul_1.asm	/^C	sub		%r0, climb, climb$/;"	l
C	mpn/pa64/submul_1.asm	/^C	sub		r000, s000, s000$/;"	l
C	mpn/pa64/submul_1.asm	/^C	sub,db		%r0, climb, climb$/;"	l
C	mpn/pa64/submul_1.asm	/^C	xmpyu		%fr8L, %fr4L, %fr25$/;"	l
C	mpn/pa64/submul_1.asm	/^C	xmpyu		%fr8L, %fr4R, %fr23$/;"	l
C	mpn/pa64/submul_1.asm	/^C	xmpyu		%fr8R, %fr4L, %fr22$/;"	l
C	mpn/pa64/submul_1.asm	/^C	xmpyu		%fr8R, %fr4R, %fr24$/;"	l
C	mpn/pa64/submul_1.asm	/^C  CODE STRUCTURE:$/;"	l
C	mpn/pa64/submul_1.asm	/^C  DESCRIPTION:$/;"	l
C	mpn/pa64/submul_1.asm	/^C  HP-PA stack grows upwards.  We could allocate 8 fewer slots by using the$/;"	l
C	mpn/pa64/submul_1.asm	/^C  Previous frame:$/;"	l
C	mpn/pa64/submul_1.asm	/^C  STACK LAYOUT:$/;"	l
C	mpn/pa64/submul_1.asm	/^C  The feed-in and wind-down code has not yet been scheduled.  Many cycles$/;"	l
C	mpn/pa64/submul_1.asm	/^C  The main loop "BIG" is 4-way unrolled, mainly to allow$/;"	l
C	mpn/pa64/submul_1.asm	/^C  [unused area]$/;"	l
C	mpn/pa64/submul_1.asm	/^C  a lot of stack slots for partial products in flight.$/;"	l
C	mpn/pa64/submul_1.asm	/^C  could be saved there per call.$/;"	l
C	mpn/pa64/submul_1.asm	/^C  do 0, 1, 2, or 3 limbs$/;"	d
C	mpn/pa64/submul_1.asm	/^C  do 4, 8, ... limb$/;"	d
C	mpn/pa64/submul_1.asm	/^C  effective use of ADD,DC.  Delays in moving data via the cache from the FP$/;"	l
C	mpn/pa64/submul_1.asm	/^C  if done, restore-some-regs and return$/;"	l
C	mpn/pa64/submul_1.asm	/^C  registers to the IU registers, have demanded a deep software pipeline, and$/;"	l
C	mpn/pa64/submul_1.asm	/^C  restore-all-regs$/;"	l
C	mpn/pa64/submul_1.asm	/^C  save-many-regs$/;"	l
C	mpn/pa64/submul_1.asm	/^C  save-some-registers$/;"	l
C	mpn/pa64/submul_1.asm	/^C  slots marked FREE, as well as some slots in the caller's "frame marker".$/;"	l
C	mpn/pa64/submul_1.asm	/^C -00 <- r30$/;"	l
C	mpn/pa64/submul_1.asm	/^C -08  FREE$/;"	l
C	mpn/pa64/submul_1.asm	/^C -10  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -100 r3$/;"	l
C	mpn/pa64/submul_1.asm	/^C -18  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -20  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -28  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -30  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -38  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -38\/-138 vlimb home slot.  For 2.0N, the vlimb arg will arrive here.$/;"	l
C	mpn/pa64/submul_1.asm	/^C -40  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -48  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -50  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -58  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -60  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -68  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -70  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -78  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -80  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -88  tmp$/;"	l
C	mpn/pa64/submul_1.asm	/^C -90  FREE$/;"	l
C	mpn/pa64/submul_1.asm	/^C -98  FREE$/;"	l
C	mpn/pa64/submul_1.asm	/^C -a0  FREE$/;"	l
C	mpn/pa64/submul_1.asm	/^C -a8  FREE$/;"	l
C	mpn/pa64/submul_1.asm	/^C -b0  r13$/;"	l
C	mpn/pa64/submul_1.asm	/^C -b8  r12$/;"	l
C	mpn/pa64/submul_1.asm	/^C -c0  r11$/;"	l
C	mpn/pa64/submul_1.asm	/^C -c8  r10$/;"	l
C	mpn/pa64/submul_1.asm	/^C -d0  r8$/;"	l
C	mpn/pa64/submul_1.asm	/^C -d8  r8$/;"	l
C	mpn/pa64/submul_1.asm	/^C -e0  r7$/;"	l
C	mpn/pa64/submul_1.asm	/^C -e8  r6$/;"	l
C	mpn/pa64/submul_1.asm	/^C -f0  r5$/;"	l
C	mpn/pa64/submul_1.asm	/^C -f8  r4$/;"	l
C	mpn/pa64/submul_1.asm	/^C 4-way unrolled code.$/;"	l
C	mpn/pa64/submul_1.asm	/^C 8000,8200:		7$/;"	l
C	mpn/pa64/submul_1.asm	/^C 8500,8600,8700:	6.5$/;"	l
C	mpn/pa64/submul_1.asm	/^C INPUT PARAMETERS:$/;"	l
C	mpn/pa64/submul_1.asm	/^C$/;"	l
C	mpn/pa64/udiv.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/pa64/udiv.asm	/^C This runs at about 280 cycles on both PA8000 and PA8500, corresponding to a$/;"	l
C	mpn/pa64/udiv.asm	/^C bit more than 4 cycles\/bit.$/;"	l
C	mpn/power/add_n.asm	/^C We added least significant limbs.  Now reload the next limbs to enter loop.$/;"	l
C	mpn/power/add_n.asm	/^C We have an odd # of limbs.  Add the first limbs separately.$/;"	l
C	mpn/power/sub_n.asm	/^C We added least significant limbs.  Now reload the next limbs to enter loop.$/;"	l
C	mpn/power/sub_n.asm	/^C We have an odd # of limbs.  Add the first limbs separately.$/;"	l
C	mpn/powerpc32/750/com.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/750/com.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/750/com.asm	/^C 604e:            3.0$/;"	l
C	mpn/powerpc32/750/com.asm	/^C 7400,7410 (G4):  2.0$/;"	l
C	mpn/powerpc32/750/com.asm	/^C 744x,745x (G4+): 3.0$/;"	l
C	mpn/powerpc32/750/com.asm	/^C 75x (G3):        2.0$/;"	l
C	mpn/powerpc32/750/com.asm	/^C This loop form is necessary for the claimed speed.$/;"	l
C	mpn/powerpc32/750/com.asm	/^C void mpn_com (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/powerpc32/750/com.asm	/^C$/;"	l
C	mpn/powerpc32/750/lshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/powerpc32/750/lshift.asm	/^C       cycles\/limb$/;"	l
C	mpn/powerpc32/750/lshift.asm	/^C 7400:    3.0$/;"	l
C	mpn/powerpc32/750/lshift.asm	/^C 750:     3.0$/;"	l
C	mpn/powerpc32/750/lshift.asm	/^C This code is the same per-limb speed as mpn\/powerpc32\/lshift.asm, but$/;"	l
C	mpn/powerpc32/750/lshift.asm	/^C mp_limb_t mpn_lshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/powerpc32/750/lshift.asm	/^C smaller and saving about 30 or so cycles of overhead.$/;"	l
C	mpn/powerpc32/750/lshift.asm	/^C$/;"	l
C	mpn/powerpc32/750/rshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/powerpc32/750/rshift.asm	/^C       cycles\/limb$/;"	l
C	mpn/powerpc32/750/rshift.asm	/^C 7400:    3.0$/;"	l
C	mpn/powerpc32/750/rshift.asm	/^C 750:     3.0$/;"	l
C	mpn/powerpc32/750/rshift.asm	/^C This code is the same per-limb speed as mpn\/powerpc32\/rshift.asm, but$/;"	l
C	mpn/powerpc32/750/rshift.asm	/^C mp_limb_t mpn_rshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/powerpc32/750/rshift.asm	/^C smaller and saving about 30 or so cycles of overhead.$/;"	l
C	mpn/powerpc32/750/rshift.asm	/^C$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C 604e:            4.0$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C 7400,7410 (G4):  5.0$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C 744x,745x (G4+): 5.0$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C 75x (G3):        5.0$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C n	r6$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C power4\/ppc970:   4.25$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C power5:          5.0$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C rp	r3$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C up	r4$/;"	l
C	mpn/powerpc32/addlsh1_n.asm	/^C vp	r5$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 12 mem insn$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 25 int reg write$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 604e:            6.75$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 7400,7410 (G4):  8.7-14.3$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 744x,745x (G4+): 9.5$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 75x (G3):        8.7-14.3$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 8 int multiply$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 8 serializing insn$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C 9 int ops (8 of which serialize)$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C All-in-all, it should be possible to get to 4 or 5 cycles\/limb on PPC604,$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C Loop Analysis for the 604:$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C PowerPC processors.$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C The integer register writes will need 13 cycles\/4limb.$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C The multiply insns need 16 cycles\/4limb.$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C This is optimized for the PPC604.  It has not been tuned for other$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C but that will require some clever FPNOPS and BNOPS for exact$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C issue control.$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C n	r5$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C power4\/ppc970:   6.25$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C power5:          6.25$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C rp	r3$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C up	r4$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C vl	r6$/;"	l
C	mpn/powerpc32/addmul_1.asm	/^C$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C 603e:                  ?$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C 604e:                  ?		old: 3.25$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C 7400,7410 (G4):        3.25$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C 744x,745x (G4+):       4$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C 75x (G3):              ?		old: 3.5$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C POWER3\/PPC630          2$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C POWER4\/PPC970          2.4$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C POWER5                 2.75$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C POWER6               40-140$/;"	l
C	mpn/powerpc32/aors_n.asm	/^C POWER7                 3$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C  * Nothing to do...$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C 604e:            ?$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C 7400,7410 (G4):  9.43$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C 744x,745x (G4+): 6.28$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C 75x (G3):        ?$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C TODO$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C power4\/ppc970:   ?$/;"	l
C	mpn/powerpc32/bdiv_dbm1c.asm	/^C power5:          ?$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C 603e:              ?$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C 604e:              5$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C 7400 use an early-out.$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C 7400,7410 (G4):    8$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C 744x,745x (G4+):   6$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C 75x (G3):          ?$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C The mulhwu has the "3" multiplier in the second operand, which lets 750 and$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C The mullw has the inverse in the first operand, since 0xAA..AB won't allow$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C We avoid the slow subfe instruction and instead rely on an extremely unlikely$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C a chance, whereas 0xAA..AB never will.  If, for instance, src[] is all$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C any early-out.  The src[] data normally won't either, but there's at least$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C branch.$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C power4\/ppc970:    12$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C power5:            ?$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C void mpn_divexact_by3 (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C zeros (not a sensible input of course) we run at 7.0 c\/l on ppc750.$/;"	l
C	mpn/powerpc32/diveby3.asm	/^C$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C		cycles\/limb$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C		norm	frac$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C	add	r0, r0, r10		C final remainder$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C     msl         di  d0  qp     d1          fn  up  un$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C    least vastly improve the current __udiv_qrnnd_c based code.$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C  * Check that things work well for a shared library build.$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C  * Decrease register usage.$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C  * Make sure mul operands and optimal for early-out.$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C  * Write an invert_limb, perhaps inline, perhaps as a private call.  Or at$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C 7410		~36.5	~36.5$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C 744x, 745x	 29	 29$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C Adjust di by including d0$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C Compute di from d1$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C TODO$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C d   = r7$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C fn  = r4$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C qp  = r3$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C r0  r3  r4  r5  r6  r7  r8  r9 r10 r11 r12 r28 r29 r30 r31$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C un  = r6$/;"	l
C	mpn/powerpc32/divrem_2.asm	/^C up  = r5$/;"	l
C	mpn/powerpc32/invert_limb.asm	/^C		 cycles\/limb$/;"	l
C	mpn/powerpc32/invert_limb.asm	/^C 603e:		      ?$/;"	l
C	mpn/powerpc32/invert_limb.asm	/^C 604e:		      ?$/;"	l
C	mpn/powerpc32/invert_limb.asm	/^C 7400,7410 (G4):     ?$/;"	l
C	mpn/powerpc32/invert_limb.asm	/^C 744x,745x (G4+):   32$/;"	l
C	mpn/powerpc32/invert_limb.asm	/^C 75x (G3):	      ?$/;"	l
C	mpn/powerpc32/invert_limb.asm	/^C power4\/ppc970:      ?$/;"	l
C	mpn/powerpc32/invert_limb.asm	/^C power5:	      ?$/;"	l
C	mpn/powerpc32/lshift.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/lshift.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/lshift.asm	/^C 604e:            3.0$/;"	l
C	mpn/powerpc32/lshift.asm	/^C 7400,7410 (G4):  3.0$/;"	l
C	mpn/powerpc32/lshift.asm	/^C 7445,7455 (G4+): 2.5$/;"	l
C	mpn/powerpc32/lshift.asm	/^C 7447,7457 (G4+): 2.25$/;"	l
C	mpn/powerpc32/lshift.asm	/^C 75x (G3):        3.0$/;"	l
C	mpn/powerpc32/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/lshift.asm	/^C cnt	r6$/;"	l
C	mpn/powerpc32/lshift.asm	/^C n	r5$/;"	l
C	mpn/powerpc32/lshift.asm	/^C power4\/ppc970:   2.5$/;"	l
C	mpn/powerpc32/lshift.asm	/^C power5:          2.5$/;"	l
C	mpn/powerpc32/lshift.asm	/^C rp	r3$/;"	l
C	mpn/powerpc32/lshift.asm	/^C up	r4$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C 604e:            3.0$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C 7400,7410 (G4):  3.0$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C 7445,7455 (G4+): 2.5$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C 7447,7457 (G4+): 2.25$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C 75x (G3):        3.0$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C cnt	r6$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C n	r5$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C power4\/ppc970:   2.5$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C power5:          2.5$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C rp	r3$/;"	l
C	mpn/powerpc32/lshiftc.asm	/^C up	r4$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C 2^16 halfwords can overflow.  lhz+add would be 2.0 c\/l, but if there's$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C 604e:            3$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C 7400,7410 (G4):  3$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C 744x,745x (G4+): 3$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C 75x (G3):        3$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C Alternatives:$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C Fetching half words would allow add instead for accumulating, instead of$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C There seems no need to schedule the loads back, the code is still 3.0 c\/l$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C adde and its serialization.  An outer loop would be required though, since$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C also a bdz or bdnz for each and a pointer update say every three limbs$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr src, mp_size_t size)$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C on 750\/7400 no matter where they're placed.$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C power4\/ppc970:   2.5$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C power5:          2.5$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C simpler code.$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C then the total would be 2.67 c\/l which isn't much faster than the current$/;"	l
C	mpn/powerpc32/mod_34lsub1.asm	/^C$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C                                mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C                               mp_limb_t divisor);$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C 3-5 cycles faster on 750.  For now it doesn't seem worth bothering with.$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C 5 cycles faster than the nonsense needed to access binvert_limb_table in$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C 603e:             ?$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C 604e:             6.0$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C 7400,7410 (G4):   6.0-13.0, depending on divisor$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C 744x,745x (G4+):  8.0-10.0, depending on divisor$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C 75x (G3):         6.0-13.0, depending on divisor$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C For PIC, the inverse is established arithmetically since it measures about$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C Load from our table with PIC is so slow on Linux and Darwin that we avoid it$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C SVR4 or Darwin style PIC.  AIX might be better, since it avoids bl\/mflr to$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C The loop allows an early-out on mullw for the inverse, and on mulhwu for$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C Using divwu for size==1 measured about 10 cycles slower on 604e, or about$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C divisor==0xDEADBEEF (inverse==0x904B300F).  These establish the stated$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C get at the GOT\/TOC\/whatever.$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C mp_limb_t mpn_modexact_1_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C mp_limb_t mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C power4\/ppc970:   12.0$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C power5:          12.0$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C range above for 750 and 7400.$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C the divisor.  So the fastest is for instance divisor==1 (inverse==-1), and$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C the slowest is anything giving a full 32-bits in both, such as$/;"	l
C	mpn/powerpc32/mode1o.asm	/^C$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C 604e:            4.0$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C 7400,7410 (G4):  4.5-11$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C 744x,745x (G4+): 6.0$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C 75x (G3):        4.5-11$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C Finish software pipeline$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C Software pipelined main loop$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C Start software pipeline$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C n	r5$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C power4\/ppc970:   6.0$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C power5:          5.63$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C rp	r3$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C up	r4$/;"	l
C	mpn/powerpc32/mul_1.asm	/^C vl	r6$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C POWER3\/PPC630          1.5$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C POWER4\/PPC970          2$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C POWER5                 2$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C POWER6                 2.78$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C POWER7               2.15-2.87$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C This code is based on powerpc64\/aors_n.asm.$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C n	r6$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C rp	r3$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C up	r4$/;"	l
C	mpn/powerpc32/p3-p7/aors_n.asm	/^C vp	r5$/;"	l
C	mpn/powerpc32/rshift.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/rshift.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/rshift.asm	/^C 604e:            3.0$/;"	l
C	mpn/powerpc32/rshift.asm	/^C 7400,7410 (G4):  3.0$/;"	l
C	mpn/powerpc32/rshift.asm	/^C 7445,7455 (G4+): 2.5$/;"	l
C	mpn/powerpc32/rshift.asm	/^C 7447,7457 (G4+): 2.25$/;"	l
C	mpn/powerpc32/rshift.asm	/^C 75x (G3):        3.0$/;"	l
C	mpn/powerpc32/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/rshift.asm	/^C cnt	r6$/;"	l
C	mpn/powerpc32/rshift.asm	/^C n	r5$/;"	l
C	mpn/powerpc32/rshift.asm	/^C power4\/ppc970:   2.5$/;"	l
C	mpn/powerpc32/rshift.asm	/^C power5:          2.5$/;"	l
C	mpn/powerpc32/rshift.asm	/^C rp	r3$/;"	l
C	mpn/powerpc32/rshift.asm	/^C up	r4$/;"	l
C	mpn/powerpc32/sec_tabselect.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc32/sec_tabselect.asm	/^C 603e:			 ?$/;"	l
C	mpn/powerpc32/sec_tabselect.asm	/^C 604e:			 ?$/;"	l
C	mpn/powerpc32/sec_tabselect.asm	/^C 7400,7410 (G4):	 2.5$/;"	l
C	mpn/powerpc32/sec_tabselect.asm	/^C 744x,745x (G4+):	 2.0$/;"	l
C	mpn/powerpc32/sec_tabselect.asm	/^C 75x (G3):		 ?$/;"	l
C	mpn/powerpc32/sec_tabselect.asm	/^C power4\/ppc970:	 2.0$/;"	l
C	mpn/powerpc32/sec_tabselect.asm	/^C power5:		 ?$/;"	l
C	mpn/powerpc32/sqr_diag_addlsh1.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/sqr_diag_addlsh1.asm	/^C 603e			 ?$/;"	l
C	mpn/powerpc32/sqr_diag_addlsh1.asm	/^C 604e			 ?$/;"	l
C	mpn/powerpc32/sqr_diag_addlsh1.asm	/^C 7400,7410 (G4)	 ?$/;"	l
C	mpn/powerpc32/sqr_diag_addlsh1.asm	/^C 744x,745x (G4+)	 6$/;"	l
C	mpn/powerpc32/sqr_diag_addlsh1.asm	/^C 75x (G3)		 ?$/;"	l
C	mpn/powerpc32/sqr_diag_addlsh1.asm	/^C This has been feebly optimised for 7447 but not for any other CPU.$/;"	l
C	mpn/powerpc32/sqr_diag_addlsh1.asm	/^C power4\/ppc970		 ?$/;"	l
C	mpn/powerpc32/sqr_diag_addlsh1.asm	/^C power5		 ?$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C 604e:            4.0$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C 7400,7410 (G4):  5.0$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C 744x,745x (G4+): 5.0$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C 75x (G3):        5.0$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C n	r6$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C power4\/ppc970:   4.25$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C power5:          5.0$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C rp	r3$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C up	r4$/;"	l
C	mpn/powerpc32/sublsh1_n.asm	/^C vp	r5$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C 603e:            ?$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C 604e:            7.5$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C 7400,7410 (G4):  9.3-15$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C 744x,745x (G4+): 10.5$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C 75x (G3):        9.3-15$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C This is optimized for the PPC604.  See addmul_1.asm for additional comments.$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C n	r5$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C power4\/ppc970:   6.75$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C power5:          6.5$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C rp	r3$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C up	r4$/;"	l
C	mpn/powerpc32/submul_1.asm	/^C vl	r6$/;"	l
C	mpn/powerpc32/umul.asm	/^C mp_limb_t mpn_umul_ppmm (mp_limb_t *lowptr, mp_limb_t m1, mp_limb_t m2);$/;"	l
C	mpn/powerpc32/umul.asm	/^C$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C                   cycles\/limb        cycles\/limb$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C                16-byte coaligned      unaligned$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C    c\/l for 970.$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C    indicate that we can reach 0.56 c\/l for 7400, 0.75 c\/l for 745x, and 0.80$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C    read-modify-write tricks.$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C    show a large speed bump at the cutoff points.  Small copying (perhaps$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C    using some read-modify-write technique) should be optimized.$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C  * Consider using VMX instructions also for head and tail, by using some$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C  * Make an mpn_com based on this code.$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C  * Optimize unaligned case.  Some basic tests with 2-way and 4-way unrolling$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C  * The VMX code is used from the smallest sizes it handles, but measurements$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C  * Works for all sizes and alignments.$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C 7400,7410 (G4):       0.5                0.64$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C 744x,745x (G4+):      0.75               0.82$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C 970 (G5):             0.78               1.02		(64-bit limbs)$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C Handle large cases with VMX operations$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C Handle small cases with plain operations$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C STATUS$/;"	l
C	mpn/powerpc32/vmx/copyd.asm	/^C TODO$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C                   cycles\/limb        cycles\/limb$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C                16-byte coaligned      unaligned$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C    c\/l for 970.$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C    indicate that we can reach 0.56 c\/l for 7400, 0.75 c\/l for 745x, and 0.80$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C    read-modify-write tricks.$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C    show a large speed bump at the cutoff points.  Small copying (perhaps$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C    using some read-modify-write technique) should be optimized.$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C  * Consider using VMX instructions also for head and tail, by using some$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C  * Make an mpn_com based on this code.$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C  * Optimize unaligned case.  Some basic tests with 2-way and 4-way unrolling$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C  * The VMX code is used from the smallest sizes it handles, but measurements$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C  * Works for all sizes and alignments.$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C 7400,7410 (G4):       0.5                0.64$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C 744x,745x (G4+):      0.75               0.82$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C 970 (G5):             0.78               1.02		(64-bit limbs)$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C Handle large cases with VMX operations$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C Handle small cases with plain operations$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C STATUS$/;"	l
C	mpn/powerpc32/vmx/copyi.asm	/^C TODO$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C	cmpwi	cr7, r0, 0$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C	crand	cr0, cr0, cr7$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C	cror	cr6, cr0, cr7$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C	rlwinm	r0, vp, 0,28,31$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C	rlwinm,	r0, up, 0,28,31$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C                   cycles\/limb         cycles\/limb    cycles\/limb$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C               and,ior,andn,nior,xor    iorn,xnor         nand$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C    already.$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C    first, then vperm before storing!  That means we never need more than one$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C    read-modify-write vector code.$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C    u operands, since v operands are sometimes negated.$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C    vperm, and when neither needs it.  The latter runs 50% faster on 7400.$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C    vperm, ever!$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C   process with VMX using vperm on store data$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C   process with VMX using vperm on up data$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C   process with VMX using vperm on vp data$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C   process with VMX without any vperm$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C  * At least be more clever about operand loading, i.e., load v operands before$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C  * Current performance makes this pointless for 970$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C  * Idea: If the source operands are equally aligned, we could do the logops$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C  * Instead of having scalar code in the beginning and end, consider using$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C  * Might want to make variants when just one of the source operands needs$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C  * Perhaps align `rp' after initial alignment loop?$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C  * Software pipeline?  Hopefully not too important, this is hairy enough$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C  * Works for all sizes and alignment for 32-bit limbs.$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C  * Works for n >= 4 for 64-bit limbs; untested for smaller operands.$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C 7400,7410 (G4):       1.39                 ?              ?$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C 744x,745x (G4+):      1.14                1.39           1.39$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C 970:                  1.7                 2.0            2.0$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C First loop until the destination is 16-byte aligned.  This will execute 0 or 1$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C STATUS$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C TODO$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C This works for 64-bit PowerPC, since a limb ptr can only be aligned$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C else if ((up & 15) != 0 && (vp & 15) != 0)$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C else if ((up & 15) != 0)$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C else$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C if (((up | vp) & 15) == 0)$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C in 2 relevant ways, which means we can always find a pair of aligned$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C pointers of rp, up, and vp.$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C process words until rp is 16-byte aligned$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C times for 64-bit machines, and 0 to 3 times for 32-bit machines.$/;"	l
C	mpn/powerpc32/vmx/logops_n.asm	/^C$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C	|     |     |     |     |     |     |     |     |   48$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   24$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C	| 0   1   2   3 | 4   5   6   7 | 8   9  10  11 |  128$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C	|---|---|---|---|---|---|---|---|---|---|---|---|   32$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C                cycles\/limb$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C       $---------------$---------------$---------------$---------------\$$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C       <-hi16-> <--- 24 --> <--- 24 --> <--- 24 --> <--- 24 --> <-lo16->$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C       |   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   |$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C       |_______________________________________________________________|$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C   |           |           |           |           |           |           |$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C  * Either start using the low-end masking constants, or remove them.$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C  * Merge multiple feed-in cases into a parameterized code block.$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C  * Reduce register usage.  It should be possible to almost halve it.$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C #      00   01   02   03    04   05   06   07    08   09   0a   0b    0c   0d   0e   0f$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C .byte	0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C .byte	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C 603e:              -$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C 604e:              -$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C 7400,7410 (G4):    1          simple load-use scheduling results in 0.75$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C 744x,745x (G4+):   0.75$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C 75x (G3):          -$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C Masks for high end of number$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C Masks for low end of number$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C Permutation vectors in the order they are used above$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C Reduce 32-bit fields$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C TODO$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C We now have 4 128-bit accumulators to sum$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C acc	|      a0       |      a1       |      a2       |$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C carry	|      c0       |      c1       |      c2       |$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C load	|      v0       |      v1       |      v2       |$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C n = 0...11$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C power4:            -$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C power5:            -$/;"	l
C	mpn/powerpc32/vmx/mod_34lsub1.asm	/^C ppc970:            0.75$/;"	l
C	mpn/powerpc64/com.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/com.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/com.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/com.asm	/^C POWER4\/PPC970          1.25$/;"	l
C	mpn/powerpc64/com.asm	/^C POWER5                 ?$/;"	l
C	mpn/powerpc64/com.asm	/^C POWER6                 1.32$/;"	l
C	mpn/powerpc64/com.asm	/^C POWER7                 1.13$/;"	l
C	mpn/powerpc64/copyd.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/copyd.asm	/^C POWER3\/PPC630          1$/;"	l
C	mpn/powerpc64/copyd.asm	/^C POWER4\/PPC970          1$/;"	l
C	mpn/powerpc64/copyd.asm	/^C POWER5                 ?$/;"	l
C	mpn/powerpc64/copyd.asm	/^C POWER6                 ?$/;"	l
C	mpn/powerpc64/copyd.asm	/^C POWER7                 1.4$/;"	l
C	mpn/powerpc64/copyd.asm	/^C n	r5$/;"	l
C	mpn/powerpc64/copyd.asm	/^C rp	r3$/;"	l
C	mpn/powerpc64/copyd.asm	/^C up	r4$/;"	l
C	mpn/powerpc64/copyi.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/copyi.asm	/^C POWER3\/PPC630          1$/;"	l
C	mpn/powerpc64/copyi.asm	/^C POWER4\/PPC970          1$/;"	l
C	mpn/powerpc64/copyi.asm	/^C POWER5                 ?$/;"	l
C	mpn/powerpc64/copyi.asm	/^C POWER6                 ?$/;"	l
C	mpn/powerpc64/copyi.asm	/^C POWER7                 1.4$/;"	l
C	mpn/powerpc64/copyi.asm	/^C n	r5$/;"	l
C	mpn/powerpc64/copyi.asm	/^C rp	r3$/;"	l
C	mpn/powerpc64/copyi.asm	/^C up	r4$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C     1	       15.00	       15.33$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C     2		7.50		7.99$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C     3		5.33		6.00$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C     4		4.50		4.74$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C     5		4.20		4.39$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C     6		3.50		3.99$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C     7		3.14		3.64$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C     8		3.00		3.36$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C     9		3.00		3.36$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C    10		2.70		3.25$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C    11		2.63		3.11$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C    12		2.58		3.00$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C    13		2.61		3.02$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C    14		2.42		2.82$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C    15		2.40		2.79$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C    50		2.08		2.67$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C   100		1.85		2.31$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C   200		1.80		2.18$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C   400		1.77		2.14$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C   n	   POWER3\/PPC630   POWER4\/PPC970$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C  1000		1.76		2.10#$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C  2000		1.75#		2.13$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C  4000		2.30		2.57$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C  8000		2.62		2.58$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C 16000		2.52		4.25$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C 32000		2.49	       16.25$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C 64000		2.66	       18.76$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C POWER3\/PPC630          1.75$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C POWER4\/PPC970          2.10$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C POWER5                 ?$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C POWER6                 ?$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C POWER7                 1.75$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C n	r6$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C rp	r3$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C up	r4$/;"	l
C	mpn/powerpc64/logops_n.asm	/^C vp	r5$/;"	l
C	mpn/powerpc64/lshift.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/lshift.asm	/^C  * Keep in synch with rshift.asm and lshiftc.asm$/;"	l
C	mpn/powerpc64/lshift.asm	/^C  * Micro-optimise header code$/;"	l
C	mpn/powerpc64/lshift.asm	/^C  * Try to reduce the number of needed live registers$/;"	l
C	mpn/powerpc64/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/lshift.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/lshift.asm	/^C POWER4\/PPC970          ?$/;"	l
C	mpn/powerpc64/lshift.asm	/^C POWER5                 2.25$/;"	l
C	mpn/powerpc64/lshift.asm	/^C POWER6                 9.75$/;"	l
C	mpn/powerpc64/lshift.asm	/^C POWER7                 2.15$/;"	l
C	mpn/powerpc64/lshift.asm	/^C TODO$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C  * Could the long-scheduled std insns be less scheduled?$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C  * Keep in synch with lshift.asm and rshift.asm$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C  * Micro-optimise header code$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C  * Try to reduce the number of needed live registers$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C POWER4\/PPC970          ?$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C POWER5                 2.25$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C POWER6                 9.5$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C POWER7                 2.15$/;"	l
C	mpn/powerpc64/lshiftc.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode32/add_n.asm	/^C		cycles\/limb$/;"	l
C	mpn/powerpc64/mode32/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode32/add_n.asm	/^C POWER3\/PPC630:     ?$/;"	l
C	mpn/powerpc64/mode32/add_n.asm	/^C POWER4\/PPC970:     4.25$/;"	l
C	mpn/powerpc64/mode32/add_n.asm	/^C n	r6$/;"	l
C	mpn/powerpc64/mode32/add_n.asm	/^C rp	r3$/;"	l
C	mpn/powerpc64/mode32/add_n.asm	/^C up	r4$/;"	l
C	mpn/powerpc64/mode32/add_n.asm	/^C vp	r5$/;"	l
C	mpn/powerpc64/mode32/addmul_1.asm	/^C		cycles\/limb$/;"	l
C	mpn/powerpc64/mode32/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode32/addmul_1.asm	/^C POWER3\/PPC630:     ?$/;"	l
C	mpn/powerpc64/mode32/addmul_1.asm	/^C POWER4\/PPC970:     12.5$/;"	l
C	mpn/powerpc64/mode32/addmul_1.asm	/^C n	r5$/;"	l
C	mpn/powerpc64/mode32/addmul_1.asm	/^C rp	r3$/;"	l
C	mpn/powerpc64/mode32/addmul_1.asm	/^C up	r4$/;"	l
C	mpn/powerpc64/mode32/addmul_1.asm	/^C v	r6,r7  or  r7,r8$/;"	l
C	mpn/powerpc64/mode32/mul_1.asm	/^C		cycles\/limb$/;"	l
C	mpn/powerpc64/mode32/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode32/mul_1.asm	/^C POWER3\/PPC630:     ?$/;"	l
C	mpn/powerpc64/mode32/mul_1.asm	/^C POWER4\/PPC970:     10$/;"	l
C	mpn/powerpc64/mode32/mul_1.asm	/^C n	r5$/;"	l
C	mpn/powerpc64/mode32/mul_1.asm	/^C rp	r3$/;"	l
C	mpn/powerpc64/mode32/mul_1.asm	/^C up	r4$/;"	l
C	mpn/powerpc64/mode32/mul_1.asm	/^C v	r6,r7  or  r7,r8$/;"	l
C	mpn/powerpc64/mode32/sqr_diagonal.asm	/^C		    cycles\/limb$/;"	l
C	mpn/powerpc64/mode32/sqr_diagonal.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode32/sqr_diagonal.asm	/^C POWER3\/PPC630		18$/;"	l
C	mpn/powerpc64/mode32/sqr_diagonal.asm	/^C POWER4\/PPC970		 ?$/;"	l
C	mpn/powerpc64/mode32/sqr_diagonal.asm	/^C POWER5		 7.25$/;"	l
C	mpn/powerpc64/mode32/sqr_diagonal.asm	/^C POWER6		 9.5$/;"	l
C	mpn/powerpc64/mode32/sub_n.asm	/^C		cycles\/limb$/;"	l
C	mpn/powerpc64/mode32/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode32/sub_n.asm	/^C POWER3\/PPC630:     ?$/;"	l
C	mpn/powerpc64/mode32/sub_n.asm	/^C POWER4\/PPC970:     4.25$/;"	l
C	mpn/powerpc64/mode32/sub_n.asm	/^C n	r6$/;"	l
C	mpn/powerpc64/mode32/sub_n.asm	/^C rp	r3$/;"	l
C	mpn/powerpc64/mode32/sub_n.asm	/^C up	r4$/;"	l
C	mpn/powerpc64/mode32/sub_n.asm	/^C vp	r5$/;"	l
C	mpn/powerpc64/mode32/submul_1.asm	/^C		cycles\/limb$/;"	l
C	mpn/powerpc64/mode32/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode32/submul_1.asm	/^C POWER3\/PPC630:     ?$/;"	l
C	mpn/powerpc64/mode32/submul_1.asm	/^C POWER4\/PPC970:     16$/;"	l
C	mpn/powerpc64/mode32/submul_1.asm	/^C n	r5$/;"	l
C	mpn/powerpc64/mode32/submul_1.asm	/^C rp	r3$/;"	l
C	mpn/powerpc64/mode32/submul_1.asm	/^C up	r4$/;"	l
C	mpn/powerpc64/mode32/submul_1.asm	/^C v	r6,r7  or  r7,r8$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C POWER3\/PPC630          1.5$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C POWER3\/PPC630 slowdown can be attributed to the saving and restoring of 4$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C POWER4\/PPC970          2$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C POWER5                 2$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C POWER6                 2.63$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C POWER7               2.25-2.87$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C This code is a little bit slower for POWER3\/PPC630 than the simple code used$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C n	r6$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C previously, but it is much faster for POWER4\/PPC970.  The reason for the$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C registers.$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C rp	r3$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C up	r4$/;"	l
C	mpn/powerpc64/mode64/aors_n.asm	/^C vp	r5$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C                   cycles\/limb     cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C                   mpn_addmul_1    mpn_submul_1$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C  * Add support for _1c entry points$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C  * Try to reduce the number of needed live registers$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C POWER3\/PPC630		6-18		6-18$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C POWER4\/PPC970		 8		 8.3$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C POWER5		 8		 8.25$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C POWER6		16.25		16.75$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C POWER7		 3.77		 4.9$/;"	l
C	mpn/powerpc64/mode64/aorsmul_1.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C    greater than the 2nd operand.  Yes, this addition is non-commutative wrt$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C    performance.$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C  * The worst case 47 c\/l for POWER6 happens if the 3rd operand for ldx is$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C  * Try combining upx+up, and vpx+vp.$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C POWER3\/PPC630          1.83   (1.5 c\/l should be possible)$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C POWER4\/PPC970          3      (2.0 c\/l should be possible)$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C POWER5                 3$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C POWER6              3.5-47$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C POWER7                 3$/;"	l
C	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^C STATUS$/;"	l
C	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^C                 cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^C  * Nothing to do...$/;"	l
C	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^C POWER3\/PPC630       6-18$/;"	l
C	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^C POWER4\/PPC970       8.25$/;"	l
C	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^C POWER5              8.5  fluctuating as function of n % 3$/;"	l
C	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^C POWER6             15$/;"	l
C	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^C POWER7              4.75$/;"	l
C	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode64/cnd_aors_n.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/cnd_aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/cnd_aors_n.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/mode64/cnd_aors_n.asm	/^C POWER4\/PPC970          2.25$/;"	l
C	mpn/powerpc64/mode64/cnd_aors_n.asm	/^C POWER5                 ?$/;"	l
C	mpn/powerpc64/mode64/cnd_aors_n.asm	/^C POWER6                 3$/;"	l
C	mpn/powerpc64/mode64/cnd_aors_n.asm	/^C POWER7                 2$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C                       cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C                       norm    unorm$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C  * Check if n=1 code is really an improvement.  It probably isn't.$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C  * Make more similar to mode1o.asm.$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C POWER3\/PPC630        13-19$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C POWER4\/PPC970         16$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C POWER5                16      16$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C POWER6                37      46$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C POWER7                12      12$/;"	l
C	mpn/powerpc64/mode64/dive_1.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C                           cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C                       norm    unorm   frac$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C Add preinv entry point.$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C POWER3\/PPC630         16-34   16-34   ~11   outdated figures$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C POWER4\/PPC970          28      28      19$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C POWER5                 29      29     ~19$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C POWER6                 49      59     ~42$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C POWER7                 24.5    23     ~14$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C We use a not very predictable branch in the frac code, therefore the cycle$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C considerably slower on POWER4\/PPC970 and POWER5.$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C count wobbles somewhat.  With the alternative branch-free code, things run$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C d   = r7$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C fn  = r4$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C qp  = r3$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C un  = r6$/;"	l
C	mpn/powerpc64/mode64/divrem_1.asm	/^C up  = r5$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C                       cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C                       norm    frac$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C POWER3\/PPC630$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C POWER4\/PPC970         ?       ?$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C POWER5                37      ?$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C POWER6                30.5    ?$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C POWER6                62      ?$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C dp  = r7$/;"	d
C	mpn/powerpc64/mode64/divrem_2.asm	/^C fn  = r4$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C qp  = r3$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C un  = r6$/;"	l
C	mpn/powerpc64/mode64/divrem_2.asm	/^C up  = r5$/;"	l
C	mpn/powerpc64/mode64/gcd_1.asm	/^C		    cycles\/bit (approx)$/;"	l
C	mpn/powerpc64/mode64/gcd_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/gcd_1.asm	/^C Numbers measured with: speed -CD -s16-64 -t48 mpn_gcd_1$/;"	l
C	mpn/powerpc64/mode64/gcd_1.asm	/^C POWER3\/PPC630		 ?$/;"	l
C	mpn/powerpc64/mode64/gcd_1.asm	/^C POWER4\/PPC970		 8.5$/;"	l
C	mpn/powerpc64/mode64/gcd_1.asm	/^C POWER5		 ?$/;"	l
C	mpn/powerpc64/mode64/gcd_1.asm	/^C POWER6		10.1$/;"	l
C	mpn/powerpc64/mode64/gcd_1.asm	/^C POWER7		 9.4$/;"	l
C	mpn/powerpc64/mode64/invert_limb.asm	/^C                  cycles\/limb (approximate)$/;"	l
C	mpn/powerpc64/mode64/invert_limb.asm	/^C POWER3\/PPC630         80$/;"	l
C	mpn/powerpc64/mode64/invert_limb.asm	/^C POWER4\/PPC970         86$/;"	l
C	mpn/powerpc64/mode64/invert_limb.asm	/^C POWER5                86$/;"	l
C	mpn/powerpc64/mode64/invert_limb.asm	/^C POWER6               170$/;"	l
C	mpn/powerpc64/mode64/invert_limb.asm	/^C POWER7                66$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C    then hand optimised.$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C  * Optimise, in particular the cps function.  This was compiler-generated and$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C POWER4\/PPC970         17$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C POWER5                16$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C POWER6                30$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C POWER7                10.2$/;"	l
C	mpn/powerpc64/mode64/mod_1_1.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C    then hand optimised.$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C  * Optimise, in particular the cps function.  This was compiler-generated and$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C POWER4\/PPC970          9$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C POWER5                 9$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C POWER6                13$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C POWER7                3.5$/;"	l
C	mpn/powerpc64/mode64/mod_1_4.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode64/mod_34lsub1.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/mod_34lsub1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/mod_34lsub1.asm	/^C POWER3\/PPC630          1.33$/;"	l
C	mpn/powerpc64/mode64/mod_34lsub1.asm	/^C POWER4\/PPC970          1.5$/;"	l
C	mpn/powerpc64/mode64/mod_34lsub1.asm	/^C POWER5                 1.32$/;"	l
C	mpn/powerpc64/mode64/mod_34lsub1.asm	/^C POWER6                 2.35$/;"	l
C	mpn/powerpc64/mode64/mod_34lsub1.asm	/^C POWER7                 1$/;"	l
C	mpn/powerpc64/mode64/mod_34lsub1.asm	/^C |-----|-----|-----|-----|$/;"	l
C	mpn/powerpc64/mode64/mod_34lsub1.asm	/^C |__r10__|__r9___|__r8___|$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C  * Check if n=1 code is really an improvement.  It probably isn't.$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C  * Make more similar to dive_1.asm.$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C POWER3\/PPC630        13-19$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C POWER4\/PPC970         16$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C POWER5                16$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C POWER6                 ?$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C POWER7                12$/;"	l
C	mpn/powerpc64/mode64/mode1o.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C               cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C    could be combined)$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C  * Clean up r12\/r7 usage in feed-in code.$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C  * Optimize feed-in code, for speed and size.$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C  * Try to reduce the number of needed live registers (at least r5 and r10$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C POWER3\/PPC630     6-18$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C POWER4\/PPC970     7.25?  not updated for last file revision$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C POWER5            7.25$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C POWER6           14$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C POWER7            2.9$/;"	l
C	mpn/powerpc64/mode64/mul_1.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode64/mul_basecase.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/mul_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/mul_basecase.asm	/^C POWER3\/PPC630         6-18$/;"	l
C	mpn/powerpc64/mode64/mul_basecase.asm	/^C POWER4\/PPC970          8$/;"	l
C	mpn/powerpc64/mode64/mul_basecase.asm	/^C POWER5                 8$/;"	l
C	mpn/powerpc64/mode64/mul_basecase.asm	/^C POWER6                24$/;"	l
C	mpn/powerpc64/mode64/mul_basecase.asm	/^C Special code for un <= 2, for efficiency of these important cases,$/;"	l
C	mpn/powerpc64/mode64/mul_basecase.asm	/^C and since it simplifies the default code.$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C               cycles\/limb     cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C               mpn_addmul_1    mpn_submul_1$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C    would bring us to 9 c\/l.$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C  * Handle n = 1 and perhaps n = 2 separately, without saving any registers.$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C  * Reduce register usage.$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C  * Schedule function entry code.$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C  * Unroll more.  8-way unrolling would bring us to 10 c\/l, 16-way unrolling$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C POWER3\/PPC630     ?               ?$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C POWER4\/PPC970     ?               ?$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C POWER5            ?               ?$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C POWER6           12.25           12.8$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C POWER7            ?               ?$/;"	l
C	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C		    cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C	b	L(ret)$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C    before to after loops.$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C    would bring us to 9 c\/l.$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C  * Align things better, perhaps by moving things like pointer updates from$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C  * Reduce register usage.  At least 4 register less can be used.$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C  * The bdz insns for b1 and b2 will never branch,$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C  * Unroll more.  8-way unrolling would bring us to 10 c\/l, 16-way unrolling$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C POWER3\/PPC630		 ?$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C POWER4\/PPC970		 ?$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C POWER5		 ?$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C POWER6		12.25$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C Special code for un <= 2, for efficiency of these important cases,$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^C and since it simplifies the default code.$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C			mul_2         addmul_2$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C                    cycles\/limb    cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C POWER3\/PPC630		 ?		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C POWER4\/PPC970		 ?		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C POWER5		 ?		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C POWER6		 ?		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C POWER7-SMT1		 ?		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C POWER7-SMT2		 ?		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aormul_2.asm	/^C POWER7-SMT4		 3		 3$/;"	l
C	mpn/powerpc64/mode64/p7/aors_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/p7/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/p7/aors_n.asm	/^C POWER3\/PPC630		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aors_n.asm	/^C POWER4\/PPC970		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aors_n.asm	/^C POWER5		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aors_n.asm	/^C POWER6		 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aors_n.asm	/^C POWER7		 2.18$/;"	l
C	mpn/powerpc64/mode64/p7/aors_n.asm	/^C This is a tad bit slower than the cnd_aors_n.asm code, which is of course an$/;"	l
C	mpn/powerpc64/mode64/p7/aors_n.asm	/^C anomaly.$/;"	l
C	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^C POWER4\/PPC970          ?$/;"	l
C	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^C POWER5                 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^C POWER6                 ?$/;"	l
C	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^C POWER7                 2.5$/;"	l
C	mpn/powerpc64/mode64/p7/gcd_1.asm	/^C		    cycles\/bit (approx)$/;"	l
C	mpn/powerpc64/mode64/p7/gcd_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/p7/gcd_1.asm	/^C Numbers measured with: speed -CD -s16-64 -t48 mpn_gcd_1$/;"	l
C	mpn/powerpc64/mode64/p7/gcd_1.asm	/^C POWER3\/PPC630		 -$/;"	l
C	mpn/powerpc64/mode64/p7/gcd_1.asm	/^C POWER4\/PPC970		 -$/;"	l
C	mpn/powerpc64/mode64/p7/gcd_1.asm	/^C POWER5		 -$/;"	l
C	mpn/powerpc64/mode64/p7/gcd_1.asm	/^C POWER6		 -$/;"	l
C	mpn/powerpc64/mode64/p7/gcd_1.asm	/^C POWER7		 7.6$/;"	l
C	mpn/powerpc64/mode64/p8/invert_limb.asm	/^C                  cycles\/limb (approximate)$/;"	l
C	mpn/powerpc64/mode64/p8/invert_limb.asm	/^C POWER3\/PPC630         -$/;"	l
C	mpn/powerpc64/mode64/p8/invert_limb.asm	/^C POWER4\/PPC970         -$/;"	l
C	mpn/powerpc64/mode64/p8/invert_limb.asm	/^C POWER5                -$/;"	l
C	mpn/powerpc64/mode64/p8/invert_limb.asm	/^C POWER6                -$/;"	l
C	mpn/powerpc64/mode64/p8/invert_limb.asm	/^C POWER7                ?$/;"	l
C	mpn/powerpc64/mode64/p8/invert_limb.asm	/^C POWER8               32$/;"	l
C	mpn/powerpc64/mode64/p8/invert_limb.asm	/^C This runs on POWER7 and later, but is faster only on later CPUs.$/;"	l
C	mpn/powerpc64/mode64/p8/invert_limb.asm	/^C We might want to inline this, considering its small footprint.$/;"	l
C	mpn/powerpc64/mode64/rsh1aors_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/rsh1aors_n.asm	/^C POWER3\/PPC630		 ?$/;"	l
C	mpn/powerpc64/mode64/rsh1aors_n.asm	/^C POWER4\/PPC970		 2.9$/;"	l
C	mpn/powerpc64/mode64/rsh1aors_n.asm	/^C POWER5		 ?$/;"	l
C	mpn/powerpc64/mode64/rsh1aors_n.asm	/^C POWER6		 3.5$/;"	l
C	mpn/powerpc64/mode64/rsh1aors_n.asm	/^C POWER7		 2.25$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C    about 5 cycles\/call.  (We cannot analogously optimise the restores, since$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C    adde poorly, and might sequentialise all these instructions.$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C    adjacent integer multiply insns.  Except for the multiply insns, the code$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C    cost will be more live registers.$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C    size a lot and speed things up perhaps 25%.$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C    the sqr_diag_addlsh1 loop has no wind-down code as currently written.)$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C    was not carefully optimised for POWER6 or any other CPU.$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * Implement a larger final corner.$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * Perform cross-jumping in sqr_diag_addlsh1's feed-in code, into the loop.$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * Rewrite for POWER6 to use 8 consecutive muls, not 2 groups of 4.  The$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * Rewrite for POWER7 to use addmul_2 building blocks; this will reduce code$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * Schedule callee-saves register saves into other insns.  This could save$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * Should the alternating std\/adde sequences be split?  Some pipelines handle$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * The sqr_diag_addlsh1 loop was written for POWER6 and its preferences for$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * This is very crude, cleanup!$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * Try to reduce the number of needed live registers.$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C  * Use computed goto in order to compress the code.$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C NOTES$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C POWER3\/PPC630         6-18$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C POWER4\/PPC970          8$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C POWER5                 8$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C POWER6                16.25$/;"	l
C	mpn/powerpc64/mode64/sqr_basecase.asm	/^C POWER7                 3.77$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C		    cycles\/limb$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C    bytes, 4-way code would become about 50% larger.$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C  * Micro-optimise header code$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C  * Perhaps do 4-way unrolling, for 2.5 c\/l on POWER6.  The code is 4236$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C POWER3\/PPC630		 ?$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C POWER4\/PPC970		 ?$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C POWER5		 2.25$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C POWER6		 4$/;"	l
C	mpn/powerpc64/p6/lshift.asm	/^C TODO$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C		    cycles\/limb$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C    bytes, 4-way code would become about 50% larger.$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C  * Micro-optimise header code$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C  * Perhaps do 4-way unrolling, for 2.5 c\/l on POWER6.  The code is 4236$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C POWER3\/PPC630		 ?$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C POWER4\/PPC970		 ?$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C POWER5		 2.25$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C POWER6		 4$/;"	l
C	mpn/powerpc64/p6/lshiftc.asm	/^C TODO$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C		    cycles\/limb$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C    bytes, 4-way code would become about 50% larger.$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C  * Micro-optimise header code$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C  * Perhaps do 4-way unrolling, for 2.5 c\/l on POWER6.  The code is 4248$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C POWER3\/PPC630		 ?$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C POWER4\/PPC970		 ?$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C POWER5		 2$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C POWER6		 3.5  (mysteriously 3.0 for cnt=1)$/;"	l
C	mpn/powerpc64/p6/rshift.asm	/^C TODO$/;"	l
C	mpn/powerpc64/p7/copyd.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/p7/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/p7/copyd.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/p7/copyd.asm	/^C POWER4\/PPC970          ?$/;"	l
C	mpn/powerpc64/p7/copyd.asm	/^C POWER5                 ?$/;"	l
C	mpn/powerpc64/p7/copyd.asm	/^C POWER6                 1.25$/;"	l
C	mpn/powerpc64/p7/copyd.asm	/^C POWER7                 1.09$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C                  cycles\/limb$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C    handle also n = 2.$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C  * Consider using 4 pointers, schedule ptr update early wrt use.$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C  * Try rolling the two loop leading std to the end, allowing the code to$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C POWER4\/PPC970          ?$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C POWER5                 ?$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C POWER6                 1.25$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C POWER7                 1.09$/;"	l
C	mpn/powerpc64/p7/copyi.asm	/^C TODO$/;"	l
C	mpn/powerpc64/p7/hamdist.asm	/^C	ALIGN(16)$/;"	l
C	mpn/powerpc64/p7/hamdist.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/p7/hamdist.asm	/^C POWER3\/PPC630          -$/;"	l
C	mpn/powerpc64/p7/hamdist.asm	/^C POWER4\/PPC970          -$/;"	l
C	mpn/powerpc64/p7/hamdist.asm	/^C POWER5                 -$/;"	l
C	mpn/powerpc64/p7/hamdist.asm	/^C POWER6                 -$/;"	l
C	mpn/powerpc64/p7/hamdist.asm	/^C POWER7                 2.87$/;"	l
C	mpn/powerpc64/p7/popcount.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/p7/popcount.asm	/^C POWER3\/PPC630          -$/;"	l
C	mpn/powerpc64/p7/popcount.asm	/^C POWER4\/PPC970          -$/;"	l
C	mpn/powerpc64/p7/popcount.asm	/^C POWER5                 -$/;"	l
C	mpn/powerpc64/p7/popcount.asm	/^C POWER6                 -$/;"	l
C	mpn/powerpc64/p7/popcount.asm	/^C POWER7                 2$/;"	l
C	mpn/powerpc64/rshift.asm	/^C	add	rp, rp, r30	C rp = rp + n$/;"	l
C	mpn/powerpc64/rshift.asm	/^C	add	up, up, r30	C up = up + n$/;"	l
C	mpn/powerpc64/rshift.asm	/^C	sldi	r30, n, 3	C byte count corresponding to n$/;"	l
C	mpn/powerpc64/rshift.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/rshift.asm	/^C  * Keep in synch with lshift.asm and lshiftc.asm$/;"	l
C	mpn/powerpc64/rshift.asm	/^C  * Micro-optimise header code$/;"	l
C	mpn/powerpc64/rshift.asm	/^C  * Try to reduce the number of needed live registers$/;"	l
C	mpn/powerpc64/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/powerpc64/rshift.asm	/^C POWER3\/PPC630          ?$/;"	l
C	mpn/powerpc64/rshift.asm	/^C POWER4\/PPC970          ?$/;"	l
C	mpn/powerpc64/rshift.asm	/^C POWER5                 2.25$/;"	l
C	mpn/powerpc64/rshift.asm	/^C POWER6                 9.75$/;"	l
C	mpn/powerpc64/rshift.asm	/^C POWER7                 2.15$/;"	l
C	mpn/powerpc64/rshift.asm	/^C TODO$/;"	l
C	mpn/powerpc64/sec_tabselect.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/sec_tabselect.asm	/^C POWER3\/PPC630		 1.75$/;"	l
C	mpn/powerpc64/sec_tabselect.asm	/^C POWER4\/PPC970		 2.0$/;"	l
C	mpn/powerpc64/sec_tabselect.asm	/^C POWER5		 ?$/;"	l
C	mpn/powerpc64/sec_tabselect.asm	/^C POWER6		 5.0$/;"	l
C	mpn/powerpc64/sec_tabselect.asm	/^C POWER7		 1.75$/;"	l
C	mpn/powerpc64/umul.asm	/^C mp_limb_t mpn_umul_ppmm (mp_limb_t *lowptr, mp_limb_t m1, mp_limb_t m2);$/;"	l
C	mpn/powerpc64/umul.asm	/^C$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C                   cycles\/limb$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C  * Compress cnsts table in 64-bit mode, only half the values are needed.$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C  * Rewrite the awkward huge n outer loop code.$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C  * Two lvx, two vperm, and two vxor could make us a similar hamdist.$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C 7400,7410 (G4):       ?$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C 744x,745x (G4+):      1.125$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C 970 (G5):             2.25$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C Counts for vperm$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C For 64-bit machines, handle huge n that would overflow vsum4ubs$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C Handle outer loop for huge n.  We inherit cr7 and r0 from above.$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C Load various constants into vector registers$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C Masks for high end of number$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C Masks for low end of number$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C TODO$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C The inner loop handles up to 2^34 bits, i.e., 2^31 64-limbs, due to overflow$/;"	l
C	mpn/powerpc64/vmx/popcount.asm	/^C in vsum4ubs.  For large operands, we work in chunks, of size LIMBS_PER_CHUNK.$/;"	l
C	mpn/s390_32/copyd.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/copyd.asm	/^C    We could then use r3...r10 in main loop.$/;"	l
C	mpn/s390_32/copyd.asm	/^C    done by setting rp=r1, up=r2, i=r0 and r3,r4,r5 for clock regs.$/;"	l
C	mpn/s390_32/copyd.asm	/^C  * Avoid saving\/restoring callee-saves registers for n < 3.  This could be$/;"	l
C	mpn/s390_32/copyd.asm	/^C FIXME:$/;"	l
C	mpn/s390_32/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/copyd.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/copyd.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/copyd.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/copyd.asm	/^C z900		 1.65$/;"	l
C	mpn/s390_32/copyd.asm	/^C z990           1.125$/;"	l
C	mpn/s390_32/copyi.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/copyi.asm	/^C  * This is based on GNU libc memcpy which was written by Martin Schwidefsky.$/;"	l
C	mpn/s390_32/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/copyi.asm	/^C NOTE$/;"	l
C	mpn/s390_32/copyi.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/copyi.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/copyi.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/copyi.asm	/^C z900		 0.75$/;"	l
C	mpn/s390_32/copyi.asm	/^C z990           0.375$/;"	l
C	mpn/s390_32/esame/addmul_1.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/esame/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/esame/addmul_1.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/esame/addmul_1.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/esame/addmul_1.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/esame/addmul_1.asm	/^C z900		18.5$/;"	l
C	mpn/s390_32/esame/addmul_1.asm	/^C z990		10$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C    faster, at the expense of highly alignment-dependent performance.$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C  * Optimise for small n$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C  * Use r0 and save\/restore one less register$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C  * Using logops_n's v1 inner loop operand order make the loop about 20%$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C TODO$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C z900		 ?$/;"	l
C	mpn/s390_32/esame/aors_n.asm	/^C z990	      2.75-3		(fast for even n, slow for odd n)$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C  * Compute RETVAL for sublsh1_n less stupidly$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C  * Optimise for small n$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C TODO$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C z900		 9.25$/;"	l
C	mpn/s390_32/esame/aorslsh1_n.asm	/^C z990		 5$/;"	l
C	mpn/s390_32/esame/bdiv_dbm1c.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/esame/bdiv_dbm1c.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/esame/bdiv_dbm1c.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/esame/bdiv_dbm1c.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/esame/bdiv_dbm1c.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/esame/bdiv_dbm1c.asm	/^C z900		14$/;"	l
C	mpn/s390_32/esame/bdiv_dbm1c.asm	/^C z990		10$/;"	l
C	mpn/s390_32/esame/mul_1.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/esame/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/esame/mul_1.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/esame/mul_1.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/esame/mul_1.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/esame/mul_1.asm	/^C z900		14$/;"	l
C	mpn/s390_32/esame/mul_1.asm	/^C z990		 9$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C    up by about 10%.$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C  * Perhaps add special case for un <= 2.$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C  * Replace loops by faster code.  The mul_1 and addmul_1 loops could be sped$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C addmul_1 loop ===============================================================$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C mul_1 =======================================================================$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C un = vn = 1$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C z900		 ?$/;"	l
C	mpn/s390_32/esame/mul_basecase.asm	/^C z990		 ?$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C	clr	%r15, %r15		C clear carry (already clear per above)$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C    This will ask for basecase handling of n = 3.$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C    implementations?  The only disadvantage is that it requires R != U.$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C    more.$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C    register usage.$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C    up by about 10%.  The sqr_diag_addlsh1 loop could probably be sped up even$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C  * Clean up.$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C  * Replace loops by faster code.  The mul_1 and addmul_1 loops could be sped$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C  * Should we use this allocation-free style for more sqr_basecase asm$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C  * Stop iterating addmul_1 loop at latest for n = 2, implement longer tail.$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C  * Update counters and pointers more straightforwardly, possibly lowering$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C TODO$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C addmul_1 loop ===============================================================$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C mul_1 =======================================================================$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C n = 1$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C n = 2$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C sqr_dia_addlsh1 ============================================================$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C z900		 ?$/;"	l
C	mpn/s390_32/esame/sqr_basecase.asm	/^C z990		23$/;"	l
C	mpn/s390_32/esame/submul_1.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/esame/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/esame/submul_1.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/esame/submul_1.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/esame/submul_1.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/esame/submul_1.asm	/^C z900		20$/;"	l
C	mpn/s390_32/esame/submul_1.asm	/^C z990		11$/;"	l
C	mpn/s390_32/logops_n.asm	/^C	        rp!=up  rp=up$/;"	l
C	mpn/s390_32/logops_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/logops_n.asm	/^C cycles\/limb     variant 1           variant 2       variant 3$/;"	l
C	mpn/s390_32/logops_n.asm	/^C z10		 ?			 ?		 ?$/;"	l
C	mpn/s390_32/logops_n.asm	/^C z196		 ?			 ?		 ?$/;"	l
C	mpn/s390_32/logops_n.asm	/^C z9		 ?			 ?		 ?$/;"	l
C	mpn/s390_32/logops_n.asm	/^C z900		 ?	 ?		 ?		 ?$/;"	l
C	mpn/s390_32/logops_n.asm	/^C z990		 2.5	 1		 2.75		 2.75$/;"	l
C	mpn/s390_32/lshift.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/lshift.asm	/^C  *$/;"	l
C	mpn/s390_32/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/lshift.asm	/^C TODO$/;"	l
C	mpn/s390_32/lshift.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/lshift.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/lshift.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/lshift.asm	/^C z900		 6$/;"	l
C	mpn/s390_32/lshift.asm	/^C z990	         3$/;"	l
C	mpn/s390_32/lshiftc.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/lshiftc.asm	/^C  *$/;"	l
C	mpn/s390_32/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/lshiftc.asm	/^C TODO$/;"	l
C	mpn/s390_32/lshiftc.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/lshiftc.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/lshiftc.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/lshiftc.asm	/^C z900		 7$/;"	l
C	mpn/s390_32/lshiftc.asm	/^C z990	         3.375$/;"	l
C	mpn/s390_32/rshift.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_32/rshift.asm	/^C  *$/;"	l
C	mpn/s390_32/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_32/rshift.asm	/^C TODO$/;"	l
C	mpn/s390_32/rshift.asm	/^C z10		 ?$/;"	l
C	mpn/s390_32/rshift.asm	/^C z196		 ?$/;"	l
C	mpn/s390_32/rshift.asm	/^C z9		 ?$/;"	l
C	mpn/s390_32/rshift.asm	/^C z900		 6$/;"	l
C	mpn/s390_32/rshift.asm	/^C z990	         3$/;"	l
C	mpn/s390_64/addmul_1.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/addmul_1.asm	/^C z10		28$/;"	l
C	mpn/s390_64/addmul_1.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/addmul_1.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/addmul_1.asm	/^C z900		34$/;"	l
C	mpn/s390_64/addmul_1.asm	/^C z990		23$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C    carry to the lsh1 alcgr.$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C  * Compute RETVAL for sublsh1_n less stupidly.$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C  * Optimise for small n, avoid 'la' like in aors_n.asm.$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C  * Tune to reach 3.5 c\/l.  For addlsh1, we could let the main alcgr propagate$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C TODO$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C z10		11$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C z900		 9$/;"	l
C	mpn/s390_64/aorrlsh1_n.asm	/^C z990		 4.75$/;"	l
C	mpn/s390_64/aors_n.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/aors_n.asm	/^C    faster, at the expense of highly alignment-dependent performance.$/;"	l
C	mpn/s390_64/aors_n.asm	/^C  * Optimise for small n$/;"	l
C	mpn/s390_64/aors_n.asm	/^C  * Use r0 and save\/restore one less register$/;"	l
C	mpn/s390_64/aors_n.asm	/^C  * Using logops_n's v1 inner loop operand order make the loop about 20%$/;"	l
C	mpn/s390_64/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/aors_n.asm	/^C TODO$/;"	l
C	mpn/s390_64/aors_n.asm	/^C z10		 6$/;"	l
C	mpn/s390_64/aors_n.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/aors_n.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/aors_n.asm	/^C z900		 5.5$/;"	l
C	mpn/s390_64/aors_n.asm	/^C z990		 3$/;"	l
C	mpn/s390_64/bdiv_dbm1c.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/bdiv_dbm1c.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/bdiv_dbm1c.asm	/^C z10		19$/;"	l
C	mpn/s390_64/bdiv_dbm1c.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/bdiv_dbm1c.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/bdiv_dbm1c.asm	/^C z900		29$/;"	l
C	mpn/s390_64/bdiv_dbm1c.asm	/^C z990		22$/;"	l
C	mpn/s390_64/copyd.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/copyd.asm	/^C    We could then use r3...r10 in main loop.$/;"	l
C	mpn/s390_64/copyd.asm	/^C    done by setting rp=r1, up=r2, i=r0 and r3,r4,r5 for clock regs.$/;"	l
C	mpn/s390_64/copyd.asm	/^C  * Avoid saving\/restoring callee-saves registers for n < 3.  This could be$/;"	l
C	mpn/s390_64/copyd.asm	/^C  * Could we use some EX trick, modifying lmg\/stmg, for the feed-in code?$/;"	l
C	mpn/s390_64/copyd.asm	/^C FIXME:$/;"	l
C	mpn/s390_64/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/copyd.asm	/^C z10		 1.8$/;"	l
C	mpn/s390_64/copyd.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/copyd.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/copyd.asm	/^C z900		 2.67$/;"	l
C	mpn/s390_64/copyd.asm	/^C z990           1.5$/;"	l
C	mpn/s390_64/copyi.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/copyi.asm	/^C  * This is based on GNU libc memcpy which was written by Martin Schwidefsky.$/;"	l
C	mpn/s390_64/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/copyi.asm	/^C NOTE$/;"	l
C	mpn/s390_64/copyi.asm	/^C z10		 1$/;"	l
C	mpn/s390_64/copyi.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/copyi.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/copyi.asm	/^C z900		 1.25$/;"	l
C	mpn/s390_64/copyi.asm	/^C z990           0.75$/;"	l
C	mpn/s390_64/invert_limb.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/invert_limb.asm	/^C z10	       120$/;"	l
C	mpn/s390_64/invert_limb.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/invert_limb.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/invert_limb.asm	/^C z900	       142$/;"	l
C	mpn/s390_64/invert_limb.asm	/^C z990          86$/;"	l
C	mpn/s390_64/logops_n.asm	/^C	        rp!=up  rp=up$/;"	l
C	mpn/s390_64/logops_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/logops_n.asm	/^C cycles\/limb     variant 1           variant 2       variant 3$/;"	l
C	mpn/s390_64/logops_n.asm	/^C z10		 3.25			 3.75		 3.75$/;"	l
C	mpn/s390_64/logops_n.asm	/^C z196		 ?			 ?		 ?$/;"	l
C	mpn/s390_64/logops_n.asm	/^C z9		 ?			 ?		 ?$/;"	l
C	mpn/s390_64/logops_n.asm	/^C z900		 4.5	 2.25		 5.5		 5.5$/;"	l
C	mpn/s390_64/logops_n.asm	/^C z990		 2.75	 2		 3.25		 3.25$/;"	l
C	mpn/s390_64/lshift.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/lshift.asm	/^C    found any 8-way loop that runs better than the current 4-way loop.$/;"	l
C	mpn/s390_64/lshift.asm	/^C    similarly to the x86_64 sqr_basecase feed-in.$/;"	l
C	mpn/s390_64/lshift.asm	/^C    stmg is not faster.$/;"	l
C	mpn/s390_64/lshift.asm	/^C  * Consider using the same feed-in code for 1 <= n <= 3 as for n mod 4,$/;"	l
C	mpn/s390_64/lshift.asm	/^C  * One could assume more pipelining could approach 2.5 c\/l, but we have not$/;"	l
C	mpn/s390_64/lshift.asm	/^C  * This uses discrete loads and stores in a software pipeline.  Using lmg and$/;"	l
C	mpn/s390_64/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/lshift.asm	/^C NOTES$/;"	l
C	mpn/s390_64/lshift.asm	/^C z10		 6$/;"	l
C	mpn/s390_64/lshift.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/lshift.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/lshift.asm	/^C z900		 7$/;"	l
C	mpn/s390_64/lshift.asm	/^C z990           3$/;"	l
C	mpn/s390_64/lshiftc.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/lshiftc.asm	/^C  * See notes in lshift.asm.$/;"	l
C	mpn/s390_64/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/lshiftc.asm	/^C NOTES$/;"	l
C	mpn/s390_64/lshiftc.asm	/^C z10		 7$/;"	l
C	mpn/s390_64/lshiftc.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/lshiftc.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/lshiftc.asm	/^C z900		 9$/;"	l
C	mpn/s390_64/lshiftc.asm	/^C z990           3.5$/;"	l
C	mpn/s390_64/mod_34lsub1.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/mod_34lsub1.asm	/^C  * Optimise summation code, see x86_64.$/;"	l
C	mpn/s390_64/mod_34lsub1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/mod_34lsub1.asm	/^C TODO$/;"	l
C	mpn/s390_64/mod_34lsub1.asm	/^C z10		 4.5$/;"	l
C	mpn/s390_64/mod_34lsub1.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/mod_34lsub1.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/mod_34lsub1.asm	/^C z900		 5.8$/;"	l
C	mpn/s390_64/mod_34lsub1.asm	/^C z990           2$/;"	l
C	mpn/s390_64/mul_1.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/mul_1.asm	/^C z10		20$/;"	l
C	mpn/s390_64/mul_1.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/mul_1.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/mul_1.asm	/^C z900		29$/;"	l
C	mpn/s390_64/mul_1.asm	/^C z990		22$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C    up by about 10%.$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C  * Perhaps add special case for un <= 2.$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C  * Replace loops by faster code.  The mul_1 and addmul_1 loops could be sped$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C addmul_1 loop ===============================================================$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C mul_1 =======================================================================$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C un = vn = 1$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C z10		28$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C z900		 ?$/;"	l
C	mpn/s390_64/mul_basecase.asm	/^C z990		23$/;"	l
C	mpn/s390_64/rshift.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/rshift.asm	/^C  * See notes in lshift.asm.$/;"	l
C	mpn/s390_64/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/rshift.asm	/^C NOTES$/;"	l
C	mpn/s390_64/rshift.asm	/^C z10		 6$/;"	l
C	mpn/s390_64/rshift.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/rshift.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/rshift.asm	/^C z900		 7$/;"	l
C	mpn/s390_64/rshift.asm	/^C z990           3$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C	clr	%r15, %r15		C clear carry (already clear per above)$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C    This will ask for basecase handling of n = 3.$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C    implementations?  The only disadvantage is that it requires R != U.$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C    more.$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C    register usage.$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C    up by about 10%.  The sqr_diag_addlsh1 loop could probably be sped up even$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C  * Clean up.$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C  * Replace loops by faster code.  The mul_1 and addmul_1 loops could be sped$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C  * Should we use this allocation-free style for more sqr_basecase asm$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C  * Stop iterating addmul_1 loop at latest for n = 2, implement longer tail.$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C  * Update counters and pointers more straightforwardly, possibly lowering$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C TODO$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C addmul_1 loop ===============================================================$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C mul_1 =======================================================================$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C n = 1$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C n = 2$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C sqr_diag_addlsh1 ============================================================$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C z10		28$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C z900		 ?$/;"	l
C	mpn/s390_64/sqr_basecase.asm	/^C z990		23$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C  * Compute RETVAL for sublsh1_n less stupidly$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C  * Optimise for small n$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C TODO$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C z10		12$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C z900		10$/;"	l
C	mpn/s390_64/sublsh1_n.asm	/^C z990		 5$/;"	l
C	mpn/s390_64/submul_1.asm	/^C            cycles\/limb$/;"	l
C	mpn/s390_64/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/s390_64/submul_1.asm	/^C z10		28$/;"	l
C	mpn/s390_64/submul_1.asm	/^C z196		 ?$/;"	l
C	mpn/s390_64/submul_1.asm	/^C z9		 ?$/;"	l
C	mpn/s390_64/submul_1.asm	/^C z900		35$/;"	l
C	mpn/s390_64/submul_1.asm	/^C z990		24$/;"	l
C	mpn/sh/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sh/add_n.asm	/^C n		r7$/;"	l
C	mpn/sh/add_n.asm	/^C rp		r4$/;"	l
C	mpn/sh/add_n.asm	/^C up		r5$/;"	l
C	mpn/sh/add_n.asm	/^C vp		r6$/;"	l
C	mpn/sh/sh2/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sh/sh2/addmul_1.asm	/^C res_ptr	r4$/;"	l
C	mpn/sh/sh2/addmul_1.asm	/^C s1_ptr	r5$/;"	l
C	mpn/sh/sh2/addmul_1.asm	/^C s2_limb	r7$/;"	l
C	mpn/sh/sh2/addmul_1.asm	/^C size		r6$/;"	l
C	mpn/sh/sh2/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sh/sh2/mul_1.asm	/^C res_ptr	r4$/;"	l
C	mpn/sh/sh2/mul_1.asm	/^C s1_ptr	r5$/;"	l
C	mpn/sh/sh2/mul_1.asm	/^C s2_limb	r7$/;"	l
C	mpn/sh/sh2/mul_1.asm	/^C size		r6$/;"	l
C	mpn/sh/sh2/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sh/sh2/submul_1.asm	/^C res_ptr	r4$/;"	l
C	mpn/sh/sh2/submul_1.asm	/^C s1_ptr	r5$/;"	l
C	mpn/sh/sh2/submul_1.asm	/^C s2_limb	r7$/;"	l
C	mpn/sh/sh2/submul_1.asm	/^C size		r6$/;"	l
C	mpn/sh/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sh/sub_n.asm	/^C n		r7$/;"	l
C	mpn/sh/sub_n.asm	/^C rp		r4$/;"	l
C	mpn/sh/sub_n.asm	/^C up		r5$/;"	l
C	mpn/sh/sub_n.asm	/^C vp		r6$/;"	l
C	mpn/sparc32/add_n.asm	/^C **  V1a  **$/;"	l
C	mpn/sparc32/add_n.asm	/^C **  V1b  **$/;"	l
C	mpn/sparc32/add_n.asm	/^C **  V2  **$/;"	l
C	mpn/sparc32/add_n.asm	/^C Add blocks of 2 limbs until less than 2 limbs remain$/;"	l
C	mpn/sparc32/add_n.asm	/^C Add blocks of 8 limbs until less than 8 limbs remain$/;"	l
C	mpn/sparc32/add_n.asm	/^C Add last limb$/;"	l
C	mpn/sparc32/add_n.asm	/^C Add least significant limb separately to align res_ptr and s2_ptr$/;"	l
C	mpn/sparc32/add_n.asm	/^C Add least significant limb separately to align s1_ptr and s2_ptr$/;"	l
C	mpn/sparc32/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/add_n.asm	/^C If we come here, the alignment of s1_ptr and res_ptr as well as the$/;"	l
C	mpn/sparc32/add_n.asm	/^C alignment of s2_ptr and res_ptr differ.  Since there are only two ways$/;"	l
C	mpn/sparc32/add_n.asm	/^C of s1_ptr and s2_ptr are the same.$/;"	l
C	mpn/sparc32/add_n.asm	/^C things can be aligned (that we care about) we now know that the alignment$/;"	l
C	mpn/sparc32/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/addmul_1.asm	/^C res_ptr	o0$/;"	l
C	mpn/sparc32/addmul_1.asm	/^C s1_ptr	o1$/;"	l
C	mpn/sparc32/addmul_1.asm	/^C s2_limb	o3$/;"	l
C	mpn/sparc32/addmul_1.asm	/^C size		o2$/;"	l
C	mpn/sparc32/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/lshift.asm	/^C cnt		%o3$/;"	l
C	mpn/sparc32/lshift.asm	/^C res_ptr	%o0$/;"	l
C	mpn/sparc32/lshift.asm	/^C size		%o2$/;"	l
C	mpn/sparc32/lshift.asm	/^C src_ptr	%o1$/;"	l
C	mpn/sparc32/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/mul_1.asm	/^C res_ptr	o0$/;"	l
C	mpn/sparc32/mul_1.asm	/^C s1_ptr	o1$/;"	l
C	mpn/sparc32/mul_1.asm	/^C s2_limb	o3$/;"	l
C	mpn/sparc32/mul_1.asm	/^C size		o2$/;"	l
C	mpn/sparc32/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/rshift.asm	/^C cnt		%o3$/;"	l
C	mpn/sparc32/rshift.asm	/^C res_ptr	%o0$/;"	l
C	mpn/sparc32/rshift.asm	/^C size		%o2$/;"	l
C	mpn/sparc32/rshift.asm	/^C src_ptr	%o1$/;"	l
C	mpn/sparc32/sub_n.asm	/^C **  V1a  **$/;"	l
C	mpn/sparc32/sub_n.asm	/^C **  V1b  **$/;"	l
C	mpn/sparc32/sub_n.asm	/^C **  V2  **$/;"	l
C	mpn/sparc32/sub_n.asm	/^C Add blocks of 2 limbs until less than 2 limbs remain$/;"	l
C	mpn/sparc32/sub_n.asm	/^C Add blocks of 8 limbs until less than 8 limbs remain$/;"	l
C	mpn/sparc32/sub_n.asm	/^C Add last limb$/;"	l
C	mpn/sparc32/sub_n.asm	/^C Add least significant limb separately to align res_ptr and s1_ptr$/;"	l
C	mpn/sparc32/sub_n.asm	/^C Add least significant limb separately to align res_ptr and s2_ptr$/;"	l
C	mpn/sparc32/sub_n.asm	/^C Add least significant limb separately to align s1_ptr and s2_ptr$/;"	l
C	mpn/sparc32/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/sub_n.asm	/^C If we come here, the alignment of s1_ptr and res_ptr as well as the$/;"	l
C	mpn/sparc32/sub_n.asm	/^C alignment of s2_ptr and res_ptr differ.  Since there are only two ways$/;"	l
C	mpn/sparc32/sub_n.asm	/^C of s1_ptr and s2_ptr are the same.$/;"	l
C	mpn/sparc32/sub_n.asm	/^C things can be aligned (that we care about) we now know that the alignment$/;"	l
C	mpn/sparc32/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/submul_1.asm	/^C res_ptr	o0$/;"	l
C	mpn/sparc32/submul_1.asm	/^C s1_ptr	o1$/;"	l
C	mpn/sparc32/submul_1.asm	/^C s2_limb	o3$/;"	l
C	mpn/sparc32/submul_1.asm	/^C size		o2$/;"	l
C	mpn/sparc32/udiv.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/udiv.asm	/^C d		i3$/;"	l
C	mpn/sparc32/udiv.asm	/^C n0		i2$/;"	l
C	mpn/sparc32/udiv.asm	/^C n1		i1$/;"	l
C	mpn/sparc32/udiv.asm	/^C rem_ptr	i0$/;"	l
C	mpn/sparc32/udiv_nfp.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/udiv_nfp.asm	/^C d		o3$/;"	l
C	mpn/sparc32/udiv_nfp.asm	/^C n0		o2$/;"	l
C	mpn/sparc32/udiv_nfp.asm	/^C n1		o1$/;"	l
C	mpn/sparc32/udiv_nfp.asm	/^C rem_ptr	o0$/;"	l
C	mpn/sparc32/ultrasparct1/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/ultrasparct1/addmul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc32/ultrasparct1/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/ultrasparct1/addmul_1.asm	/^C UltraSPARC T1:       24$/;"	l
C	mpn/sparc32/ultrasparct1/addmul_1.asm	/^C UltraSPARC T2:       19$/;"	l
C	mpn/sparc32/ultrasparct1/addmul_1.asm	/^C UltraSPARC T3:       19$/;"	l
C	mpn/sparc32/ultrasparct1/addmul_1.asm	/^C UltraSPARC T4:       5$/;"	l
C	mpn/sparc32/ultrasparct1/mul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc32/ultrasparct1/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/ultrasparct1/mul_1.asm	/^C UltraSPARC T1:       20$/;"	l
C	mpn/sparc32/ultrasparct1/mul_1.asm	/^C UltraSPARC T2:       18$/;"	l
C	mpn/sparc32/ultrasparct1/mul_1.asm	/^C UltraSPARC T3:       18$/;"	l
C	mpn/sparc32/ultrasparct1/mul_1.asm	/^C UltraSPARC T4:       4$/;"	l
C	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/ultrasparct1/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/ultrasparct1/submul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc32/ultrasparct1/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/ultrasparct1/submul_1.asm	/^C UltraSPARC T1:       24$/;"	l
C	mpn/sparc32/ultrasparct1/submul_1.asm	/^C UltraSPARC T2:       19$/;"	l
C	mpn/sparc32/ultrasparct1/submul_1.asm	/^C UltraSPARC T3:       19$/;"	l
C	mpn/sparc32/ultrasparct1/submul_1.asm	/^C UltraSPARC T4:       5$/;"	l
C	mpn/sparc32/v8/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v8/addmul_1.asm	/^C res_ptr	o0$/;"	l
C	mpn/sparc32/v8/addmul_1.asm	/^C s1_ptr	o1$/;"	l
C	mpn/sparc32/v8/addmul_1.asm	/^C s2_limb	o3$/;"	l
C	mpn/sparc32/v8/addmul_1.asm	/^C size		o2$/;"	l
C	mpn/sparc32/v8/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v8/mul_1.asm	/^C res_ptr	o0$/;"	l
C	mpn/sparc32/v8/mul_1.asm	/^C s1_ptr	o1$/;"	l
C	mpn/sparc32/v8/mul_1.asm	/^C s2_limb	o3$/;"	l
C	mpn/sparc32/v8/mul_1.asm	/^C size		o2$/;"	l
C	mpn/sparc32/v8/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v8/submul_1.asm	/^C res_ptr	o0$/;"	l
C	mpn/sparc32/v8/submul_1.asm	/^C s1_ptr	o1$/;"	l
C	mpn/sparc32/v8/submul_1.asm	/^C s2_limb	o3$/;"	l
C	mpn/sparc32/v8/submul_1.asm	/^C size		o2$/;"	l
C	mpn/sparc32/v8/supersparc/udiv.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v8/supersparc/udiv.asm	/^C d		i3$/;"	l
C	mpn/sparc32/v8/supersparc/udiv.asm	/^C n0		i2$/;"	l
C	mpn/sparc32/v8/supersparc/udiv.asm	/^C n1		i1$/;"	l
C	mpn/sparc32/v8/supersparc/udiv.asm	/^C rem_ptr	i0$/;"	l
C	mpn/sparc32/v8/udiv.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v8/udiv.asm	/^C d		i3$/;"	l
C	mpn/sparc32/v8/udiv.asm	/^C n0		i2$/;"	l
C	mpn/sparc32/v8/udiv.asm	/^C n1		i1$/;"	l
C	mpn/sparc32/v8/udiv.asm	/^C rem_ptr	i0$/;"	l
C	mpn/sparc32/v9/add_n.asm	/^C ---$/;"	l
C	mpn/sparc32/v9/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v9/add_n.asm	/^C On UltraSPARC 1 and 2, this code runs at 3 cycles\/limb from the Dcache and at$/;"	l
C	mpn/sparc32/v9/add_n.asm	/^C This code uses 64-bit operations on `o' and `g' registers.  It doesn't$/;"	l
C	mpn/sparc32/v9/add_n.asm	/^C about 10 cycles\/limb from the Ecache.$/;"	l
C	mpn/sparc32/v9/add_n.asm	/^C happens at least on Slowaris 2.5 and 2.6.$/;"	l
C	mpn/sparc32/v9/add_n.asm	/^C require that `o' registers' upper 32 bits are preserved by the operating$/;"	l
C	mpn/sparc32/v9/add_n.asm	/^C system, but if they are not, they must be zeroed.  That is indeed what$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C      Unrolling would allow deeper scheduling which could improve speed for L2$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C      aren't sufficiently apart-scheduled with just two temp areas.$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C      cache case.$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C      could save many operations.$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C      it is very straightforward to unroll, using an exit branch midways.$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C      memory bandwidth limited, this could save 1.5 cycles\/limb.$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C   1. Combine 32-bit memory operations into 64-bit operations.  Since we're$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C   2. Unroll the inner loop.  Since we already use alternate temporary areas,$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C   3. For mpn_mul_1: Use more alternating temp areas.  The std'es and ldx'es$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C   4. Specialize for particular v values.  If its upper 16 bits are zero, we$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C -- 0$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C -- 1$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C -- 2$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C -- 3$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C -- 4$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C -- 5$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C -- 6$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C Algorithm: We use two floating-point multiplies per limb product, with the$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C BEGIN MAIN LOOP$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C Possible optimizations:$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C UltraSPARC 1&2:     6.5$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C UltraSPARC 3:	      ?$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C into 32-bit pieces.  We convert the two 48-bit products and transfer them to$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C invariant v operand split into two 16-bit pieces, and the u operand split$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C n	i2$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C rp	i0$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C the integer unit.$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C up	i1$/;"	l
C	mpn/sparc32/v9/addmul_1.asm	/^C v	i3$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C      Unrolling would allow deeper scheduling which could improve speed for L2$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C      aren't sufficiently apart-scheduled with just two temp areas.$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C      cache case.$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C      could save many operations.$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C      it is very straightforward to unroll, using an exit branch midways.$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C      memory bandwidth limited, this could save 1.5 cycles\/limb.$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C   1. Combine 32-bit memory operations into 64-bit operations.  Since we're$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C   2. Unroll the inner loop.  Since we already use alternate temporary areas,$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C   3. For mpn_mul_1: Use more alternating temp areas.  The std'es and ldx'es$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C   4. Specialize for particular v values.  If its upper 16 bits are zero, we$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C -- 0$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C -- 1$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C -- 2$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C -- 3$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C -- 4$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C -- 5$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C Algorithm: We use two floating-point multiplies per limb product, with the$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C BEGIN MAIN LOOP$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C Possible optimizations:$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C UltraSPARC 1&2:     6.5$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C UltraSPARC 3:	      ?$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C into 32-bit pieces.  We convert the two 48-bit products and transfer them to$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C invariant v operand split into two 16-bit pieces, and the u operand split$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C n	i2$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C rp	i0$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C the integer unit.$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C up	i1$/;"	l
C	mpn/sparc32/v9/mul_1.asm	/^C v	i3$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	add	%g2,%g1,%g1$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	add	rp,8,rp$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	add	up,4,up$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	andn	%g2,%g5,%g2		C 0000hhhh0000llll$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	bne,pt	%icc,.Loop$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	fdtox	%f4,%f4$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	fdtox	%f6,%f6$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	fitod	%f0,%f4			C hi16$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	fitod	%f1,%f6			C lo16$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	fmuld	%f2,%f4,%f4$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	fmuld	%f2,%f6,%f6$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	fxtod	%f8,%f2$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	ld	[up+0],%f9$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	ldd	[%fp+80],%f0$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	lduw	[up+0],%g4		C 00000000hhhhllll$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	ldx	[%fp-16],%g1$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	ldx	[%fp-24],%g2$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	or	%g3,%g4,%g2		C 0000hhhhXXXXllll$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	sllx	%g2,16,%g2$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	sllx	%g4,16,%g3		C 0000hhhhllll0000$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	srlx	%g1,32,%l0$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	std	%f4,[%fp-24]$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	std	%f6,[%fp-16]$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	stw	%g1,[rp+0]$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	stw	%l0,[rp+4]$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	stx	%g2,[%fp+80]$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C	subcc	n,1,n$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C ---  LOOP MIDDLE$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C --- LOOP BEGIN$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C --- LOOP END$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C ---$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C .Loop:$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C A VIS variant of this code would make the pipeline less deep, since the$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C On UltraSPARC 1 and 2, this code runs at 11 cycles\/limb from the Dcache and$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C This code uses a very deep software pipeline, due to the need for moving data$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C This is non-pipelined code showing the algorithm:$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C forth and back between the integer registers and floating-point registers.$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C masking now done in the integer unit could take place in the floating-point$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C n	i2$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C not much slower from the Ecache.  It would perhaps be possible to shave off$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C one cycle, but not easily.  We cannot do better than 10 cycles\/limb with the$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C rp	i0$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C too.$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C unit using the FAND instruction.  It would be possible to save several cycles$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C up	i1$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C used instructions, since we have 10 memory operations per limb.  But a VIS$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C variant could run three cycles faster than the corresponding non-VIS code.$/;"	l
C	mpn/sparc32/v9/sqr_diagonal.asm	/^C$/;"	l
C	mpn/sparc32/v9/sub_n.asm	/^C ---$/;"	l
C	mpn/sparc32/v9/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v9/sub_n.asm	/^C On UltraSPARC 1 and 2, this code runs at 3 cycles\/limb from the Dcache and at$/;"	l
C	mpn/sparc32/v9/sub_n.asm	/^C This code uses 64-bit operations on `o' and `g' registers.  It doesn't$/;"	l
C	mpn/sparc32/v9/sub_n.asm	/^C about 10 cycles\/limb from the Ecache.$/;"	l
C	mpn/sparc32/v9/sub_n.asm	/^C happens at least on Slowaris 2.5 and 2.6.$/;"	l
C	mpn/sparc32/v9/sub_n.asm	/^C require that `o' registers' upper 32 bits are preserved by the operating$/;"	l
C	mpn/sparc32/v9/sub_n.asm	/^C system, but if they are not, they must be zeroed.  That is indeed what$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C      Unrolling would allow deeper scheduling which could improve speed for L2$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C      aren't sufficiently apart-scheduled with just two temp areas.$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C      cache case.$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C      could save many operations.$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C      it is very straightforward to unroll, using an exit branch midways.$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C      memory bandwidth limited, this could save 1.5 cycles\/limb.$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C   1. Combine 32-bit memory operations into 64-bit operations.  Since we're$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C   2. Unroll the inner loop.  Since we already use alternate temporary areas,$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C   3. For mpn_mul_1: Use more alternating temp areas.  The std'es and ldx'es$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C   4. Specialize for particular v values.  If its upper 16 bits are zero, we$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C -- 0$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C -- 1$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C -- 2$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C -- 3$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C -- 4$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C -- 5$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C -- 6$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C Algorithm: We use two floating-point multiplies per limb product, with the$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C BEGIN MAIN LOOP$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C Possible optimizations:$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C UltraSPARC 1&2:     6.5$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C UltraSPARC 3:	      ?$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C into 32-bit pieces.  We convert the two 48-bit products and transfer them to$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C invariant v operand split into two 16-bit pieces, and the u operand split$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C n	i2$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C rp	i0$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C the integer unit.$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C up	i1$/;"	l
C	mpn/sparc32/v9/submul_1.asm	/^C v	i3$/;"	l
C	mpn/sparc32/v9/udiv.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc32/v9/udiv.asm	/^C d		o3$/;"	l
C	mpn/sparc32/v9/udiv.asm	/^C n0		o2$/;"	l
C	mpn/sparc32/v9/udiv.asm	/^C n1		o1$/;"	l
C	mpn/sparc32/v9/udiv.asm	/^C rem_ptr	o0$/;"	l
C	mpn/sparc64/copyd.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/copyd.asm	/^C UltraSPARC 1&2:	 2$/;"	l
C	mpn/sparc64/copyd.asm	/^C UltraSPARC 3:		 2.5$/;"	l
C	mpn/sparc64/copyd.asm	/^C UltraSPARC T1:	17$/;"	l
C	mpn/sparc64/copyd.asm	/^C UltraSPARC T3:	 6$/;"	l
C	mpn/sparc64/copyd.asm	/^C UltraSPARC T4\/T5:	 2$/;"	l
C	mpn/sparc64/copyd.asm	/^C n	%o2$/;"	l
C	mpn/sparc64/copyd.asm	/^C rptr	%o0$/;"	l
C	mpn/sparc64/copyd.asm	/^C sptr	%o1$/;"	l
C	mpn/sparc64/copyi.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/copyi.asm	/^C UltraSPARC 1&2:	 2$/;"	l
C	mpn/sparc64/copyi.asm	/^C UltraSPARC 3:		 2.5$/;"	l
C	mpn/sparc64/copyi.asm	/^C UltraSPARC T1:	17$/;"	l
C	mpn/sparc64/copyi.asm	/^C UltraSPARC T3:	 6$/;"	l
C	mpn/sparc64/copyi.asm	/^C UltraSPARC T4\/T5:	 2$/;"	l
C	mpn/sparc64/copyi.asm	/^C n	%o2$/;"	l
C	mpn/sparc64/copyi.asm	/^C rptr	%o0$/;"	l
C	mpn/sparc64/copyi.asm	/^C sptr	%o1$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C		  cycles\/bit (approx)$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C (time_in_cycles(bmod_1,1) + call_overhead) \/ (cycles\/bit).$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C Both U and V are single limbs, reduce with bmod if u0 >> v0.$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C Numbers measured with: speed -CD -s32-64 -t32 mpn_gcd_1$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C Threshold of when to call bmod when U is one limb.  Should be about$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C UltraSPARC 1&2:	 5.1$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C UltraSPARC 3:		 5.0$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C UltraSPARC T1:	11.4$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C UltraSPARC T3:	10$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C UltraSPARC T4:	 6$/;"	l
C	mpn/sparc64/gcd_1.asm	/^C ctz_table[n] is the number of trailing zeros on n, or MAXSHIFT if n==0.$/;"	l
C	mpn/sparc64/lshift.asm	/^C		    cycles\/limb$/;"	l
C	mpn/sparc64/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/lshift.asm	/^C UltraSPARC 1&2:	 2$/;"	l
C	mpn/sparc64/lshift.asm	/^C UltraSPARC 3:		 2.5$/;"	l
C	mpn/sparc64/lshift.asm	/^C UltraSPARC T1:	17.5$/;"	l
C	mpn/sparc64/lshift.asm	/^C UltraSPARC T3:	 8$/;"	l
C	mpn/sparc64/lshift.asm	/^C UltraSPARC T4:	 3$/;"	l
C	mpn/sparc64/lshiftc.asm	/^C		    cycles\/limb$/;"	l
C	mpn/sparc64/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/lshiftc.asm	/^C UltraSPARC 1&2:	 3$/;"	l
C	mpn/sparc64/lshiftc.asm	/^C UltraSPARC 3:		 3$/;"	l
C	mpn/sparc64/lshiftc.asm	/^C UltraSPARC T1:	17$/;"	l
C	mpn/sparc64/lshiftc.asm	/^C UltraSPARC T3:	10$/;"	l
C	mpn/sparc64/lshiftc.asm	/^C UltraSPARC T4:	 3.5$/;"	l
C	mpn/sparc64/rshift.asm	/^C		    cycles\/limb$/;"	l
C	mpn/sparc64/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/rshift.asm	/^C UltraSPARC 1&2:	 2$/;"	l
C	mpn/sparc64/rshift.asm	/^C UltraSPARC 3:		 2.5$/;"	l
C	mpn/sparc64/rshift.asm	/^C UltraSPARC T1:	17.5$/;"	l
C	mpn/sparc64/rshift.asm	/^C UltraSPARC T3:	 8$/;"	l
C	mpn/sparc64/rshift.asm	/^C UltraSPARC T4:	 3$/;"	l
C	mpn/sparc64/sec_tabselect.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/sec_tabselect.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/sec_tabselect.asm	/^C UltraSPARC 1&2:	 2 hopefully$/;"	l
C	mpn/sparc64/sec_tabselect.asm	/^C UltraSPARC 3:		 3$/;"	l
C	mpn/sparc64/sec_tabselect.asm	/^C UltraSPARC T1:	17$/;"	l
C	mpn/sparc64/sec_tabselect.asm	/^C UltraSPARC T3:	 ?$/;"	l
C	mpn/sparc64/sec_tabselect.asm	/^C UltraSPARC T4\/T5:	 2.25 hopefully$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C --$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C Compute carry-out from the most significant bits of u,v, and r, where$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C START MAIN LOOP$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C Therefore, it seems futile to try to optimize this any further...$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C This code runs at 4 cycles\/limb on UltraSPARC 1 and 2.  It has a 4 insn$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C UltraSPARC 1&2:     4$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C UltraSPARC 3:	      4.5$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C r=u+v+carry_in, using logic operations.$/;"	l
C	mpn/sparc64/ultrasparc1234/add_n.asm	/^C recurrency, and the UltraSPARC 1 and 2 the IE units are 100% saturated.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      (UltraSPARC-1\/2 use a direct-mapped cache.)  (Perhaps even better would$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      be to align the area to map to the area immediately before up?)$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      could save many operations, in the FPU (fmuld), but more so in the IEU$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      develop mpn_addmul_2.  This would save many integer instructions.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      it could only save 1 cycle\/limb.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      not be greater than needed for L2 cache latency, and also not so great$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      ops.)$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      since we'll be summing 48-bit quantities, which might be simpler.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      that i16 needs to be copied.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      the i00,i16,i32,i48 RAW less apart.  The latter apart-scheduling should$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      to a 32-byte boundary.  That would minimize the cache collision.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C      to get high IEU bandwidth.  (12 of the 14 cycles will be free for 2 IEU$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C    1 BRANCH$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C    8 FM$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   0. Rewrite to use algorithm of mpn_addmul_2.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   1. Align the stack area where we transfer the four 49-bit product-sums$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   10 FA$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   10 ISHIFT + 14 IADDLOG$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   12 MEM$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   2. Sum the 4 49-bit quantities using 32-bit operations, as in the$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   3. Unrolling.  Questionable if it is worth the code expansion, given that$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   4. Specialize for particular v values.  If its upper 32 bits are zero, we$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   5. Ideally, we should schedule the f2\/f3 and f4\/f5 RAW further apart, and$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   55 insns totally (plus one mov insn that should be optimized out)$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C   6. Avoid performing mem+fa+fm in the same cycle, at least not when we want$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 00$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 01$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 02$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 03$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 04$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 05$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 06$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 07$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 08$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 09$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 10$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 11$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 12$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C 13$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C Algorithm: We use eight floating-point multiplies per limb product, with the$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C BEGIN MAIN LOOP$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C Initialization.  (1) Split v operand into four 16-bit chunks and store them$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C Instruction classification (as per UltraSPARC-1\/2 functional units):$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C Possible optimizations:$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C Start real work.  (We sneakingly read f3 and f5 above...)$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C The loop executes 56 instructions in 14 cycles on UltraSPARC-1\/2, i.e we$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C The software pipeline is very deep, requiring 4 feed-in stages.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C UltraSPARC 1&2:     14$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C UltraSPARC 3:	      17.5$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C as IEEE double in fp registers.  (2) Clear upper 32 bits of fp register pairs$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C f2 and f4.  (3) Store masks in registers aliased to `xffff' and `xffffffff'.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C floating-point add, then convert the four 49-bit product-sums and transfer$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C into 32-bit pieces.  We sum pairs of 48-bit partial products using$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C invariant v operand split into four 16-bit pieces, and the up operand split$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C n	i2$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C rp	i0$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C sustain the peak execution rate of 4 instructions\/cycle.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C them to the integer unit.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C up	i1$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^C v	i3$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C                  cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C                1       2       1       2$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C               ==========      ==========$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C               mpn_addmul_X     mpn_mul_X$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C      (UltraSPARC-1\/2 use a direct-mapped cache.)  (Perhaps even better would$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C      FA       10      18      10      18$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C      FM        8      16       8      16$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C      be to align the area to map to the area immediately before up?)$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C      can get almost ten free IEU slots, if we clean up bookkeeping and the$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C      code.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C      silly carry-limb code.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C      to a 32-byte boundary.  That would minimize the cache collision.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C     MEM       12      12      10      10$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C   .       .       .$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C   .       |__rXXX_|	32$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C   .      |___cy___|	34$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C   .  |_______i00__|	50$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C   1. Align the stack area where we transfer the four 50-bit product-sums$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C   2. Perform two of the fp->int conversions with integer instructions.  We$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C   3. For an mpn_addmul_1 based on this, we need to fix the silly carry-limb$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C  64      32       0$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C  BRANCH        1       1       1       1$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C  ISHIFT        6       6       6       6$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C  |_______i16__|   .	50$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C 2-limb v operand split into eight 16-bit pieces, and the n-limb u operand$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Algorithm: We use 16 floating-point multiplies per limb product, with the$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Assuming silly carry code is fixed.  Includes bookkeeping.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C BEGIN MAIN LOOP$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Combine registers:$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C FI	= 20$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C FPU cycles    10      18      10      18$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Free: f52 f54$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C IADDLOG       11      11      10      10$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C IEU cycles     8.5     8.5     8       8$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C ISSUE cycles  12      16      11.25   15.25$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Initialization done.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Initialization.  (1) Split v operand into eight 16-bit chunks and store them$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Instruction classification (as per UltraSPARC functional units).$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C L	=  9 x un * vn$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C MEM cycles    12      12      10      10$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C OSP (Overlapping software pipeline) version of mpn_mul_basecase:$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Operand swap will require 8 LDDA and 8 FXTOD, which will mean 8 cycles.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Possible optimizations:$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C Start software pipeline.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C TOTAL         48      64      45      61$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C TOTAL IEU     17      17      16      16$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C This code could be better scheduled.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C UltraSPARC 1&2:      9$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C UltraSPARC 3:       10$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C WD	= 4$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C WDFI	= 10 x vn \/ 2$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C WIND-DOWN PHASE 1$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C WIND-DOWN PHASE 2$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C WIND-DOWN PHASE 3$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C a000  = out000$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C a016  = out016$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C as IEEE double in fp registers.  (2) Clear upper 32 bits of fp register pairs$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C cycles\/limb   12       9      12       9$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C cycles\/loop   12      18      12      18$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C f2 and f4.  (3) Store masks in registers aliased to `xffff' and `xffffffff'.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C floating-point add, then convert the resulting four 50-bit quantities and$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C mid$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C midloop$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C n		i2$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C rp[n + 1]	i0$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C split into 32-bit pieces.  We sum four 48-bit partial products using$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C transfer them to the integer unit.$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C u00_hi= u32_hi$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C u00_lo= u32_lo$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C up[n]		i1$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C vp[2]		i3$/;"	l
C	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^C$/;"	l
C	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^C --$/;"	l
C	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^C UltraSPARC 1&2:     3$/;"	l
C	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^C UltraSPARC 3:	      2.67$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      (UltraSPARC-1\/2 use a direct-mapped cache.)  (Perhaps even better would$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      be to align the area to map to the area immediately before s1?)$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      could save many operations, in the FPU (fmuld), but more so in the IEU$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      develop mpn_addmul_2.  This would save many integer instructions.$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      it could only save 1 cycle\/limb.$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      not be greater than needed for L2 cache latency, and also not so great$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      ops.)$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      since we'll be summing 48-bit quantities, which might be simpler.$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      that i16 needs to be copied.$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      the i00,i16,i32,i48 RAW less apart.  The latter apart-scheduling should$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      to a 32-byte boundary.  That would minimize the cache collision.$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C      to get high IEU bandwidth.  (12 of the 14 cycles will be free for 2 IEU$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C    1 BRANCH$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C    8 FM$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   1. Align the stack area where we transfer the four 49-bit product-sums$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   10 FA$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   11 MEM$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   2. Sum the 4 49-bit quantities using 32-bit operations, as in the$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   3. Unrolling.  Questionable if it is worth the code expansion, given that$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   4. Specialize for particular v values.  If its upper 32 bits are zero, we$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   49 insns totally (plus three mov insns that should be optimized out)$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   5. Ideally, we should schedule the f2\/f3 and f4\/f5 RAW further apart, and$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   6. Avoid performing mem+fa+fm in the same cycle, at least not when we want$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C   9 ISHIFT + 10? IADDLOG$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 00$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 01$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 02$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 03$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 04$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 05$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 06$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 07$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 08$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 09$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 10$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 11$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 12$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C 13$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C Algorithm: We use eight floating-point multiplies per limb product, with the$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C BEGIN MAIN LOOP$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C Initialization.  (1) Split v operand into four 16-bit chunks and store them$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C Instruction classification (as per UltraSPARC-1\/2 functional units):$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C Possible optimizations:$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C Start real work.  (We sneakingly read f3 and f5 above...)$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C The loop executes 53 instructions in 14 cycles on UltraSPARC-1\/2, i.e we$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C The software pipeline is very deep, requiring 4 feed-in stages.$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C UltraSPARC 1&2:     14$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C UltraSPARC 3:	      18.5$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C as IEEE double in fp registers.  (2) Clear upper 32 bits of fp register pairs$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C f2 and f4.  (3) Store masks in registers aliased to `xffff' and `xffffffff'.$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C floating-point add, then convert the four 49-bit product-sums and transfer$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C into 32-bit pieces.  We sum pairs of 48-bit partial products using$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C invariant v operand split into four 16-bit pieces, and the s1 operand split$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C n	i2$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C rp	i0$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C sustain 3.79 instructions\/cycle.$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C them to the integer unit.$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C up	i1$/;"	l
C	mpn/sparc64/ultrasparc1234/mul_1.asm	/^C v	i3$/;"	l
C	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^C This was generated by the Sun C compiler.  It runs at 22 cycles\/limb on the$/;"	l
C	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^C Ultimately, this should be replaced by hand-written code in the same software$/;"	l
C	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^C UltraSPARC 1&2:     22$/;"	l
C	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^C UltraSPARC 3:	      36$/;"	l
C	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^C UltraSPARC-1\/2, three cycles slower than theoretically possible for optimal$/;"	l
C	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^C code using the same algorithm.  For 1-3 limbs, a special loop was generated,$/;"	l
C	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^C pipeline style as e.g., addmul_1.asm.$/;"	l
C	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^C which causes performance problems in particular for 2 and 3 limbs.$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C --$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C Compute carry-out from the most significant bits of u,v, and r, where$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C START MAIN LOOP$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C Therefore, it seems futile to try to optimize this any further...$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C This code runs at 4 cycles\/limb on UltraSPARC 1 and 2.  It has a 4 insn$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C UltraSPARC 1&2:     4$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C UltraSPARC 3:	      4.5$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C r=u-v-carry_in, using logic operations.$/;"	l
C	mpn/sparc64/ultrasparc1234/sub_n.asm	/^C recurrency, and the UltraSPARC 1 and 2 the IE units are 100% saturated.$/;"	l
C	mpn/sparc64/ultrasparc1234/submul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparc1234/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparc1234/submul_1.asm	/^C UltraSPARC 1&2:     18$/;"	l
C	mpn/sparc64/ultrasparc1234/submul_1.asm	/^C UltraSPARC 3:	      23$/;"	l
C	mpn/sparc64/ultrasparc1234/submul_1.asm	/^C n	i2$/;"	l
C	mpn/sparc64/ultrasparc1234/submul_1.asm	/^C rp	i0$/;"	l
C	mpn/sparc64/ultrasparc1234/submul_1.asm	/^C up	i1$/;"	l
C	mpn/sparc64/ultrasparc1234/submul_1.asm	/^C v	i3$/;"	l
C	mpn/sparc64/ultrasparct1/add_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct1/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct1/add_n.asm	/^C UltraSPARC T1:	 ?$/;"	l
C	mpn/sparc64/ultrasparct1/add_n.asm	/^C UltraSPARC T2:	 ?$/;"	l
C	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^C UltraSPARC T1:	21$/;"	l
C	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^C UltraSPARC T2:	 ?$/;"	l
C	mpn/sparc64/ultrasparct1/addmul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct1/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct1/addmul_1.asm	/^C UltraSPARC T1:	74$/;"	l
C	mpn/sparc64/ultrasparct1/addmul_1.asm	/^C UltraSPARC T2:	 ?$/;"	l
C	mpn/sparc64/ultrasparct1/mul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct1/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct1/mul_1.asm	/^C UltraSPARC T1:	68$/;"	l
C	mpn/sparc64/ultrasparct1/mul_1.asm	/^C UltraSPARC T2:	 ?$/;"	l
C	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^C UltraSPARC T1:	21$/;"	l
C	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^C UltraSPARC T2:	 ?$/;"	l
C	mpn/sparc64/ultrasparct1/sub_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct1/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct1/sub_n.asm	/^C UltraSPARC T1:	 ?$/;"	l
C	mpn/sparc64/ultrasparct1/sub_n.asm	/^C UltraSPARC T2:	 ?$/;"	l
C	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^C UltraSPARC T1:	21$/;"	l
C	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^C UltraSPARC T2:	 ?$/;"	l
C	mpn/sparc64/ultrasparct1/submul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct1/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct1/submul_1.asm	/^C UltraSPARC T1:	74$/;"	l
C	mpn/sparc64/ultrasparct1/submul_1.asm	/^C UltraSPARC T2:	 ?$/;"	l
C	mpn/sparc64/ultrasparct3/add_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/add_n.asm	/^C UltraSPARC T3:	 8$/;"	l
C	mpn/sparc64/ultrasparct3/add_n.asm	/^C UltraSPARC T4:	 3$/;"	l
C	mpn/sparc64/ultrasparct3/addmul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/addmul_1.asm	/^C UltraSPARC T3:	26$/;"	l
C	mpn/sparc64/ultrasparct3/addmul_1.asm	/^C UltraSPARC T4:	4.5$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C		       mul_2           addmul_2$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C		    cycles\/limb      cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C The code is reasonably scheduled but also relies on OoO.  There was hope that$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C The rp loads to g1\/g3 are very much over-scheduled.  Presumably, they could$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C UltraSPARC T3:	22.5		 23.5$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C UltraSPARC T4:	 3.25		 3.75$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C We could almost use 2-way unrolling, but currently the wN registers live too$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C be postponed a full way, and then just one register could be used.$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C iteration needs to be removed.$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C long.  By changing add x,w1,w1 to add x,w1,w0, i.e. migrate the values down-$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C should run no slower.$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C this could run at around 3.0 and 3.5 c\/l respectively, on T4.  Two cycles per$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C wards, 2-way unrolling should become possible.  With n-indexed addressing it$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_2.asm	/^C$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_4.asm	/^C		       mul_4           addmul_4$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_4.asm	/^C		    cycles\/limb      cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_4.asm	/^C The code is well-scheduled and relies on OoO very little.  There is hope that$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_4.asm	/^C UltraSPARC T3:	21.5		22.0$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_4.asm	/^C UltraSPARC T4:	 2.625		 2.75$/;"	l
C	mpn/sparc64/ultrasparct3/aormul_4.asm	/^C this will run at around 2.5 and 2.75 c\/l respectively, on T4.$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C (a xor not b) = (not (a xor b)) which equals (not (a or b)) when (a and b) =$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C 0 as it is in our usage.  This gives us the ones complement for free.$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C FIXME: Add rsblsh_n to this file.$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C For sublsh_n we combine the two shifted limbs using xnor, using the identity$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C UltraSPARC T3:	11$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C UltraSPARC T4:	 4$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C Unfortunately, the same trick will not work for rsblsh_n, which will instead$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C require a separate negation.$/;"	l
C	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^C$/;"	l
C	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^C                  cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^C UltraSPARC T3:	25$/;"	l
C	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^C UltraSPARC T4\/T5:	 4$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C For sub we need ~(a & mask) = (~a | ~mask) but by complementing mask we can$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C UltraSPARC T3:	 8.5$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C UltraSPARC T4:	 3$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C We use a double-pointer trick to allow indexed addressing.  Its setup$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C arguments.$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C cost might be a problem in these functions, since we don't expect huge n$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C instead do ~(a & ~mask) = (~a | mask), allowing us to use the orn insn.$/;"	l
C	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^C$/;"	l
C	mpn/sparc64/ultrasparct3/dive_1.asm	/^C                  cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/dive_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/dive_1.asm	/^C UltraSPARC T3:	31$/;"	l
C	mpn/sparc64/ultrasparct3/dive_1.asm	/^C UltraSPARC T4\/T5:	20-26  hits 20 early, then sharply drops$/;"	l
C	mpn/sparc64/ultrasparct3/hamdist.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/hamdist.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/hamdist.asm	/^C UltraSPARC T3:	18$/;"	l
C	mpn/sparc64/ultrasparct3/hamdist.asm	/^C UltraSPARC T4:	 3.5$/;"	l
C	mpn/sparc64/ultrasparct3/invert_limb.asm	/^C                  cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/invert_limb.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/invert_limb.asm	/^C UltraSPARC T3:	 ?$/;"	l
C	mpn/sparc64/ultrasparct3/invert_limb.asm	/^C UltraSPARC T4\/T5:	 ?$/;"	l
C	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^C                  cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^C UltraSPARC T3:	30$/;"	l
C	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^C UltraSPARC T4\/T5:	 4$/;"	l
C	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^C		    cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^C This is based on the powerpc64\/mode64 code.$/;"	l
C	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^C UltraSPARC T1:	 -$/;"	l
C	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^C UltraSPARC T3:	 5$/;"	l
C	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^C UltraSPARC T4:	 1.57$/;"	l
C	mpn/sparc64/ultrasparct3/mode1o.asm	/^C                  cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/mode1o.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/mode1o.asm	/^C UltraSPARC T3:	30$/;"	l
C	mpn/sparc64/ultrasparct3/mode1o.asm	/^C UltraSPARC T4\/T5:	26$/;"	l
C	mpn/sparc64/ultrasparct3/mul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/mul_1.asm	/^C UltraSPARC T3:	23$/;"	l
C	mpn/sparc64/ultrasparct3/mul_1.asm	/^C UltraSPARC T4:	 3$/;"	l
C	mpn/sparc64/ultrasparct3/popcount.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/popcount.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/popcount.asm	/^C UltraSPARC T3:	15$/;"	l
C	mpn/sparc64/ultrasparct3/popcount.asm	/^C UltraSPARC T4:	 2.5$/;"	l
C	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^C UltraSPARC T3:	?$/;"	l
C	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^C UltraSPARC T4:	>= 4.5$/;"	l
C	mpn/sparc64/ultrasparct3/sub_n.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/sub_n.asm	/^C UltraSPARC T3:	 8$/;"	l
C	mpn/sparc64/ultrasparct3/sub_n.asm	/^C UltraSPARC T4:	 3$/;"	l
C	mpn/sparc64/ultrasparct3/submul_1.asm	/^C		   cycles\/limb$/;"	l
C	mpn/sparc64/ultrasparct3/submul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/sparc64/ultrasparct3/submul_1.asm	/^C UltraSPARC T3:	26$/;"	l
C	mpn/sparc64/ultrasparct3/submul_1.asm	/^C UltraSPARC T4:	 4.5$/;"	l
C	mpn/thumb/add_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/thumb/sub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/vax/addmul_1.asm	/^C Loop for v0 < 0x80000000$/;"	l
C	mpn/vax/addmul_1.asm	/^C Loop for v0 >= 0x80000000$/;"	l
C	mpn/vax/mul_1.asm	/^C Loop for v0 < 0x80000000$/;"	l
C	mpn/vax/mul_1.asm	/^C Loop for v0 >= 0x80000000$/;"	l
C	mpn/vax/submul_1.asm	/^C Loop for v0 < 0x80000000$/;"	l
C	mpn/vax/submul_1.asm	/^C Loop for v0 >= 0x80000000$/;"	l
C	mpn/x86/aors_n.asm	/^C	                    mp_size_t size, mp_limb_t carry);$/;"	l
C	mpn/x86/aors_n.asm	/^C                          mp_size_t size);$/;"	l
C	mpn/x86/aors_n.asm	/^C     cycles\/limb$/;"	l
C	mpn/x86/aors_n.asm	/^C K6	3.5$/;"	l
C	mpn/x86/aors_n.asm	/^C K7	2.25$/;"	l
C	mpn/x86/aors_n.asm	/^C P4	8.75$/;"	l
C	mpn/x86/aors_n.asm	/^C P5	3.375$/;"	l
C	mpn/x86/aors_n.asm	/^C P6	3.125$/;"	l
C	mpn/x86/aors_n.asm	/^C mp_limb_t M4_function_n (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/aors_n.asm	/^C mp_limb_t M4_function_nc (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C                          mp_limb_t mult);$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C AMD K6			12.5$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C AMD K7			 5.25$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C AMD K8$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C Intel Atom$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C P4 model 0  (Willamette)	24.0$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C P4 model 1  (?)		24.0$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C P4 model 2  (Northwood)	24.0$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C P5				14.75$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C P6 model 0-8,10-12		 7.5$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C P6 model 13 (Dothan)		 6.75$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C P6 model 9  (Banias)		 6.7$/;"	l
C	mpn/x86/aorsmul_1.asm	/^C mp_limb_t M4_function_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C				cycles\/limb$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C                           mp_size_t size, mp_limb_t carry);$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C                           mp_size_t size, mp_signed_limb_t carry);$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C                          mp_size_t size);$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C AMD K10$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C AMD K6$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C AMD K7$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C AMD K8$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C Intel Atom			 6$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C P5$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C mp_limb_t mpn_addlshC_n (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C mp_limb_t mpn_addlshC_nc (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C mp_limb_t mpn_rsblshC_n (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aorrlshC_n.asm	/^C mp_limb_t mpn_rsblshC_nc (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C	                   mp_size_t size, mp_limb_t carry);$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C                         mp_size_t size);$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C AMD K10$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C AMD K6$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C AMD K7$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C AMD K8$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C Calculate src1,size M4_description src2,size, and store the result in$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C Intel Atom			 3$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C P5$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C The _nc version accepts 1 or 0 for an initial carry into the low limb of$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C dst,size.  The return value is the carry bit from the top of the result (1$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C mp_limb_t M4_function_n (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C mp_limb_t M4_function_nc (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C or 0).$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C results.$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C the calculation.  Note values other than 1 or 0 here will lead to garbage$/;"	l
C	mpn/x86/atom/aors_n.asm	/^C$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C					cycles\/limb$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C				dst!=src1,src2	dst==src1$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C				mp_limb_t carry);$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C				mp_signed_limb_t borrow);$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C                           mp_size_t size, mp_limb_t borrow);$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C                           mp_size_t size, mp_limb_t carry);$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C                          mp_size_t size,);$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C AMD K10$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C AMD K6$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C AMD K7$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C AMD K8$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C Intel Atom			 7		 6$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C P5$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C if src1 == dst, _ip1 is used$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C mp_limb_t mpn_addlshC_n (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C mp_limb_t mpn_addlshC_n_ip1 (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C mp_limb_t mpn_addlshC_nc (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C mp_limb_t mpn_addlshC_nc_ip1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C mp_limb_t mpn_sublshC_n (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C mp_limb_t mpn_sublshC_n_ip1 (mp_ptr dst, mp_srcptr src, mp_size_t size,);$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C mp_limb_t mpn_sublshC_nc (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/atom/aorslshC_n.asm	/^C mp_limb_t mpn_sublshC_nc_ip1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C AMD K6			 ?$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C AMD K7			 ?$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C AMD K8			 ?$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C Intel atom			 4.67$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C P4 model 0-1 (Willamette)	 ?$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C P4 model 2   (Northwood)	 ?$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C P4 model 3-4 (Prescott)	 ?$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C P5				 ?$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C P6 model 0-8,10-12		 ?$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C P6 model 13  (Dothan)		 ?$/;"	l
C	mpn/x86/atom/cnd_add_n.asm	/^C P6 model 9   (Banias)		 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C AMD K6			 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C AMD K7			 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C AMD K8			 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C Intel atom			 5.67$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C P4 model 0-1 (Willamette)	 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C P4 model 2   (Northwood)	 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C P4 model 3-4 (Prescott)	 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C P5				 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C P6 model 0-8,10-12		 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C P6 model 13  (Dothan)		 ?$/;"	l
C	mpn/x86/atom/cnd_sub_n.asm	/^C P6 model 9   (Banias)		 ?$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C				   cycles\/limb$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C				op	nop	opn$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C AMD K10$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C AMD K6$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C AMD K7$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C AMD K8$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C Intel Atom			 3	 3.5	 3.5$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C P5$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C void M4_function (mp_ptr dst, mp_srcptr src2, mp_srcptr src1, mp_size_t size);$/;"	l
C	mpn/x86/atom/logops_n.asm	/^C$/;"	l
C	mpn/x86/atom/lshift.asm	/^C				  cycles\/limb$/;"	l
C	mpn/x86/atom/lshift.asm	/^C				cnt!=1	cnt==1$/;"	l
C	mpn/x86/atom/lshift.asm	/^C			unsigned cnt);$/;"	l
C	mpn/x86/atom/lshift.asm	/^C AMD K10$/;"	l
C	mpn/x86/atom/lshift.asm	/^C AMD K6$/;"	l
C	mpn/x86/atom/lshift.asm	/^C AMD K7$/;"	l
C	mpn/x86/atom/lshift.asm	/^C AMD K8$/;"	l
C	mpn/x86/atom/lshift.asm	/^C Intel Atom			 5	 2.5$/;"	l
C	mpn/x86/atom/lshift.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/atom/lshift.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/atom/lshift.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/atom/lshift.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/atom/lshift.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/atom/lshift.asm	/^C P5$/;"	l
C	mpn/x86/atom/lshift.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/atom/lshift.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/atom/lshift.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/atom/lshift.asm	/^C We can use faster code for shift-by-1 under certain conditions.$/;"	l
C	mpn/x86/atom/lshift.asm	/^C mp_limb_t mpn_lshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C				cycles\/limb$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C			 unsigned cnt);$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C AMD K10$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C AMD K6$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C AMD K7$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C AMD K8$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C Intel Atom			 5.5$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C P5$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/atom/lshiftc.asm	/^C mp_limb_t mpn_lshiftc (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/atom/rshift.asm	/^C				cycles\/limb$/;"	l
C	mpn/x86/atom/rshift.asm	/^C			unsigned cnt);$/;"	l
C	mpn/x86/atom/rshift.asm	/^C AMD K10$/;"	l
C	mpn/x86/atom/rshift.asm	/^C AMD K6$/;"	l
C	mpn/x86/atom/rshift.asm	/^C AMD K7$/;"	l
C	mpn/x86/atom/rshift.asm	/^C AMD K8$/;"	l
C	mpn/x86/atom/rshift.asm	/^C Intel Atom			 5$/;"	l
C	mpn/x86/atom/rshift.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/atom/rshift.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/atom/rshift.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/atom/rshift.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/atom/rshift.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/atom/rshift.asm	/^C P5$/;"	l
C	mpn/x86/atom/rshift.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/atom/rshift.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/atom/rshift.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/atom/rshift.asm	/^C mp_limb_t mpn_rshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C	ALIGN(16)			C alignment seems irrelevant$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C AMD K6$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C AMD K7			 -$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C AMD K8$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C Intel Atom			 8$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C P5				 -$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C P6 model 0-8,10-12		 -$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/atom/sse2/aorsmul_1.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C AMD K6			 -$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C AMD K7			 -$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C AMD K8$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C Intel Atom			 7.5$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C P5				 -$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C P6 model 0-8,10-12		 -$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/atom/sse2/mul_1.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C	jmp	L(done)$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C                        mp_srcptr xp, mp_size_t xn,$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C                        mp_srcptr yp, mp_size_t yn);$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C    4 large loops into one; we could use it for the outer loop branch.$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C    for inlined mul_1, allowing us to postpone all pushes.$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C    outer each loop.  ("Overlapping software pipelining")$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C  * Check if 'jmp N(%esp)' is well-predicted enough to allow us to combine the$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C  * Optimise code outside of inner loops.$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C  * Perhaps write special code for vn <= un < M, for some small M.$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C  * Postpone push of ebx until we know vn > 1.  Perhaps use caller-saves regs$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C  * Write combined addmul_1 feed-in a wind-down code, and use when iterating$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C ================================================================$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C void mpn_mul_basecase (mp_ptr wp,$/;"	l
C	mpn/x86/atom/sse2/mul_basecase.asm	/^C$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C	ALIGN(16)		C alignment seems irrelevant$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C	jmp	L(ol1)$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C	jz	L(done)$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C                        mp_srcptr xp, mp_size_t xn);$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C    4 large loops into one; we could use it for the outer loop branch.$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C    Consider breaking out earlier, saving high the cost of short loops.$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C    all pushes.$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C    outer each loop.  ("Overlapping software pipelining")$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C    with even less pipelined code.$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C  * Check if 'jmp N(%esp)' is well-predicted enough to allow us to combine the$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C  * Optimise code outside of inner loops.$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C  * Perhaps use caller-saves regs for inlined mul_1, allowing us to postpone$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C  * Perhaps write special code for n < M, for some small M.$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C  * Replace inlined addmul_1 with smaller code from aorsmul_1.asm, or perhaps$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C  * We run the outer loop until we have a 2-limb by 1-limb addmul_1 left.$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C  * Write combined addmul_1 feed-in a wind-down code, and use when iterating$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C  lea	(rp), rp$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C ================================================================$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C TODO$/;"	l
C	mpn/x86/atom/sse2/sqr_basecase.asm	/^C void mpn_sqr_basecase (mp_ptr wp,$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C  * Optimize for more x86 processors$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C AMD K10$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C AMD K6$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C AMD K7			 3.5$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C AMD K8$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C Intel Atom$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C P4 model 2  (Northwood)	13.67$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C P5$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C P6 model 0-8,10-12)$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C P6 model 13 (Dothan)		 5.1$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/bdiv_dbm1c.asm	/^C TODO$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C		    mp_limb_t inverse, int shift)$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C                           mp_limb_t divisor);$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C     cycles\/limb$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C K6     14.0$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C K7     12.0$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C P4     42.0$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C P54    30.0$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C P55    29.0$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C P6     13.0 odd divisor, 12.0 even (strangely)$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C mp_limb_t mpn_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C mp_limb_t$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C mpn_pi1_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor,$/;"	l
C	mpn/x86/bdiv_q_1.asm	/^C$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C AMD K6			 ?$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C AMD K7			 3.4$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C AMD K8			 ?$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C Intel atom			11$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C P4 model 0-1 (Willamette)	 ?$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C P4 model 2   (Northwood)	14.5$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C P4 model 3-4 (Prescott)	21$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C P5				 ?$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C P6 model 0-8,10-12		 ?$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C P6 model 13  (Dothan)		 5.4$/;"	l
C	mpn/x86/cnd_aors_n.asm	/^C P6 model 9   (Banias)		 ?$/;"	l
C	mpn/x86/copyd.asm	/^C     cycles\/limb  startup (approx)$/;"	l
C	mpn/x86/copyd.asm	/^C (Startup time includes some function call overheads.)$/;"	l
C	mpn/x86/copyd.asm	/^C Copy src,size to dst,size, working from high to low addresses.$/;"	l
C	mpn/x86/copyd.asm	/^C K6	  1.0	      55$/;"	l
C	mpn/x86/copyd.asm	/^C K7	  1.3	      75$/;"	l
C	mpn/x86/copyd.asm	/^C P4	  2.6	     175$/;"	l
C	mpn/x86/copyd.asm	/^C P5	  1.0	      40$/;"	l
C	mpn/x86/copyd.asm	/^C P6	  2.4	      70$/;"	l
C	mpn/x86/copyd.asm	/^C The code here is very generic and can be expected to be reasonable on all$/;"	l
C	mpn/x86/copyd.asm	/^C the x86 family.$/;"	l
C	mpn/x86/copyd.asm	/^C void mpn_copyd (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/copyd.asm	/^C$/;"	l
C	mpn/x86/copyi.asm	/^C       above 50 limbs or so.$/;"	l
C	mpn/x86/copyi.asm	/^C       aligned or a 1.0 rep movs if not.  But that seemed excessive since$/;"	l
C	mpn/x86/copyi.asm	/^C       branch misprediction that would destroy any saving.  For now a plain$/;"	l
C	mpn/x86/copyi.asm	/^C       cycles, but doing something special for small sizes could lead to a$/;"	l
C	mpn/x86/copyi.asm	/^C       fully aligned).  A rep movs seems to have a startup time of about 15$/;"	l
C	mpn/x86/copyi.asm	/^C       it only got an advantage half the time, and even then only showed it$/;"	l
C	mpn/x86/copyi.asm	/^C       movs in all cases.  The fastest MMX found was 0.8 cycles\/limb (when$/;"	l
C	mpn/x86/copyi.asm	/^C       rep movs seems ok.$/;"	l
C	mpn/x86/copyi.asm	/^C     cycles\/limb  startup (approx)$/;"	l
C	mpn/x86/copyi.asm	/^C (Startup time includes some function call overheads.)$/;"	l
C	mpn/x86/copyi.asm	/^C Copy src,size to dst,size, working from low to high addresses.$/;"	l
C	mpn/x86/copyi.asm	/^C K6	  1.0	      30$/;"	l
C	mpn/x86/copyi.asm	/^C K62 - We used to have a big chunk of code doing an MMX copy at 0.56 c\/l if$/;"	l
C	mpn/x86/copyi.asm	/^C K7	  1.3	      65$/;"	l
C	mpn/x86/copyi.asm	/^C P4	  1.0	     120$/;"	l
C	mpn/x86/copyi.asm	/^C P5	  1.0	      35$/;"	l
C	mpn/x86/copyi.asm	/^C P6	  0.75	      45$/;"	l
C	mpn/x86/copyi.asm	/^C P6 -  An MMX based copy was tried, but was found to be slower than a rep$/;"	l
C	mpn/x86/copyi.asm	/^C The code here is very generic and can be expected to be reasonable on all$/;"	l
C	mpn/x86/copyi.asm	/^C the x86 family.$/;"	l
C	mpn/x86/copyi.asm	/^C void mpn_copyi (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/copyi.asm	/^C$/;"	l
C	mpn/x86/dive_1.asm	/^C                           mp_limb_t divisor);$/;"	l
C	mpn/x86/dive_1.asm	/^C     cycles\/limb$/;"	l
C	mpn/x86/dive_1.asm	/^C K6     14.0$/;"	l
C	mpn/x86/dive_1.asm	/^C K7     12.0$/;"	l
C	mpn/x86/dive_1.asm	/^C P4     42.0$/;"	l
C	mpn/x86/dive_1.asm	/^C P54    30.0$/;"	l
C	mpn/x86/dive_1.asm	/^C P55    29.0$/;"	l
C	mpn/x86/dive_1.asm	/^C P6     13.0 odd divisor, 12.0 even (strangely)$/;"	l
C	mpn/x86/dive_1.asm	/^C mp_limb_t mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/dive_1.asm	/^C$/;"	l
C	mpn/x86/divrem_1.asm	/^C                          mp_limb_t carry);$/;"	l
C	mpn/x86/divrem_1.asm	/^C                          mp_srcptr src, mp_size_t size, mp_limb_t divisor,$/;"	l
C	mpn/x86/divrem_1.asm	/^C                         mp_srcptr src, mp_size_t size, mp_limb_t divisor);$/;"	l
C	mpn/x86/divrem_1.asm	/^C       cycles\/limb$/;"	l
C	mpn/x86/divrem_1.asm	/^C 486   approx 43 maybe$/;"	l
C	mpn/x86/divrem_1.asm	/^C A mul-by-inverse might be a possibility for P5, as done in$/;"	l
C	mpn/x86/divrem_1.asm	/^C A test is done to see if the high limb is less than the divisor, and if so$/;"	l
C	mpn/x86/divrem_1.asm	/^C Divide src,size by divisor and store the quotient in dst+xsize,size.$/;"	l
C	mpn/x86/divrem_1.asm	/^C Essentially the code is the same as the division based part of$/;"	l
C	mpn/x86/divrem_1.asm	/^C Extend the division to fractional quotient limbs in dst,xsize.  Return the$/;"	l
C	mpn/x86/divrem_1.asm	/^C It might be thought that moving the load down to pair with the store would$/;"	l
C	mpn/x86/divrem_1.asm	/^C K6        22$/;"	l
C	mpn/x86/divrem_1.asm	/^C K6 has its own version of this code, using loop and paying attention to$/;"	l
C	mpn/x86/divrem_1.asm	/^C K7        42$/;"	l
C	mpn/x86/divrem_1.asm	/^C Notes for K6:$/;"	l
C	mpn/x86/divrem_1.asm	/^C Notes for P5:$/;"	l
C	mpn/x86/divrem_1.asm	/^C P4        58$/;"	l
C	mpn/x86/divrem_1.asm	/^C P5        44$/;"	l
C	mpn/x86/divrem_1.asm	/^C P6        39$/;"	l
C	mpn/x86/divrem_1.asm	/^C P6MMX     39$/;"	l
C	mpn/x86/divrem_1.asm	/^C cache line boundary crossings.  The target 20 c\/l can be had with the$/;"	l
C	mpn/x86/divrem_1.asm	/^C carry<divisor.$/;"	l
C	mpn/x86/divrem_1.asm	/^C decl+jnz of the present code by pairing up the load and store in the$/;"	l
C	mpn/x86/divrem_1.asm	/^C effectively one extra limb at the top of src,size.  Must have$/;"	l
C	mpn/x86/divrem_1.asm	/^C half that amount.  The branch misprediction penalty on each chip is less$/;"	l
C	mpn/x86/divrem_1.asm	/^C instruction even when gcc is not being used (when longlong.h only has the$/;"	l
C	mpn/x86/divrem_1.asm	/^C is a hinderance, but there could be a 10-15% speedup available.$/;"	l
C	mpn/x86/divrem_1.asm	/^C loops.  But it's considered easier not to introduce complexity just for$/;"	l
C	mpn/x86/divrem_1.asm	/^C mp_limb_t mpn_divrem_1 (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/divrem_1.asm	/^C mp_limb_t mpn_divrem_1c (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/divrem_1.asm	/^C mpn\/generic\/divrem_1.c, but has the advantage that we get the desired divl$/;"	l
C	mpn/x86/divrem_1.asm	/^C mpn\/x86\/pentium\/mod_1.asm.  The number of auxiliary instructions required$/;"	l
C	mpn/x86/divrem_1.asm	/^C mpn_divrem_1c takes a carry parameter which is an initial high limb,$/;"	l
C	mpn/x86/divrem_1.asm	/^C one less div is done.  A div is between 20 and 40 cycles on the various$/;"	l
C	mpn/x86/divrem_1.asm	/^C rather slow generic C udiv_qrnnd().$/;"	l
C	mpn/x86/divrem_1.asm	/^C remainder.  Either or both xsize and size can be 0.$/;"	l
C	mpn/x86/divrem_1.asm	/^C save 1 cycle, but that doesn't seem to happen in practice, and in any case$/;"	l
C	mpn/x86/divrem_1.asm	/^C than half a div.$/;"	l
C	mpn/x86/divrem_1.asm	/^C that, but instead let k6 have its own code.$/;"	l
C	mpn/x86/divrem_1.asm	/^C would be a mere 2.2% saving, so it's hardly worth bothering about.$/;"	l
C	mpn/x86/divrem_1.asm	/^C x86s, so assuming high<divisor about half the time, then this test saves$/;"	l
C	mpn/x86/divrem_1.asm	/^C$/;"	l
C	mpn/x86/divrem_2.asm	/^C		norm	frac$/;"	l
C	mpn/x86/divrem_2.asm	/^C         cnt         qp$/;"	l
C	mpn/x86/divrem_2.asm	/^C     n2  un      up      n1   q0  -d1          di  d0  d1      msl  qp  fn$/;"	l
C	mpn/x86/divrem_2.asm	/^C    some local insn swapping.$/;"	l
C	mpn/x86/divrem_2.asm	/^C  * Clean up stack slot usage.$/;"	l
C	mpn/x86/divrem_2.asm	/^C  * Perhaps keep ecx or esi in stack slot, freeing up a reg for q0.$/;"	l
C	mpn/x86/divrem_2.asm	/^C  * The code outside the main loop is what gcc generated.  Clean up!$/;"	l
C	mpn/x86/divrem_2.asm	/^C  * The loop has not been carefully tuned.  We should at the very least do$/;"	l
C	mpn/x86/divrem_2.asm	/^C 486$/;"	l
C	mpn/x86/divrem_2.asm	/^C A star means numbers not updated for the latest version of the code.$/;"	l
C	mpn/x86/divrem_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86/divrem_2.asm	/^C K6$/;"	l
C	mpn/x86/divrem_2.asm	/^C K7		22$/;"	l
C	mpn/x86/divrem_2.asm	/^C K8		*19$/;"	l
C	mpn/x86/divrem_2.asm	/^C P4-f1$/;"	l
C	mpn/x86/divrem_2.asm	/^C P4-f2		*65$/;"	l
C	mpn/x86/divrem_2.asm	/^C P4-f3$/;"	l
C	mpn/x86/divrem_2.asm	/^C P4-f4		*72$/;"	l
C	mpn/x86/divrem_2.asm	/^C P5$/;"	l
C	mpn/x86/divrem_2.asm	/^C P6-13		29.2$/;"	l
C	mpn/x86/divrem_2.asm	/^C P6-15		*26$/;"	l
C	mpn/x86/divrem_2.asm	/^C TODO$/;"	l
C	mpn/x86/divrem_2.asm	/^C dp$/;"	d
C	mpn/x86/divrem_2.asm	/^C eax ebx ecx edx esi edi ebp  0    4   8   12  16  20  24  28  32   56  60$/;"	l
C	mpn/x86/divrem_2.asm	/^C eax ebx ecx edx esi edi ebp$/;"	l
C	mpn/x86/divrem_2.asm	/^C fn$/;"	l
C	mpn/x86/divrem_2.asm	/^C qp$/;"	l
C	mpn/x86/divrem_2.asm	/^C un_param$/;"	l
C	mpn/x86/divrem_2.asm	/^C up_param$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C Return non-zero if the cpuid instruction is available, which means late$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C The test follows Intel AP-485 application note, namely that if bit 21 is$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C This is called only once, so just something simple and compact is fine.$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C flags while we're tinkering with them.$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C int __gmpn_cpuid_available (void);$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C long __gmpn_cpuid (char dst[12], int id);$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C model 80486 and higher.  80386 and early 80486 don't have cpuid.$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C modifiable then cpuid is supported.  This test is reentrant and thread$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C safe, since of course any interrupt or context switch will preserve the$/;"	l
C	mpn/x86/fat/fat_entry.asm	/^C$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C	                      mp_size_t size, mp_limb_t carry);$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C                          mp_size_t size);$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C (1 or 0).$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C Calculate src1,size M4_description src2,size, and store the result in$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C Instruction decoding limits a normal dst=src1+src2 operation to 3 c\/l, and$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C K6: normal 3.25 cycles\/limb, in-place 2.75 cycles\/limb.$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C The _nc version accepts 1 or 0 for an initial carry into the low limb of$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C an in-place dst+=src to 2.5 c\/l.  The unrolled loops have 1 cycle\/loop of$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C dst,size.  The return value is the carry bit from the top of the result$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C loop control, which with 4 limbs\/loop means an extra 0.25 c\/l.$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C mp_limb_t M4_function_n (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C mp_limb_t M4_function_nc (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C results.$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C the calculation.  Note values other than 1 or 0 here will lead to garbage$/;"	l
C	mpn/x86/k6/aors_n.asm	/^C$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C		M4_inst	%esi, disp(%edi)        1$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C		adcl	%eax, %ecx              2$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C		incl	%esi                  \\ 1$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C		jnc	1f                    \/$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C		movl	%edx, %esi            \\ 1$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C		mull	%ebp                    2$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C	 1    b-1 b-1 x*y    1    b*(b-1)   b*(b-1)$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C	--- * sum sum --- = --- * ------- * ------- = 1\/4$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C	1:	movl	disp(%ebx), %eax      \/$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C	x*y + u*b+v$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C                                               7$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C                                              ---$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C                                         decode cycles$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C                          mp_limb_t mult, mp_limb_t carry);$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C                         mp_limb_t mult);$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C       b^2   x=0 y=1 b^2   b^4      2         2$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C ------$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C -----------------------------------------------------------$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C 11.0 cycles\/limb), and hence isn't used.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C AMD K6			7.65-8.5 (data dependent)$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C AMD K7$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C AMD K8$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C Actually it's a very tiny bit less than 1\/4 of course.  If y is fixed,$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C Attempts at a simpler main loop, with less unrolling, haven't yielded much$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C Don't really know why.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C For the computed jump an odd size means they start one way around, an even$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C In a back-to-back style test this measures 7 with the jnc not taken, or 8$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C In the code the two carries are more or less the preceding mul product and$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C In the simple loop, jadcl0() measures slower than adcl (11.9-14.7 versus$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C In the simple loop, note that running ecx from negative to zero and using$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C It's important that the gains for jadcl0 on small multipliers don't come$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C It's not clear how much branch misprediction might be costing.  The K6$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C P5$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C P6 model 0-8,10-12		 5.94$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C P6 model 13 (Dothan)		 5.57$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C P6 model 9  (Banias)		 5.51$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C The add\/adc for the initial carry in %esi is necessary only for the$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C The code in the unrolled loop decodes something like the following.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C The jadcl0()s in the unrolled loop makes the speed data dependent.  Small$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C The unrolled loop uses a "two carry limbs" scheme.  At the top of the loop$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C To get a carry requires x*y+u*b+v >= b^2, which is u*b+v >= b^2-x*y, and$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C VAR_JUMP holds the computed jump temporarily because there's not enough$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C and b-1, then the total probability can be summed over x and y,$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C at the cost of slowing down other data.  Tests on uniformly distributed$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C carry bit for the jadcl0 only on average about 1\/4 of the time.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C doco says it will be 1 to 4 cycles, but presumably it's near the low end$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C eliminate this for the plain mpn_add\/submul_1 doesn't seem like a good$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C firstly the instruction decoding and secondly the fact that there's a$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C idea.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C instruction (2*addl+loop becoming incl+jnz), but there's nothing unpaired$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C it as an index in the two movs wouldn't help.  It would save one$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C jadcl0$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C jadcl0() being faster than adcl $0 seems to be an artifact of two things,$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C limb from the destination).$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C measurements showing small multipliers running faster than large ones.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C more like 8.4 c\/l.  With adcl's both of these would be 9.3 c\/l.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C mp_limb_t mpn_addmul_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C mp_limb_t mpn_addmul_1c (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C mp_limb_t mpn_submul_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C mp_limb_t mpn_submul_1c (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C mpn_addmul\/submul_1c entry points.  Duplicating the startup code to$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C multipliers (most significant few bits clear) result in few carry bits and$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C of that range to get the measured results.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C overheads included).$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C random data, designed to confound branch prediction, show about a 7%$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C registers at the point of doing the mul for the initial two carry limbs.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C significant few bits set) make the carry bits 50\/50 and lead to something$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C size the other.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C speed-up using jadcl0 over adcl (8.93 versus 9.57 cycles\/limb, with all$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C speeds up to 7.65 cycles\/limb are attained.  Large multipliers (most$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C success, generally running over 9 c\/l.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C that would be collapsed by this.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C the calculation is roughly$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C the carries are ecx=lo, esi=hi, then they swap for each limb processed.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C then the probability is 1\/2*y\/b thus varying linearly between 0 and 1\/2.$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C there are b^2-(b^2-x*y) = x*y many such values, giving a probability of$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C v are the two limbs it's added to (being the low of the next mul, and a$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C where b=2^32 is the size of a limb, x*y is the two carry limbs, and u and$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C with it taken (both when correctly predicted).  This is opposite to the$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C x*y\/b^2.  If x, y, u and v are random and uniformly distributed between 0$/;"	l
C	mpn/x86/k6/aorsmul_1.asm	/^C$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C                          mp_limb_t carry);$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C                          mp_srcptr src, mp_size_t size, mp_limb_t divisor,$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C                         mp_srcptr src, mp_size_t size, mp_limb_t divisor);$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C A test is done to see if the high limb is less than the divisor, and if so$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C Back-to-back div instructions run at 20 cycles, the same as the loop here,$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C Enhancements:$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C K6: 20 cycles\/limb$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C The code here is basically the same as mpn\/x86\/divrem_1.asm, but uses loop$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C The low-latency K6 multiply might be thought to suit a mul-by-inverse, but$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C half the time, then this test saves half that amount.  The branch$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C handling on K6 and too many auxiliary instructions.  The fractional part$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C however could be done at about 13 c\/l, if it mattered enough.$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C instead of decl+jnz, since it comes out 2 cycles\/limb faster.$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C misprediction penalty is less than that.$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C mov and loop instructions was found to gain nothing.$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C mp_limb_t mpn_divrem_1 (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C mp_limb_t mpn_divrem_1c (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C one less div is done.  A div is 20 cycles, so assuming high<divisor about$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C so it seems there's nothing to gain by rearranging the loop.  Pairing the$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C that algorithm has been found to suffer from the relatively poor carry$/;"	l
C	mpn/x86/k6/divrem_1.asm	/^C$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C     11.0 cycles\/limb          Nx1 reduction (modexact_1_odd)$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C A branch-free abs(x-y) and min(x,y) calculation was tried, but that$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C A second computed %cl shift was tried, but that measured a touch slower$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C Calculating a %cl shift based on the low bit 0 or 1 avoids doing a branch$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C Future:$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C K6: 9.5 cycles\/bit (approx)   1x1 gcd$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C This code is nothing very special, but offers a speedup over what gcc 2.95$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C Two or more limbs.$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C Using a lookup table to count trailing zeros seems a touch quicker, but$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C after a slightly longer startup.  Might be worthwhile if an mpn_gcd_2 used$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C can do with mpn\/generic\/gcd_1.c.$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C it too.$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C measured about 1 cycle\/bit slower.$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C mp_limb_t mpn_gcd_1 (mp_srcptr src, mp_size_t size, mp_limb_t y);$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C on a 50\/50 chance of 0 or 1.  The chance of the next bit also being 0 is$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C only 1\/4.$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C remainder, or a modexact_1 style exact division.$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C than branching back.$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C x={src,size} is reduced modulo y using either a plain mod_1 style$/;"	l
C	mpn/x86/k6/gcd_1.asm	/^C$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C Alternatives:$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C If dst is 4mod8 the loop would be 1.17 c\/l, but that's avoided by$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C If the destination alignment is ignored and just left to run at 1.17 c\/l$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C K6-2: 1.0 cycles\/limb$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C The loop here is no faster than a rep movsl at 1.0 c\/l, but it avoids a 30$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C There used to be a big unrolled version of this, running at 0.56 c\/l if$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C cycle startup time, which amounts for instance to a 2x speedup at 15$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C limb are handled in a branch-free fashion, ending up re-copying if the$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C limbs.$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C processing one limb separately to make it aligned.  This and a final odd$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C relative importance of copyd.$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C some code size and a fixed few cycles can be saved.  Considering how few$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C special case isn't needed.$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C the attraction of being no slower than a basic rep movsl though.$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C the destination was aligned, but that seemed rather excessive for the$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C uses copyd finds perhaps that should be favoured.  The current code has$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C void mpn_copyd (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/k6/k62mmx/copyd.asm	/^C$/;"	l
C	mpn/x86/k6/k62mmx/lshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/k6/k62mmx/lshift.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k6/k62mmx/lshift.asm	/^C K6-2: 1.75 cycles\/limb$/;"	l
C	mpn/x86/k6/k62mmx/lshift.asm	/^C mp_limb_t mpn_lshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/k62mmx/lshift.asm	/^C$/;"	l
C	mpn/x86/k6/k62mmx/rshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/k6/k62mmx/rshift.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k6/k62mmx/rshift.asm	/^C K6-2: 1.75 cycles\/limb$/;"	l
C	mpn/x86/k6/k62mmx/rshift.asm	/^C mp_limb_t mpn_rshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/k62mmx/rshift.asm	/^C$/;"	l
C	mpn/x86/k6/mmx/com.asm	/^C       A\/A   A\/N   N\/A   N\/N$/;"	l
C	mpn/x86/k6/mmx/com.asm	/^C    alignment dst\/src, A=0mod8 N=4mod8$/;"	l
C	mpn/x86/k6/mmx/com.asm	/^C K6    1.5   1.85  1.75  1.85$/;"	l
C	mpn/x86/k6/mmx/com.asm	/^C K6-2  1.0   1.18  1.18  1.18  cycles\/limb$/;"	l
C	mpn/x86/k6/mmx/com.asm	/^C Take the bitwise ones-complement of src,size and write it to dst,size.$/;"	l
C	mpn/x86/k6/mmx/com.asm	/^C void mpn_com (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/k6/mmx/com.asm	/^C$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C                      mp_limb_t divisor);$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C         divisor$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C       odd   even$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C 0.5.$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C A simple divl is used for size==1.  This is about 10 cycles faster for an$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C K6-2: 10.0  11.5$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C K6:   10.0  12.0  cycles\/limb$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C Out-of-order execution is good enough to hide the load\/rshift\/movd$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C The loops are quite sensitive to code alignment, speeds should be$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C been found.  Maybe the fact every second movq is unaligned costs the extra$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C changing anything.$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C latency.  Having imul at the top of the loop gives 11.5 c\/l instead of 12,$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C odd divisor or 20 cycles for an even divisor.$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C on K6-2.  In fact there's only 11 of decode, but nothing running at 11 has$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C rechecked (odd and even divisor, pic and non-pic) if contemplating$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C void mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/mmx/dive_1.asm	/^C$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C                   mp_size_t size);$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C           alignment dst\/src1\/src2, A=0mod8, N=4mod8$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C         alignment dst\/src1\/src2, A=0mod8, N=4mod8$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C      A\/A\/A A\/A\/N A\/N\/A A\/N\/N N\/A\/A N\/A\/N N\/N\/A N\/N\/N$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C     A\/A\/A  A\/A\/N  A\/N\/A  A\/N\/N  N\/A\/A  N\/A\/N  N\/N\/A  N\/N\/N$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C Do src1,size M4_operation src2,size, storing the result in dst,size.$/;"	d
C	mpn/x86/k6/mmx/logops_n.asm	/^C Future:$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6                 1.5    2.0                 1.5    2.0    and,andn,ior,xor$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6                 1.75   2.2                 2.0    2.28   iorn,xnor$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6                 2.0    2.25                2.35   2.28   nand,nior$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6    1.5   1.68  1.75  1.2   1.75  1.75  1.68  1.5   and,andn,ior,xor$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6    2.0   2.0   2.25  2.25  2.25  2.25  2.0   2.0   iorn,xnor$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6    2.0   2.25  2.25  2.25  2.25  2.25  2.25  2.0   nand,nior$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6 can do one 64-bit load per cycle so each of these routines should be$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6-2  1.2   1.5   1.5   1.2   1.2   1.5   1.5   1.2   and,andn,ior,xor$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6-2  1.5   1.75  2.0   1.75  1.75  2.0   1.75  1.5   iorn,xnor$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C K6-2  1.75  2.0   2.0   2.0   2.0   2.0   2.0   1.75  nand,nior$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C The others are 4 instructions per 2 limbs, and so can only approach 1.0$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C The raw speeds without this alignment switch are as follows.$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C Unaligned movq loads and stores are a bit slower than aligned ones.  The$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C able to approach 1.0 c\/l, if aligned.  The basic and\/andn\/ior\/xor might be$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C able to get 1.0 with just a 4 limb loop, being 3 instructions per 2 limbs.$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C because there's nowhere to hide some loop control.$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C necessary processes one limb separately at the low end to make it aligned.$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C test at the start of the routine checks the alignment of src1 and if$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C void M4_function (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/k6/mmx/logops_n.asm	/^C$/;"	l
C	mpn/x86/k6/mmx/lshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/k6/mmx/lshift.asm	/^C K6: 3.0 cycles\/limb$/;"	l
C	mpn/x86/k6/mmx/lshift.asm	/^C The loop runs at 3 cycles\/limb, limited by decoding and by having 3 mmx$/;"	l
C	mpn/x86/k6/mmx/lshift.asm	/^C instructions.  This is despite every second fetch being unaligned.$/;"	l
C	mpn/x86/k6/mmx/lshift.asm	/^C mp_limb_t mpn_lshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/mmx/lshift.asm	/^C$/;"	l
C	mpn/x86/k6/mmx/popham.asm	/^C        popcount  hamdist$/;"	l
C	mpn/x86/k6/mmx/popham.asm	/^C K6-2:    9.0       11.5   cycles\/limb$/;"	l
C	mpn/x86/k6/mmx/popham.asm	/^C K6:      12.5      13.0$/;"	l
C	mpn/x86/k6/mmx/popham.asm	/^C The code here isn't optimal, but it's already a 2x speedup over the plain$/;"	l
C	mpn/x86/k6/mmx/popham.asm	/^C integer mpn\/generic\/popcount.c,hamdist.c.$/;"	l
C	mpn/x86/k6/mmx/popham.asm	/^C unsigned long mpn_hamdist (mp_srcptr src, mp_srcptr src2, mp_size_t size);$/;"	l
C	mpn/x86/k6/mmx/popham.asm	/^C unsigned long mpn_popcount (mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/k6/mmx/popham.asm	/^C$/;"	l
C	mpn/x86/k6/mmx/rshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/k6/mmx/rshift.asm	/^C K6: 3.0 cycles\/limb$/;"	l
C	mpn/x86/k6/mmx/rshift.asm	/^C The loop runs at 3 cycles\/limb, limited by decoding and by having 3 mmx$/;"	l
C	mpn/x86/k6/mmx/rshift.asm	/^C instructions.  This is despite every second fetch being unaligned.$/;"	l
C	mpn/x86/k6/mmx/rshift.asm	/^C mp_limb_t mpn_rshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/mmx/rshift.asm	/^C$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C	adcl	(%edx), %eax$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C	adcl	4(%edx), %ebx$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C	adcl	8(%edx), %esi$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C	leal	12(%edx), %edx$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C	loop	L(top)$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C An attempt was made to use a loop like$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C In the code used, putting the "leal"s at the top of the loop is necessary$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C K6: 2.66 cycles\/limb$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C L(top):$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C Perhaps a tight loop like this needs short decode instructions at the$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C The form used instead can save about 6 cycles by not dividing by 3.$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C branch target, which would explain the leal\/loop form above taking 8$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C cycles instead of 7 too.$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C for the claimed speed, anywhere else costs an extra cycle per loop.$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr src, mp_size_t size)$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C with %ecx starting from floor(size\/3), but it still measured 2.66 c\/l.$/;"	l
C	mpn/x86/k6/mod_34lsub1.asm	/^C$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C                                mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C                               mp_limb_t divisor);$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C A special case for high<divisor at the end measured only about 4 cycles$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C A special case for size==1 using a divl rather than the inverse measured$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C K6: 10.0 cycles\/limb$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C Rotating the mul to the top of the loop saves 1 cycle, presumably by$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C The run time is 10 cycles, but decoding is only 9 (and the dependent chain$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C The xor and rcl to handle the carry bit could be an sbb instead, with the$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C faster, and so isn't used.$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C hiding the loop control under the imul latency.$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C high<divisor it can skip a division and be a full 24 cycles faster, but$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C mp_limb_t mpn_modexact_1_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C mp_limb_t mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C only 8).  It's not clear how to get down to 9 cycles.$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C only about 5 cycles faster, and so isn't used.  When size==1 and$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C the carry bit add becoming a sub, but that doesn't save anything.$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C this isn't an important case.$/;"	l
C	mpn/x86/k6/mode1o.asm	/^C$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C                       mp_limb_t multiplier, mp_limb_t carry);$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C                      mp_limb_t multiplier);$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C AMD K6			 6.25$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C AMD K7$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C AMD K8$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C Multiply src,size by mult and store the result in dst,size.$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C P5$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C P6 model 0-8,10-12		 5.5$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C P6 model 13 (Dothan)		 4.87$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C Return the carry limb from the top of the result.$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C The code for each limb is 6 cycles, with instruction decoding being the$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C The secret ingredient to get 6.25 is to start the loop with the mul and$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C The whole unrolled loop fits nicely in exactly 80 bytes.$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C cycles\/limb in total.$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C have the load\/store pair at the end.  Rotating the load\/store to the top$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C is an 0.5 c\/l slowdown.  (Some address generation effect probably.)$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C limiting factor.  At 4 limbs\/loop and 1 cycle\/loop of overhead it's 6.25$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C mp_limb_t mpn_mul_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C mp_limb_t mpn_mul_1c (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C mpn_mul_1c() accepts an initial carry for the calculation, it's added into$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C the low limb of the result.$/;"	l
C	mpn/x86/k6/mul_1.asm	/^C$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C                        mp_srcptr xp, mp_size_t xsize,$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C                        mp_srcptr yp, mp_size_t ysize);$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C     unrolling).$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C (whereas the addmul below is run ysize-1 many times).  A call to the$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C 0, inclusive.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C Calculate xp,xsize multiplied by yp,ysize, storing the result in$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C Enhancements:$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C Having PARAM_YSIZE count negative to zero means it's not necessary to$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C K6: approx 9.0 cycles per cross product on 30x30 limbs (with 16 limbs\/loop$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C Karatsuba multiply code.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C PARAM_WP is similarly offset so that the PARAM_YSIZE counter can be added$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C PARAM_XP and PARAM_WP get offset appropriately for where the unrolled loop$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C PARAM_YP is offset appropriately so that the PARAM_YSIZE counter can be$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C PARAM_YSIZE counter value.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C PARAM_YSIZE is the outer loop counter, going from -(ysize-1) up to -1,$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C Simple addmul loop.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C The first limb of yp is processed with a simple mpn_mul_1 style loop$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C The main unrolled addmul loop could be shared by mpn_addmul_1, using some$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C The mul_1 loop is about 8.5 c\/l, which is slower than mpn_mul_1 at 6.25$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C The unrolled inner loop is the same as in aorsmul_1.asm, see that code for$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C This routine is essentially the same as mpn\/generic\/mul_basecase.c, but$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C Unrolled loop.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C Using ebx and edi pointing at the ends of their respective locations saves$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C VAR_COUNTER is for the inner loop, running from VAR_COUNTER_INIT down to$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C VAR_JMP is the computed jump into the unrolled loop.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C VAR_XP_LOW is the least significant limb of xp, which is needed at the$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C a couple of instructions in the outer loop.  The inner loop is still 11$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C actual mpn_mul_1 will be slowed down by the call and parameter pushing and$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C added to give the location of the next limb of yp, which is the multiplier$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C c\/l.  Could call mpn_mul_1 when ysize is big enough to make it worthwhile.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C cycles, the same as the simple loop in aorsmul_1.asm.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C extra stack setups and maybe 2 or 3 wasted cycles at the end.  Code saving$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C in the unrolled loop.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C inclusive.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C inline.  Unrolling this doesn't seem worthwhile since it's only run once$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C is entered.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C it's faster because it does most of the mpn_addmul_1() entry code only$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C limb operations the Karatsuba code calls here with.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C once.  The saving is about 10-20% on typical sizes coming from the$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C point is one limb upwards for each limb of yp processed).$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C pointer because of the offset applied to it.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C popping, and doesn't seem likely to be worthwhile on the typical 10-20$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C some comments.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C start of the unrolled loop.  This can't just be fetched through the xp$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C store new values of PARAM_YP and PARAM_WP on each loop.  Those values on$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C the stack remain constant and on each loop an leal adjusts them with the$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C to give the starting point in the destination for each unrolled loop (this$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C void mpn_mul_basecase (mp_ptr wp,$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C would be 256 bytes.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C wp,xsize+ysize.$/;"	l
C	mpn/x86/k6/mul_basecase.asm	/^C$/;"	l
C	mpn/x86/k6/pre_mod_1.asm	/^C                             mp_limb_t inverse);$/;"	l
C	mpn/x86/k6/pre_mod_1.asm	/^C K6: 18.0 cycles\/limb$/;"	l
C	mpn/x86/k6/pre_mod_1.asm	/^C Special case for q1=0xFFFFFFFF, giving q=0xFFFFFFFF meaning the low dword$/;"	l
C	mpn/x86/k6/pre_mod_1.asm	/^C This code is only 2 c\/l faster than a simple divl, but that's 10% so it's$/;"	l
C	mpn/x86/k6/pre_mod_1.asm	/^C considered worthwhile (just).$/;"	l
C	mpn/x86/k6/pre_mod_1.asm	/^C mp_limb_t mpn_preinv_mod_1 (mp_srcptr src, mp_size_t size, mp_limb_t divisor,$/;"	l
C	mpn/x86/k6/pre_mod_1.asm	/^C of q*d is simply -d and the remainder n-q*d = n10+d.  This is rarely$/;"	l
C	mpn/x86/k6/pre_mod_1.asm	/^C reached.$/;"	l
C	mpn/x86/k6/pre_mod_1.asm	/^C$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C     product (measured on the speed difference between 17 and 33 limbs,$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C     which is roughly the Karatsuba recursing range).$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C 5780 cycles here.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C 9.0 and 9.2 c\/tri-prod measured on the difference between 17 and 33 limbs.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C A test was done calling mpn_mul_1 here to get the benefit of its unrolled$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C Addmul src[n]*src[n+1..size-1] at dst[2*n-1...], for each n=1..size-2.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C Different values of UNROLL_COUNT give slightly different speeds, between$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C First multiply src[0]*src[1..size-1] and store at dst[1..size].$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C K6 doesn't do any branch prediction on indirect jumps, which is good$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C K6: approx 4.7 cycles per cross product, or 9.2 cycles per triangular$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C Left shift of dst[1..2*size-2], the bit shifted out becomes dst[2*size-1].$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C Now add in the squares on the diagonal, src[0]^2, src[1]^2, ...,$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C The algorithm is essentially the same as mpn\/generic\/sqr_basecase.c, but a$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C The code size might look a bit excessive, but not all of it is executed$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C The last two addmuls, which are the bottom right corner of the product$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C The loop measures about 6 cycles\/iteration, though it looks like it should$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C The unrolled code is the same as mpn_addmul_1(), see that routine for some$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C This isn't a big difference, but it's presumably some alignment effect$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C VAR_COUNTER is the outer loop, running from -(size-4) to -1, inclusive.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C VAR_JMP is the computed jump into the unrolled code, stepped by one code$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C a 5780 cycle operation, which is not surprising since the loop here is 8$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C actually because it's a different target each time.  The unrolled addmul$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C and so won't fill up the code cache.  The 1x1, 2x2 and 3x3 special cases$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C and src[size-2]*src[size-1].  If size is 4 then it's only these corner$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C at least be getting value for money, because 35x35 spends something like$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C c\/l and mpn_mul_1 is 6.25 c\/l.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C cases that need to be done.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C chunk each outer loop.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C clearly apply only to those sizes; mid sizes like 10x10 only need part of$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C comments.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C decode in 5.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C is about 3 cycles\/limb faster than a simple loop, so the 6 cycle cost of$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C is small.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C loop, but this was only a tiny speedup; at 35 limbs it took 24 cycles off$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C lot of function call overheads are avoided, especially when the given size$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C low limb of src[0]^2.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C one limb only$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C src[size-1]^2.  dst[0] hasn't yet been set at all yet, and just gets the$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C the indirect jump is quickly recovered.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C the unrolled addmul; and big sizes like 35x35 that do need all of it will$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C three limbs$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C triangle, are left to the end.  These are src[size-3]*src[size-2,size-1]$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C void mpn_sqr_basecase (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C which if understood could give a simple speedup.$/;"	l
C	mpn/x86/k6/sqr_basecase.asm	/^C$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C AMD K6			 ?$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C AMD K7			 2.5$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C AMD K8$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C Breaking carry recurrency might be a good idea.  We would then need separate$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C Intel Atom			 6$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C It is not clear how to do sublsh1_n or rsblsh1_n using the same pattern.  We$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C P5$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C P6 model 13 (Dothan)		 5.4	(worse than add_n + lshift)$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C The innerloop is 2*3-way unrolled, which is best we can do with the available$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C This is a basic addlsh1_n for k7, atom, and perhaps some other x86-32$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C This is an attempt at an addlsh1_n for x86-32, not relying on sse2 insns.$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C add\/subtract blocks, which is right for addition but reversed for$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C cannot do rsblsh1_n since we feed carry from the shift blocks to the$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C cannot feed carry between operations there.$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C force is to 2*2-way unrolling.$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C latency.$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C processors.  It uses 2*3-way unrolling, for good reasons.  Unfortunately,$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C registers for the shift carry and add\/subtract carry, which in turn would$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C registers.  It seems tricky to use the same structure for rsblsh1_n, since we$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C subtraction.  We could perhaps do sublsh1_n, with some extra move insns,$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C that means we need an initial magic multiply.$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C without losing any time, since we're not issue limited but carry recurrency$/;"	l
C	mpn/x86/k7/addlsh1_n.asm	/^C$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C	                   mp_size_t size, mp_limb_t carry);$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C                         mp_size_t size);$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C Calculate src1,size M4_description src2,size, and store the result in$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C K7: 1.64 cycles\/limb (at 16 limbs\/loop).$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C The _nc version accepts 1 or 0 for an initial carry into the low limb of$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C This code runs at 1.64 cycles\/limb, which might be the best possible with$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C dst,size.  The return value is the carry bit from the top of the result (1$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C mp_limb_t M4_function_n (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C mp_limb_t M4_function_nc (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C or 0).$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C plain integer operations.  Each limb is 2 loads and 1 store, any 2 of$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C results.$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C the calculation.  Note values other than 1 or 0 here will lead to garbage$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C which can be done each cycle, leading to 1.5 c\/l.$/;"	l
C	mpn/x86/k7/aors_n.asm	/^C$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C    but lose by 2x for n == 1.$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C  * Improve feed-in and wind-down code.  We beat the old code for all n != 1,$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C AMD K6$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C AMD K7			 3.75$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C AMD K8$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C P5$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C P6 model 9  (Banias)		 6.5$/;"	l
C	mpn/x86/k7/aorsmul_1.asm	/^C TODO$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C		    mp_limb_t inverse, int shift)$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C                           mp_limb_t divisor);$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C                      mp_limb_t divisor);$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C          cycles\/limb$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C Athlon:     11.0$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C Hammer:      9.0$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C It's a touch faster on size==1 to use the mul-by-inverse than divl.$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C The dependent chain is mul+imul+sub for 11 cycles and that speed is$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C achieved with no special effort.  The load and shrld latencies are hidden$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C by out of order execution.$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C mp_limb_t mpn_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C mp_limb_t$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C mpn_pi1_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor,$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C void mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/bdiv_q_1.asm	/^C$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C                      mp_limb_t divisor);$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C          cycles\/limb$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C Athlon:     11.0$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C Hammer:      9.0$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C It's a touch faster on size==1 to use the mul-by-inverse than divl.$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C The dependent chain is mul+imul+sub for 11 cycles and that speed is$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C achieved with no special effort.  The load and shrld latencies are hidden$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C by out of order execution.$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C void mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/dive_1.asm	/^C$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C	     cycles\/bit (approx)$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C    LEA\/LEAL or else discrete code here.$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C  * For ELF, avoid putting GOT base in both ebx and esi.  Needs special$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C  * Stream things better through registers, avoiding some copying.$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C  * Tune overhead, this takes 2-3 cycles more than old code when v0 is tiny.$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C (time_in_cycles(bmod_1,1) + call_overhead) \/ (cycles\/bit).$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C AMD K10	 5.30$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C AMD K7	 5.31$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C AMD K8,K9	 5.33$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C AMD bd1	 ?$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C AMD bobcat	 7.02$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Both U and V are single limbs, reduce with bmod if u0 >> v0.$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Intel NHM	 6.83$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Intel P4-2	10.1$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Intel P4-3\/4	10.0$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Intel P6\/13	 5.88$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Intel SBR	 8.50$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Intel atom	 8.90$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Intel core2	 6.26$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Numbers measured with: speed -CD -s16-32 -t16 mpn_gcd_1$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C TODO$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C Threshold of when to call bmod when U is one limb.  Should be about$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86/k7/gcd_1.asm	/^C ctz_table[n] is the number of trailing zeros on n, or MAXSHIFT if n==0.$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C			    cycles (approx)	div$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C    the 'div' instruction for PIC builds.$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C   %ebx and %edx are temporaries$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C   %esi and %ebp are unused$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C   Current approximation is in %eax and\/or %ecx$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C   Input D in %edi$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C  * Perhaps use this file--or at least the algorithm--for more machines than k7.$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C  * These c\/l numbers are for a non-PIC build.  Consider falling back to using$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C AMD K6			 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C AMD K7			41		53$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C AMD K8			 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C Make approx_tab global to work around Apple relocation bug.$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C P4 model 0  (Willamette)	 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C P4 model 1  (?)		 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C P4 model 2  (Northwood)	 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C P4 model 3  (Prescott)	 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C P4 model 4  (Nocona)		 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C P5				 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C P6 model 0-8,10-12		 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C P6 model 13 (Dothan)		 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C P6 model 9  (Banias)		 ?$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C Register usage:$/;"	l
C	mpn/x86/k7/invert_limb.asm	/^C TODO$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C (offset by the size, as per the loop addressing) and one high limb$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C 0.5 c\/l if desired.$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C Enhancements:$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C If both src and dst are 4mod8, the loop runs at 1.5 c\/l.  So long as one$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C K7: 1.0 cycles\/limb$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C The combination load\/pxor\/store might be able to be unrolled to approach$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C The loop form below is necessary for the claimed speed.  It needs to be$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C The padding for the nails case is unattractive, but shouldn't cost any$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C aligned to a 16 byte boundary and only 16 bytes long.  Maybe that's so it$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C cycles.  Explicit .byte's guarantee the desired instructions, at a point$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C fits in a BTB entry.  The adjustments to %eax and %edx avoid offsets on$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C of the two is 0mod8, it runs at 1.0 c\/l.  On that basis dst is checked$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C processed separately to get alignment.$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C the movq's and achieve the necessary size.$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C void mpn_com (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C where we're probably stalled waiting for loads anyway.$/;"	l
C	mpn/x86/k7/mmx/com.asm	/^C$/;"	l
C	mpn/x86/k7/mmx/copyd.asm	/^C       A\/A   A\/N   N\/A   N\/N$/;"	l
C	mpn/x86/k7/mmx/copyd.asm	/^C    alignment dst\/src, A=0mod8 N=4mod8$/;"	l
C	mpn/x86/k7/mmx/copyd.asm	/^C K7    0.75  1.0   1.0   0.75$/;"	l
C	mpn/x86/k7/mmx/copyd.asm	/^C The various comments in mpn\/x86\/k7\/copyi.asm apply here too.$/;"	l
C	mpn/x86/k7/mmx/copyd.asm	/^C void mpn_copyd (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/k7/mmx/copyd.asm	/^C$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C       A\/A   A\/N   N\/A   N\/N$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C    alignment dst\/src, A=0mod8 N=4mod8$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C 1.33 c\/l.$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C Copy src,size to dst,size.$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C If both source and destination are unaligned then one limb is processed at$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C K7    0.75  1.0   1.0   0.75$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C The K7 can do a 64-bit load and 64-bit store in one cycle (optimization$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C This code at 0.75 or 1.0 c\/l is always faster than a plain rep movsl at$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C guile 22007 appendix B), so 0.5 c\/l should be possible, however nothing$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C load+store in each cycle, not store+store.$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C one cycle, so perhaps some scheduling is needed to ensure it's a$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C the start to make them aligned and so get 0.75 c\/l, whereas if they'd been$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C under 0.7 c\/l is known.  Apparently only two 32-bit stores can be done in$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C used unaligned it would be 1.5 c\/l.$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C void mpn_copyi (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/k7/mmx/copyi.asm	/^C$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		       ---$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		       16$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		      cycles$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		     <= (b-2)*b$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		     = floor((b(b-d)-1)\/d)*d + b*d - m - b$/;"	d
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		     = m*d + b*d - m - b$/;"	d
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		     = rnd(b(b-d)-1 + b*d) - m - b$/;"	d
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		     = rnd(b(b-d)-1) + b*d - m - b$/;"	d
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		     = rnd(b*b-1) - m - b$/;"	d
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		addback	1$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		mul	6$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		n2+n1	1$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		q1+1	1$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C		sub	1$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C	m*n2 + b*n2 <= m*(d-1) + b*(d-1)$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C	n-q1*d = (n2*k+q0*d)\/b <= d + (d*d-2d)\/b$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C                                mp_limb_t divisor, mp_limb_t inverse,$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C                                mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C                                unsigned shift);$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C                          mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C                          mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C                         mp_limb_t divisor);$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C                         mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C "n-(q1+1)*d"; this rearrangement gives the same two-limb answer.  If$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C "q1_ff" if this occurs.  Since the true quotient is either q1 or q1+1 then$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C (fixed) couple of cycles faster.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C 0xFFF...FFF divided by 1 or 2 doesn't induce it.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C A lower bound for the time would seem to be 16 cycles, based on the$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C A not entirely obvious simplification is that q1+1 never overflows a limb,$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Algorithm:$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Alternatives:$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C As before, the instruction groupings and empty comments show a naive$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Being the fractional part, the "source" limbs are all zero, meaning$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Branch mispredictions will hit random occurrences of q1==0xFFFFFFFF, but$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C For the last and second last steps q1==0xFFFFFFFF is instead handled by an$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Here, and in integer_one_left below, an sbbl $0 is used rather than a jz$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C If the divisor is normalized (high bit set) then a division step can$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C In theory n2+n1 could be done in the sub and addback stages (by$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Integers using Multiplication" by Granlund and Montgomery, reference in$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C It'd be possible to write them out without the looping, but no speedup$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C K7 has enough decode, and probably enough execute (depending maybe on what$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C K7: 17.0 cycles\/limb integer part, 15.0 cycles\/limb fraction part.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Notes:$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Rotating the store q and remainder->n2 instructions up to the top of the$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Special case for q1=0xFFFFFFFF, giving q=0xFFFFFFFF meaning the low dword$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The "and"s shown in the paper are done here with "cmov"s.  "m" is written$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The instruction groupings and empty comments show the cycles for a naive$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The jump is taken only when q1 is 0xFFFFFFFF, and on random data this will$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The jz in the loop keeps the q1+1 stage to 1 cycle.  Handling an overflow$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The loop runs at 15 cycles.  The dependent chain is the same as the$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The method and nomenclature follow part 8 of "Division by Invariant$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The multiply by inverse loop is 17 cycles, and relies on some out-of-order$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The step "sdword dr = n - 2^N*d + (2^N-1-q1) * d" is instead done as$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The store to the destination high limb is 0 when a divide is skipped, or$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C The test for skipping a division is branch free (once size>=1 is tested).$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C There's a small bias towards expecting xsize==0, by having code for$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C This chain is what the loop has already, but 16 cycles isn't achieved.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Unchanged from the general case is that the final quotient limb q can be$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C Using PARAM_DIVISOR instead of %ebp measures 1 cycle\/loop faster on the$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C VAR_INVERSE).  This shows some of where the time is going, but is nonsense$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C With MUL_THRESHOLD set to 3, the simple loops here only do 0 to 2 limbs.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C a mul actually consumes), but nothing running under 17 has been found.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C always be skipped, since the high destination limb is always 0 or 1 in$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C an extra cycle over what the main loop code does, but it keeps code size$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C and complexity down.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C and so there's no need for the sbbl $0 or jz q1_ff from the general case.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C apparently equivalent forms running 1 to 5 cycles slower.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C be an extremely rare event.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C calculating both n2 and n2+n1 there), but lack of registers makes this an$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C carry, since in normal circumstances that will be a very rare event.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C case actually runs at 15 c\/l.  0x2FFF...FFFD divided by 3 is a good way to$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C chain, and nothing better than 18 cycles has been found when using it.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C costs only 1 cycle (each).$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C decimal mpn_get_str is not normalized in a 32-bit limb.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C either q1 or q1+1, and the q1+1 case occurs often.  This can be seen from$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C equation 8.4 of the paper which simplifies as follows when n1==0 and$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C execution.  The instruction scheduling is important, with various$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C execution.  There's 17 cycles shown, but it executes at 15.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C following successive dependencies.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C for 2^N, the size of a limb, N being 32 here.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C for m', and "d" for d_norm, which won't cause any confusion since it's$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C from q1+1 with an "sbbl $0, %ebx" would add a cycle to the dependent$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C general case above, but without the n2+n1 stage (due to n1==0), so 15$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C gmp.texi.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C if it's not skipped then a copy of the src high limb is used.  The latter$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C if q1==0xFFFFFFFF that must be the right value.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C if some special data is coming out with this always, the q1_ff special$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C in-order view of the code (conveniently ignoring the load latency on$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C in-order view of the code, which is made a nonsense by out of order$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C induce the q1_ff case, for speed measurements or testing.  Note that$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C integer part, but curiously not on the fractional part, where %ebp is a$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C is in case src==dst.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C limb is less than the divisor.  mpn_divrem_1c doesn't check for a zero$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C loop gets the run time down from 16 to 15.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C mp_limb_t mpn_divrem_1 (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C mp_limb_t mpn_divrem_1c (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C mp_limb_t mpn_preinv_divrem_1 (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C mpn_divrem_1 and mpn_preinv_divrem_1 avoid one division if the src high$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C n0==0.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C n10=0, n1=0, and hence nadj=0, leading to many instructions eliminated.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C of q*d is simply -d and the remainder n-q*d = n10+d$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C only the normalized divisor that's of any use in the code.  "b" is written$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C probably occurs infrequently, in particular note that big_base for a$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C q1 is the high word of m*n2+b*n2 and the following shows q1<=b-2 always.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C q1==0xFFFFFFFF, then q1+1 would overflow.  We branch to a special case$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C q1_ff special case.  This make the code a bit smaller and simpler, and$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C rnd() means rounding down to a multiple of d.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C sbbl to go back to 0xFFFFFFFF if an overflow occurs when adding 1.  This$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C that case.  It doesn't seem worth checking for this though, since it$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C then goes through as normal, and finding no addback required.  sbbl costs$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C there's 19 cycles shown, but it executes at 17.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C to the extent that out-of-order execution rearranges it.  In this case$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C unlikely proposition.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C would be expected.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C would seem to be the lower bound.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C xsize==0 in a straight line and xsize!=0 under forward jumps.$/;"	l
C	mpn/x86/k7/mmx/divrem_1.asm	/^C$/;"	l
C	mpn/x86/k7/mmx/lshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/k7/mmx/lshift.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k7/mmx/lshift.asm	/^C K7: 1.21 cycles\/limb (at 16 limbs\/loop).$/;"	l
C	mpn/x86/k7/mmx/lshift.asm	/^C Shift src,size left by shift many bits and store the result in dst,size.$/;"	l
C	mpn/x86/k7/mmx/lshift.asm	/^C The comments in mpn_rshift apply here too.$/;"	l
C	mpn/x86/k7/mmx/lshift.asm	/^C Zeros are shifted in at the right.  The bits shifted out at the left are$/;"	l
C	mpn/x86/k7/mmx/lshift.asm	/^C mp_limb_t mpn_lshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/mmx/lshift.asm	/^C the return value.$/;"	l
C	mpn/x86/k7/mmx/lshift.asm	/^C$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C			     popcount	     hamdist$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C K7				5		6$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C MMX instructions" in the Athlon Optimization Guide, AMD document 22007,$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C P3 generic			6.5		7$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C P3 model 13 (Dothan)		5.75		6$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C P3 model 9  (Banias)          5.7		6.1$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C The code here is almost certainly not optimal, but is already a 3x speedup$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C The loop is based on the example "Efficient 64-bit population count using$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C execution units, possibly leading to 3.25 c\/l (13 cycles for 4 limbs).$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C over the generic C code.  The main improvement would be to interleave$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C page 158 of rev E (reference in mpn\/x86\/k7\/README).$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C processing of two qwords in the loop so as to fully exploit the available$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C unsigned long mpn_hamdist (mp_srcptr src, mp_srcptr src2, mp_size_t size);$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C unsigned long mpn_popcount (mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/k7/mmx/popham.asm	/^C$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C Full speed depends on source and destination being aligned, and some hairy$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C K7: 1.21 cycles\/limb (at 16 limbs\/loop).$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C Shift src,size right by shift many bits and store the result in dst,size.$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C This code uses 64-bit MMX operations, which makes it possible to handle$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C Zeros are shifted in at the left.  The bits shifted out at the right are$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C code, on the other hand, suffers from shrd being a vector path decode and$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C mp_limb_t mpn_rshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C running at 3 cycles back-to-back.$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C setups and finish-ups are done to arrange this for the loop.$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C the return value.$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C two limbs at a time, for a theoretical 1.0 cycles\/limb.  Plain integer$/;"	l
C	mpn/x86/k7/mmx/rshift.asm	/^C$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	%ebp	16(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	%ebx	4(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	%edi	12(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	%esi	8(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	B2mod	(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	ap	24(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	b	32(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	n	28(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	pre	36(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C	return	20(%esp)$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C AMD K6			 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C AMD K7			 7$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C AMD K8			 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C Note: This implementation needs B1modb only when cnt > 0$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C P4 model 0  (Willamette)	 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C P4 model 1  (?)		 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C P4 model 2  (Northwood)	 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C P4 model 3  (Prescott)	 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C P4 model 4  (Nocona)		 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C P5				 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C P6 model 0-8,10-12		 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C P6 model 13 (Dothan)		 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C P6 model 9  (Banias)		 ?$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C Stack frame$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C The pre array contains bi, cnt, B1modb, B2modb$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C mp_limb_t$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C mpn_mod_1_1p (mp_srcptr ap, mp_size_t n, mp_limb_t b, mp_limb_t pre[4])$/;"	l
C	mpn/x86/k7/mod_1_1.asm	/^C$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C AMD K6			 ?$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C AMD K7			 4.75$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C AMD K8			 ?$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C CAUTION: This is the same code as in pentium4\/sse2\/mod_1_4.asm$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C P4 model 0  (Willamette)	 ?$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C P4 model 1  (?)		 ?$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C P4 model 2  (Northwood)	15.5$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C P4 model 3  (Prescott)	 ?$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C P4 model 4  (Nocona)		 ?$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C P5				 ?$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C P6 model 0-8,10-12		 ?$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C P6 model 13 (Dothan)		 6$/;"	l
C	mpn/x86/k7/mod_1_4.asm	/^C P6 model 9  (Banias)		 ?$/;"	l
C	mpn/x86/k7/mod_34lsub1.asm	/^C         cycles\/limb$/;"	l
C	mpn/x86/k7/mod_34lsub1.asm	/^C Athlon:     1$/;"	l
C	mpn/x86/k7/mod_34lsub1.asm	/^C Hammer:     1$/;"	l
C	mpn/x86/k7/mod_34lsub1.asm	/^C The loop form below and the 64 byte code alignment seem necessary for the$/;"	l
C	mpn/x86/k7/mod_34lsub1.asm	/^C claimed speed.  This is a bit strange, since normally k7 isn't very$/;"	l
C	mpn/x86/k7/mod_34lsub1.asm	/^C first 16 bytes for the BTB entry or something.$/;"	l
C	mpn/x86/k7/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr src, mp_size_t size)$/;"	l
C	mpn/x86/k7/mod_34lsub1.asm	/^C sensitive to such things.  Perhaps there has to be 6 instructions in the$/;"	l
C	mpn/x86/k7/mod_34lsub1.asm	/^C$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C			      ----$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C	imull	%edi, %eax	4$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C	mull	%esi		6  (high limb)$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C	subl	%edx, %eax	1$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C                                mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C                               mp_limb_t divisor);$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C                            cycles$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C          cycles\/limb$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C       total		       11$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C Athlon:     11.0$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C Hammer:      7.0$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C Out of order execution hides the load latency for the source data, so no$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C The dependent chain here is$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C Using a divl for size==1 measures slower than the modexact method, which$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C With the loop running at just 11 cycles it doesn't seem worth bothering to$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C calculate the modular inverse.$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C check for high<divisor to save one step.$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C is not too surprising since for the latter it's only about 24 cycles to$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C mp_limb_t mpn_modexact_1_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C mp_limb_t mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C special scheduling is required.$/;"	l
C	mpn/x86/k7/mode1o.asm	/^C$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C    but we might be able to do even better.$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C  * Improve feed-in and wind-down code.  We beat the old code for all n != 1,$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C  * The feed-in code for mul_1c is crude.$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C AMD K6$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C AMD K7			 3.25$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C AMD K8$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C P5$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C P6 model 0-8,10-12)$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/k7/mul_1.asm	/^C TODO$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C                        mp_srcptr xp, mp_size_t xsize,$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C                        mp_srcptr yp, mp_size_t ysize);$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C     limbs\/loop unrolling).$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C (whereas the addmul below is run ysize-1 many times).  A call to the$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C --------------------------------------------------------------------------$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C Calculate xp,xsize multiplied by yp,ysize, storing the result in$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C Could load yp earlier into another register.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C K7: approx 4.42 cycles per cross product at around 20x20 limbs (16$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C PARAM_YP is offset appropriately so that the PARAM_YSIZE counter can be$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C PARAM_YSIZE is the outer loop counter, going from -(ysize-1) up to -1,$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C The first limb of yp is processed with a simple mpn_mul_1 style loop$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C The trick with VAR_ADJUST means it's only necessary to do one fetch in the$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C The unrolled loop is the same as in mpn_addmul_1(), see that code for some$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C This routine is essentially the same as mpn\/generic\/mul_basecase.c, but$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C VAR_ADJUST is the negative of how many limbs the leals in the inner loop$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C VAR_COUNTER is for the unrolled loop, running from VAR_ADJUST\/UNROLL_COUNT$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C VAR_JMP is the computed jump into the unrolled loop.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C VAR_XP_LOW is the least significant limb of xp, which is needed at the$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C actual mpn_mul_1 will be slowed down by the call and parameter pushing and$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C added to give the location of the next limb of yp, which is the multiplier$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C calculations only once.  The saving is 15-25% on typical sizes coming from$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C comments.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C in the unrolled loop.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C inclusive.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C increment xp and wp.  This is used to adjust back xp and wp, and rshifted$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C inline.  Unrolling this doesn't seem worthwhile since it's only run once$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C it's faster because it does most of the mpn_addmul_1() startup$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C limb operations the Karatsuba code calls here with.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C outer loop to take care of xp, wp and the inner loop counter.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C popping, and doesn't seem likely to be worthwhile on the typical 13-26$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C start of the unrolled loop.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C the Karatsuba multiply code.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C to given an initial VAR_COUNTER at the top of the outer loop.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C up to -1, inclusive.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C void mpn_mul_basecase (mp_ptr wp,$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C wp,xsize+ysize.$/;"	l
C	mpn/x86/k7/mul_basecase.asm	/^C$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C     (measured on the speed difference between 25 and 50 limbs, which is$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C     roughly the Karatsuba recursing range).$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C Add products src[n]*src[n+1..size-1] at dst[2*n-1...], for each n=1..size-2.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C First multiply src[0]*src[1..size-1] and store at dst[1..size].$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C Further products are added in rather than stored.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C K7 does branch prediction on indirect jumps, which is bad since it's a$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C K7: approx 2.3 cycles\/crossproduct, or 4.55 cycles\/triangular product$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C Left shift of dst[1..2*size-2], high bit shifted out becomes dst[2*size-1].$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C Now add in the squares on the diagonal, src[0]^2, src[1]^2, ...,$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C The last two products, which are the bottom right corner of the product$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C The unrolled code is the same as in mpn_addmul_1, see that routine for$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C Three limbs$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C Using the read\/modify\/write "add"s seems to be faster than saving and$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C VAR_COUNTER is the outer loop, running from -size+4 to -1, inclusive.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C VAR_JMP is the computed jump into the unrolled code, stepped by one code$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C With a SQR_TOOM2_THRESHOLD around 50 this code is about 1500 bytes,$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C Writing out the loads and stores separately at the end of this code comes$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C and src[size-2]*src[size-1].  If size is 4 then it's only these corner$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C cases that need to be done.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C chunk each outer loop.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C different target each time.  There seems no way to avoid this.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C enough to use most of the code will be spending quite a few cycles in it.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C low limb of src[0]^2.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C mul latency and the second gets store to load forwarding.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C one limb only$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C out about 10 cycles faster than using adcls to memory.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C restoring registers.  Perhaps the loads for the first set hide under the$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C some comments.$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C src[size-1]^2.  dst[0] hasn't yet been set at all yet, and just gets the$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C triangle, are left to the end.  These are src[size-3]*src[size-2,size-1]$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C void mpn_sqr_basecase (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C which is quite a bit, but is considered good value since squares big$/;"	l
C	mpn/x86/k7/sqr_basecase.asm	/^C$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C AMD K6$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C AMD K7$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C AMD K8$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C Breaking carry recurrency might be a good idea.  We would then need separate$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C Intel Atom			 6.75$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C P5$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C This is a basic sublsh1_n for k7, atom, and perhaps some other x86-32$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C This is an attempt at a sublsh1_n for x86-32, not relying on sse2 insns.  The$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C cannot feed carry between operations there.$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C force is to 2*2-way unrolling.$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C innerloop is 2*3-way unrolled, which is best we can do with the available$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C processors.  It uses 2*4-way unrolling, for good reasons.$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C registers for the shift carry and add\/subtract carry, which in turn would$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C registers.  It seems tricky to use the same structure for rsblsh1_n, since we$/;"	l
C	mpn/x86/k7/sublsh1_n.asm	/^C$/;"	l
C	mpn/x86/lshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/lshift.asm	/^C     cycles\/limb$/;"	l
C	mpn/x86/lshift.asm	/^C K6	 4.5$/;"	l
C	mpn/x86/lshift.asm	/^C K7	 5.0$/;"	l
C	mpn/x86/lshift.asm	/^C P4	14.5$/;"	l
C	mpn/x86/lshift.asm	/^C P54	 7.5$/;"	l
C	mpn/x86/lshift.asm	/^C P55	 7.0$/;"	l
C	mpn/x86/lshift.asm	/^C P6	 2.5$/;"	l
C	mpn/x86/lshift.asm	/^C mp_limb_t mpn_lshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C			      ali,evn n	     unal,evn n$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C			     cycles\/limb     cycles\/limb$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C AMD K10$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C AMD K6$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C AMD K7			 1.33		 1.33$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C AMD K8$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C Intel Atom			 1.85		 2.7$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C P4 model 2  (Northwood)	 2.1		 2.63$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C P4 model 4  (Nocona)		 1.7		 2.57$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C P5$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C P6 model 0-8,10-12$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C P6 model 13 (Dothan)		 1.33		 1.87$/;"	l
C	mpn/x86/mmx/sec_tabselect.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/mod_34lsub1.asm	/^C      cycles\/limb$/;"	l
C	mpn/x86/mod_34lsub1.asm	/^C K6	  3.0$/;"	l
C	mpn/x86/mod_34lsub1.asm	/^C K7	  1.3$/;"	l
C	mpn/x86/mod_34lsub1.asm	/^C P4	  9$/;"	l
C	mpn/x86/mod_34lsub1.asm	/^C P5	  3.0$/;"	l
C	mpn/x86/mod_34lsub1.asm	/^C P6	  3.66$/;"	l
C	mpn/x86/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr src, mp_size_t size)$/;"	l
C	mpn/x86/mod_34lsub1.asm	/^C$/;"	l
C	mpn/x86/mul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/mul_1.asm	/^C                      mp_limb_t multiplier);$/;"	l
C	mpn/x86/mul_1.asm	/^C AMD K6			10.5$/;"	l
C	mpn/x86/mul_1.asm	/^C AMD K7			 4.5$/;"	l
C	mpn/x86/mul_1.asm	/^C AMD K8$/;"	l
C	mpn/x86/mul_1.asm	/^C P4 model 0  (Willamette)	19.0$/;"	l
C	mpn/x86/mul_1.asm	/^C P4 model 1  (?)		19.0$/;"	l
C	mpn/x86/mul_1.asm	/^C P4 model 2  (Northwood)	19.0$/;"	l
C	mpn/x86/mul_1.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/mul_1.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/mul_1.asm	/^C P5				12.5$/;"	l
C	mpn/x86/mul_1.asm	/^C P6 model 0-8,10-12		 5.5$/;"	l
C	mpn/x86/mul_1.asm	/^C P6 model 13 (Dothan)		 5.25$/;"	l
C	mpn/x86/mul_1.asm	/^C P6 model 9  (Banias)$/;"	l
C	mpn/x86/mul_1.asm	/^C mp_limb_t mpn_mul_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/mul_basecase.asm	/^C                        mp_srcptr xp, mp_size_t xsize,$/;"	l
C	mpn/x86/mul_basecase.asm	/^C                        mp_srcptr yp, mp_size_t ysize);$/;"	l
C	mpn/x86/mul_basecase.asm	/^C     cycles\/crossproduct$/;"	l
C	mpn/x86/mul_basecase.asm	/^C K6	  12.5$/;"	l
C	mpn/x86/mul_basecase.asm	/^C K7	   5.5$/;"	l
C	mpn/x86/mul_basecase.asm	/^C P4	  24$/;"	l
C	mpn/x86/mul_basecase.asm	/^C P5	  15$/;"	l
C	mpn/x86/mul_basecase.asm	/^C P6	   7.5$/;"	l
C	mpn/x86/mul_basecase.asm	/^C The mul loop (at L(oopM)) might need some tweaking.  It's current speed is$/;"	l
C	mpn/x86/mul_basecase.asm	/^C This was written in a haste since the Pentium optimized code that was used$/;"	l
C	mpn/x86/mul_basecase.asm	/^C To shave off some percentage of the run-time, one should make 4 variants$/;"	l
C	mpn/x86/mul_basecase.asm	/^C acceptable.$/;"	l
C	mpn/x86/mul_basecase.asm	/^C for all x86 machines was slow for the Pentium II.  This code would benefit$/;"	l
C	mpn/x86/mul_basecase.asm	/^C from some cleanup.$/;"	l
C	mpn/x86/mul_basecase.asm	/^C of the Louter loop, for the four different outcomes of un mod 4.  That$/;"	l
C	mpn/x86/mul_basecase.asm	/^C part of the function, but since it is not very large, that would be$/;"	l
C	mpn/x86/mul_basecase.asm	/^C unknown.$/;"	l
C	mpn/x86/mul_basecase.asm	/^C void mpn_mul_basecase (mp_ptr wp,$/;"	l
C	mpn/x86/mul_basecase.asm	/^C would avoid Loop0 altogether.  Code expansion would be > 4-fold for that$/;"	l
C	mpn/x86/mul_basecase.asm	/^C$/;"	l
C	mpn/x86/p6/aors_n.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/p6/aors_n.asm	/^C    file.$/;"	l
C	mpn/x86/p6/aors_n.asm	/^C  * Avoid indexed addressing, it makes us stall on the two-ported register$/;"	l
C	mpn/x86/p6/aors_n.asm	/^C P6 model 0-8,10-12		3.17$/;"	l
C	mpn/x86/p6/aors_n.asm	/^C P6 model 13  (Dothan)		2.25$/;"	l
C	mpn/x86/p6/aors_n.asm	/^C P6 model 9   (Banias)		2.15$/;"	l
C	mpn/x86/p6/aors_n.asm	/^C TODO:$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C                             mp_limb_t mult, mp_limb_t carry);$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C                            mp_limb_t mult);$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C -----------------------------------------------------------$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C A number of variations have been tried for the unrolled loop, with one or$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C AMD K6$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C AMD K7$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C AMD K8$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C Calculate src,size multiplied by mult and M4_description dst,size.$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C P4 model 2  (Northwood)$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C P5$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C P6 model 0-8,10-12		 6.44$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C P6 model 13 (Dothan)		 6.11$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C P6 model 9  (Banias)		 6.15$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C Return the M4_desc_retval limb from the top of the result.$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C The add\/adc for the initial carry in %ebx is necessary only for the$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C This code is pretty much the same as the K6 code.  The unrolled loop is$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C VAR_JUMP holds the computed jump temporarily because there's not enough$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C cycles\/limb has been found.$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C eliminate this for the plain mpn_add\/submul_1 doesn't seem like a good$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C idea.$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C mp_limb_t M4_function_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C mp_limb_t M4_function_1c (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C mpn_add\/submul_1c entry points.  Duplicating the startup code to$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C registers when doing the mul for the initial two carry limbs.$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C simple loop.$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C the same, but there's just a few scheduling tweaks in the setups and the$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C two carries, and with loads scheduled earlier, but nothing faster than 6$/;"	l
C	mpn/x86/p6/aorsmul_1.asm	/^C$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C			       ----$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C		    mp_limb_t inverse, int shift)$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C	imull	%ebp, %eax       4$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C	mull	PARAM_DIVISOR    5$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C	subl	%edx, %eax       1$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C	total			10$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C                           mp_limb_t divisor);$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C       odd  even  divisor$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C MULFUNC_PROLOGUE(mpn_bdiv_q_1 mpn_pi1_bdiv_q_1)$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C P6:  10.0  12.0  cycles\/limb$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C Perhaps there's too many uops (an extra 4 over the odd case).$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C The dependent chain here is$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C The odd case is basically the same as mpn_modexact_1_odd, just with an$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C The shifts for the even case aren't on the dependent chain so in principle$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C and this is the measured speed.  No special scheduling is necessary, out$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C chain.$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C extra store, and it runs at the same 10 cycles which is the dependent$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C it could run the same too, but nothing running at 10 has been found.$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C mp_limb_t mpn_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C mp_limb_t$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C mpn_pi1_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor,$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C of order execution hides the load latency.$/;"	l
C	mpn/x86/p6/bdiv_q_1.asm	/^C$/;"	l
C	mpn/x86/p6/copyd.asm	/^C 2.4 c\/l.  That rep movsl also has about a 40 cycle startup time, and the$/;"	l
C	mpn/x86/p6/copyd.asm	/^C An explicit loop is used because a decrementing rep movsl is a bit slow at$/;"	l
C	mpn/x86/p6/copyd.asm	/^C Enhancements:$/;"	l
C	mpn/x86/p6/copyd.asm	/^C Maybe load\/store ordering affects it.$/;"	l
C	mpn/x86/p6/copyd.asm	/^C P6: 1.75 cycles\/limb, or 0.75 if no overlap$/;"	l
C	mpn/x86/p6/copyd.asm	/^C The slightly strange loop form seems necessary for the claimed speed.$/;"	l
C	mpn/x86/p6/copyd.asm	/^C The source and destination are checked to see if they're actually$/;"	l
C	mpn/x86/p6/copyd.asm	/^C Top speed for an all-integer copy is probably 1.0 c\/l, being one load and$/;"	l
C	mpn/x86/p6/copyd.asm	/^C at 0.75 c\/l.  (It doesn't suffer the bad startup time of the decrementing$/;"	l
C	mpn/x86/p6/copyd.asm	/^C code here stands a chance of being faster if the branches predict well.$/;"	l
C	mpn/x86/p6/copyd.asm	/^C cycles, but doesn't run that way.$/;"	l
C	mpn/x86/p6/copyd.asm	/^C doesn't already run at 1.0 c\/l.  It looks like it should decode in 2$/;"	l
C	mpn/x86/p6/copyd.asm	/^C it'd be good to know why something like store\/load\/subl + store\/load\/jnz$/;"	l
C	mpn/x86/p6/copyd.asm	/^C one store each cycle.  Unrolling the loop below would approach 1.0, but$/;"	l
C	mpn/x86/p6/copyd.asm	/^C overlapping, since it might be possible to use an incrementing rep movsl$/;"	l
C	mpn/x86/p6/copyd.asm	/^C version.)$/;"	l
C	mpn/x86/p6/copyd.asm	/^C void mpn_copyd (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/p6/copyd.asm	/^C$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C			       ----$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C	imull	%ebp, %eax       4$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C	mull	PARAM_DIVISOR    5$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C	subl	%edx, %eax       1$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C	total			10$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C                      mp_limb_t divisor);$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C       odd  even  divisor$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C P6:  10.0  12.0  cycles\/limb$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C Perhaps there's too many uops (an extra 4 over the odd case).$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C The dependent chain here is$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C The odd case is basically the same as mpn_modexact_1_odd, just with an$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C The shifts for the even case aren't on the dependent chain so in principle$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C and this is the measured speed.  No special scheduling is necessary, out$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C chain.$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C extra store, and it runs at the same 10 cycles which is the dependent$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C it could run the same too, but nothing running at 10 has been found.$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C of order execution hides the load latency.$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C void mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/p6/dive_1.asm	/^C$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C	     cycles\/bit (approx)$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C	test	%eax, %eax	C FIXME: does this lower latency?$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C (time_in_cycles(bmod_1,1) + call_overhead) \/ (cycles\/bit).$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C AMD K10	 4.08$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C AMD K7	 7.80$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C AMD K8,K9	 7.79$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C AMD bd1	 ?$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C AMD bobcat	 7.82$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Both U and V are single limbs, reduce with bmod if u0 >> v0.$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Intel NHM	 5.00$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Intel P4-2	14.9$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Intel P4-3\/4	14.0$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Intel P6\/13	 5.09$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Intel SBR	 5.00$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Intel atom	17.1$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Intel core2	 4.22$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Numbers measured with: speed -CD -s16-32 -t16 mpn_gcd_1$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C Threshold of when to call bmod when U is one limb.  Should be about$/;"	l
C	mpn/x86/p6/gcd_1.asm	/^C VIA nano	?$/;"	l
C	mpn/x86/p6/lshsub_n.asm	/^C     at all wants to use MMX.$/;"	l
C	mpn/x86/p6/lshsub_n.asm	/^C     improved speed on P6\/13.  Presumably, the K7 will want scheduling, if it$/;"	l
C	mpn/x86/p6/lshsub_n.asm	/^C     loop.$/;"	l
C	mpn/x86/p6/lshsub_n.asm	/^C (1) The loop is not scheduled in any way, and scheduling attempts have not$/;"	l
C	mpn/x86/p6/lshsub_n.asm	/^C (2) We could save a register by not alternatingly using eax and edx in the$/;"	l
C	mpn/x86/p6/lshsub_n.asm	/^C P6\/13: 3.35 cycles\/limb	(separate mpn_sub_n + mpn_lshift needs 4.12)$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		       ---$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		       16$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		       19$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		       uops$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		addback	2   (cmov)$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		mul	5$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		n2+n1	1   (addl)$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		q1+1	1   (addl)$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		q1+1	3   (addl\/adcl)$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		sub	3   (negl\/sbbl)$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C		sub	3   (subl\/sbbl)$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C                                mp_limb_t divisor, mp_limb_t inverse,$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C                                mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C                                unsigned shift);$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C                          mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C                          mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C                         mp_limb_t divisor);$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C                         mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C Here, and in integer_one_left below, an sbbl $0 is used rather than a jz$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C In the current implementation, the following successively dependent$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C Lack of registers hinders explicit scheduling and it might be that the$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C P6MMX: 25.0 cycles\/limb integer part, 17.5 cycles\/limb fraction part.$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C Special case for q1=0xFFFFFFFF, giving q=0xFFFFFFFF meaning the low dword$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C The loop in fact runs at about 17.5 cycles.  Using a sarl\/andl\/addl for$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C This code is a lightly reworked version of mpn\/x86\/k7\/mmx\/divrem_1.asm,$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C This loop runs at about 25 cycles, which is probably sub-optimal, and$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C Using sarl\/negl to pick out n1 for the n2+n1 stage is a touch faster than$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C a better rough analysis of what's possible, would be welcomed.$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C certainly more than the dependent chain would suggest.  A better loop, or$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C cmov (and takes one uop off the dependent chain).  A sarl\/andl\/addl$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C combination was tried for the addback (despite the fact it would lengthen$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C costs only 2 cycles (each).$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C latencies.$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C micro-ops seem to exist.$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C mp_limb_t mpn_divrem_1 (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C mp_limb_t mpn_divrem_1c (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C mp_limb_t mpn_preinv_divrem_1 (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C normal out of order execution isn't able to hide enough under the mul$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C of q*d is simply -d and the remainder n-q*d = n10+d$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C q1_ff special case.  This make the code a bit smaller and simpler, and$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C see that file for some comments.  It's possible what's here can be improved.$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C the addback was found to be a touch slower.$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C the dependent chain) but found to be no faster.$/;"	l
C	mpn/x86/p6/mmx/divrem_1.asm	/^C$/;"	l
C	mpn/x86/p6/mmx/popham.asm	/^C P6MMX: popcount 11 cycles\/limb (approx), hamdist 11.5 cycles\/limb (approx)$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C  Experiments with more unrolling indicate that 1.5 c\/l is possible on P6-13$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C  with the current carry handling scheme.$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C Groups of three limbs are handled, with carry bits from 0mod3 into 1mod3$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C P6: 2.0 cycles\/limb$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C TODO$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C don't keep the carry flag live across the loop control.  Avoiding decl$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C into 2mod3, but at that point going into a separate carries total so we$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C lets us get to 2.0 c\/l, as compared to the generic x86 code at 3.66.$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr src, mp_size_t size)$/;"	l
C	mpn/x86/p6/mod_34lsub1.asm	/^C$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C			       ----$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C	imull	%edi, %eax       4$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C	mull	PARAM_DIVISOR    5$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C	subl	%edx, %eax       1$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C	total			10$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C                                mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C                               mp_limb_t divisor);$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C It's not worth skipping a step at the end when high<divisor since the main$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C P6: 10.0 cycles\/limb$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C The dependent chain here is$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C and this is the measured speed.  No special scheduling is necessary, out$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C loop is only 10 cycles.$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C mp_limb_t mpn_modexact_1_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C mp_limb_t mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C of order execution hides the load latency.$/;"	l
C	mpn/x86/p6/mode1o.asm	/^C$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C                        mp_srcptr xp, mp_size_t xsize,$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C                        mp_srcptr yp, mp_size_t ysize);$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C --------------------------------------------------------------------------$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C P6: approx 6.5 cycles per cross product (16 limbs\/loop unrolling).$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C PARAM_YP is offset appropriately so that the PARAM_YSIZE counter can be$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C PARAM_YSIZE is the outer loop counter, going from -(ysize-1) up to -1,$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C The first limb of yp is processed with a simple mpn_mul_1 loop running at$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C The trick with the VAR_ADJUST value means it's only necessary to do one$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C The unrolled loop is the same as in mpn_addmul_1, see that code for some$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C This routine is essentially the same as mpn\/generic\/mul_basecase.c, but$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C VAR_ADJUST is the negative of how many limbs the leals in the inner loop$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C VAR_COUNTER is for the unrolled loop, running from VAR_ADJUST\/UNROLL_COUNT$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C VAR_JMP is the computed jump into the unrolled loop.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C VAR_SWAP is 0 if xsize odd or 0xFFFFFFFF if xsize even, used to swap the$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C VAR_XP_LOW is the least significant limb of xp, which is needed at the$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C about 6.2 c\/l.  Unrolling this doesn't seem worthwhile since it's only run$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C added to give the location of the next limb of yp, which is the multiplier$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C and doesn't seem likely to be worthwhile on the typical sizes reaching$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C calculations only once.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C comments.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C fetch in the outer loop to take care of xp, wp and the inner loop counter.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C given an initial VAR_COUNTER at the top of the outer loop.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C here from the Karatsuba code.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C in the unrolled loop.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C inclusive.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C increment xp and wp.  This is used to adjust xp and wp, and is rshifted to$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C initial ebx and ecx on entry to the unrolling.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C it's faster because it does most of the mpn_addmul_1() startup$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C mpn_mul_1 would be slowed down by the parameter pushing and popping etc,$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C once (whereas the addmul_1 below is run ysize-1 many times).  A call to$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C start of the unrolled loop.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C up to -1, inclusive.$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C void mpn_mul_basecase (mp_ptr wp,$/;"	l
C	mpn/x86/p6/mul_basecase.asm	/^C$/;"	l
C	mpn/x86/p6/p3mmx/popham.asm	/^C			     popcount	     hamdist$/;"	l
C	mpn/x86/p6/p3mmx/popham.asm	/^C P3 generic			6.5		7$/;"	l
C	mpn/x86/p6/p3mmx/popham.asm	/^C P3 model 13 (Dothan)		5.75		6$/;"	l
C	mpn/x86/p6/p3mmx/popham.asm	/^C P3 model 9  (Banias)		?		?$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C     product (measured on the speed difference between 20 and 40 limbs,$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C     which is the Karatsuba recursing range).$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C Addmul src[n]*src[n+1..size-1] at dst[2*n-1...], for each n=1..size-2.$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C First multiply src[0]*src[1..size-1] and store at dst[1..size].$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C Left shift of dst[1..2*size-2], the bit shifted out becomes dst[2*size-1].$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C Now add in the squares on the diagonal, src[0]^2, src[1]^2, ...,$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C P6: approx 4.0 cycles per cross product, or 7.75 cycles per triangular$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C The algorithm is basically the same as mpn\/generic\/sqr_basecase.c, but a$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C The code size might look a bit excessive, but not all of it is executed so$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C The last two addmuls, which are the bottom right corner of the product$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C The unrolled code is the same as mpn_addmul_1(), see that routine for some$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C This loop runs at just over 6 c\/l.$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C VAR_COUNTER is the outer loop, running from -(size-4) to -1, inclusive.$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C VAR_JMP is the computed jump into the unrolled code, stepped by one code$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C and src[size-2]*src[size-1].  If size is 4 then it's only these corner$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C cases that need to be done.$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C chunk each outer loop.$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C clearly apply only to those sizes; mid sizes like 10x10 only need part of$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C comments.$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C is small.$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C it won't all get into the code cache.  The 1x1, 2x2 and 3x3 special cases$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C lot of function call overheads are avoided, especially when the given size$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C low limb of src[0]^2.$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C one limb only$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C something like 7000 cycles.$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C src[size-1]^2.  dst[0] hasn't yet been set at all yet, and just gets the$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C the unrolled addmul; and big sizes like 40x40 that do use the full$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C three limbs$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C triangle, are left to the end.  These are src[size-3]*src[size-2,size-1]$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C unrolling will least be making good use of it, because 40x40 will take$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C void mpn_sqr_basecase (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/p6/sqr_basecase.asm	/^C$/;"	l
C	mpn/x86/p6/sse2/addmul_1.asm	/^C  * Write P6 specific SSE2 code.$/;"	l
C	mpn/x86/p6/sse2/addmul_1.asm	/^C TODO$/;"	l
C	mpn/x86/p6/sse2/mul_1.asm	/^C    The Pentium4 code runs at 4.2 c\/l.$/;"	l
C	mpn/x86/p6/sse2/mul_1.asm	/^C  * Write P6 specific SSE2 code.  It should reach 3 c\/l.$/;"	l
C	mpn/x86/p6/sse2/mul_1.asm	/^C TODO$/;"	l
C	mpn/x86/pentium/aors_n.asm	/^C                           mp_size_t size, mp_limb_t carry);$/;"	l
C	mpn/x86/pentium/aors_n.asm	/^C                          mp_size_t size);$/;"	l
C	mpn/x86/pentium/aors_n.asm	/^C P5: 2.375 cycles\/limb$/;"	l
C	mpn/x86/pentium/aors_n.asm	/^C mp_limb_t M4_function_n (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/pentium/aors_n.asm	/^C mp_limb_t M4_function_nc (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	l
C	mpn/x86/pentium/aorsmul_1.asm	/^C                          mp_limb_t mult, mp_limb_t carry);$/;"	l
C	mpn/x86/pentium/aorsmul_1.asm	/^C                         mp_limb_t mult);$/;"	l
C	mpn/x86/pentium/aorsmul_1.asm	/^C P5: 14.0 cycles\/limb$/;"	l
C	mpn/x86/pentium/aorsmul_1.asm	/^C mp_limb_t mpn_addmul_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/aorsmul_1.asm	/^C mp_limb_t mpn_addmul_1c (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/aorsmul_1.asm	/^C mp_limb_t mpn_submul_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/aorsmul_1.asm	/^C mp_limb_t mpn_submul_1c (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/aorsmul_1.asm	/^C$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C		    mp_limb_t inverse, int shift)$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C                           mp_limb_t divisor);$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C         divisor$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C       odd   even$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C P54:  24.5  30.5   cycles\/limb$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C P55:  23.0  28.0$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C The P55 speeds noted above, 23 cycles odd or 28 cycles even, are as$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C expected.  On P54 in the even case the shrdl pairing nonsense (see$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C further 1.5 slowdown for both odd and even.$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C mp_limb_t mpn_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C mp_limb_t$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C mpn\/x86\/pentium\/README) costs 1 cycle, but it's not clear why there's a$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C mpn_pi1_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor,$/;"	l
C	mpn/x86/pentium/bdiv_q_1.asm	/^C$/;"	l
C	mpn/x86/pentium/com.asm	/^C $GMP_NUMB_MASK"s inserted.$/;"	l
C	mpn/x86/pentium/com.asm	/^C Alternatives:$/;"	l
C	mpn/x86/pentium/com.asm	/^C On P55 some MMX code could be 1.25 c\/l (8 limb unrolled) if src and dst$/;"	l
C	mpn/x86/pentium/com.asm	/^C P5: 1.75 cycles\/limb$/;"	l
C	mpn/x86/pentium/com.asm	/^C This code is similar to mpn_copyi, basically there's just some "xorl$/;"	l
C	mpn/x86/pentium/com.asm	/^C are the same alignment mod 8, but it doesn't seem worth the trouble for$/;"	l
C	mpn/x86/pentium/com.asm	/^C just that case (there'd need to be some plain integer available too for$/;"	l
C	mpn/x86/pentium/com.asm	/^C the unaligned case).$/;"	l
C	mpn/x86/pentium/com.asm	/^C void mpn_com (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/pentium/com.asm	/^C$/;"	l
C	mpn/x86/pentium/copyd.asm	/^C P5: 1.25 cycles\/limb$/;"	l
C	mpn/x86/pentium/copyd.asm	/^C See comments in copyi.asm.$/;"	l
C	mpn/x86/pentium/copyd.asm	/^C void mpn_copyd (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/pentium/copyd.asm	/^C$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C 10 cycles for instance on P55.$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C 8).$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C At least one of the src or dst pointer needs to be incremented rather than$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C Destination prefetching is done to avoid repeated write-throughs on lines$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C P5: 1.25 cycles\/limb$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C The block of finishup code is almost as big as the main loop itself, which$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C There's nothing to be gained from MMX on P55, since it can do only one$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C an AGI.  Incrementing one and not two lets us keep loop overhead to 2$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C code here (and even then only if src and dst have the same alignment mod$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C cycles.  Making it the src pointer incremented avoids an AGI on the %ecx$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C is unfortunate, but it's faster that way than with say rep movsl, by about$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C movq load (or store) per cycle, so the throughput would be the same as the$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C not already in L1.$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C subtracts in the finishup code.$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C using indexing, so that there's somewhere to put the loop control without$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C void mpn_copyi (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/pentium/copyi.asm	/^C$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C                      mp_limb_t divisor);$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C         divisor$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C       odd   even$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C P54:  24.5  30.5   cycles\/limb$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C P55:  23.0  28.0$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C Plain divl is used for small sizes, since the inverse takes a while to$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C The P55 speeds noted above, 23 cycles odd or 28 cycles even, are as$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C expected.  On P54 in the even case the shrdl pairing nonsense (see$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C former is used since it will use up less code cache.$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C further 1.5 slowdown for both odd and even.$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C mpn\/x86\/pentium\/README) costs 1 cycle, but it's not clear why there's a$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C or size>=4 when the divisor is even.  Actually on P55 size==2 for odd or$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C setup.  Multiplying works out faster for size>=3 when the divisor is odd,$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C size==3 for even are about the same speed for both divl or mul, but the$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C void mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/dive_1.asm	/^C$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C FIXME: referencing popcount.asm's table is incorrect as it hurt incremental$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C It might be possible to shave 1 cycle from the loop, and hence 2$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C P5: 14.0 cycles\/limb$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C The slightly strange quoting here helps the renaming done by tune\/many.pl.$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C Wanting to avoid potential cache bank clashes makes it tricky.$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C cycles\/limb.  The xorb is taking 2 cycles, but a separate load and xor$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C linking.$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C unsigned long mpn_hamdist (mp_srcptr src1, mp_srcptr src2, mp_size_t size);$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C would be 1, if the right schedule could be found (not found so far).$/;"	l
C	mpn/x86/pentium/hamdist.asm	/^C$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C     3.5 c\/l  andn, iorn, nand, nior, xnor$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C Nothing complicated here, just some care to avoid data cache bank clashes$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C P5: 3.0 c\/l  and, ior, xor$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C This code seems best for P55 too.  Data alignment is a big problem for MMX$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C We're one register short of being able to do a simple 4 loads, 2 ops, 2$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C an 0.5 c\/l speedup, if that's worth bothering with.$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C and AGIs.$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C and the pairing restrictions on movq and integer instructions make life$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C difficult.$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C pairings as intended.  An in-place operation would free up a register, for$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C stores.  Instead %ebp is juggled a bit and nops are introduced to keep the$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C void M4_function (mp_ptr wp, mp_srcptr xp, mp_srcptr yp, mp_size_t size);$/;"	l
C	mpn/x86/pentium/logops_n.asm	/^C$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C         cycles\/limb$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C P5,P54:    6.0$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C P55:       5.375$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C The main shift-by-N loop should run at 5.375 c\/l and that's what P55 does,$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C We can use faster code for shift-by-1 under certain conditions.$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C We loop from least significant end of the arrays, which is only$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C but P5 and P54 run only at 6.0 c\/l, which is 4 cycles lost somewhere.$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C function is documented to work for overlapping source and destination.$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C mp_limb_t mpn_lshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C permissable if the source and destination don't overlap, since the$/;"	l
C	mpn/x86/pentium/lshift.asm	/^C$/;"	l
C	mpn/x86/pentium/mmx/hamdist.asm	/^C For reference, this code runs at 11.5 cycles\/limb for popcount, which is$/;"	l
C	mpn/x86/pentium/mmx/hamdist.asm	/^C P55: hamdist 12.0 cycles\/limb$/;"	l
C	mpn/x86/pentium/mmx/hamdist.asm	/^C slower than the plain integer mpn\/x86\/pentium\/popcount.asm.$/;"	l
C	mpn/x86/pentium/mmx/lshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/pentium/mmx/lshift.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/pentium/mmx/lshift.asm	/^C P5: 1.75 cycles\/limb.$/;"	l
C	mpn/x86/pentium/mmx/lshift.asm	/^C Shift src,size left by shift many bits and store the result in dst,size.$/;"	l
C	mpn/x86/pentium/mmx/lshift.asm	/^C The comments in mpn_rshift apply here too.$/;"	l
C	mpn/x86/pentium/mmx/lshift.asm	/^C Zeros are shifted in at the right.  Return the bits shifted out at the$/;"	l
C	mpn/x86/pentium/mmx/lshift.asm	/^C left.$/;"	l
C	mpn/x86/pentium/mmx/lshift.asm	/^C mp_limb_t mpn_lshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/mmx/lshift.asm	/^C$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C                      mp_limb_t multiplier);$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C        7.0   for 16-bit multiplier$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C    cycles\/limb$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C Adding the high and low MMX products using integer code seems best.  An$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C Alternatives:$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C An mpn_mul_1c entrypoint would need a double carry out of the low result$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C Future:$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C In the comments x represents the src data and m the multiplier (16$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C MMX is not believed to be of any use for 32-bit multipliers, since for$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C P5:   12.0   for 32-bit multiplier$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C The m signs calculated in %mm3 are a loop invariant and could be held in$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C The scheduling here is quite tricky, since so many instructions have$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C Trouble has been taken to avoid overlapping successive loop iterations,$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C When the multiplier is 16 bits some special case MMX code is used.  Small$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C actually used.$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C any joy.  Perhaps something could be done keeping the values signed and$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C at 12.$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C attempt at using paddd and carry bit propagation with pcmpgtd didn't give$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C bits, but replicated 4 times).$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C bits, possibly as carry<multiplier, this being true of a big calculation$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C boundary then one limb is processed separately with roughly a 5 cycle$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C can't be paired with an adc since it wants flags from the inc, so$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C code.  Actually there's probably not much advantage to be had from$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C done piece by piece.  But let's worry about that if\/when mul_1c is$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C for it.$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C for the high and low halves of the multiplier, and would probably$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C instance the current method would just have to be more or less duplicated$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C instructions are rotated to the top of the loop to find somewhere useful$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C is odd there's roughly a 5 cycle penalty, so times for say size==7 and$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C limb in the 16-bit code, unless it could be assumed the carry fits in 16$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C mp_limb_t mpn_mul_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C multipliers might arise reasonably often from mpz_mul_ui etc.  If the size$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C overlapping anyway, since the difficulties are mostly with pairing, not$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C pairing restrictions.  In particular the js won't pair with a movd, and$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C penalty, so in that case it's say size==8 and size==9 which are close.$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C perhaps not.$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C say %mm5, but that would save only one instruction and hence be no faster.$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C since that would greatly increase the size of the startup and finishup$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C size==8 end up being quite close.  If src isn't aligned to an 8 byte$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C thereby avoiding adjustments to make pcmpgtd into an unsigned compare, or$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C therefore run at about 14 cycles, which is slower than the plain integer$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C with latencies as such.$/;"	l
C	mpn/x86/pentium/mmx/mul_1.asm	/^C$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C Full speed depends on source and destination being aligned.  Unaligned mmx$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C It takes 6 mmx instructions to process 2 limbs, making 1.5 cycles\/limb,$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C MMX shifts work out a bit faster even for the simple loop.$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C P5: 1.75 cycles\/limb.$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C Shift src,size right by shift many bits and store the result in dst,size.$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C This loop is 5 or 8 cycles, with every second load unaligned and a wasted$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C Zeros are shifted in at the left.  Return the bits shifted out at the$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C and last limb calculations too.$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C and with a 4 limb loop and 1 cycle of loop overhead the total is 1.75 c\/l.$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C cycle waiting for the mm0 result to be ready.  For comparison a shrdl is 4$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C cycles and would be 8 in a simple loop.  Using mmx helps the return value$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C loads and stores on P5 don't pair and have a 2 cycle penalty.  Some hairy$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C mp_limb_t mpn_rshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C right.$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C setups and finish-ups are done to ensure alignment for the loop.$/;"	l
C	mpn/x86/pentium/mmx/rshift.asm	/^C$/;"	l
C	mpn/x86/pentium/mod_34lsub1.asm	/^C P5: 1.66 cycles\/limb$/;"	l
C	mpn/x86/pentium/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr src, mp_size_t size)$/;"	l
C	mpn/x86/pentium/mod_34lsub1.asm	/^C$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C                                mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C                               mp_limb_t divisor);$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C Alternatives:$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C Could look for a-c<d and save a division sometimes, but that doesn't seem$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C P5: 23.0 cycles\/limb$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C Special case for size==1 using a division for r = c-a mod d.$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C The special case for size==1 saves about 20 cycles (non-PIC), making it$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C The use of VAR_INVERSE means only a store is needed for that value, rather$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C There seems no way to pair up the two lone instructions in the main loop.$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C Using mmx for the multiplies might be possible, with pmullw and pmulhw$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C When high<divisor can skip last step.$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C all sizes.$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C complicated.$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C having just 3 cycle latencies, but carry bit handling would probably be$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C mp_limb_t mpn_modexact_1_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C mp_limb_t mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C than a push and pop of say %edi.$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C the same as mpn_mod_1, and in fact making modexact faster than mod_1 at$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C worth bothering about.$/;"	l
C	mpn/x86/pentium/mode1o.asm	/^C$/;"	l
C	mpn/x86/pentium/mul_1.asm	/^C                       mp_limb_t multiplier, mp_limb_t carry);$/;"	l
C	mpn/x86/pentium/mul_1.asm	/^C                      mp_limb_t multiplier);$/;"	l
C	mpn/x86/pentium/mul_1.asm	/^C P5: 12.0 cycles\/limb$/;"	l
C	mpn/x86/pentium/mul_1.asm	/^C mp_limb_t mpn_mul_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/mul_1.asm	/^C mp_limb_t mpn_mul_1c (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/mul_1.asm	/^C$/;"	l
C	mpn/x86/pentium/mul_2.asm	/^C                      mp_srcptr mult);$/;"	l
C	mpn/x86/pentium/mul_2.asm	/^C At 24 c\/l this is only 2 cycles faster than a separate mul_1 and addmul_1,$/;"	l
C	mpn/x86/pentium/mul_2.asm	/^C P5: 24.0 cycles\/limb$/;"	l
C	mpn/x86/pentium/mul_2.asm	/^C There's not enough registers to use PARAM_MULT directly, so the multiplier$/;"	l
C	mpn/x86/pentium/mul_2.asm	/^C but has the advantage of making just one pass over the operands.$/;"	l
C	mpn/x86/pentium/mul_2.asm	/^C limbs are transferred to local variables on the stack.$/;"	l
C	mpn/x86/pentium/mul_2.asm	/^C mp_limb_t mpn_mul_2 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/mul_2.asm	/^C$/;"	l
C	mpn/x86/pentium/mul_basecase.asm	/^C                        mp_srcptr xp, mp_size_t xsize,$/;"	l
C	mpn/x86/pentium/mul_basecase.asm	/^C                        mp_srcptr yp, mp_size_t ysize);$/;"	l
C	mpn/x86/pentium/mul_basecase.asm	/^C P5: 14.2 cycles\/crossproduct (approx)$/;"	l
C	mpn/x86/pentium/mul_basecase.asm	/^C void mpn_mul_basecase (mp_ptr wp,$/;"	l
C	mpn/x86/pentium/popcount.asm	/^C An arithmetic approach has been found to be slower than the table lookup,$/;"	l
C	mpn/x86/pentium/popcount.asm	/^C FIXME: exporting the table to hamdist is incorrect as it hurt incremental$/;"	l
C	mpn/x86/pentium/popcount.asm	/^C P5: 8.0 cycles\/limb$/;"	l
C	mpn/x86/pentium/popcount.asm	/^C The slightly strange quoting here helps the renaming done by tune\/many.pl.$/;"	l
C	mpn/x86/pentium/popcount.asm	/^C due to needing too many instructions.$/;"	l
C	mpn/x86/pentium/popcount.asm	/^C linking.$/;"	l
C	mpn/x86/pentium/popcount.asm	/^C unsigned long mpn_popcount (mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/pentium/popcount.asm	/^C$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C         cycles\/limb$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C P5,P54:    6.0$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C P55:       5.375$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C The main shift-by-N loop should run at 5.375 c\/l and that's what P55 does,$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C We can use faster code for shift-by-1 under certain conditions.$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C We loop from least significant end of the arrays, which is only$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C but P5 and P54 run only at 6.0 c\/l, which is 4 cycles lost somewhere.$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C function is documented to work for overlapping source and destination.$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C mp_limb_t mpn_rshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C permissable if the source and destination don't overlap, since the$/;"	l
C	mpn/x86/pentium/rshift.asm	/^C$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C Calculate src,size squared, storing the result in dst,2*size.$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C Left shift of dst[1..2*size-2], high bit shifted out becomes dst[2*size-1].$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C Now add in the squares on the diagonal, namely src[0]^2, src[1]^2, ...,$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C P5: approx 8 cycles per crossproduct, or 15.5 cycles per triangular$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C The algorithm is basically the same as mpn\/generic\/sqr_basecase.c, but a$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C lot of function call overheads are avoided, especially when the size is$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C low limb of src[0]^2.$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C one limb only$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C product at around 20x20 limbs.$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C small.$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C src[size-1]^2.  dst[0] hasn't yet been set at all yet, and just gets the$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C three limbs$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C void mpn_sqr_basecase (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/pentium/sqr_basecase.asm	/^C$/;"	l
C	mpn/x86/pentium4/mmx/lshift.asm	/^C P4 Prescott:		    2.0 cycles\/limb$/;"	l
C	mpn/x86/pentium4/mmx/lshift.asm	/^C P4 Willamette, Northwood: 1.75 cycles\/limb$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C			     popcount	     hamdist$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C For popcount there's 13 mmx instructions in the loop, so perhaps 6.5 c\/l$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C Loading with unaligned movq's costs an extra 1 c\/l and hence is avoided.$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C P3 model 13 (Dothan)		6		6$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C P3 model 9  (Banias)		?		?$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C P4 model 2  (Northwood)	8		9$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C P4 model 3  (Prescott)	8		9$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C Two movd's and a punpckldq seems to be the same speed as an aligned movq,$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C and using them saves fiddling about with alignment testing on entry.$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C might be possible, but 8 c\/l relying on out-of-order execution is already$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C quite reasonable.$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C unsigned long mpn_hamdist (mp_srcptr src, mp_srcptr src2, mp_size_t size);$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C unsigned long mpn_popcount (mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/pentium4/mmx/popham.asm	/^C$/;"	l
C	mpn/x86/pentium4/mmx/rshift.asm	/^C P4 Prescott:		    2.0 cycles\/limb$/;"	l
C	mpn/x86/pentium4/mmx/rshift.asm	/^C P4 Willamette, Northwood: 1.75 cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/add_n.asm	/^C					cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/add_n.asm	/^C			     dst!=src1,2  dst==src1  dst==src2$/;"	l
C	mpn/x86/pentium4/sse2/add_n.asm	/^C P4 model 0-1 (Willamette)	?$/;"	l
C	mpn/x86/pentium4/sse2/add_n.asm	/^C P4 model 2   (Northwood)	4	     6		6$/;"	l
C	mpn/x86/pentium4/sse2/add_n.asm	/^C P4 model 3-4 (Prescott)	4.25	     7.5	7.5$/;"	l
C	mpn/x86/pentium4/sse2/add_n.asm	/^C P6 model 0-8,10-12		-$/;"	l
C	mpn/x86/pentium4/sse2/add_n.asm	/^C P6 model 13  (Dothan)		?$/;"	l
C	mpn/x86/pentium4/sse2/add_n.asm	/^C P6 model 9   (Banias)		?$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C					cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C			     dst!=src1,2  dst==src1  dst==src2$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C P4 model 0-1 (Willamette)	?$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C P4 model 2   (Northwood)	4.25	     6		6$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C P4 model 3-4 (Prescott)	5	     8.5	8.5$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C P6 model 0-8,10-12		-$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C P6 model 13  (Dothan)		?$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C P6 model 9   (Banias)		?$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C The dependent chain is simply the paddq of x+2*y to the previous carry,$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C The slightly strange combination of indexing and pointer incrementing$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C combining anomalies slow it down.$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C is almost achieved for separate src\/dst but when src==dst the write$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C src2 is a slowdown.$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C that's used seems to work best.  Not sure why, but %ecx,4 with src1 and\/or$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C then psrlq to get the new carry.  That makes 4 c\/l the target speed, which$/;"	l
C	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^C$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C  * Perhaps software pipeline small-case code$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C  * Tweak eax\/edx offsets in loop as to save some lea's$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C P4 model 0-1 (Willamette)	5$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C P4 model 2   (Northwood)	5$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C P4 model 3-4 (Prescott)	5$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C P6 model 0-8,10-12		-$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C P6 model 13  (Dothan)		5.24$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C P6 model 9   (Banias)		5.24$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C TODO:$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C n		sp + 12$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C rp		sp + 4$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C up		sp + 8$/;"	l
C	mpn/x86/pentium4/sse2/addmul_1.asm	/^C v0		sp + 16$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C	ALIGN(16)$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C	dir(atom currently grabs this code), and write a 4-way version(7c\/l).$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C AMD K10$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C AMD K6			 -$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C AMD K7			 -$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C AMD K8$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C Intel Atom			 8$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C P4 model 0  (Willamette)$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C P4 model 1  (?)$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C P4 model 2  (Northwood)	 8.25$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C P4 model 3  (Prescott)$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C P4 model 4  (Nocona)$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C P5				 -$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C P6 model 0-8,10-12		 -$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C P6 model 13 (Dothan)$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C P6 model 9  (Banias)		 9.75$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^C TODO: This code was optimised for atom-32, consider moving it back to atom$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C					  --$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C					  20$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C					latency$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C		    mp_limb_t inverse, int shift)$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C	pmuludq	 prod = q*divisor	   8$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C	pmuludq	 q = s*inverse		   8$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C	psrlq	 climb = high(prod)	   2$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C	psubq	 s = (src-cbit) - climb	   2$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C                           mp_limb_t divisor);$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C P4: 19.0 cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C Pairs of movd's are used to avoid unaligned loads.  Despite the loads not$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C The dependent chain here is as follows.$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C Yet the loop measures 19.0 c\/l, so obviously there's something gained$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C being on the dependent chain and there being plenty of cycles available,$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C mp_limb_t mpn_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C mp_limb_t$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C mpn_pi1_bdiv_q_1 (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor,$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C there over a straight reading of the chip documentation.$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C using an unaligned movq on every second iteration measured about 23 c\/l.$/;"	l
C	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^C$/;"	l
C	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^C P4 model 0-1 (Willamette)	 ?$/;"	l
C	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^C P4 model 2   (Northwood)	 5$/;"	l
C	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^C P4 model 3-4 (Prescott)	 5.25$/;"	l
C	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^C P6 model 0-8,10-12		 -$/;"	l
C	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^C P6 model 13  (Dothan)		 4.67$/;"	l
C	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^C P6 model 9   (Banias)		 ?$/;"	l
C	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^C P4 model 0-1 (Willamette)	 ?$/;"	l
C	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^C P4 model 2   (Northwood)	 5$/;"	l
C	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^C P4 model 3-4 (Prescott)	 5.25$/;"	l
C	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^C P6 model 0-8,10-12		 -$/;"	l
C	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^C P6 model 13  (Dothan)		 4.67$/;"	l
C	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^C P6 model 9   (Banias)		 ?$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C					  --$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C					  20$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C					latency$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C	pmuludq	 prod = q*divisor	   8$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C	pmuludq	 q = s*inverse		   8$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C	psrlq	 climb = high(prod)	   2$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C	psubq	 s = (src-cbit) - climb	   2$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C                      mp_limb_t divisor);$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C At size==2 an extra 19 for the mul versus 60 for the divl will see the mul$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C P4: 19.0 cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C Pairs of movd's are used to avoid unaligned loads.  Despite the loads not$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C The dependent chain here is as follows.$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C Using divl for size==1 seems a touch quicker than mul-by-inverse.  The mul$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C Yet the loop measures 19.0 c\/l, so obviously there's something gained$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C being on the dependent chain and there being plenty of cycles available,$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C faster.$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C that might be hidden by out-of-order execution, whereas divl is around 60.$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C there over a straight reading of the chip documentation.$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C using an unaligned movq on every second iteration measured about 23 c\/l.$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C void mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C will be about 9+2*4+2*2+10*4+19+12 = 92 cycles latency, though some of$/;"	l
C	mpn/x86/pentium4/sse2/dive_1.asm	/^C$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	--$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	2   paddd    n1+n2$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	2   paddd    n2+d addback$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	2   paddq    n2:nadj + m*(n1+n2)$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	2   pand     d masked$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	2   psrlq    high n-(q1+1)*d mask$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	2   psrlq    q1$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	2   psubq    (n-d)-q1*d$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	30$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	8   pmuludq  d*q1$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C	8   pmuludq  m*(n1+n2)$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C                                mp_limb_t divisor, mp_limb_t inverse,$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C                                mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C                                unsigned shift);$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C                          mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C                          mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C                         mp_limb_t divisor);$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C                         mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C "m" is written for what is m' in the paper, and "d" for d_norm, which$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C "n-d - q1*d".  This rearrangement gives the same two-limb answer but lets$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C 32 here.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C Algorithm:$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C Alternatives:$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C But it seems to run at 32 cycles, so presumably there's something else$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C Enhancements:$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C For reference, the way the k7 code uses "n-(q1+1)*d" would not suit here,$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C If the divisor is normalized (high bit set) then a division step can$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C Integers using Multiplication" by Granlund and Montgomery, reference in$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C Notes:$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C P4: 32 cycles\/limb integer part, 30 cycles\/limb fraction part.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C The dependent chain here consists of$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C The loop measures 32 cycles, but the dependent chain would suggest it$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C The method and nomenclature follow part 8 of "Division by Invariant$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C The step "sdword dr = n - 2^N*d + (2^N-1-q1) * d" is instead done as$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C The store to the destination high limb is 0 when a divide is skipped, or$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C The test for skipping a division is branch free (once size>=1 is tested).$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C There's a small bias towards expecting xsize==0, by having code for$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C always be skipped, since the high destination limb is always 0 or 1 in$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C any use in the code.  "b" is written for 2^N, the size of a limb, N being$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C carry, since in normal circumstances that will be a very rare event.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C could be done with 30.  Not sure where to start looking for the extras.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C detecting an overflow of q1+1 when q1=0xFFFFFFFF would cost too much.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C gmp.texi.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C going on.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C if it's not skipped then a copy of the src high limb is stored.  The$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C latter is in case src==dst.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C limb is less than the divisor.  mpn_divrem_1c doesn't check for a zero$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C mp_limb_t mpn_divrem_1 (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C mp_limb_t mpn_divrem_1c (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C mp_limb_t mpn_preinv_divrem_1 (mp_ptr dst, mp_size_t xsize,$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C mpn_divrem_1 and mpn_preinv_divrem_1 avoid one division if the src high$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C probably occurs infrequently.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C that case.  It doesn't seem worth checking for this though, since it$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C us have just a psubq on the dependent chain.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C won't cause any confusion since it's only the normalized divisor that's of$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C xsize==0 in a straight line and xsize!=0 under forward jumps.$/;"	l
C	mpn/x86/pentium4/sse2/divrem_1.asm	/^C$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C                           cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C  * Optimize post-loop reduction code; it is from mod_1s_4p, thus overkill.$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C  * Optimize.  The present code was written quite straightforwardly.$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C  * Write a cps function that uses sse2 insns.$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C CAUTION: This is the same code as in k7\/mod_1_1.asm$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C FIXME: See comment in generic\/mod_1_1.c.$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C P4 model 0-1 (Willamette)	?$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C P4 model 2   (Northwood)     16$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C P4 model 3-4 (Prescott)      18$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C P6 model 0-8,10-12		-$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C P6 model 13  (Dothan)		?$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C P6 model 9   (Banias)		?$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C TODO:$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C ap		sp + 4$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C b		sp + 12$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C cps		sp + 16$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_1.asm	/^C n		sp + 8$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C  * Optimize post-loop reduction code.$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C  * Optimize.  The present code was written quite straightforwardly.$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C  * Write a cps function that uses sse2 insns.$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C CAUTION: This is the same code as in k7\/mod_1_4.asm$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C P4 model 0-1 (Willamette)	?$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C P4 model 2   (Northwood)	4$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C P4 model 3-4 (Prescott)	4.5$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C P6 model 0-8,10-12		-$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C P6 model 13  (Dothan)		3.4$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C P6 model 9   (Banias)		?$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C TODO:$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C ap		sp + 4$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C b		sp + 12$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C cps		sp + 16$/;"	l
C	mpn/x86/pentium4/sse2/mod_1_4.asm	/^C n		sp + 8$/;"	l
C	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^C Enhancements:$/;"	l
C	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^C Pentium4: 1.0 cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^C There might a couple of cycles to save by using plain integer code for$/;"	l
C	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^C about 46 (inclusive of some function call overheads).$/;"	l
C	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^C more small sizes.  2 limbs measures about 20 cycles, but 3 limbs jumps to$/;"	l
C	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr src, mp_size_t size)$/;"	l
C	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^C$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C					  --$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C					  20$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C					latency$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C	pmuludq	 prod = q*divisor	   8$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C	pmuludq	 q = s*inverse		   8$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C	psrlq	 climb = high(prod)	   2$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C	psubq	 s = (src-cbit) - climb	   2$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C                                mp_limb_t divisor, mp_limb_t carry);$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C                               mp_limb_t divisor);$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C P4: 19.0 cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C The dependent chain here is as follows.$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C Yet the loop measures 19.0 c\/l, so obviously there's something gained$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C mp_limb_t mpn_modexact_1_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C mp_limb_t mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C there over a straight reading of the chip documentation.$/;"	l
C	mpn/x86/pentium4/sse2/mode1o.asm	/^C$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C                           cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C  * Perhaps software pipeline small-case code$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C  * Tweak eax\/edx offsets in loop as to save some lea's$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C P4 model 0-1 (Willamette)	4$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C P4 model 2   (Northwood)	4$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C P4 model 3-4 (Prescott)	4.55$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C P6 model 0-8,10-12		-$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C P6 model 13  (Dothan)		4.17$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C P6 model 9   (Banias)		4.17$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C TODO:$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C n		sp + 12$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C rp		sp + 4$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C up		sp + 8$/;"	l
C	mpn/x86/pentium4/sse2/mul_1.asm	/^C v0		sp + 16$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C                           cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C    3 bytes and the immediate form is 4 bytes.  About 70 bytes to save.$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C    L<n> to Lm<nn>.$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C    scheduling could improve things by several cycles per outer iteration.$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C    so that they can share feed-in code, and changing the branch targets from$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C    with possibly needless alignment.$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C    without storing intermediates to rp.$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C  * Improve ad-hoc outer loop code and register handling.  Some feed-in$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C  * In code for un <= 3, try keeping accumulation operands in registers,$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C  * Look into different loop alignment, we now expand the code about 50 bytes$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C  * Perhaps rewrap loops 00,01,02 (6 loops) to allow fall-through entry.$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C  * Save a few tens of bytes by doing cross-jumping for Loel0, etc.$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C  * Save around 120 bytes by remapping "m 0", "m 1", "m 2" and "m 3" registers$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C  * Use OSP, should solve feed-in latency problems.$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C  * We might want to keep 32 in a free mm register, since the register form is$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C P4 model 0-1 (Willamette):    5$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C P4 model 2   (Northwood):     4.60 at 32 limbs$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C P4 model 3-4 (Prescott):      4.94 at 32 limbs$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C P6 model 13  (Dothan)         5.24$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C P6 model 14  (Yonah)          ?$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C P6 model 9   (Banias)         ?$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C TODO:$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C rp		sp + 4$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C un		sp + 12$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C up		sp + 8$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C vn		sp + 20$/;"	l
C	mpn/x86/pentium4/sse2/mul_basecase.asm	/^C vp		sp + 16$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C			    cycles\/limb	    cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C    about 30 cycles on K8.$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C    instruction, except for one that takes an immediate count.$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C    integer based popcount.  Such a combined loop would handle 6 limbs in$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C    needs just 2 or 3 slots, leaving around 32 slots.  This allows a parallel$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C    pipelining.$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C    shifting as we go.  Unfortunately, there seem to be no usable shift$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C    using movdqu for one operand and movdqa for the other, or by painfully$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C  * Check if using movdqa to a temp of and then register-based pand is faster.$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C  * It would probably be possible to cut a few cycles\/limb using software$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C  * Make an mpn_hamdist based on this.  Alignment could either be handled by$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C  * There are 35 decode slots unused by the SSE2 instructions.  Loop control$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C  * We could save a byte or two by using 32-bit operations on areg.$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C 32-bit		     popcount	     hamdist$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C 64-bit		     popcount	     hamdist$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C AMD K10			3.5$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C AMD K6			-$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C AMD K7			-$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C AMD K8			?$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C AMD K8,K9			7.5$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C Add the two 64-bit halves of the grand total counter$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C Intel atom		       10.8$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C Intel core2			3.68$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C Intel corei			3.15$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C LEAL.  Default LEAL as an alias of LEA.$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C Make cnsts global to work around Apple relocation bug.$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C Masks for high end of number$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C Masks for low end of number$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P4 model 0  (Willamette)	?$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P4 model 1  (?)		?$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P4 model 2  (Northwood)	3.9$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P4 model 3  (Prescott)	?$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P4 model 4  (Nocona)		?$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P4 model 4 (Nocona):		8$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P5				-$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P6 model 0-8,10-12		-$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P6 model 13 (Dothan)		4$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C P6 model 9  (Banias)		?$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C TODO$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C This file is shared between 32-bit and 64-bit builds.  Only the former has$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C Three magic constants used for masking out bits$/;"	l
C	mpn/x86/pentium4/sse2/popcount.asm	/^C VIA nano			6.5$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C                          mp_size_t size);$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C        cycles\/limb (approx)$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C      dst!=src1,2  dst==src1  dst==src2$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C P4:      4.5         6.5        6.5$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C The dependent chain is paddq combining the carry and next (shifted) part,$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C The slightly strange combination of indexing and pointer incrementing$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C down.$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C in total, makes 4 c\/l the target speed, which is almost achieved for$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C incrementing on %esi is a 1 or 2 cycle slowdown.$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C mp_limb_t mpn_rsh1add_n (mp_ptr wp, mp_srcptr xp, mp_srcptr yp,$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C plus psrlq to move the new carry down.  That, and just 4 mmx instructions$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C separate src\/dst but when src==dst the write combining anomalies slow it$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C that's used seems to work best.  Not sure why, but for instance leal$/;"	l
C	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^C$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C    3 bytes and the immediate form is 4 bytes.  About 80 bytes to save.$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C    considerably faster.  (1:20\/14, 2:34:32, 3:66\/57)$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C    scheduling could improve things by several cycles per outer iteration.$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C    storing intermediates to rp.$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C    with possibly needless alignment.$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C  * Address relative slowness for un<=3 for Pentium M.  The old code is there$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C  * Improve ad-hoc outer loop code and register handling.  Some feed-in$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C  * In Lam3...Lam1 code for, keep accumulation operands in registers, without$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C  * Look into different loop alignment, we now expand the code about 50 bytes$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C  * Use OSP, should solve feed-in latency problems.$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C  * We might want to keep 32 in a free mm register, since the register form is$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C *** diag stuff, use elementary code for now$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C TODO:$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C rp		sp + 4$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C un		sp + 12$/;"	l
C	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^C up		sp + 8$/;"	l
C	mpn/x86/pentium4/sse2/sub_n.asm	/^C					cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/sub_n.asm	/^C			     dst!=src1,2  dst==src1  dst==src2$/;"	l
C	mpn/x86/pentium4/sse2/sub_n.asm	/^C P4 model 0-1 (Willamette)	?$/;"	l
C	mpn/x86/pentium4/sse2/sub_n.asm	/^C P4 model 2   (Northwood)	4	     6		6$/;"	l
C	mpn/x86/pentium4/sse2/sub_n.asm	/^C P4 model 3-4 (Prescott)	4.25	     7.5	7.5$/;"	l
C	mpn/x86/pentium4/sse2/sub_n.asm	/^C P6 model 0-8,10-12		-$/;"	l
C	mpn/x86/pentium4/sse2/sub_n.asm	/^C P6 model 13  (Dothan)		?$/;"	l
C	mpn/x86/pentium4/sse2/sub_n.asm	/^C P6 model 9   (Banias)		?$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C 0, the value 0xFFFFFFFF+c is in the range 0 to 0xFFFFFFFF and is therefore$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C 0xFFFFFFFE00000001.  In the code this is applied to the destination limb when$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C 0xFFFFFFFF00000000 to offset the new carry, and subtract 0x00000000FFFFFFFF$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C GMP 5.1, but it is not carefully tuned for either P6 or P4.  In fact, it is$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C If the carry was a simple twos complement negative then the psrlq shift would$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C It's also possible to view the 0xFFFFFFFF adjustment as a ones-complement$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C P4 model 0-1 (Willamette)	?$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C P4 model 2   (Northwood)	5.87$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C P4 model 3-4 (Prescott)	6.5$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C P6 model 0-8,10-12		-$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C P6 model 13  (Dothan)		6.9$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C P6 model 9   (Banias)		6.8$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C Prescott compared to the old code.$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C The arrangements made here to get a two instruction dependent chain are$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C The extra 0xFFFFFFFF must be subtracted before c is used, but that can be$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C This code represents a step forwards compared to the code available before$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C add an instruction to the dependent chain, so instead an offset is applied so$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C always positive and can always have 0 bits shifted in, which is what psrlq$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C does.$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C done off the dependent chain.  The total adjustment then is to add$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C extension.  That wouldn't be particularly easy to arrange and certainly would$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C fetched.$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C need to bring in 0 bits or 1 bits according to whether the high was zero or$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C negative, which is how it's undone for the return value, but that doesn't$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C non-zero, since a non-zero value would represent a negative needing sign$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C not good for P6.  For P4 it saved a bit over 1 c\/l for both Northwood and$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C ready to become the new carry after a psrlq.$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C seem as clear.$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C slightly subtle.  In the loop the carry (or borrow rather) is a negative so$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C that a paddq can be used to give a low limb ready to store, and a high limb$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C that the high limb will be 0xFFFFFFFF+c.  With c in the range -0xFFFFFFFF to$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C to remove the offset from the current carry, for a net add of$/;"	l
C	mpn/x86/pentium4/sse2/submul_1.asm	/^C$/;"	l
C	mpn/x86/rshift.asm	/^C                       unsigned shift);$/;"	l
C	mpn/x86/rshift.asm	/^C     cycles\/limb$/;"	l
C	mpn/x86/rshift.asm	/^C K6	 4.5$/;"	l
C	mpn/x86/rshift.asm	/^C K7	 5.0$/;"	l
C	mpn/x86/rshift.asm	/^C P4	16.5$/;"	l
C	mpn/x86/rshift.asm	/^C P54	 7.5$/;"	l
C	mpn/x86/rshift.asm	/^C P55	 7.0$/;"	l
C	mpn/x86/rshift.asm	/^C P6	 2.5$/;"	l
C	mpn/x86/rshift.asm	/^C mp_limb_t mpn_rshift (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C			    cycles\/limb$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C    be too bad, though.$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C  * This has not been tuned for any specific processor.  Its speed should not$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C  * Using SSE2 could result in many-fold speedup.$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C AMD K10			 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C AMD K6			 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C AMD K7			 3.4$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C AMD K8			 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C Intel Atom			 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C NOTES$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C P4 model 0  (Willamette)	 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C P4 model 1  (?)		 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C P4 model 2  (Northwood)	 4.5$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C P4 model 3  (Prescott)	 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C P4 model 4  (Nocona)		 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C P5				 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C P6 model 0-8,10-12		 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C P6 model 13 (Dothan)		 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C P6 model 9  (Banias)		 ?$/;"	l
C	mpn/x86/sec_tabselect.asm	/^C mpn_sec_tabselect (mp_limb_t *rp, mp_limb_t *tp, mp_size_t n, mp_size_t nents, mp_size_t which)$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C     cycles\/crossproduct  cycles\/triangleproduct$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C -----------------------------------------------------------------------------$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C A fully-unrolled style like other sqr_basecase.asm versions (k6, k7, p6)$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C Enhancements:$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C First multiply src[0]*src[1..size-1] and store at dst[1..size].$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C K6$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C K7$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C Left shift of dst[1..2*size-2], high bit shifted out becomes dst[2*size-1].$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C Now add in the squares on the diagonal, namely src[0]^2, src[1]^2, ...,$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C P4$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C P5$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C P6$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C The addmul loop here is also not unrolled like aorsmul_1.asm and$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C The algorithm is basically the same as mpn\/generic\/sqr_basecase.c, but a$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C The mul1 loop is not unrolled like mul_1.asm, it doesn't seem worth the$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C code size to do so here.$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C complexity, but if it's worth doing in the other places then it should be$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C lot of function call overheads are avoided, especially when the size is$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C low limb of src[0]^2.$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C might be worth considering.  That'd add quite a bit to the code size, but$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C mul_basecase.asm are.  Perhaps it should be done.  It'd add to the$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C one limb only$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C only as much as is used would be dragged into L1 cache.$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C small.$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C src[size-1]^2.  dst[0] hasn't yet been set at all yet, and just gets the$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C void mpn_sqr_basecase (mp_ptr dst, mp_srcptr src, mp_size_t size);$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C worthwhile here.$/;"	l
C	mpn/x86/sqr_basecase.asm	/^C$/;"	l
C	mpn/x86/udiv.asm	/^C                           mp_limb_t divisor);$/;"	l
C	mpn/x86/udiv.asm	/^C mp_limb_t mpn_udiv_qrnnd (mp_limb_t *remptr, mp_limb_t high, mp_limb_t low,$/;"	l
C	mpn/x86/umul.asm	/^C mp_limb_t mpn_umul_ppmm (mp_limb_t *lowptr, mp_limb_t m1, mp_limb_t m2);$/;"	l
C	mpn/x86/umul.asm	/^C$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C  * Perhaps handle various n mod 3 sizes better.  The code now is too large.$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C AMD K10	 2.167$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C AMD K8,K9	 2.167$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C Intel P4	12.0$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C Intel core2	 4.0$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C TODO$/;"	l
C	mpn/x86_64/addaddmul_1msb0.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C  * Tune feed-in and wind-down code.$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C AMD K10	 2.375$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C AMD K8,K9	 2.375$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C Intel NHM	 4.32$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C Intel P4	15-16$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C Intel SBR	 3.4$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C Intel core2	 4.45$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C TODO$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C This code is the result of running a code generation and optimization tool$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C VIA nano	 4.4$/;"	l
C	mpn/x86_64/addmul_2.asm	/^C suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C AMD K10	 2$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C AMD K8,K9	 2$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C AMD bd1	 ?$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C AMD bobcat	 ?$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C Intel P4	 13$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C Intel core2	 3.45$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C Sometimes speed degenerates, supposedly related to that some operand$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C The speed is limited by decoding\/issue bandwidth.  There are 22 instructions$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C alignments cause cache conflicts.$/;"	l
C	mpn/x86_64/aorrlsh1_n.asm	/^C in the loop, which corresponds to ceil(22\/3)\/4 = 1.83 c\/l.$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C AMD K10	 2$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C AMD K8,K9	 2$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C Intel NHM	 2.75$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C Intel SBR	 2.55$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C Intel core2	 3$/;"	l
C	mpn/x86_64/aorrlshC_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C   1) Use indexing to save the 3 LEA$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C   2) Write reasonable feed-in code$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C   3) Be more clever about register usage$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C   4) Unroll more, handling CL negation, carry save\/restore cost much now$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C   5) Reschedule$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C AMD K10	 3.1	< 3.85 for lshift + add_n$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C AMD K8,K9	 3.1	< 3.85 for lshift + add_n$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C Intel NHM	 4	> 3.75 for lshift + add_n$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C Intel P4	14.6	> 7.33 for lshift + add_n$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C Intel SBR	(5.8)	> 3.46 for lshift + add_n$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C Intel atom	(7.75)	< 8.75 for lshift + add_n$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C Intel core2	 3.87	> 3.27 for lshift + add_n$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C This was written quickly and not optimized at all.  Surely one could get$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C VIA nano	 4.7	< 6.25 for lshift + add_n$/;"	l
C	mpn/x86_64/aorrlsh_n.asm	/^C closer to 3 c\/l or perhaps even under 3 c\/l.  Ideas:$/;"	l
C	mpn/x86_64/aors_err1_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/aors_err1_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/aors_err1_n.asm	/^C AMD K8,K9	 2.75 (degenerates to 3 c\/l for some alignments)$/;"	l
C	mpn/x86_64/aors_err1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/aors_err1_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/aors_err1_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/aors_err1_n.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/aors_err1_n.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/aors_err1_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/aors_err2_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/aors_err2_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/aors_err2_n.asm	/^C AMD K8,K9	 4.5$/;"	l
C	mpn/x86_64/aors_err2_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/aors_err2_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/aors_err2_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/aors_err2_n.asm	/^C Intel core2	 6.9$/;"	l
C	mpn/x86_64/aors_err2_n.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/aors_err2_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/aors_err3_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/aors_err3_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/aors_err3_n.asm	/^C AMD K8,K9	 7.0$/;"	l
C	mpn/x86_64/aors_err3_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/aors_err3_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/aors_err3_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/aors_err3_n.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/aors_err3_n.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/aors_err3_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/aors_n.asm	/^C AMD K10	 1.5$/;"	l
C	mpn/x86_64/aors_n.asm	/^C AMD K8,K9	 1.5$/;"	l
C	mpn/x86_64/aors_n.asm	/^C AMD bd1	 1.8$/;"	l
C	mpn/x86_64/aors_n.asm	/^C AMD bobcat	 2.5$/;"	l
C	mpn/x86_64/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/aors_n.asm	/^C Intel IBR	 1.61$/;"	l
C	mpn/x86_64/aors_n.asm	/^C Intel NHM	 5.5$/;"	l
C	mpn/x86_64/aors_n.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/aors_n.asm	/^C Intel SBR	 1.61$/;"	l
C	mpn/x86_64/aors_n.asm	/^C Intel atom	 4$/;"	l
C	mpn/x86_64/aors_n.asm	/^C Intel core2	 4.9$/;"	l
C	mpn/x86_64/aors_n.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/aors_n.asm	/^C VIA nano	 3.25$/;"	l
C	mpn/x86_64/aors_n.asm	/^C optimization tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C    Tune it!$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C  * The loop is great, but the prologue and epilogue code was quickly written.$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C AMD K10	 2.5$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C AMD K8,K9	 2.5$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C AMD bd1	 5.0$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C AMD bobcat	 6.17$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C Intel NHM	 4.9$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C Intel P4	14.9$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C Intel SBR	 4.0$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C Intel atom	21.3$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C Intel core2	 5.09$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C VIA nano	 5.0$/;"	l
C	mpn/x86_64/aorsmul_1.asm	/^C optimization tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C	     cycles\/limb	best$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C AMD bd1$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C AMD bd2$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C Intel PNR$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C Intel atom	18.8		this$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/atom/addmul_2.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C  * This code is slightly large at 433 bytes.$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C  * sublsh1_n.asm and this file use the same basic pattern.$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C AMD bd1	 2.3$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C AMD bobcat	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C Intel atom	 4.875	(4.75 is probably possible)$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C TODO$/;"	l
C	mpn/x86_64/atom/aorrlsh1_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C Intel atom	 5.75$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/atom/aorrlsh2_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C	     cycles\/limb	best$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C AMD bd1$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C AMD bd2$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C Intel PNR$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C Intel atom	19.37		this$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/atom/aorsmul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C    larger.$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C  * Consider using 4-way unrolling.  We reach 4 c\/l, but the code is 2.5 times$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C Intel atom	 4.5$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C TODO$/;"	l
C	mpn/x86_64/atom/lshift.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C	ALIGN(16)$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C    times larger.$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C  * Consider using 4-way unrolling.  We reach 4.5 c\/l, but the code is 2.5$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C Intel atom	 5$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C TODO$/;"	l
C	mpn/x86_64/atom/lshiftc.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C	     cycles\/limb	best$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C AMD bd1$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C AMD bd2$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C Intel PNR$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C Intel atom	17.3		this$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/atom/mul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C	     cycles\/limb	best$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C AMD bd1$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C AMD bd2$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C Intel PNR$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C Intel atom	17.75		this$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/atom/mul_2.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C	jmp	L(cj)$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C  * Consider inlining mpn_add_n.$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C  * Make lead-in code for the inner loops be more similar.$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C  * Micro-optimise, none performed thus far.$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C  * Single basecases out before the pushes.$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C AMD bobcat	 5.0$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C AMD bull	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C AMD pile	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C Intel HWL	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C Intel IBR	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C Intel core	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/atom/redc_1.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C    large feed-in and wind-down code.$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C  * Schedule loop less.  It is now almost surely overscheduled, resulting in$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C Intel NMH	 ?$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C Intel atom	 5.25$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C TODO$/;"	l
C	mpn/x86_64/atom/rsh1aors_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C    larger.$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C  * Consider using 4-way unrolling.  We reach 4 c\/l, but the code is 2.5 times$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C Intel atom	 4.5$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C TODO$/;"	l
C	mpn/x86_64/atom/rshift.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C  * This code is slightly large at 501 bytes.$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C  * aorrlsh1_n.asm and this file use the same basic pattern.$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C AMD bd1	 2.3$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C AMD bobcat	 ?$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C Intel atom	 5	(4.875 is probably possible)$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C TODO$/;"	l
C	mpn/x86_64/atom/sublsh1_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C  * Try to make loop run closer to 4 c\/l.$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C AMD bd1	 4.5-4.7$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C Intel core2$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/bd1/aorsmul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C  * Move loop code into feed-in blocks, to save insn for zeroing regs.$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C AMD bd1	 4$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C Intel core2$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/bd1/mul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C AMD bull	4.36		average, quite fluctuating$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C AMD pile	4.38		slighty fluctuating$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C Intel core$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C Scheme: genxmul --mul$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/bd1/mul_2.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C    Alternatively, we could tweak the present code (which was loopmixed for a$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C    different CPU).$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C  * Further micro-optimise.$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C  * Merge bull-specific mul_1, if it is not slower the TOOM22 range.$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C  * Merge faster mul_2, such as the one in the same directory as this file.$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C AMD bull	~4.8		~4.55		-		~4.3$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C AMD pile	~4.6		~4.55		-		~4.55$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C Intel core$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C cycles\/limb	mul_1		mul_2		mul_3		addmul_2$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/bd1/mul_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C  * Optimise feed-in code.$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C AMD K10	 2.25$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C AMD K8,K9	 2.25$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C Intel NHM	 3.75$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C Intel P4	12.5$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C Intel SBR	 3.6$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C Intel atom	20$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C Intel core2	 4$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C TODO$/;"	l
C	mpn/x86_64/bdiv_dbm1c.asm	/^C VIA nano	 4$/;"	l
C	mpn/x86_64/bdiv_q_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bdiv_q_1.asm	/^C AMD K10	10$/;"	l
C	mpn/x86_64/bdiv_q_1.asm	/^C AMD K8,K9	10$/;"	l
C	mpn/x86_64/bdiv_q_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/bdiv_q_1.asm	/^C Intel P4	33$/;"	l
C	mpn/x86_64/bdiv_q_1.asm	/^C Intel atom	42$/;"	l
C	mpn/x86_64/bdiv_q_1.asm	/^C Intel core2	13.25$/;"	l
C	mpn/x86_64/bdiv_q_1.asm	/^C Intel corei	14$/;"	l
C	mpn/x86_64/bdiv_q_1.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C AMD bd1$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C AMD bobcat	 2.28$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C Intel core2$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/bobcat/aors_n.asm	/^C optimization tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C AMD K10	 4.5$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C AMD K8,K9	 4.5$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C AMD bd1	 4.75$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C AMD bobcat	 5$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C DOS64 allocations$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C DOS64 parameters$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C Intel NHM	 5.43$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C Intel P4	17.7$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C Intel SBR	 3.92$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C Intel atom	23$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C Intel core2	 5.5$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C Standard allocations$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C Standard parameters$/;"	l
C	mpn/x86_64/bobcat/aorsmul_1.asm	/^C VIA nano	 5.63$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C AMD K10	 1-2  (alignment fluctuations)$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C AMD K8,K9	 1$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C AMD bd1	 ?$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C AMD bobcat	 1.5$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C Intel NHM	 1-1.25$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C Intel P4	 2.8$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C Intel SBR	 1$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C Intel atom	 2.87$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C Intel core2	 1$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C VIA nano	 2$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C n	rdx$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C rp	rdi$/;"	l
C	mpn/x86_64/bobcat/copyd.asm	/^C up	rsi$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C AMD K10	 1-2  (alignment fluctuations)$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C AMD K8,K9	 1$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C AMD bd1	 ?$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C AMD bobcat	 1.5$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C Intel NHM	 1-1.25$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C Intel P4	 2.8$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C Intel SBR	 1$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C Intel atom	 2.87$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C Intel core2	 1$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C VIA nano	 2$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C n	rdx$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C rp	rdi$/;"	l
C	mpn/x86_64/bobcat/copyi.asm	/^C up	rsi$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C AMD K10	 4.5$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C AMD K8,K9	 4.5$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C AMD bd1	 4.62$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C AMD bobcat	 5$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C DOS64 allocations$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C DOS64 parameters$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C Intel NHM	 4.23$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C Intel P4	14$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C Intel SBR	 3.0$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C Intel atom	21$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C Intel core2	 4.5$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C Standard allocations$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C Standard parameters$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C VIA nano	 4.94$/;"	l
C	mpn/x86_64/bobcat/mul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C    combining addmul loops like that code.  Tolerable slowdown?$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C    jumps out from mul_1 winddown code, perhaps with no added overhead.$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C  * Are the ALIGN(16) really necessary?  They add about 25 bytes of padding.$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C  * Fix slowdown for un=vn=3 (67->71) compared to default code.$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C  * Lots of space could be saved by replacing the "switch" code by gradual$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C  * This is 1263 bytes, compared to 1099 bytes for default code.  Consider$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C  * Tune un < 3 code.$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C 4 separate addmul_1 loops.$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C AMD K10	 4.5$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C AMD K8,K9	 4.5$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C AMD bd1	 4.75$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C AMD bobcat	 5$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Define to return $1 for more conservative ptr handling.$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Intel NHM	 5.43$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Intel P4	17.7$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Intel SBR	 3.92$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Intel atom	23$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Intel core2	 5.5$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Standard allocations$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Standard parameters$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Switch on n into right addmul_l loop$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C Temp macro for allowing control over indexing.$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C This mul_basecase is based on mul_1 and addmul_1, since these both run at the$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C VIA nano	 5.63$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C We have not tried using the same addmul_1 loops with a switch into feed-in$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C code, as we do in other basecase implementations.  Doing that could save$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C multiply insn bandwidth, without any apparent loop branch exit pipeline$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C outer loop(0)$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C outer loop(1)$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C outer loop(2)$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C outer loop(3)$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C replays experienced on K8.  The structure is unusual: it falls into mul_1 in$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C substantial code volume, but would also probably add some overhead.$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C the same way for all n, then it splits into 4 different wind-down blocks and$/;"	l
C	mpn/x86_64/bobcat/mul_basecase.asm	/^C$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C	jmp	L(cj)$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C  * Consider inlining mpn_add_n.$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C  * Micro-optimise, none performed thus far.$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C  * Single basecases out before the pushes.$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C AMD bobcat	 5.0$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C AMD bull	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C AMD pile	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C Intel HWL	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C Intel IBR	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C Intel core	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/bobcat/redc_1.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C	jmp	L(to3)$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C    jumps out from mul_1 winddown code, perhaps with no added overhead.$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C  * Are the ALIGN(16) really necessary?  They add about 25 bytes of padding.$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C  * Lots of space could be saved by replacing the "switch" code by gradual$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C  * Perhaps implement a larger final corner (it is now 2 x 1).$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C  * Tune un < 4 code.$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C 4 separate addmul_1 loops.$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C AMD K10	 4.5$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C AMD K8,K9	 4.5$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C AMD bd1	 4.75$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C AMD bobcat	 5$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C Define to return $1 for more conservative ptr handling.$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C Intel NHM	 5.43$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C Intel P4	17.7$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C Intel SBR	 3.92$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C Intel atom	23$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C Intel core2	 5.5$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C Standard allocations$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C Standard parameters$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C Temp macro for allowing control over indexing.$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C This sqr_basecase is based on mul_1 and addmul_1, since these both run at the$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C VIA nano	 5.63$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C We have not tried using the same addmul_1 loops with a switch into feed-in$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C code, as we do in other basecase implementations.  Doing that could save$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C fall through into main loop$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C multiply insn bandwidth, without any apparent loop branch exit pipeline$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C replays experienced on K8.  The structure is unusual: it falls into mul_1 in$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C sqr_diag_addlsh1$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C substantial code volume, but would also probably add some overhead.$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C the same way for all n, then it splits into 4 different wind-down blocks and$/;"	l
C	mpn/x86_64/bobcat/sqr_basecase.asm	/^C$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C    ADCSBB-to-memory, again saving 1 insn\/limb.$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C    actually reads both source operands and writes the register for a false$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C    condition, we cannot use it.$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C    false, and since cmov's documentation is not clear about whether it$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C    for any other processor.$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C    is supposed to have the exact same execution pattern for cnd true and$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C    to save one insn\/limb, and (2) when up=rp cnd_add_n and cnd_sub_n could use$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C  * It might seem natural to use the cmov insn here, but since this function$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C  * This runs optimally at decoder bandwidth on K10.  It has not been tuned$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C  * Two cases could be optimised: (1) cnd_add_n could use ADCSBB-from-memory$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C AMD K10	 2$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C AMD K8,K9	 2$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C AMD bd1	 2.32$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C AMD bobcat	 3$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C Intel NHM	 2.8$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C Intel P4	13$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C Intel SBR	 2.4$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C Intel atom	 5.33$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C Intel core2	 2.9$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C NOTES$/;"	l
C	mpn/x86_64/cnd_aors_n.asm	/^C VIA nano	 3$/;"	l
C	mpn/x86_64/com.asm	/^C	    cycles\/limb$/;"	l
C	mpn/x86_64/com.asm	/^C AMD K10	 1.25$/;"	l
C	mpn/x86_64/com.asm	/^C AMD K8,K9	 1.25$/;"	l
C	mpn/x86_64/com.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/com.asm	/^C Intel P4	 2.78$/;"	l
C	mpn/x86_64/com.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/com.asm	/^C Intel core2	 1.1$/;"	l
C	mpn/x86_64/com.asm	/^C Intel corei	 1.5$/;"	l
C	mpn/x86_64/com.asm	/^C VIA nano	 2$/;"	l
C	mpn/x86_64/copyd.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/copyd.asm	/^C AMD K10	 1$/;"	l
C	mpn/x86_64/copyd.asm	/^C AMD K8,K9	 1$/;"	l
C	mpn/x86_64/copyd.asm	/^C AMD bd1	 1.36$/;"	l
C	mpn/x86_64/copyd.asm	/^C AMD bobcat	 1.71$/;"	l
C	mpn/x86_64/copyd.asm	/^C Intel NHM	 1$/;"	l
C	mpn/x86_64/copyd.asm	/^C Intel P4	 2-3$/;"	l
C	mpn/x86_64/copyd.asm	/^C Intel SBR	 1$/;"	l
C	mpn/x86_64/copyd.asm	/^C Intel atom	 2$/;"	l
C	mpn/x86_64/copyd.asm	/^C Intel core2	 1$/;"	l
C	mpn/x86_64/copyd.asm	/^C VIA nano	 2$/;"	l
C	mpn/x86_64/copyi.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/copyi.asm	/^C AMD K10	 1$/;"	l
C	mpn/x86_64/copyi.asm	/^C AMD K8,K9	 1$/;"	l
C	mpn/x86_64/copyi.asm	/^C AMD bd1	 1.36$/;"	l
C	mpn/x86_64/copyi.asm	/^C AMD bobcat	 1.71$/;"	l
C	mpn/x86_64/copyi.asm	/^C Intel NHM	 1$/;"	l
C	mpn/x86_64/copyi.asm	/^C Intel P4	 2-3$/;"	l
C	mpn/x86_64/copyi.asm	/^C Intel SBR	 1$/;"	l
C	mpn/x86_64/copyi.asm	/^C Intel atom	 2$/;"	l
C	mpn/x86_64/copyi.asm	/^C Intel core2	 1$/;"	l
C	mpn/x86_64/copyi.asm	/^C VIA nano	 2$/;"	l
C	mpn/x86_64/core2/aors_err1_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/core2/aors_err1_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/core2/aors_err1_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/core2/aors_err1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/aors_err1_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/core2/aors_err1_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/core2/aors_err1_n.asm	/^C Intel core2	 4.14$/;"	l
C	mpn/x86_64/core2/aors_err1_n.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/core2/aors_err1_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C AMD K10	 2$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C AMD K8,K9	 2$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C Intel NHM	 2$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C Intel P4	10$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C Intel SBR	 2$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C Intel atom	 9$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C Intel core2	 2$/;"	l
C	mpn/x86_64/core2/aors_n.asm	/^C VIA nano	 3$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C AMD K10	 4$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C AMD K8,K9	 4$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C AMD bd1	 5.1$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C Intel NHM	 5.0$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C Intel SBR	 4.1$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C Intel core2	 4.3-4.5 (fluctuating)$/;"	l
C	mpn/x86_64/core2/aorsmul_1.asm	/^C VIA nano	 5.25$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C		norm	unorm	frac$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C                      mp_limb_t dinv, int cnt)$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C                      mp_srcptr np, mp_size_t nn, mp_limb_t d,$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C               mp_srcptr np, mp_size_t nn, mp_limb_t d)$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C         cnt         qp      d  dinv$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C       shift passed on stack		C only for mpn_preinv_divrem_1$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C AMD K10	15	15	12$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C AMD K8,K9	15	15	12$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C Intel P4	44	44	43$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C Intel atom	51	51	36$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C Intel core2	24	24	19.5$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C Intel corei	19	19	18$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C VIA nano	46	44	22.5$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C mp_limb_t$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C mpn_divrem_1 (mp_ptr qp, mp_size_t fn,$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C mpn_preinv_divrem_1 (mp_ptr qp, mp_size_t fn,$/;"	l
C	mpn/x86_64/core2/divrem_1.asm	/^C rax rbx rcx rdx rsi rdi rbp r8  r9  r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C	     cycles\/bit (approx)$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C	test	%rax, %rax	C FIXME: does this lower latency?$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C  * Optimise inner-loop for specific CPUs.$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C  * Use DIV for 1-by-1 reductions, at least for some CPUs.$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C (time_in_cycles(bmod_1,1) + call_overhead) \/ (cycles\/bit).$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C AMD K10	 4.30$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C AMD K8,K9	 8.50$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C AMD bd1	 5.00$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C AMD bobcat	10.0$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C Both U and V are single limbs, reduce with bmod if u0 >> v0.$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C Intel NHM	 5.17$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C Intel P4	18.6$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C Intel SBR	 4.69$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C Intel atom	17.0$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C Intel core2	 3.83$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C Numbers measured with: speed -CD -s16-64 -t48 mpn_gcd_1$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C The problem is that C only defines the '1c' variant, and that configure$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C Threshold of when to call bmod when U is one limb.  Should be about$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C Undo some configure cleverness.$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C VIA nano	 5.44$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C gcd_1 exists without a corresponding cpudep mode1o.$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C special fat rule for mpn_modexact_1_odd, messing up things when a cpudep$/;"	l
C	mpn/x86_64/core2/gcd_1.asm	/^C therefore considers modexact_1c to be the base function.  It then adds a$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C AMD K10	 4.25$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C AMD K8,K9	 4.25$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C Intel NHM	 1.375	(up to about n = 260, then 1.5)$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C Intel P4	14.7$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C Intel SBR	 1.87$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C Intel core2	 1.27$/;"	l
C	mpn/x86_64/core2/lshift.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C Intel NHM	 2.25	(up to about n = 260, then 1.875)$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C Intel SBR	 2.25$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C Intel core2	 1.5$/;"	l
C	mpn/x86_64/core2/lshiftc.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C	lea	0(un), i$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C                  |               |               |               |$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C               m_1(0m4)        m_1(1m4)        m_1(2m4)        m_1(3m4)$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C             _____           _____           _____           _____$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C            \/     \\         \/     \\         \/     \\         \/     \\$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C            \\_____\/         \\_____\/         \\_____\/         \\_____\/$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C           \\      \/|\\      \\      \/|\\      \\      \/|\\      \\      \/|\\$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C           |      \/        |      \/        |      \/        |      \/$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C           |     \/         |     \/         |     \/         |     \/$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C           |    \/          |    \/          |    \/          |    \/$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C          \\|\/      |      \\|\/      |      \\|\/      |      \\|\/      |$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C          \\|\/ |\/_         \\|\/ |\/_         \\|\/ |\/_         \\|\/ |\/_$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C        am_2(0m4)  |    am_2(1m4)  |    am_2(2m4)  |    am_2(3m4)  |$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C        m_2(0m4)  |     m_2(1m4)  |     m_2(2m4)  |     m_2(3m4)  |$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C    between loop header and wind-down code.$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C  * Consider adc reg,reg instead of adc $0,reg in m2 loops.  This save a byte.$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C  * Currently 2687 bytes, making it smaller would be nice.$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C  * Implement some basecases, say for un < 4.$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C  * Try re-rolling the m2 loops to avoid the current 9 insn code duplication$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C  * Try zeroing with xor in m2 loops.$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C  * Tune.  None done so far.$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Code structure:$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Define this to $1 to use late loop index variable as zero, $2 to use an$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Intel NHM	 3.75		 3.8		 -		4.06-4.2$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C Intel core	 4.0		 4.0		 -		4.18-4.25$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C cycles\/limb	mul_1		mul_2		mul_3		addmul_2$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C explicit $0.$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/core2/mul_basecase.asm	/^C$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C   * Implement proper cor2, replacing current cor0.$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C   * Micro-optimise.$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C   * Offset n by 2 in order to avoid the outer loop cmp.  (And sqr_basecase?)$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C Intel NHM	 3.75		4.06-4.2$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C Intel core	 4.0		4.18-4.25$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C cycles\/limb	mul_2		addmul_2$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/core2/mullo_basecase.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C  * Consider inlining mpn_add_n.$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C  * Keep up[i] in registers for basecases (might require pushes).$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C  * Micro-optimise, none performed thus far.$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C  * Single basecases out before the pushes.$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C  X  q0'  n   X  rp  up      u0i           mp   q0 i   j$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C AMD bobcat	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C AMD bull	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C AMD pile	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C Intel HWL	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C Intel IBR	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C Intel core	 4.5  (fluctuating)$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/core2/redc_1.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C  * Loopmix to approach 2.5 c\/l on NHM.$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C Intel NHM	 3.3$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C Intel SBR	 2.5$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C Intel core2	 3.05$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C TODO$/;"	l
C	mpn/x86_64/core2/rsh1aors_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C AMD K10	 4.25$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C AMD K8,K9	 4.25$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C Intel NHM	 1.375	(up to about n = 260, then 1.5)$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C Intel P4	14.7$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C Intel SBR	 1.77$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C Intel core2	 1.27$/;"	l
C	mpn/x86_64/core2/rshift.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C                             \\            \/$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C                            \\              \/$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C                            sqr_diag_addlsh1$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C                         \\                    \/$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C                        \\                      \/$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C                       \\                        \/$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C                       tail(0m2)          tail(1m2)$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C              ____________                   ____________$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C             \/            \\                 \/            \\$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C             \\____________\/                  \\____________\/$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C            \\            \/|\\                \\            \/|\\$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C            \\|\/            \\               \\|\/            \\$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C           |               |               |               |$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C          \\|\/             \\|\/             \\|\/             \\|\/$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C         am_2(3m4)       am_2(1m4)       am_2(0m4)       am_2(2m4)$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C        lea tab(%rip),%rax; jmp *(n,%rax)$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C        lea tab(%rip),%rax; lea (%rip),%rbx; add (n,%rax),%rbx; jmp *%rbx$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C        m_2(0m4)        m_2(2m4)        m_2(1m4)        m_2(3m4)$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C    The code would be, using non-PIC code,$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C    between loop header and wind-down code.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C    explicit "mov %rax,reg" now.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C    less sequence, if the table is large enough to support tuneup's needs.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C    or,$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C    using PIC code.  The table entries would be Ln1,Ln2,Ln3,Lm0,Lm1,Lm2,Lm3,..$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C    with the last four entries repeated a safe number of times.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C  * Check if using "lea (reg),reg" should be done in more places; we have some$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C  * Consider adc reg,reg instead of adc $0,reg in m2 loops.  This save a byte.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C  * Consider expanding feed-in code in order to avoid zeroing registers.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C  * Consider using a jumptab-based entry sequence.  One might even use a mask-$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C  * Currently 2761 bytes, making it smaller would be nice.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C  * Try re-rolling the m2 loops to avoid the current 9 insn code duplication$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C  * Try zeroing with xor in m2 loops.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C  * Tune.  None done so far.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C  * Zero consistently with xor.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Code structure:$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Define this to $1 to use late loop index variable as zero, $2 to use an$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Intel NHM	 3.8		4.06-4.2		 3.5$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C Intel core	 4.9		4.18-4.25		 3.87$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C cycles\/limb	mul_2		addmul_2	sqr_diag_addlsh1$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C explicit $0.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/core2/sqr_basecase.asm	/^C$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C AMD K8,K9	 4.25$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C Intel NHM	 3.1$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C Intel SBR	 2.47$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C Intel core2	 3$/;"	l
C	mpn/x86_64/core2/sublshC_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C  * Port to DOS64, not forgetting nop execution.$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C  * Put an initial mulx before switching, targeting some free registers.$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C  * Trim nop execution after L(f2).$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C  * Tune feed-in code.$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C AMD K10	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C AMD K8,K9	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C AMD bobcat	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C AMD bull	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C AMD excavator	 ?$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C AMD jaguar	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C AMD pile	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C AMD steam	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C Intel BWL   1.8-1.9$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C Intel HWL	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C Intel IBR	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C Intel NHM	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C Intel P4	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C Intel SBR	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C Intel SLM	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C Intel atom	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C Intel core2	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C VIA nano	n\/a$/;"	l
C	mpn/x86_64/coreibwl/addmul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C  * Port to DOS64, not forgetting nop execution.$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C  * Put an initial mulx before switching, targeting some free registers.$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C  * Trim nop execution after L(f2).$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C  * Tune feed-in code.$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C AMD K10	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C AMD K8,K9	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C AMD bobcat	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C AMD bull	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C AMD jaguar	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C AMD pile	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C AMD steam	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C Intel BWL	 1.69$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C Intel HWL	 1.68$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C Intel IBR	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C Intel NHM	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C Intel P4	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C Intel SBR	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C Intel SLM	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C Intel atom	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C Intel core2	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C VIA nano	n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C    does not execute too many no-ops (for both PIC and non-PIC).$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C  * Do overlapped software pipelining.$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C  * When changing this, make sure the code which falls into the inner loops$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C AMD K10	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C AMD K8,K9	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C AMD bobcat	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C AMD bull	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C AMD excavator	 ?		 ?$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C AMD jaguar	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C AMD pile	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C AMD steam	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C Intel BWL	 1.69	      1.8-1.9$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C Intel HWL	 1.68		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C Intel IBR	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C Intel NHM	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C Intel P4	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C Intel SBR	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C Intel SLM	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C Intel atom	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C Intel core2	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C VIA nano	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C cycles\/limb	mul_1		addmul_1$/;"	l
C	mpn/x86_64/coreibwl/mul_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C	lea	(rp), rp$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C    3 variants below, but the haswell code turns out to be fastest.$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C    count will change only once each 8th time!$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C    does not execute too many no-ops (for both PIC and non-PIC).$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C    each of the 8 loop branches be poorly predicted since they will be$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C    executed fewer times for each time.  With just one addmul_1 loop, the loop$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C    hardly allow correct branch prediction.  On 2nd thought, we now might make$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C    on switching code, since a circularly updated computed goto target will$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C  * Do overlapped software pipelining.$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C  * Replace sqr_diag_addlsh1 code (from haswell) with adx-aware code.  We have$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C  * We have 8 addmul_1 loops which fall into each other.  The idea is to save$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C  * When changing this, make sure the code which falls into the inner loops$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C AMD K10	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C AMD K8,K9	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C AMD bobcat	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C AMD bull	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C AMD excavator	 ?		 ?$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C AMD jaguar	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C AMD pile	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C AMD steam	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C Intel BWL	 1.69	      1.8-1.9$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C Intel HWL	 1.68		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C Intel IBR	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C Intel NHM	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C Intel P4	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C Intel SBR	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C Intel SLM	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C Intel atom	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C Intel core2	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C VIA nano	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C cycles\/limb	mul_1		addmul_1$/;"	l
C	mpn/x86_64/coreibwl/sqr_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C AMD K10	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C AMD K8,K9	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C AMD bobcat	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C AMD bull	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C AMD pile	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C Intel HWL	 2.15$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C Intel IBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C Intel NHM	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C Intel P4	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C Intel SBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C Intel atom	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C Intel core	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C VIA nano	n\/a$/;"	l
C	mpn/x86_64/coreihwl/addmul_2.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C  * Handle small n separately, for lower overhead.$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C AMD K10	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C AMD K8,K9	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C AMD bobcat	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C AMD bull	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C AMD pile	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C Intel HWL	 2.32$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C Intel IBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C Intel NHM	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C Intel P4	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C Intel SBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C Intel atom	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C Intel core	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C VIA nano	n\/a$/;"	l
C	mpn/x86_64/coreihwl/aorsmul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C	     cycles\/limb	best$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C AMD K10	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C AMD K8,K9	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C AMD bd1	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C AMD bd2	 ?$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C AMD bobcat	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C Intel HWL	 1.57		this$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C Intel IBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C Intel NHM	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C Intel P4	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C Intel PNR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C Intel SBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C Intel atom	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C VIA nano	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C  * Move test and jcc together, for insn fusion.$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C AMD K10	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C AMD K8,K9	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C AMD bobcat	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C AMD bull	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C AMD pile	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C Intel HWL	 1.86$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C Intel IBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C Intel NHM	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C Intel P4	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C Intel SBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C Intel atom	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C Intel core	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C VIA nano	n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_2.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C	push	%r12$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C	push	%r13$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C	push	%r14$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C  * Adjoin a mul_3.$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C  * Further micro-optimise.$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C AMD K10	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C AMD K8,K9	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C AMD bobcat	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C AMD bull	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C AMD jaguar	 ?		 ?		 -		 ?$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C AMD pile	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C AMD steam	 ?		 ?		 -		 ?$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C Intel BWL	 ?		 ?		 -		 ?$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C Intel HWL	 1.77		 1.86		 -		 2.15$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C Intel IBR	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C Intel NHM	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C Intel P4	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C Intel SBR	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C Intel atom	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C Intel core	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C VIA nano	n\/a		n\/a		 -		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C cycles\/limb	mul_1		mul_2		mul_3		addmul_2$/;"	l
C	mpn/x86_64/coreihwl/mul_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C   * Implement proper cor2, replacing current cor0.$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C   * Micro-optimise.$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C AMD K10	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C AMD K8,K9	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C AMD bobcat	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C AMD bull	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C AMD jaguar	 ?		 ?$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C AMD pile	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C AMD steam	 ?		 ?$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C Intel BWL	 ?		 ?$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C Intel HWL	 1.86		 2.15$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C Intel IBR	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C Intel NHM	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C Intel P4	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C Intel SBR	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C Intel atom	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C Intel core	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C VIA nano	n\/a		n\/a$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C cycles\/limb	mul_2		addmul_2$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreihwl/mullo_basecase.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C    cycles, though.$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C  * Consider inlining mpn_add_n.  Tests indicate that this saves just 1-2$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C  * Micro-optimise.$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C AMD K10	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C AMD K8,K9	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C AMD bobcat	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C AMD bull	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C AMD pile	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Intel HWL	 2.32$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Intel IBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Intel NHM	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Intel P4	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Intel SBR	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Intel atom	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Intel core	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Special code for n = 1 since general code cannot handle it$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Special code for n = 2 since general code cannot handle it$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C Special code for n = 3 since general code cannot handle it$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C VIA nano	n\/a$/;"	l
C	mpn/x86_64/coreihwl/redc_1.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C    main code.$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C    n = 0 (mod 2).  These loops could fall into specific "corner" code.$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C    out for negative sizes being zero-extended, though.$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C    possible.$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C  * Consider splitting outer loop into 2, one for n = 1 (mod 2) and one for$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C  * Consider splitting outer loop into 4.$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C  * Make sure we write no dead registers in feed-in code.$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C  * Perhaps suppress a few more xor insns in feed-in code.$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C  * Provide straight-line code for n = 4; then look for simplifications in$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C  * Replace current unoptimised sqr_diag_addlsh1 loop; 1.75 c\/l might be$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C  * Streamline pointer updates.$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C  * We might use 32-bit size ops, since n >= 2^32 is non-terminating.  Watch$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C AMD K10	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C AMD K8,K9	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C AMD bobcat	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C AMD bull	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C AMD jaguar	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C AMD pile	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C AMD steam	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C Intel BWL	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C Intel HWL	 1.86		 2.15			~2.5$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C Intel IBR	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C Intel NHM	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C Intel P4	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C Intel SBR	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C Intel atom	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C Intel core	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C VIA nano	n\/a		n\/a			n\/a$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C cycles\/limb	mul_2		addmul_2	sqr_diag_addlsh1$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund, except$/;"	l
C	mpn/x86_64/coreihwl/sqr_basecase.asm	/^C that the sqr_diag_addlsh1 loop was manually written.$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C AMD K10	 4.75$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C Intel NHM	 2.8$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C Intel SBR	 3.55$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C Intel core2	 2.8-3$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C The inner-loop probably runs close to optimally on Nehalem (using 4-way$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C both smaller and faster.$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C mpn_rsblsh_nc removed below, its idea of carry-in is inconsistent with$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C refmpn_rsblsh_nc$/;"	l
C	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^C unrolling).  The rest of the code is quite crude, and could perhaps be made$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C Intel IBR$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C Intel NHM	 4.55  with minor fluctuations$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C Intel SBR$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C Intel core$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C N.B.: Be careful if editing, making sure the loop alignment padding does not$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C become large, as we currently fall into it.$/;"	l
C	mpn/x86_64/coreinhm/aorsmul_1.asm	/^C optimization tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C	jmp	L(cj)$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C	jmp	L(tp3)$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C  * Consider inlining mpn_add_n.$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C  * Micro-optimise, none performed thus far.$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C  * Single basecases out before the pushes.$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C AMD bobcat	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C AMD bull	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C AMD pile	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C Intel HWL	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C Intel IBR	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C Intel core	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreinhm/redc_1.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C	     cycles\/limb	best$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C Intel HWL	 2.5		 2.15$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C Intel IBR	 2.66		this$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C Intel SBR	 2.93		this$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C Intel core$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C This code is the result of running a code generation and optimisation tool$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/coreisbr/addmul_2.asm	/^C suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^C mpn_rsblsh2_nc removed below, its idea of carry-in is inconsistent with$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^C refmpn_rsblsh2_nc$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C Intel NHM	 4$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C Intel SBR	 2  C (or 1.95 when L(top)'s alignment = 16 (mod 32))$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C Intel core2	 3.25$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C This code probably runs close to optimally on Sandy Bridge (using 4-way$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C all other processors, including Nehalem.$/;"	l
C	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^C unrolling).  It also runs reasonably well on Core 2, but it runs poorly on$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C AMD K10	 5.25$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C Intel NHM	 3.95$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C Intel SBR	 2.75$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C Intel core2	 3.1$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C The inner-loop probably runs close to optimally on Sandy Bridge (using 4-way$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C both smaller and faster.$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C mpn_rsblsh_nc removed below, its idea of carry-in is inconsistent with$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C refmpn_rsblsh_nc$/;"	l
C	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^C unrolling).  The rest of the code is quite crude, and could perhaps be made$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C AMD bull	 1.82		average over 400-600$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C AMD pile	 1.83		average over 400-600$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C Intel HWL	 1.33		fluctuates$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C Intel IBR	 1.55		fluctuates$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C Intel SBR	 1.55		fluctuates$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C Intel SBR, IBR, and HWL far as we know, except for the fluctuation problems.$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C Intel core$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C It also runs slightly faster on average on AMD bull and pile.$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C N.B.!  The loop alignment padding insns are executed.  If editing the code,$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C No micro-optimisation has been done.$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C The loop of this code was manually written.  It runs close to optimally on$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C make sure the padding does not become excessive.  It is now a 4-byte nop.$/;"	l
C	mpn/x86_64/coreisbr/aors_n.asm	/^C$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C Intel HWL$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C Intel IBR	 3.04$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C Intel SBR	 3.24 (average, fluctuating in 3.20-3.57)$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C Intel core$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/coreisbr/aorsmul_1.asm	/^C optimization tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C    r10 instead of rsi.$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C  * Add mul_1c entry point.$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C  * The loop is great, but the prologue code was quickly written.  Tune it!$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C  * We could preserve one less register under DOS64 calling conventions, using$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C AMD bd1$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C Intel IBR	 2.4$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C Intel SBR	 2.5$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C Intel core2$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/coreisbr/mul_1.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C	     cycles\/limb	best$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C Intel HWL	 2.02		 1.86$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C Intel IBR	 2.35		 2.32 using 4-way code$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C Intel SBR	 2.57		 2.52 using 4-way code$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C Intel core$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C This code is the result of running a code generation and optimisation tool$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/coreisbr/mul_2.asm	/^C suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C    speedup.$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C    the loops at the expense of code size.$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C  * Adjoin a mul_3, avoiding slow mul_1 for odd vn.$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C  * Consider replacing the 2-way mul_2 code with 4-way code, for a very slight$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C  * Fix the addmul_2 fluctuation affecting SBR.$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C  * Further micro-optimise.$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C  * Improve feed-in code, avoiding zeroing of many registers and dummy adds in$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C Intel HWL	 2.35		 2.0		 -		 2.5$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C Intel IBR	 2.4		 2.3		 -		 2.68$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C Intel SBR	 2.5		 2.5		 -		 2.95$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C Intel core$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C cycles\/limb	mul_1		mul_2		mul_3		addmul_2$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/coreisbr/mul_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C   * Implement proper cor2, replacing current cor0.$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C   * Micro-optimise.$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C   * Offset n by 2 in order to avoid the outer loop cmp.  (And sqr_basecase?)$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C AMD K10$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C Intel HWL	 2.0		 2.5$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C Intel IBR	 2.3		 2.68$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C Intel NHM$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C Intel P4$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C Intel SBR	 2.5		 2.95$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C Intel core$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C VIA nano$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C cycles\/limb	mul_2		addmul_2$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreisbr/mullo_basecase.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C		    cycles\/limb$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C AMD K10		 1.5		slower than 8-way non-pipelined code$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C AMD K8,K9		 n\/a$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C AMD bd1		 4.2$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C AMD bobcat		 6.28		slower than 8-way non-pipelined code$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C Intel HSW		 1$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C Intel IBR		 1.05		fluctuating$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C Intel NHM		 1.32$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C Intel P4		 n\/a$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C Intel SBR		 1.05		fluctuating$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C Intel atom		 n\/a$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C Intel core2		 n\/a$/;"	l
C	mpn/x86_64/coreisbr/popcount.asm	/^C VIA nano		 n\/a$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C	jmp	L(cj)$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C  * Consider inlining mpn_add_n.$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C  * Micro-optimise, none performed thus far.$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C  * Single basecases out before the pushes.$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C AMD bobcat	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C AMD bull	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C AMD pile	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C Intel HWL	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C Intel IBR	 3.04$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C Intel SBR	 3.24$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C Intel core	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/coreisbr/redc_1.asm	/^C rax rbx rcx rdx rdi rsi rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C AMD K10	 4.25$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C Intel NHM	 3.87$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C Intel P4	 21.5$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C Intel SBR	 2.05$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C Intel core2	 3.2$/;"	l
C	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^C VIA nano	 44.9$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C    out for negative sizes being zero-extended, though.$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C    quite sub-optimal here.  Write specific code, and add code for n = 4.$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C    wind-down code.  Try re-rolling it.$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C  * Make sure we write no dead registers in feed-in code.$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C  * Perhaps suppress a few more xor insns in feed-in code.$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C  * Replace current unoptimised sqr_diag_addlsh1 loop, 2.5 c\/l should be easy.$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C  * Streamline pointer updates.$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C  * The mul_2 loop has a 10 insn common sequence in the loop start and the$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C  * The straight-line code for n <= 3 comes from the K8 code, and might be$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C  * This file has been the subject to just basic micro-optimisation.$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C  * We might use 32-bit size ops, since n >= 2^32 is non-terminating.  Watch$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C AMD K10	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C AMD K8,K9	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C AMD bobcat	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C AMD bull	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C AMD jaguar	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C AMD pile	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C AMD steam	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C Intel BWL	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C Intel HWL	 2.02		 2.5			 2.5$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C Intel IBR	 2.35		 2.66			 3.0$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C Intel NHM	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C Intel P4	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C Intel SBR	 2.57		 2.93			 3.0$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C Intel atom	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C Intel core	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C VIA nano	 ?		 ?			 ?$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C cycles\/limb	mul_2		addmul_2	sqr_diag_addlsh1$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund, except$/;"	l
C	mpn/x86_64/coreisbr/sqr_basecase.asm	/^C that the sqr_diag_addlsh1 loop was manually written.$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C		c\/l$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C AMD K10	13$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C AMD K8,K9	13$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C AMD bobcat	16$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C AMD bull	16.5$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C AMD pile	15$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C INPUT Parameters$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Intel HWL	11.7$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Intel IBR	13$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Intel NHM	18$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Intel P4	47	poor$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Intel SBR	15	poor$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Intel atom	52	very poor$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Intel core	19.25$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Invariants$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C VIA nano	19$/;"	l
C	mpn/x86_64/div_qr_1n_pi1.asm	/^C Variables$/;"	l
C	mpn/x86_64/div_qr_2n_pi1.asm	/^C		c\/l$/;"	l
C	mpn/x86_64/div_qr_2n_pi1.asm	/^C   it. (we could put it in register %rbp, but then we would need to$/;"	l
C	mpn/x86_64/div_qr_2n_pi1.asm	/^C   save and restore that instead, which doesn't seem like a win).$/;"	l
C	mpn/x86_64/div_qr_2n_pi1.asm	/^C * Store qh in the same stack slot as di_param, instead of pushing$/;"	l
C	mpn/x86_64/div_qr_2n_pi1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/div_qr_2n_pi1.asm	/^C TODO$/;"	l
C	mpn/x86_64/div_qr_2u_pi1.asm	/^C		c\/l$/;"	l
C	mpn/x86_64/div_qr_2u_pi1.asm	/^C Duplicated, just jumping back to a different address.$/;"	l
C	mpn/x86_64/div_qr_2u_pi1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/dive_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/dive_1.asm	/^C A quick adoption of the 32-bit K7 code.$/;"	l
C	mpn/x86_64/dive_1.asm	/^C AMD K10	10$/;"	l
C	mpn/x86_64/dive_1.asm	/^C AMD K8,K9	10$/;"	l
C	mpn/x86_64/dive_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/dive_1.asm	/^C Intel P4	33$/;"	l
C	mpn/x86_64/dive_1.asm	/^C Intel atom	42$/;"	l
C	mpn/x86_64/dive_1.asm	/^C Intel core2	13.25$/;"	l
C	mpn/x86_64/dive_1.asm	/^C Intel corei	14$/;"	l
C	mpn/x86_64/dive_1.asm	/^C VIA nano	43$/;"	l
C	mpn/x86_64/dive_1.asm	/^C divisor	rcx$/;"	l
C	mpn/x86_64/dive_1.asm	/^C n		rdx$/;"	l
C	mpn/x86_64/dive_1.asm	/^C rp		rdi$/;"	l
C	mpn/x86_64/dive_1.asm	/^C up		rsi$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C		norm	unorm	frac$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C                      mp_limb_t dinv, int cnt)$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C                      mp_srcptr np, mp_size_t nn, mp_limb_t d,$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C               mp_srcptr np, mp_size_t nn, mp_limb_t d)$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C         cnt         qp      d  dinv$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C       shift passed on stack		C only for mpn_preinv_divrem_1$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C AMD K10	13	13	12$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C AMD K8,K9	13	13	12$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C Intel P4	43	44	43$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C Intel atom	43	46	36$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C Intel core2	24.5	24.5	19.5$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C Intel corei	20.5	19.5	18$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C VIA nano	25.5	25.5	24$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C mp_limb_t$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C mpn_divrem_1 (mp_ptr qp, mp_size_t fn,$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C mpn_preinv_divrem_1 (mp_ptr qp, mp_size_t fn,$/;"	l
C	mpn/x86_64/divrem_1.asm	/^C rax rbx rcx rdx rsi rdi rbp r8  r9  r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C	     cycles\/limb	best$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C     n2  un      -d1 dinv qp  d0 q0     d1  up  fn      msl$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C AMD K10	18$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C AMD K8,K9	18$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C AMD bull$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C AMD jaguar$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C AMD pile$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C Intel BWL$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C Intel HWL	20.6$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C Intel IBR	21.4$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C Intel NHM	30.25$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C Intel P4	68$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C Intel SBR	21.3$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C Intel atom	73$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C Intel core	34$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C VIA nano	33$/;"	l
C	mpn/x86_64/divrem_2.asm	/^C rax rbx rcx rdx rsi rdi  rbp r8 r9 r10 r11 r12 r13 r14 r15$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C AMD K10	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C AMD K8,K9	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C AMD bobcat	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C AMD bull	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C AMD jaguar	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C AMD pile	 4.87		 4.87				N$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C AMD steam	 ?		 ?$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C Intel BWL	 0.28		 0.37				Y$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C Intel HWL	 0.25		 0.30				Y$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C Intel IBR	 0.50		 0.65				N$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C Intel NHM	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C Intel P4	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C Intel SBR	 0.50		 0.91				N$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C Intel atom	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C Intel core	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C VIA nano	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C We try to do as many 32-byte operations as possible.  The top-most and$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C bottom-most writes might need 8-byte operations.  For the bulk copying, we$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C unaligned 32-byte operations.$/;"	l
C	mpn/x86_64/fastavx/copyd.asm	/^C write using aligned 32-byte operations, but we read with both aligned and$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C AMD K10	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C AMD K8,K9	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C AMD bobcat	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C AMD bull	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C AMD jaguar	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C AMD pile	 4.87		 4.87				N$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C AMD steam	 ?		 ?$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C Intel BWL	 0.28		 0.37				Y$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C Intel HWL	 0.25		 0.30				Y$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C Intel IBR	 0.50		 0.65				N$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C Intel NHM	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C Intel P4	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C Intel SBR	 0.50		 0.91				N$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C Intel atom	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C Intel core	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C VIA nano	n\/a$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C We try to do as many 32-byte operations as possible.  The top-most and$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C bottom-most writes might need 8-byte operations.  For the bulk copying, we$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C unaligned 32-byte operations.$/;"	l
C	mpn/x86_64/fastavx/copyi.asm	/^C write using aligned 32-byte operations, but we read with both aligned and$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C AMD K10	 0.85		 illop				Y\/N$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C AMD K8,K9	 2.0		 illop		1.0\/1.0		N$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C AMD bobcat	 1.97		 ? 8.17		1.5\/1.5		N$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C AMD bull	 1.39		 ? 1.45				Y\/N$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C AMD excavator$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C AMD jaguar	 1.02		 1.02		0.91\/0.91	N$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C AMD pile     0.8-1.4	       0.7-1.4				Y$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Basecase code.  Needed for good small operands speed, not for$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Code handling up - rp = 8 (mod 16)$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C FIXME: The code below only handles overlap if it is close to complete, or$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C For operands of < COM_SSE_THRESHOLD limbs, we use a plain 64-bit loop, taken$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Intel BWL	 0.57		 0.69		opt\/0.65	Y$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Intel HWL	 0.51		 0.58		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Intel IBR	 0.50		 0.64		opt\/0.57	Y$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Intel NHM	 0.52		 0.65		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Intel P4	 2.26		 illop				Y\/N$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Intel SBR	 0.51		 0.65		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Intel SLM	 1.02		 1.52				N$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Intel atom	 1.16		 1.70		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C Intel core	 0.52		 0.95		opt\/0.74	Y$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C There are three instructions for loading an aligned 128-bit quantity.  We use$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C VIA nano	 1.09		 1.10		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C We use only 16-byte operations, except for unaligned top-most and bottom-most$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C code to use it here.$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C correctness as the above code is currently written.$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C from the x86_64 default code.$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C instruction is better adapted to mpn_copyd's needs, we need to contort the$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C limbs.  We use the SSSE3 palignr instruction when rp - up = 8 (mod 16).  That$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C movaps, since it has the shortest coding.$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C quite separate: up-rp < 5 or up-up > 15 limbs$/;"	l
C	mpn/x86_64/fastsse/com-palignr.asm	/^C$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C AMD K10	 0.85		 1.3				Y\/N$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C AMD K8,K9	 2.0		 2.0				N$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C AMD bobcat	 3.1		 3.1				N$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C AMD bull	 1.40		 1.40				Y$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C AMD excavator$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C AMD jaguar	 0.91		 0.91		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C AMD pile     0.9-1.4	       0.9-1.4				Y$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Instead of having separate loops for reading aligned and unaligned, we read$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Intel BWL	 0.61		 0.65		0.57\/opt	Y$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Intel HWL	 0.51		 0.64		opt\/0.58	Y$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Intel IBR	 0.50		 0.57		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Intel NHM	 0.53		 0.68				Y$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Intel P4	 2.28		 illop				Y$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Intel SBR	 0.51		 0.75		opt\/0.65	Y\/N$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Intel SLM	 1.09		 1.35				N$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Intel atom	 3.68		 3.68				N$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C Intel core2	 1.02		 1.02				N$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C VIA nano	 1.17		 5.09				Y\/N$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C We try to do as many 16-byte operations as possible.  The top-most and$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C aligned 16-byte operations, we read with both aligned and unaligned 16-byte$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C best handle the unaligned case there.$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C bottom-most writes might need 8-byte operations.  We can always write using$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C doubles when reading using MOVDQA (for aligned source).  It is unclear how to$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C operations.$/;"	l
C	mpn/x86_64/fastsse/com.asm	/^C using MOVDQU.  This seems to work great except for core2; there performance$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C AMD K10	 0.85		 illop				Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C AMD K8,K9	 2.0		 illop		1.0\/1.0		N$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C AMD bobcat	 1.97		 8.24		1.5\/1.5		N$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C AMD bull	 0.70		 0.70				Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C AMD excavator$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C AMD jaguar	 0.77		 0.89		0.65\/opt	N\/Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C AMD pile	 0.68		 0.68				Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Basecase code.  Needed for good small operands speed, not for$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C For operands of < COPYD_SSE_THRESHOLD limbs, we use a plain 64-bit loop,$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Intel BWL	 0.55		 0.55		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Intel HWL	 0.50		 0.51		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Intel IBR	 0.50		 0.50		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Intel NHM	 0.52		 0.64		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Intel P4	 2.26		 illop				Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Intel SBR	 0.51		 0.51		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Intel SLM	 1.02		 1.04		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Intel atom	 1.16		 1.66		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C Intel core	 0.52		 0.80		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C There are three instructions for loading an aligned 128-bit quantity.  We use$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C VIA nano	 1.08		 1.06		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C We use only 16-byte operations, except for unaligned top-most and bottom-most$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C correctness as the above code is currently written.$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C limbs.  We use the SSSE3 palignr instruction when rp - up = 8 (mod 16).$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C movaps, since it has the shortest coding.$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C taken from the x86_64 default code.$/;"	l
C	mpn/x86_64/fastsse/copyd-palignr.asm	/^C$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C AMD K10	 0.85		 1.64				Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C AMD bull	 1.4		 1.4				Y$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C AMD excavator$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C AMD jaguar	 0.65		 1.02		opt\/0.93	Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C AMD pile	 0.68		 0.98				Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C AMD steam$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Instead of having separate loops for reading aligned and unaligned, we read$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Intel BWL	 0.55		 0.62		opt\/0.55	Y$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Intel HWL	 0.50		 0.57		opt\/0.51	Y$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Intel IBR	 0.50		 0.57		opt\/0.50	Y$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Intel NHM	 0.5		 0.67				Y$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Intel P4	 2.3		 2.3				Y$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Intel SBR	 0.51		 0.75		opt\/0.54	Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Intel SLM	 1.02		 1.27		opt\/1.04	Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C Intel core	 1.0		 1.0		0.52\/0.80	N$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C VIA nano	 1.16		 5.16				Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C We try to do as many 16-byte operations as possible.  The top-most and$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C aligned 16-byte operations, we read with both aligned and unaligned 16-byte$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C best handle the unaligned case there.$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C bottom-most writes might need 8-byte operations.  We can always write using$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C doubles when reading using MOVDQA (for aligned source).  It is unclear how to$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C operations.$/;"	l
C	mpn/x86_64/fastsse/copyd.asm	/^C using MOVDQU.  This seems to work great except for core2; there performance$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C AMD K10	 0.85		 illop				Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C AMD K8,K9	 2.0		 illop		1.0\/1.0		N$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C AMD bobcat	 1.97		 8.16		1.5\/1.5		N$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C AMD bull	 0.70		 0.66				Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C AMD excavator	 ?		 ?$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C AMD jaguar	 0.77		 0.93		0.65\/opt	N\/Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C AMD pile	 0.68		 0.66				Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C AMD steam	 ?		 ?$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Basecase code.  Needed for good small operands speed, not for$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Code handling up - rp = 8 (mod 16)$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C For operands of < COPYI_SSE_THRESHOLD limbs, we use a plain 64-bit loop,$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Intel BWL	 0.55		 0.55		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Intel HWL	 0.50		 0.51		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Intel IBR	 0.50		 0.54		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Intel NHM	 0.52		 0.71		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Intel P4	 2.26		 illop				Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Intel SBR	 0.51		 0.54		opt\/0.51	Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Intel SLM	 1.02		 1.07		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Intel atom	 1.16		 1.61		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C Intel core	 0.52		 0.64		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C There are three instructions for loading an aligned 128-bit quantity.  We use$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C VIA nano	 1.09		 1.08		opt\/opt		Y$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C We use only 16-byte operations, except for unaligned top-most and bottom-most$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C code to use it here.$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C correctness as the above code is currently written.$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C instruction is better adapted to mpn_copyd's needs, we need to contort the$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C limbs.  We use the SSSE3 palignr instruction when rp - up = 8 (mod 16).  That$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C movaps, since it has the shortest coding.$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C taken from the x86_64 default code.$/;"	l
C	mpn/x86_64/fastsse/copyi-palignr.asm	/^C$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb      good$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C              aligned	      unaligned	      best seen	     for cpu?$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C AMD K10	 0.85		 1.64				Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C AMD K8,K9$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C AMD bobcat$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C AMD bull	 1.4		 1.4				N$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C AMD excavator	 ?		 ?$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C AMD jaguar	 0.65		 1.02		opt\/0.93	Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C AMD pile	 0.77		 0.93				N$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C AMD steam	 ?		 ?$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Basecase code.  Needed for good small operands speed, not for correctness as$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Instead of having separate loops for reading aligned and unaligned, we read$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Intel BWL	 0.55		 0.62		opt\/0.55	Y$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Intel HWL	 0.50		 0.57		opt\/0.51	Y$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Intel IBR	 0.50		 0.57		opt\/0.54	Y$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Intel NHM	 0.5		 0.67				Y$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Intel P4	 2.3		 2.3				Y$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Intel SBR	 0.51		 0.75		opt\/0.54	Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Intel SLM	 1.02		 1.27		opt\/1.07	Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Intel atom$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C Intel core	 1.0		 1.0		0.52\/0.64	N$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C VIA nano	 1.16		 5.16				Y\/N$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C We try to do as many 16-byte operations as possible.  The top-most and$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C aligned 16-byte operations, we read with both aligned and unaligned 16-byte$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C best handle the unaligned case there.$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C bottom-most writes might need 8-byte operations.  We can always write using$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C doubles when reading using MOVDQA (for aligned source).  It is unclear how to$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C offsets need fixing.$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C operations.$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C reinstated if this code is to be used for n > 3, and then the post loop$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C the above code is currently written.  The commented-out lines need to be$/;"	l
C	mpn/x86_64/fastsse/copyi.asm	/^C using MOVDQU.  This seems to work great except for core2; there performance$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb    good$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C              aligned	      unaligned	      best seen	   for cpu?$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C    for other affected CPUs.$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C  * Could 2-limb wind-down code be simplified?$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C  * Improve basecase code, using shld\/shrd for SBR, discrete integer shifts$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C AMD K10	 1.5-1.8	 1.5-1.8	 1.33	  yes$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C AMD K8,K9	 3		 3		 2.35	  no, use shl\/shr$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C AMD bd1	 1.7-1.9	 1.7-1.9	 1.33	  yes$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C AMD bobcat	 3.17		 3.17			  yes, bad for n < 20$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C Basecase$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C Do one initial limb in order to make rp aligned$/;"	d
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C Intel NHM	 1.66		 1.66		 1.25	  no, use shld\/shrd$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C Intel P4	 4.67		 4.67		 2.7	  no, slow movdqu$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C Intel SBR	 1.3		 1.3		 1.25	  yes, bad for n = 4-6$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C Intel atom	11.7		11.7		 4.5	  no$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C Intel core2	 2.15		 2.15		 1.25	  no, use shld\/shrd$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C TODO$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C This variant rely on fast load movdqu, and uses it even for aligned operands,$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C VIA nano	 5.7		 5.95		 2.0	  no, slow movdqu$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C We try to do as many aligned 16-byte operations as possible.  The top-most$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C and bottom-most writes might need 8-byte operations.$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C in order to avoid the need for two separate loops.$/;"	l
C	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^C$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C	     cycles\/limb	     cycles\/limb	      good$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C          16-byte aligned         16-byte unaligned	    for cpu?$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C   (1) The unaligned case makes many reads.$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C   (2) We should do some unrolling, at least 2-way.$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C *****************************************************************************$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C 16+8+X bytes, where X is 8 or 16 depending on how punpcklqdq is implemented.$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C AMD K10	 1.68  (1.45)		 1.75  (1.49)		Y$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C AMD K8,K9	 ?			 ?$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C AMD bd1	 1.82  (1.75)		 1.82  (1.75)		Y$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C AMD bobcat	 4			 4$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C Do one initial limb in order to make rp aligned$/;"	d
C	mpn/x86_64/fastsse/lshift.asm	/^C Handle the case when ap != rp (mod 16).$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C Handle the case when ap = rp (mod 16).$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C Intel NHM	 2.05  (1.75)		 2.09  (2)$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C Intel P4	 3     (2.7)		 3     (2.7)		Y$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C Intel SBR	 1.5   (1.3125)		 1.5   (1.4375)		Y$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C Intel atom	 ?			 ?$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C Intel core2	 2.05  (1.67)		 2.55  (1.75)$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C Nano.$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C There are two inner-loops, one for when rp = ap (mod 16) and one when this is$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C This is not yet great code:$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C VIA nano	 2.25  (2)		 2.5   (2)		Y$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C We try to do as many 16-byte operations as possible.  The top-most and$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C With 2-way unrolling but no scheduling we reach 1.5 c\/l on K10 and 2 c\/l on$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C bottom-most writes might need 8-byte operations.$/;"	l
C	mpn/x86_64/fastsse/lshift.asm	/^C not true.  The aligned case reads 16+8 bytes, the unaligned case reads$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb    good$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C              aligned	      unaligned	      best seen	   for cpu?$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C    for other affected CPUs.$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C  * Could 2-limb wind-down code be simplified?$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C  * Improve basecase code, using shld\/shrd for SBR, discrete integer shifts$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C AMD K10	 1.8-2.0	 1.8-2.0	 ?	  yes$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C AMD K8,K9	 3		 3		 ?	  no, use shl\/shr$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C AMD bd1	 1.9		 1.9		 ?	  yes$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C AMD bobcat	 3.67		 3.67			  yes, bad for n < 20$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C Basecase$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C Do one initial limb in order to make rp aligned$/;"	d
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C Intel NHM	 2.15		 2.15		 ?	  no, use shld\/shrd$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C Intel P4	 4.75		 4.75		 ?	  no, slow movdqu$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C Intel SBR	 1.45		 1.45		 ?	  yes, bad for n = 4-6$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C Intel atom	12.9		12.9		 ?	  no$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C Intel core2	 2.27		 2.27		 ?	  no, use shld\/shrd$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C TODO$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C This variant rely on fast load movdqu, and uses it even for aligned operands,$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C VIA nano	 6.18		 6.44		 ?	  no, slow movdqu$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C We try to do as many aligned 16-byte operations as possible.  The top-most$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C and bottom-most writes might need 8-byte operations.$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C in order to avoid the need for two separate loops.$/;"	l
C	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^C$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C	     cycles\/limb	     cycles\/limb	      good$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C          16-byte aligned         16-byte unaligned	    for cpu?$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C   (1) The unaligned case makes too many reads.$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C   (2) We should do some unrolling, at least 2-way.$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C *****************************************************************************$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C 16+8+X bytes, where X is 8 or 16 depending on how punpcklqdq is implemented.$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C 16-byte operations, we read with both 8-byte and 16-byte operations.$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C AMD K10	 1.85  (1.635)		 1.9   (1.67)		Y$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C AMD K8,K9	 ?			 ?$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C AMD bd1	 1.82  (1.75)		 1.82  (1.75)		Y$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C AMD bobcat	 4.5			 4.5$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C Do one initial limb in order to make rp aligned$/;"	d
C	mpn/x86_64/fastsse/lshiftc.asm	/^C Handle the case when ap != rp (mod 16).$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C Handle the case when ap = rp (mod 16).$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C Intel NHM	 2.05  (1.875)		 2.6   (2.25)$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C Intel P4	 3.6   (3.125)		 3.6   (3.125)		Y$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C Intel SBR	 1.55  (1.44)		 2     (1.57)		Y$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C Intel atom	 ?			 ?$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C Intel core2	 2.05  (1.67)		 2.55  (1.75)$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C Nano.$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C There are two inner-loops, one for when rp = ap (mod 16) and one when this is$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C This is not yet great code:$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C VIA nano	 2.5   (2.5)		 2.5   (2.5)		Y$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C We try to do as many 16-byte operations as possible.  The top-most and$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C With 2-way unrolling but no scheduling we reach 1.5 c\/l on K10 and 2 c\/l on$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C bottom-most writes might need 8-byte operations.  We always write using$/;"	l
C	mpn/x86_64/fastsse/lshiftc.asm	/^C not true.  The aligned case reads 16+8 bytes, the unaligned case reads$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb    good$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C              aligned	      unaligned	      best seen	   for cpu?$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C    for other affected CPUs.$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C  * Could 2-limb wind-down code be simplified?$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C  * Improve basecase code, using shld\/shrd for SBR, discrete integer shifts$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C AMD K10	 1.5-1.8	 1.5-1.8	 1.33	  yes$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C AMD K8,K9	 3		 3		 2.35	  no, use shl\/shr$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C AMD bd1	 1.7-1.9	 1.7-1.9	 1.33	  yes$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C AMD bobcat	 3.17		 3.17			  yes, bad for n < 20$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C Basecase$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C Do one initial limb in order to make rp aligned$/;"	d
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C Intel NHM	 1.66		 1.66		 1.25	  no, use shld\/shrd$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C Intel P4	 4.67		 4.67		 2.7	  no, slow movdqu$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C Intel SBR	 1.3		 1.3		 1.25	  yes, bad for n = 4-6$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C Intel atom	11.7		11.7		 4.5	  no$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C Intel core2	 2.15		 2.15		 1.25	  no, use shld\/shrd$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C TODO$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C This variant rely on fast load movdqu, and uses it even for aligned operands,$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C VIA nano	 5.7		 5.95		 2.0	  no, slow movdqu$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C We try to do as many aligned 16-byte operations as possible.  The top-most$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C and bottom-most writes might need 8-byte operations.$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C in order to avoid the need for two separate loops.$/;"	l
C	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^C$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C	      ali,evn n	     unal,evn n	      other cases$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C	     cycles\/limb     cycles\/limb     cycles\/limb$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C          nents  n   rp   tab       which j    i   temp  *    *    *    *$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C    arguments to allow efficient code using just SSE2.  We would need to$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C    either use the SSE4_1 pcmpeqq, or find some other SSE2 sequence.$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C    rejects movq.  But gas assembles movd as movq when given a 64-bit greg.$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C  * We only honour the least significant 32 bits of the `which' and `nents'$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C  * We use movd for copying between xmm and plain registers, since old gas$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C AMD K10	 0.78		0.78		 0.85$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C AMD K8,K9	 1.65		1.65		 1.8$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C AMD bd1	 0.80		0.91		 1.25$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C AMD bobcat	 2.15		2.15		 2.37$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C Intel NHM	 0.87		0.90		 0.90$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C Intel P4	 2.5		2.5		 2.95$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C Intel SBR	 0.63		0.79		 0.77$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C Intel atom	 4.3		 4.3		 4.3	slower than plain code$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C Intel core2	 1.17		1.25		 1.25$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C NOTES$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C VIA nano	 1.4		 5.1		 3.14	too alignment dependent$/;"	l
C	mpn/x86_64/fastsse/sec_tabselect.asm	/^C rax  rbx  rcx  rdx  rdi  rsi  rbp   r8   r9  r10  r11  r12  r13  r14  r15$/;"	l
C	mpn/x86_64/fat/fat_entry.asm	/^C The rcx\/ecx zeroing here is needed for the BMI2 check.$/;"	l
C	mpn/x86_64/fat/fat_entry.asm	/^C This is called only 3 times, so just something simple and compact is fine.$/;"	l
C	mpn/x86_64/fat/fat_entry.asm	/^C long __gmpn_cpuid (char dst[12], int id);$/;"	l
C	mpn/x86_64/fat/fat_entry.asm	/^C$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C	     cycles\/bit (approx)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C (time_in_cycles(bmod_1,1) + call_overhead) \/ (cycles\/bit).$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C AMD K10	 5.15                 (5.00)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C AMD K8,K9	 5.21                 (4.95)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C AMD bd1	 5.42                 (5.14)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C AMD bobcat	 6.71                 (6.56)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C Both U and V are single limbs, reduce with bmod if u0 >> v0.$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C Intel NHM	 6.49                 (6.25)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C Intel P4	13.5                 (12.75)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C Intel SBR	 7.75                 (7.57)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C Intel atom	 8.77                 (8.54)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C Intel core2	 6.20                 (6.16)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C Numbers measured with: speed -CD -s16-64 -t48 mpn_gcd_1$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C Threshold of when to call bmod when U is one limb.  Should be about$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C VIA nano	 6.60                 (6.20)$/;"	l
C	mpn/x86_64/gcd_1.asm	/^C ctz_table[n] is the number of trailing zeros on n, or MAXSHIFT if n==0.$/;"	l
C	mpn/x86_64/invert_limb.asm	/^C	     cycles\/limb (approx)	div$/;"	l
C	mpn/x86_64/invert_limb.asm	/^C AMD K10	 48			 77$/;"	l
C	mpn/x86_64/invert_limb.asm	/^C AMD K8,K9	 48			 71$/;"	l
C	mpn/x86_64/invert_limb.asm	/^C Intel P4	135			161$/;"	l
C	mpn/x86_64/invert_limb.asm	/^C Intel atom	129			191$/;"	l
C	mpn/x86_64/invert_limb.asm	/^C Intel core2	 69			116$/;"	l
C	mpn/x86_64/invert_limb.asm	/^C Intel corei	 55			 89$/;"	l
C	mpn/x86_64/invert_limb.asm	/^C VIA nano	 79			157$/;"	l
C	mpn/x86_64/invert_limb.asm	/^C rax rcx rdx rdi rsi r8$/;"	l
C	mpn/x86_64/invert_limb_table.asm	/^C Table entry X contains floor (0x7fd00 \/ (0x100 + X))$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C		    cycles\/limb$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C    4-way unrolling.$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C  * Write something less basic.  It should not be hard to reach 1.5 c\/l with$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C AMD K10		 2$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C AMD K8,K9		 n\/a$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C Intel P4		 n\/a$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C Intel atom		 n\/a$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C Intel core2		 n\/a$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C Intel corei		 2.05$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C TODO$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C This is very straightforward 2-way unrolled code.$/;"	l
C	mpn/x86_64/k10/hamdist.asm	/^C VIA nano		 n\/a$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C		    cycles\/limb$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C	add	R32(%rcx), R32(%rcx)	C 2x$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C	lea	(%rcx,%rcx,4), %rcx	C 10x$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C	mov	R32(n), R32(%rcx)$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C	neg	R32(%rcx)$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C   is one byte shorter and therefore will mess up the switching code.$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C   which is the main reason for our usage of '.byte'.$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C  * Improve switching code, the current code sucks.$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C * The outdated gas used in FreeBSD and NetBSD cannot handle the POPCNT insn,$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C * The zero-offset of popcount is misassembled to the offset-less form, which$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C 0 = n mod 8$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C 1 = n mod 8$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C 2 = n mod 8$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C 3 = n mod 8$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C 4 = n mod 8$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C 5 = n mod 8$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C 6 = n mod 8$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C 7 = n mod 8$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C AMD K10		 1.125$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C AMD K8,K9		 n\/a$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C Intel P4		 n\/a$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C Intel atom		 n\/a$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C Intel core2		 n\/a$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C Intel corei		 1.25$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C TODO$/;"	l
C	mpn/x86_64/k10/popcount.asm	/^C VIA nano		 n\/a$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C    That could save enough insns to get to 10 cycles\/iteration.$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C  * Can we propagate carry into rdx instead of using a special carry register?$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C AMD K10	 2.75	< 3.85 for lshift + add_n$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C AMD K8,K9	 2.87	< 3.85 for lshift + add_n$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C Intel NHM	 4.4	> 3.75 for lshift + add_n$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C Intel P4	22	> 7.33 for lshift + add_n$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C Intel SBR	 3.17	< 3.46 for lshift + add_n$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C Intel atom	 ?	? 8.75 for lshift + add_n$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C Intel core2	 4.1	> 3.27 for lshift + add_n$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C TODO$/;"	l
C	mpn/x86_64/k8/aorrlsh_n.asm	/^C VIA nano	 4.7	< 6.25 for lshift + add_n$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C		c\/l$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C AMD K10	11$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C AMD K8,K9	11$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C AMD bobcat	16$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C AMD bull	16$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C AMD pile	14.25$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C INPUT Parameters$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Intel HWL	12$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Intel IBR	13.5$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Intel NHM	29	very poor$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Intel P4	47.5	poor$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Intel SBR	16	poor$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Intel atom	53	very poor$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Intel core	28.5	very poor$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Invariants$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C VIA nano	19$/;"	l
C	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^C Variables$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C     addmul_2 for remaining vp's$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C     mul_1 for vp[0] if vn is odd$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C     mul_2 for vp[0], vp[1] if vn is even$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C    case where vn = 1 or 2; is it worth it?$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C    mul_1\/mul_2 prologues, saving a LEA (%rip)? It would slow down the$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C  * Avoid some "mov $0,r" and instead use "xor r,r".$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C  * Can the top of each L(addmul_outer_n) prologue be folded into the$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C  * Use fewer registers.  (how??? I can't see it -- david)$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C ===========================================================$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C AMD K10	 2.375$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C AMD K8,K9	 2.375$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C Intel P4	15-16$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C Intel core2	 4.45$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C Intel corei	 4.35$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C TODO$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C VIA nano	 4.5$/;"	l
C	mpn/x86_64/k8/mul_basecase.asm	/^C optimization tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C     exit.$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C     for the last 2-3 iterations.$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C     large trip count.  Instead, we should start with mul_2 for any operand$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C     size congruence class.$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C   * Perhaps implement n=4 special code.$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C   * Stop iterating addmul_2 earlier, falling into straight-line triangle code$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C   * The addmul_2 loop ends with an MUL whose high part is not used upon loop$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C   * The reload of the outer loop jump address hurts branch prediction.$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C   * There is a major stupidity in that we call mpn_mul_1 initially, for a$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C NOTES$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/k8/mullo_basecase.asm	/^C optimisation tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C     accumulate along diagonals if un - vn is small$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C     addmul_2 for remaining vp's$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C     mul_1 for vp[0] if vn is odd$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C     mul_2 for vp[0], vp[1] if vn is even$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C ===========================================================$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C K10:		 ?$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C K8,K9:	 2.375  (2.5 when un - vn is "small")$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C P4:		 ?$/;"	l
C	mpn/x86_64/k8/mulmid_basecase.asm	/^C P6-15:	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C	ALIGN(16)$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C	jmp	L(li3)$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C    Is the use of a jump jump table faster?  Or is the edge of this due to the$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C    adapting this to the mainstream style.$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C    inlined add_n code?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C  * Is this code really faster than more approaches which compute q0 later?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C  * Micro-optimise, none performed thus far.$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C  * Put basecases at the file's end, single them out before the pushes.$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C  * Put initial m[0] x q0 computation in header.$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C  * This looks different from other current redc_1.asm variants.  Consider$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C ==== Addition code ====$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C AMD bobcat	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C AMD bull	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C AMD pile	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C Intel HWL	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C Intel IBR	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C Intel NHM	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C Intel core	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/k8/redc_1.asm	/^C optimisation tool suite written by David Harvey and Torbjörn Granlund.$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C        r15  unused$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C        rsp$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C     addmul_2s loops when perhaps 3x2s respectively a 2x2s remains.)$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C     code which uses addmul_2s from the start, conditionally leaving a 1x1$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C     large and unnecessarily slow.$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C     large trip count.  Instead, we should follow the generic\/sqr_basecase.c$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C     limbs will lead to non-termination in practice.$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C     middle of the n=k code.$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C     multiply to the end.  (In assembly code, one would stop invoking$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C     save\/restore carry, instead it can propagate into the high product word.$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    hi  rdx$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    i   r8   work left, initially n$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    j   r9   inner loop count$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    lo  rax$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    n   r11  input size$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    rp  rdi$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    tp  r12$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    up  rsi$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    v0  r13$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    v1  r14$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    w0  rbx$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    w1  rcx$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    w2  rbp$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C    w3  r10$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C   * Align more labels, should shave off a few cycles.$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C   * Another stupidity is in the sqr_diag_addlsh1 code.  It does not need to$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C   * Avoid saving registers for small cases code.$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C   * Consider combining small cases code so that the n=k-1 code jumps into the$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C   * Needed variables:$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C   * The jump table could probably be optimized, at least for non-pic.$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C   * The special code for n <= 4 was quickly written.  It is probably too$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C   * There is a major stupidity in that we call mpn_mul_1 initially, for a$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C   * We can safely use 32-bit size operations, since operands with (2^32)$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C Function mpn_addmul_2s_2$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C Function mpn_addmul_2s_m0(tp, up - (i - 1), i - 1, up - i)$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C Function mpn_addmul_2s_m2(tp, up - (i - 1), i - 1, up - i)$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C Function mpn_mul_1_m1(tp, up - (i - 1), i - 1, up[-i])$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C Function mpn_mul_1_m3(tp, up - i, i, up[-i - 1])$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C Function mpn_mul_2s_m0(tp, up - i, i, up - i - 1)$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C Function mpn_mul_2s_m2(tp, up - i + 1, i - 1, up - i)$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C Function mpn_sqr_diag_addlsh1$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C NOTES$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C The inner loops of this code are the result of running a code generation and$/;"	l
C	mpn/x86_64/k8/sqr_basecase.asm	/^C optimization tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/logops_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/logops_n.asm	/^C AMD K10	 1.5	with fluctuations for all variants$/;"	l
C	mpn/x86_64/logops_n.asm	/^C AMD K8,K9	 1.5	with fluctuations for variant 2 and 3$/;"	l
C	mpn/x86_64/logops_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/logops_n.asm	/^C Intel NHM	 2$/;"	l
C	mpn/x86_64/logops_n.asm	/^C Intel P4	 2.8\/3.35\/3.60 (variant1\/variant2\/variant3)$/;"	l
C	mpn/x86_64/logops_n.asm	/^C Intel SBR	 1.5\/1.75\/1.75$/;"	l
C	mpn/x86_64/logops_n.asm	/^C Intel atom	 3.75$/;"	l
C	mpn/x86_64/logops_n.asm	/^C Intel core2	 2$/;"	l
C	mpn/x86_64/logops_n.asm	/^C VIA nano	 3.25$/;"	l
C	mpn/x86_64/lshift.asm	/^C	     cycles\/limb   cycles\/limb cnt=1$/;"	l
C	mpn/x86_64/lshift.asm	/^C	n = 2, 6, 10, 16, ...$/;"	l
C	mpn/x86_64/lshift.asm	/^C	n = 4, 8, 12, ...$/;"	l
C	mpn/x86_64/lshift.asm	/^C AMD K10	 2.375		 1.375$/;"	l
C	mpn/x86_64/lshift.asm	/^C AMD K8,K9	 2.375		 1.375$/;"	l
C	mpn/x86_64/lshift.asm	/^C Check for bad overlap (up=rp is OK!) up=rp+1..rp+n-1 is bad.$/;"	l
C	mpn/x86_64/lshift.asm	/^C FIXME: this could surely be done more cleverly.$/;"	l
C	mpn/x86_64/lshift.asm	/^C For cnt=1 we want to work from lowest limb towards higher limbs.$/;"	l
C	mpn/x86_64/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/lshift.asm	/^C Intel P4	 8		10.5$/;"	l
C	mpn/x86_64/lshift.asm	/^C Intel atom	 5.75		 3.5$/;"	l
C	mpn/x86_64/lshift.asm	/^C Intel core2	 2.11		 4.28$/;"	l
C	mpn/x86_64/lshift.asm	/^C Intel corei	 ?		 ?$/;"	l
C	mpn/x86_64/lshift.asm	/^C VIA nano	 3.5		 2.25$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C	n = 2, 6, 10, 16, ...$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C	n = 4, 8, 12, ...$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C AMD K10	 2.75$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C AMD K8,K9	 2.75$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/lshiftc.asm	/^C VIA nano	 3.75$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C   1) Use indexing to save the 3 LEA$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C   2) Write reasonable feed-in code$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C   3) Be more clever about register usage$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C   4) Unroll more, handling CL negation, carry save\/restore cost much now$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C   5) Reschedule$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C AMD K10	 3.15	(mpn_sub_n + mpn_lshift costs about 4 c\/l)$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C AMD K8,K9	 3.15	(mpn_sub_n + mpn_lshift costs about 4 c\/l)$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C Intel P4	16.5$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C Intel core2	 4.35$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C K8.  But perhaps one could get under 3 c\/l.  Ideas:$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C This was written quickly and not optimized at all, but it runs very well on$/;"	l
C	mpn/x86_64/lshsub_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/missing.asm	/^C Accept the single explicit parameter on the stack, return the two result$/;"	l
C	mpn/x86_64/missing.asm	/^C Accept the two parameters on the stack, return the result word on the stack.$/;"	l
C	mpn/x86_64/missing.asm	/^C Fake the ADCX instruction$/;"	l
C	mpn/x86_64/missing.asm	/^C Fake the ADOX instruction$/;"	l
C	mpn/x86_64/missing.asm	/^C Fake the MULX instruction$/;"	l
C	mpn/x86_64/missing.asm	/^C This calling convention means that we need to move the return address down.$/;"	l
C	mpn/x86_64/missing.asm	/^C copy 0(%rsp):11 to 0(%rsp):0$/;"	l
C	mpn/x86_64/missing.asm	/^C copy CF to 0(%rsp):11$/;"	l
C	mpn/x86_64/missing.asm	/^C put manipulated flags into eflags$/;"	l
C	mpn/x86_64/missing.asm	/^C put manipulated flags into eflags, execute a plain adc$/;"	l
C	mpn/x86_64/missing.asm	/^C return address up.$/;"	l
C	mpn/x86_64/missing.asm	/^C words on the stack.  This calling convention means that we need to move the$/;"	l
C	mpn/x86_64/missing.asm	/^C$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C                       %rdi         %rsi         %rdx                %rcx$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C   r_0 + B2mb (mod B)$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C   r_0 + r_2 B2mod$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C   r_2 B^3 + r_1 B^2 + r_0 B + u = r_1 B2modb + (r_0 + r_2 B2mod) B + u$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C AMD K10	 6$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C AMD K8,K9	 6$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C Intel NHM	11.3$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C Intel P4	26$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C Intel SBR	 8.4	(slowdown, old code took 8.0)$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C Intel atom	26$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C Intel core2	12.5$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C Note: This implementation needs B1modb only when cnt > 0$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C The iteration is almost as follows,$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C The pre array contains bi, cnt, B1modb, B2modb$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C This addition can be issued early since it doesn't depend on r2, and it is$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C VIA nano	13$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C We have the invariant that r_2 B^2 + r_1 B + r_0 < B^2 + B b$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C and we use instead the value$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C is handled specially. On carry, we subtract b to cancel the carry,$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C mp_limb_t$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C mpn_mod_1_1p (mp_srcptr ap, mp_size_t n, mp_limb_t b, mp_limb_t bmodb[4])$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C result fits in two limbs and a bit, carry from the addition$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C the source of the cmov in the loop.$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C where r2 is a single bit represented as a mask. But to make sure that the$/;"	l
C	mpn/x86_64/mod_1_1.asm	/^C$/;"	l
C	mpn/x86_64/mod_1_2.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/mod_1_2.asm	/^C AMD K10	 4$/;"	l
C	mpn/x86_64/mod_1_2.asm	/^C AMD K8,K9	 4$/;"	l
C	mpn/x86_64/mod_1_2.asm	/^C Intel NHM	 6.5$/;"	l
C	mpn/x86_64/mod_1_2.asm	/^C Intel P4	19$/;"	l
C	mpn/x86_64/mod_1_2.asm	/^C Intel SBR	 4.5$/;"	l
C	mpn/x86_64/mod_1_2.asm	/^C Intel atom	28$/;"	l
C	mpn/x86_64/mod_1_2.asm	/^C Intel core2	 8$/;"	l
C	mpn/x86_64/mod_1_2.asm	/^C VIA nano	 8$/;"	l
C	mpn/x86_64/mod_1_4.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/mod_1_4.asm	/^C AMD K10	 3$/;"	l
C	mpn/x86_64/mod_1_4.asm	/^C AMD K8,K9	 3$/;"	l
C	mpn/x86_64/mod_1_4.asm	/^C Intel P4	15.5$/;"	l
C	mpn/x86_64/mod_1_4.asm	/^C Intel atom	23$/;"	l
C	mpn/x86_64/mod_1_4.asm	/^C Intel core2	 5$/;"	l
C	mpn/x86_64/mod_1_4.asm	/^C Intel corei	 4$/;"	l
C	mpn/x86_64/mod_1_4.asm	/^C VIA nano	 4.75$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C	    cycles\/limb$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C  * Review feed-in and wind-down code.$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C AMD K10	 0.67	   this seems hard to beat$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C AMD K8,K9	 0.67	   0.583 is possible with zero-reg instead of $0, 4-way$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C AMD bd1	 1$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C AMD bobcat	 1.07$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C Don't change this, the wind-down code is not able to handle greater values$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C Intel NHM	 1.15	   this seems hard to beat$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C Intel P4	 7.35	   terrible, use old code$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C Intel SBR	 0.93$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C Intel atom	 2.5$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C Intel core2	 1.25	   1+epsilon with huge unrolling$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C TODO$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C VIA nano	 1.25	   this seems hard to beat$/;"	l
C	mpn/x86_64/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr up, mp_size_t n)$/;"	l
C	mpn/x86_64/mode1o.asm	/^C			      ----$/;"	l
C	mpn/x86_64/mode1o.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/mode1o.asm	/^C	imul	%r9, %rax	4$/;"	l
C	mpn/x86_64/mode1o.asm	/^C	mul	%r8		5$/;"	l
C	mpn/x86_64/mode1o.asm	/^C	sub	%rdx, %rax	1$/;"	l
C	mpn/x86_64/mode1o.asm	/^C                            cycles$/;"	l
C	mpn/x86_64/mode1o.asm	/^C       total		       10$/;"	l
C	mpn/x86_64/mode1o.asm	/^C AMD K10	10$/;"	l
C	mpn/x86_64/mode1o.asm	/^C AMD K8,K9	10$/;"	l
C	mpn/x86_64/mode1o.asm	/^C Intel P4	33$/;"	l
C	mpn/x86_64/mode1o.asm	/^C Intel atom	35$/;"	l
C	mpn/x86_64/mode1o.asm	/^C Intel core2	13$/;"	l
C	mpn/x86_64/mode1o.asm	/^C Intel corei	14.5$/;"	l
C	mpn/x86_64/mode1o.asm	/^C The code alignment used (32-byte) for the loop also seems necessary.  Without$/;"	l
C	mpn/x86_64/mode1o.asm	/^C The dependent chain in the main loop is$/;"	l
C	mpn/x86_64/mode1o.asm	/^C The l=src[i]-cbit step is rotated back too, since that allows us to avoid it$/;"	l
C	mpn/x86_64/mode1o.asm	/^C The mov load from src seems to need to be scheduled back before the jz to$/;"	l
C	mpn/x86_64/mode1o.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/mode1o.asm	/^C achieve this speed, out-of-order execution apparently can't completely hide$/;"	l
C	mpn/x86_64/mode1o.asm	/^C for the first iteration (where there's no cbit).$/;"	l
C	mpn/x86_64/mode1o.asm	/^C run at 11 cycles instead of 10.$/;"	l
C	mpn/x86_64/mode1o.asm	/^C that the non-PIC case has adc crossing the 0x60 offset, apparently making it$/;"	l
C	mpn/x86_64/mode1o.asm	/^C the latency otherwise.$/;"	l
C	mpn/x86_64/mode1o.asm	/^C$/;"	l
C	mpn/x86_64/mul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/mul_1.asm	/^C    Tune it!$/;"	l
C	mpn/x86_64/mul_1.asm	/^C  * The loop is great, but the prologue and epilogue code was quickly written.$/;"	l
C	mpn/x86_64/mul_1.asm	/^C AMD K10	 2.5$/;"	l
C	mpn/x86_64/mul_1.asm	/^C AMD K8,K9	 2.5$/;"	l
C	mpn/x86_64/mul_1.asm	/^C AMD bd1	 5.0$/;"	l
C	mpn/x86_64/mul_1.asm	/^C AMD bobcat	 5.5$/;"	l
C	mpn/x86_64/mul_1.asm	/^C Intel NHM	 3.75$/;"	l
C	mpn/x86_64/mul_1.asm	/^C Intel P4	12.3$/;"	l
C	mpn/x86_64/mul_1.asm	/^C Intel SBR	 2.95$/;"	l
C	mpn/x86_64/mul_1.asm	/^C Intel atom	19.8$/;"	l
C	mpn/x86_64/mul_1.asm	/^C Intel core2	 4.0$/;"	l
C	mpn/x86_64/mul_1.asm	/^C TODO$/;"	l
C	mpn/x86_64/mul_1.asm	/^C The loop of this code is the result of running a code generation and$/;"	l
C	mpn/x86_64/mul_1.asm	/^C VIA nano	 4.25$/;"	l
C	mpn/x86_64/mul_1.asm	/^C optimization tool suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/mul_2.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/mul_2.asm	/^C  * Adjust initial lea to save some bytes.$/;"	l
C	mpn/x86_64/mul_2.asm	/^C  * Convert "mov $0" to "xor".$/;"	l
C	mpn/x86_64/mul_2.asm	/^C  * Perhaps adjust n from n_param&3 value?$/;"	l
C	mpn/x86_64/mul_2.asm	/^C  * Replace with 2.25 c\/l sequence.$/;"	l
C	mpn/x86_64/mul_2.asm	/^C  * Work on feed-in and wind-down code.$/;"	l
C	mpn/x86_64/mul_2.asm	/^C AMD K10	 2.275$/;"	l
C	mpn/x86_64/mul_2.asm	/^C AMD K8,K9	 2.275$/;"	l
C	mpn/x86_64/mul_2.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/mul_2.asm	/^C Intel P4	13.5$/;"	l
C	mpn/x86_64/mul_2.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/mul_2.asm	/^C Intel core2	 4.0$/;"	l
C	mpn/x86_64/mul_2.asm	/^C Intel corei	 3.8$/;"	l
C	mpn/x86_64/mul_2.asm	/^C TODO$/;"	l
C	mpn/x86_64/mul_2.asm	/^C This code is the result of running a code generation and optimization tool$/;"	l
C	mpn/x86_64/mul_2.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/mul_2.asm	/^C suite written by David Harvey and Torbjorn Granlund.$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C AMD K10	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C AMD K8,K9	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C AMD bd1	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C AMD bobcat	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C Intel HWL	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C Intel NHM	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C Intel P4	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C Intel PNR	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C Intel SBR	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C Intel atom	 -$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C Testing mechanism for running this on older AMD64 processors$/;"	l
C	mpn/x86_64/mulx/adx/addmul_1.asm	/^C VIA nano	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C AMD K10	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C AMD K8,K9	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C AMD bd1	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C AMD bd2	 ?$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C AMD bobcat	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C Intel HWL	 ?$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C Intel NHM	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C Intel P4	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C Intel PNR	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C Intel SBR	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C Intel atom	 -$/;"	l
C	mpn/x86_64/mulx/aorsmul_1.asm	/^C VIA nano	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C AMD K10	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C AMD K8,K9	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C AMD bd1	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C AMD bd2	 ?$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C AMD bobcat	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C Intel HWL	 ?$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C Intel NHM	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C Intel P4	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C Intel PNR	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C Intel SBR	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C Intel atom	 -$/;"	l
C	mpn/x86_64/mulx/mul_1.asm	/^C VIA nano	 -$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C	       norm	       unorm$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C AMD K10	11		11$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C AMD K8,K9	11		11$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C Intel atom	34		36$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C Intel core2	13.5		13.25$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C Intel corei	14.25$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C VIA nano	19.25		19.25$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C divisor	rcx$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C n		rdx$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C rp		rdi$/;"	l
C	mpn/x86_64/nano/dive_1.asm	/^C up		rsi$/;"	l
C	mpn/x86_64/pentium4/aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/pentium4/aors_n.asm	/^C AMD K10	 2.8$/;"	l
C	mpn/x86_64/pentium4/aors_n.asm	/^C AMD K8,K9	 2.8$/;"	l
C	mpn/x86_64/pentium4/aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/pentium4/aors_n.asm	/^C Intel P4	 4$/;"	l
C	mpn/x86_64/pentium4/aors_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/pentium4/aors_n.asm	/^C Intel core2	 3.6-5	(fluctuating)$/;"	l
C	mpn/x86_64/pentium4/aors_n.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/pentium4/aors_n.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/pentium4/aorslshC_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/pentium4/aorslshC_n.asm	/^C AMD K10	 3.8$/;"	l
C	mpn/x86_64/pentium4/aorslshC_n.asm	/^C AMD K8,K9	 3.8$/;"	l
C	mpn/x86_64/pentium4/aorslshC_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/pentium4/aorslshC_n.asm	/^C Intel P4	 5.8$/;"	l
C	mpn/x86_64/pentium4/aorslshC_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/pentium4/aorslshC_n.asm	/^C Intel core2	 4.75$/;"	l
C	mpn/x86_64/pentium4/aorslshC_n.asm	/^C Intel corei	 4.75$/;"	l
C	mpn/x86_64/pentium4/aorslshC_n.asm	/^C VIA nano	 4.75$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C	n = 2, 6, 10, 16, ...$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C	n = 4, 8, 12, ...$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C AMD K8,K9	 2.5$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C Intel P4	 3.29$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C Intel atom	14.3$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C Intel core2	 2.1 (fluctuates, presumably cache related)$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/pentium4/lshift.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C	n = 2, 6, 10, 16, ...$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C	n = 4, 8, 12, ...$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C AMD K8,K9	 ?$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C Intel P4	 4.15$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C Intel core2	 ?$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/pentium4/lshiftc.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C    sbb to placate Pentium4.$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C    without the dual loop exits.$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C  * It seems possible to reach 2.67 c\/l by using a cleaner 6-way unrolling,$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C  * Review feed-in and wind-down code.  In particular, try to avoid adc and$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C AMD K10	 1.12$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C AMD K8,K9	 1.0$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C Intel P4	 3.25$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C Intel atom	 2.5$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C Intel core2	 1.5$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C Intel corei	 1.5$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C TODO$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C VIA nano	 1.75$/;"	l
C	mpn/x86_64/pentium4/mod_34lsub1.asm	/^C mp_limb_t mpn_mod_34lsub1 (mp_srcptr up, mp_size_t n)$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C    That loop should be selected before pushing registers.$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C    function.  Less sw pipelining would help, and since we now probably$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C    pipeline somewhat too deeply, it might not affect performance too much.$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C  * A separate small-n loop might speed things as well as make things smaller.$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C  * Try to make this smaller, 746 bytes seem excessive for this 2nd class$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C AMD K10	 4.13$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C AMD K8,K9	 4.13$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C Intel P4	 5.70$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C Intel atom	 8.75$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C Intel core2	 4.75$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C Intel corei	 5$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C TODO$/;"	l
C	mpn/x86_64/pentium4/rsh1aors_n.asm	/^C VIA nano	 5.25$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C	n = 2, 6, 10, 16, ...$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C	n = 4, 8, 12, ...$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C AMD K10	 ?$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C AMD K8,K9	 2.5$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C Intel P4	 3.29$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C Intel atom	14.3$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C Intel core2	 2.1 (fluctuates, presumably cache related)$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/pentium4/rshift.asm	/^C VIA nano	 ?$/;"	l
C	mpn/x86_64/popham.asm	/^C		     popcount	      hamdist$/;"	l
C	mpn/x86_64/popham.asm	/^C		    cycles\/limb	    cycles\/limb$/;"	l
C	mpn/x86_64/popham.asm	/^C    hamdist for K8\/K9.$/;"	l
C	mpn/x86_64/popham.asm	/^C  * Tune.  It should be possible to reach 5 c\/l for popcount and 6 c\/l for$/;"	l
C	mpn/x86_64/popham.asm	/^C AMD K10		 6		 7$/;"	l
C	mpn/x86_64/popham.asm	/^C AMD K8,K9		 6		 7$/;"	l
C	mpn/x86_64/popham.asm	/^C Intel P4		12		14.3$/;"	l
C	mpn/x86_64/popham.asm	/^C Intel atom		16.5		17.5$/;"	l
C	mpn/x86_64/popham.asm	/^C Intel core2		 7		 8$/;"	l
C	mpn/x86_64/popham.asm	/^C Intel corei		 ?		 7.3$/;"	l
C	mpn/x86_64/popham.asm	/^C TODO$/;"	l
C	mpn/x86_64/popham.asm	/^C VIA nano		 8.75		10.4$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C  * Rewrite to use indexed addressing, like addlsh1.asm and sublsh1.asm.$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C AMD K10	 2.14	(mpn_add_n + mpn_rshift need 4.125)$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C AMD K8,K9	 2.14	(mpn_add_n + mpn_rshift need 4.125)$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C Intel NMH	 4.4$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C Intel P4	12.75$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C Intel SBR	 ?$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C Intel core2	 3.75$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C TODO$/;"	l
C	mpn/x86_64/rsh1aors_n.asm	/^C VIA nano	 3.25$/;"	l
C	mpn/x86_64/rshift.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/rshift.asm	/^C	n = 2, 6, 10, 16, ...$/;"	l
C	mpn/x86_64/rshift.asm	/^C	n = 4, 8, 12, ...$/;"	l
C	mpn/x86_64/rshift.asm	/^C AMD K10	 2.375$/;"	l
C	mpn/x86_64/rshift.asm	/^C AMD K8,K9	 2.375$/;"	l
C	mpn/x86_64/rshift.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/rshift.asm	/^C Intel P4	 8$/;"	l
C	mpn/x86_64/rshift.asm	/^C Intel atom	 5.75$/;"	l
C	mpn/x86_64/rshift.asm	/^C Intel core2	 2.11$/;"	l
C	mpn/x86_64/rshift.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/rshift.asm	/^C VIA nano	 3.5$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C	     cycles\/limb          good for cpu$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C          nents  n   rp   tab   i   which j    *    *    *    *    *    *$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C    be too bad, though.$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C  * This has not been tuned for any specific processor.  Its speed should not$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C  * Using SSE2\/AVX2 could result in many-fold speedup.$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C  * WORKS FOR n mod 4 = 0 ONLY!$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C AMD K10	 1.4$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C AMD K8,K9	 1.5			Y$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C AMD bd1	 2.64$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C AMD bobcat	 2.15			Y$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C Intel NHM	 1.75$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C Intel P4	 4$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C Intel SBR	 1.25$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C Intel atom	 2.5			Y$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C Intel core2	 1.38$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C NOTES$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C VIA nano	 1.75			Y$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C mpn_sec_tabselect (mp_limb_t *rp, mp_limb_t *tp, mp_size_t n, mp_size_t nents, mp_size_t which)$/;"	l
C	mpn/x86_64/sec_tabselect.asm	/^C rax  rbx  rcx  rdx  rdi  rsi  rbp   r8   r9  r10  r11  r12  r13  r14  r15$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C AMD K10	 2.5$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C AMD K8,K9	 2.5$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C AMD bobcat	 4$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C AMD bull	 3.6$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C AMD jaguar	 ?$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C AMD pile	 3.6$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C AMD steam	 ?$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C Intel BWL	 ?$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C Intel HWL	 2.6$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C Intel IBR	 3.2$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C Intel NHM	 3.6$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C Intel P4	 ?$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C Intel SBR	 3.15$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C Intel atom	14$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C Intel core	 4$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C VIA nano	 3.5$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C When playing with pointers, set this to $2 to fall back to conservative$/;"	l
C	mpn/x86_64/sqr_diag_addlsh1.asm	/^C indexing in wind-down code.$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C	     cycles\/limb$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C AMD K10	 2.2$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C AMD K8,K9	 2.2$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C INPUT PARAMETERS$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C Intel P4	12.75$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C Intel atom	 ?$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C Intel core2	 3.45$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C Intel corei	 ?$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C Sometimes speed degenerates, supposedly related to that some operand$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C The speed is limited by decoding\/issue bandwidth.  There are 26 instructions$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C VIA nano	 3.25$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C alignments cause cache conflicts.$/;"	l
C	mpn/x86_64/sublsh1_n.asm	/^C in the loop, which corresponds to 26\/3\/4 = 2.167 c\/l.$/;"	l
C	tests/amd64call.asm	/^C	mov	JUNK_R8(%rcx), %r8$/;"	l
C	tests/amd64call.asm	/^C	mov	JUNK_R9(%rcx), %r9$/;"	l
C	tests/amd64call.asm	/^C	mov	JUNK_RAX(%rax), %rax		C overwritten below anyway$/;"	l
C	tests/amd64call.asm	/^C	mov	JUNK_RCX(%rcx), %rcx$/;"	l
C	tests/amd64call.asm	/^C	mov	JUNK_RDI(%rcx), %rdi$/;"	l
C	tests/amd64call.asm	/^C	mov	JUNK_RDX(%rcx), %rdx$/;"	l
C	tests/amd64call.asm	/^C	mov	JUNK_RSI(%rcx), %rsi$/;"	l
C	tests/amd64call.asm	/^C Execute an fldcw, setting the x87 control word to cw.$/;"	l
C	tests/amd64call.asm	/^C Execute an fstcw, returning the current x87 control word.$/;"	l
C	tests/amd64call.asm	/^C Perhaps the finit should be done only if the tags word isn't clear, but$/;"	l
C	tests/amd64call.asm	/^C The global variable "calling_conventions_function" is the function to$/;"	l
C	tests/amd64call.asm	/^C call, with the arguments as passed here.$/;"	l
C	tests/amd64call.asm	/^C int calling_conventions (...);$/;"	l
C	tests/amd64call.asm	/^C nothing uses the rounding mode or anything at the moment.$/;"	l
C	tests/amd64call.asm	/^C unsigned short x86_fstcw (void);$/;"	l
C	tests/amd64call.asm	/^C void x86_fldcw (unsigned short cw);$/;"	l
C	tests/amd64call.asm	/^C$/;"	l
C	tests/arm32call.asm	/^C The global variable "calling_conventions_function" is the function to$/;"	l
C	tests/arm32call.asm	/^C call, with the arguments as passed here.$/;"	l
C	tests/arm32call.asm	/^C int calling_conventions (...);$/;"	l
C	tests/arm32call.asm	/^C$/;"	l
C	tests/x86call.asm	/^C	mov	JUNK_ECX(%ecx), %ecx$/;"	l
C	tests/x86call.asm	/^C Execute an fldcw, setting the x87 control word to cw.$/;"	l
C	tests/x86call.asm	/^C Execute an fstcw, returning the current x87 control word.$/;"	l
C	tests/x86call.asm	/^C Perhaps the finit should be done only if the tags word isn't clear, but$/;"	l
C	tests/x86call.asm	/^C The global variable "calling_conventions_function" is the function to$/;"	l
C	tests/x86call.asm	/^C call, with the arguments as passed here.$/;"	l
C	tests/x86call.asm	/^C int calling_conventions (...);$/;"	l
C	tests/x86call.asm	/^C nothing uses the rounding mode or anything at the moment.$/;"	l
C	tests/x86call.asm	/^C unsigned short x86_fstcw (void);$/;"	l
C	tests/x86call.asm	/^C void x86_fldcw (unsigned short cw);$/;"	l
C	tests/x86call.asm	/^C$/;"	l
C	tune/alpha.asm	/^C The lower 32 bits are set by the hardware, and the upper 32 bits are set$/;"	l
C	tune/alpha.asm	/^C The rpcc instruction returns a 64-bit value split into two 32-bit fields.$/;"	l
C	tune/alpha.asm	/^C Unfortunately, some operating systems don't get this right.  NetBSD 1.3 is$/;"	l
C	tune/alpha.asm	/^C accurate even on a busy system.  Losing cache contents due to task$/;"	l
C	tune/alpha.asm	/^C by the operating system.  The real per-process cycle count is the sum of$/;"	l
C	tune/alpha.asm	/^C known to sometimes put garbage in the upper half.  Whether newer NetBSD$/;"	l
C	tune/alpha.asm	/^C rpcc measures cycles elapsed in the user program and hence should be very$/;"	l
C	tune/alpha.asm	/^C switching may have an effect though.$/;"	l
C	tune/alpha.asm	/^C these halves.$/;"	l
C	tune/alpha.asm	/^C versions get it right, is unknown to us.$/;"	l
C	tune/alpha.asm	/^C void speed_cyclecounter (unsigned int p[2]);$/;"	l
C	tune/alpha.asm	/^C$/;"	l
C	tune/ia64.asm	/^C void speed_cyclecounter (unsigned int p[2]);$/;"	l
C	tune/ia64.asm	/^C$/;"	l
C	tune/pentium.asm	/^C Get the pentium rdtsc cycle counter, storing the least significant word in$/;"	l
C	tune/pentium.asm	/^C cpuid is used to serialize execution.  On big measurements this won't be$/;"	l
C	tune/pentium.asm	/^C p[0] and the most significant in p[1].$/;"	l
C	tune/pentium.asm	/^C significant but it may help make small single measurements more accurate.$/;"	l
C	tune/pentium.asm	/^C void speed_cyclecounter (unsigned p[2]);$/;"	l
C	tune/pentium.asm	/^C$/;"	l
C	tune/powerpc.asm	/^C void mftb_function (unsigned a[2]);$/;"	l
C	tune/powerpc.asm	/^C$/;"	l
C	tune/powerpc64.asm	/^C void mftb_function (unsigned a[2]);$/;"	l
C	tune/powerpc64.asm	/^C$/;"	l
C	tune/sparcv9.asm	/^C Get the sparc v9 tick counter.$/;"	l
C	tune/sparcv9.asm	/^C void speed_cyclecounter (unsigned p[2]);$/;"	l
C	tune/sparcv9.asm	/^C$/;"	l
C	tune/x86_64.asm	/^C Get the pentium rdtsc cycle counter, storing the least significant word in$/;"	l
C	tune/x86_64.asm	/^C cpuid is used to serialize execution.  On big measurements this won't be$/;"	l
C	tune/x86_64.asm	/^C p[0] and the most significant in p[1].$/;"	l
C	tune/x86_64.asm	/^C significant but it may help make small single measurements more accurate.$/;"	l
C	tune/x86_64.asm	/^C void speed_cyclecounter (unsigned p[2]);$/;"	l
C	tune/x86_64.asm	/^C$/;"	l
CACHE_LINE_SIZE	tune/speed.h	67;"	d
CALC_BITS	tests/t-constants.c	109;"	d	file:
CALL	tests/cxx/t-ostream.cc	33;"	d	file:
CALLING_CONVENTIONS	tests/tests.h	85;"	d
CALLING_CONVENTIONS	tests/tests.h	89;"	d
CALLING_CONVENTIONS_CHECK	tests/tests.h	87;"	d
CALLING_CONVENTIONS_CHECK	tests/tests.h	90;"	d
CARRY_3	tests/devel/try.c	338;"	d	file:
CARRY_4	tests/devel/try.c	339;"	d	file:
CARRY_BIT	tests/devel/try.c	337;"	d	file:
CARRY_COUNT	tests/devel/try.c	2140;"	d	file:
CARRY_DIVISOR	tests/devel/try.c	341;"	d	file:
CARRY_ITERATION	tests/devel/try.c	2153;"	d	file:
CARRY_LIMB	tests/devel/try.c	340;"	d	file:
CARRY_RANDOMS	tests/devel/try.c	197;"	d	file:
CC	mini-gmp/tests/Makefile	/^CC = gcc$/;"	m
CENTRAL_BINOMIAL_2FAC_TABLE	fac_table.h	49;"	d
CFLAGS	Makefile	/^CFLAGS= -DHAVE_CONFIG_H -g -O2  -I. -I\/android\/gcc\/gcc-6.4.0\/libiberty\/..\/include  -W -Wall -Wwrite-strings -Wc++-compat -Wstrict-prototypes -pedantic  -D_GNU_SOURCE -fpic $/;"	m
CFLAGS	Makefile	/^CFLAGS=-DHAVE_CONFIG_H -I. -I\/android\/gcc\/gcc-6.4.0\/gmp -D__GMP_WITHIN_GMP -g -O2 -I\/android\/gcc\/gcc-6.4.0\/gmp\/mpz -I..  -I\/android\/gcc\/gcc-6.4.0\/gmp\/mpn -DOPERATION_fib_table -DOPERATION_sec_div_qr -DOPERATION_sec_pi1_div_qr$/;"	m
CFLAGS	Makefile	/^CFLAGS=-DHAVE_CONFIG_H -I. -I\/android\/gcc\/gcc-6.4.0\/mpc\/src -I.. -I\/ismp\/build\/.\/gmp -I\/android\/gcc\/gcc-6.4.0\/mpfr\/src -g -O2$/;"	m
CFLAGS	mini-gmp/tests/Makefile	/^CFLAGS = -O -Wall -g$/;"	m
CFLAGS	mpn/Makefile	/^CFLAGS= -DHAVE_CONFIG_H -g -O2  -I. -I\/android\/gcc\/gcc-6.4.0\/libiberty\/..\/include  -W -Wall -Wwrite-strings -Wc++-compat -Wstrict-prototypes -pedantic  -D_GNU_SOURCE -fpic $/;"	m
CFLAGS	mpn/Makefile	/^CFLAGS=-DHAVE_CONFIG_H -I. -I\/android\/gcc\/gcc-6.4.0\/gmp -D__GMP_WITHIN_GMP -g -O2 -I\/android\/gcc\/gcc-6.4.0\/gmp\/mpz -I..  -I\/android\/gcc\/gcc-6.4.0\/gmp\/mpn -DOPERATION_fib_table -DOPERATION_sec_div_qr -DOPERATION_sec_pi1_div_qr$/;"	m
CFLAGS	mpn/Makefile	/^CFLAGS=-DHAVE_CONFIG_H -I. -I\/android\/gcc\/gcc-6.4.0\/mpc\/src -I.. -I\/ismp\/build\/.\/gmp -I\/android\/gcc\/gcc-6.4.0\/mpfr\/src -g -O2$/;"	m
CFLAGS	mpn/Makefile	/^CFLAGS=-std=gnu99 -DHAVE_CONFIG_H -I. -I..\/mpn -I..\/mpz -I.. -D__GMP_WITHIN_GMP -I\/android\/gcc\/gcc-6.4.0\/gmp -g -O2 $/;"	m
CFLAGS	mpn/Makefile	/^CFLAGS=-std=gnu99 -DHAVE_CONFIG_H -I. -I\/android\/gcc\/gcc-6.4.0\/gmp\/mpn -I.. -D__GMP_WITHIN_GMP -I\/android\/gcc\/gcc-6.4.0\/gmp  -g -O2 $/;"	m
CGT_DELAY_COUNT	tune/time.c	736;"	d	file:
CGT_ID	tune/time.c	723;"	d	file:
CGT_ID	tune/time.c	726;"	d	file:
CGT_ID	tune/time.c	733;"	d	file:
CHECK	tests/amd64check.c	81;"	d	file:
CHECK	tests/arm32check.c	79;"	d	file:
CHECK	tests/cxx/t-ops2.cc	32;"	d	file:
CHECK	tests/x86check.c	87;"	d	file:
CHECK1	tests/cxx/t-ops2.cc	30;"	d	file:
CHECK_ALL	tests/cxx/t-ops2.cc	60;"	d	file:
CHECK_ALL_COMPARISONS	tests/cxx/t-ops2.cc	77;"	d	file:
CHECK_ALL_SIGNED	tests/cxx/t-ops2.cc	51;"	d	file:
CHECK_ALL_SIGNED_COMPARISONS	tests/cxx/t-ops2.cc	63;"	d	file:
CHECK_ALL_SIGNS	tests/cxx/t-ops2.cc	55;"	d	file:
CHECK_ALL_SIGNS_COMPARISONS	tests/cxx/t-ops2.cc	70;"	d	file:
CHECK_ARGCOUNT	demos/expr/expr.c	335;"	d	file:
CHECK_BITS	tests/t-constants.c	182;"	d	file:
CHECK_BITS_S	tests/t-constants.c	120;"	d	file:
CHECK_COMMON_TYPE	tests/cxx/t-cxx11.cc	47;"	d	file:
CHECK_COMMON_TYPE1	tests/cxx/t-cxx11.cc	45;"	d	file:
CHECK_COMMON_TYPE_BUILTIN	tests/cxx/t-cxx11.cc	71;"	d	file:
CHECK_COMMON_TYPE_BUILTIN1	tests/cxx/t-cxx11.cc	49;"	d	file:
CHECK_COMMON_TYPE_BUILTIN2	tests/cxx/t-cxx11.cc	60;"	d	file:
CHECK_CONDITION	tests/t-constants.c	181;"	d	file:
CHECK_CONDITION_S	tests/t-constants.c	98;"	d	file:
CHECK_D	tests/cxx/t-ops2.cc	42;"	d	file:
CHECK_EMPTY	demos/calc/calc.c	181;"	d	file:
CHECK_G	tests/cxx/t-ops2.cc	34;"	d	file:
CHECK_HIGHBIT	tests/t-constants.c	184;"	d	file:
CHECK_HIGHBIT_S	tests/t-constants.c	133;"	d	file:
CHECK_INPLACE	tests/mpf/t-trunc.c	67;"	d	file:
CHECK_INT	tests/t-constants.c	180;"	d	file:
CHECK_INT_S	tests/t-constants.c	87;"	d	file:
CHECK_LIMB	tests/t-constants.c	179;"	d	file:
CHECK_LIMB_S	tests/t-constants.c	76;"	d	file:
CHECK_MAX	tests/mpf/t-get_si.c	94;"	d	file:
CHECK_MAX	tests/mpz/t-get_si.c	77;"	d	file:
CHECK_MAX	tests/t-constants.c	183;"	d	file:
CHECK_MAX_S	tests/t-constants.c	152;"	d	file:
CHECK_MPQ	tests/cxx/t-ops2.cc	48;"	d	file:
CHECK_MPZ	tests/cxx/t-ops2.cc	45;"	d	file:
CHECK_N	tests/misc/t-printf.c	761;"	d	file:
CHECK_N	tests/misc/t-scanf.c	1306;"	d	file:
CHECK_OVERFLOW	demos/calc/calc.c	173;"	d	file:
CHECK_PROGRAMS	mini-gmp/tests/Makefile	/^CHECK_PROGRAMS = t-add t-sub t-mul t-invert t-div t-div_2exp \\$/;"	m
CHECK_SEP	tests/mpf/t-trunc.c	52;"	d	file:
CHECK_SI	tests/cxx/t-ops2.cc	39;"	d	file:
CHECK_UI	demos/calc/calc.c	199;"	d	file:
CHECK_UI	demos/expr/expr.c	329;"	d	file:
CHECK_UI	tests/cxx/t-ops2.cc	36;"	d	file:
CHECK_VARIABLE	demos/calc/calc.c	191;"	d	file:
CHECK_VFPRINTF_FILENAME	tests/misc/t-printf.c	62;"	d	file:
CHOOSE_P	mpn/gcd.c	60;"	d	file:
CHOOSE_P	mpn/gcd.c	62;"	d	file:
CHOOSE_P	mpn/generic/gcd.c	60;"	d	file:
CHOOSE_P	mpn/generic/gcd.c	62;"	d	file:
CHOOSE_P	mpn/generic/jacobi.c	159;"	d	file:
CHOOSE_P	mpn/jacobi.c	159;"	d	file:
CHOOSE_P_1	mpn/gcdext.c	195;"	d	file:
CHOOSE_P_1	mpn/generic/gcdext.c	195;"	d	file:
CHOOSE_P_2	mpn/gcdext.c	196;"	d	file:
CHOOSE_P_2	mpn/generic/gcdext.c	196;"	d	file:
CHUNK	mpn/generic/mulmid.c	42;"	d	file:
CHUNK	mpn/mulmid.c	42;"	d	file:
CMP_ABSOLUTE	tune/speed.c	102;"	d	file:
CMP_DIFFERENCE	tune/speed.c	104;"	d	file:
CMP_DIFFPREV	tune/speed.c	105;"	d	file:
CMP_RATIO	tune/speed.c	103;"	d	file:
CNST_34LSUB1	tests/devel/try.c	389;"	d	file:
CNST_LIMB	gmp-impl.h	3888;"	d
CNST_LIMB	gmp-impl.h	3890;"	d
CNT	tests/devel/shift.c	/^int CNT = 4;$/;"	v
COLLAPSE_ELEMENT	gen-psqr.c	164;"	d	file:
COLUMN_WIDTH	tune/speed.c	136;"	d	file:
COMPUTE_V_ITCH	mpn/gcdext.c	99;"	d	file:
COMPUTE_V_ITCH	mpn/generic/gcdext.c	99;"	d	file:
CONST_1024	mpn/generic/get_d.c	/^static volatile const long CONST_1024 = 1024;$/;"	v	file:
CONST_1024	mpn/generic/get_d.c	65;"	d	file:
CONST_1024	mpn/get_d.c	/^static volatile const long CONST_1024 = 1024;$/;"	v	file:
CONST_1024	mpn/get_d.c	65;"	d	file:
CONST_NEG_1022_SUB_53	mpn/generic/get_d.c	/^static volatile const long CONST_NEG_1022_SUB_53 = -1022 - 53;$/;"	v	file:
CONST_NEG_1022_SUB_53	mpn/generic/get_d.c	67;"	d	file:
CONST_NEG_1022_SUB_53	mpn/get_d.c	/^static volatile const long CONST_NEG_1022_SUB_53 = -1022 - 53;$/;"	v	file:
CONST_NEG_1022_SUB_53	mpn/get_d.c	67;"	d	file:
CONST_NEG_1023	mpn/generic/get_d.c	/^static volatile const long CONST_NEG_1023 = -1023;$/;"	v	file:
CONST_NEG_1023	mpn/generic/get_d.c	66;"	d	file:
CONST_NEG_1023	mpn/get_d.c	/^static volatile const long CONST_NEG_1023 = -1023;$/;"	v	file:
CONST_NEG_1023	mpn/get_d.c	66;"	d	file:
CONTROL_POP	demos/expr/expr.c	304;"	d	file:
CONTROL_PUSH	demos/expr/expr.c	290;"	d	file:
CONTROL_SPACE	demos/expr/expr.c	277;"	d	file:
COPY	tests/devel/try.c	735;"	d	file:
CORRECTION_BITS	mpn/generic/toom8_sqr.c	47;"	d	file:
CORRECTION_BITS	mpn/generic/toom8_sqr.c	50;"	d	file:
CORRECTION_BITS	mpn/generic/toom8h_mul.c	48;"	d	file:
CORRECTION_BITS	mpn/generic/toom8h_mul.c	51;"	d	file:
CORRECTION_BITS	mpn/generic/toom_interpolate_16pts.c	112;"	d	file:
CORRECTION_BITS	mpn/generic/toom_interpolate_16pts.c	115;"	d	file:
CORRECTION_BITS	mpn/toom8_sqr.c	47;"	d	file:
CORRECTION_BITS	mpn/toom8_sqr.c	50;"	d	file:
CORRECTION_BITS	mpn/toom8h_mul.c	48;"	d	file:
CORRECTION_BITS	mpn/toom8h_mul.c	51;"	d	file:
CORRECTION_BITS	mpn/toom_interpolate_16pts.c	112;"	d	file:
CORRECTION_BITS	mpn/toom_interpolate_16pts.c	115;"	d	file:
COUNT	mini-gmp/tests/t-add.c	26;"	d	file:
COUNT	mini-gmp/tests/t-aorsmul.c	28;"	d	file:
COUNT	mini-gmp/tests/t-bitops.c	27;"	d	file:
COUNT	mini-gmp/tests/t-div.c	27;"	d	file:
COUNT	mini-gmp/tests/t-div_2exp.c	27;"	d	file:
COUNT	mini-gmp/tests/t-double.c	30;"	d	file:
COUNT	mini-gmp/tests/t-gcd.c	27;"	d	file:
COUNT	mini-gmp/tests/t-invert.c	29;"	d	file:
COUNT	mini-gmp/tests/t-lcm.c	27;"	d	file:
COUNT	mini-gmp/tests/t-limbs.c	29;"	d	file:
COUNT	mini-gmp/tests/t-logops.c	27;"	d	file:
COUNT	mini-gmp/tests/t-mul.c	28;"	d	file:
COUNT	mini-gmp/tests/t-powm.c	27;"	d	file:
COUNT	mini-gmp/tests/t-reuse.c	26;"	d	file:
COUNT	mini-gmp/tests/t-root.c	27;"	d	file:
COUNT	mini-gmp/tests/t-scan.c	27;"	d	file:
COUNT	mini-gmp/tests/t-sqrt.c	27;"	d	file:
COUNT	mini-gmp/tests/t-str.c	29;"	d	file:
COUNT	mini-gmp/tests/t-sub.c	26;"	d	file:
COUNT	tests/mpn/t-bdiv.c	118;"	d	file:
COUNT	tests/mpn/t-broot.c	28;"	d	file:
COUNT	tests/mpn/t-brootinv.c	28;"	d	file:
COUNT	tests/mpn/t-div.c	123;"	d	file:
COUNT	tests/mpn/t-invert.c	36;"	d	file:
COUNT	tests/mpn/t-minvert.c	28;"	d	file:
COUNT	tests/mpn/t-mullo.c	34;"	d	file:
COUNT	tests/mpn/t-mulmid.c	34;"	d	file:
COUNT	tests/mpn/t-mulmod_bnm1.c	36;"	d	file:
COUNT	tests/mpn/t-sizeinbase.c	34;"	d	file:
COUNT	tests/mpn/t-sqrlo.c	34;"	d	file:
COUNT	tests/mpn/t-sqrmod_bnm1.c	36;"	d	file:
COUNT	tests/mpn/t-toom33.c	9;"	d	file:
COUNT	tests/mpn/t-toom44.c	9;"	d	file:
COUNT	tests/mpn/t-toom6-sqr.c	6;"	d	file:
COUNT	tests/mpn/t-toom6h.c	11;"	d	file:
COUNT	tests/mpn/t-toom8-sqr.c	6;"	d	file:
COUNT	tests/mpn/t-toom8h.c	16;"	d	file:
COUNT	tests/mpn/toom-shared.h	38;"	d
COUNT	tests/mpn/toom-sqr-shared.h	32;"	d
COUNT	tests/mpz/t-bin.c	27;"	d	file:
COUNT	tests/mpz/t-jac.c	879;"	d	file:
COUNT	tests/mpz/t-jac.c	980;"	d	file:
COUNT	tests/mpz/t-limbs.c	27;"	d	file:
COUNT_A_PRIME	mpz/bin_uiui.c	535;"	d	file:
COUNT_A_PRIME	mpz/bin_uiui.c	651;"	d	file:
COUNT_LEADING_ZEROS_0	longlong.h	1086;"	d
COUNT_LEADING_ZEROS_0	longlong.h	1177;"	d
COUNT_LEADING_ZEROS_0	longlong.h	1196;"	d
COUNT_LEADING_ZEROS_0	longlong.h	1363;"	d
COUNT_LEADING_ZEROS_0	longlong.h	1486;"	d
COUNT_LEADING_ZEROS_0	longlong.h	2150;"	d
COUNT_LEADING_ZEROS_0	longlong.h	418;"	d
COUNT_LEADING_ZEROS_0	longlong.h	537;"	d
COUNT_LEADING_ZEROS_0	longlong.h	561;"	d
COUNT_LEADING_ZEROS_0	longlong.h	928;"	d
COUNT_LEADING_ZEROS_0	longlong.h	947;"	d
COUNT_LEADING_ZEROS_0_ALLOWED	tune/common.c	2570;"	d	file:
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	longlong.h	1820;"	d
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	longlong.h	2151;"	d
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	longlong.h	2157;"	d
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	longlong.h	230;"	d
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	longlong.h	261;"	d
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	longlong.h	927;"	d
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	mpn/x86/pentium/gmp-mparam.h	37;"	d
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	mpn/x86/pentium/mmx/gmp-mparam.h	38;"	d
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	tune/common.c	60;"	d	file:
COUNT_LEADING_ZEROS_NEED_CLZ_TAB	tune/common.c	62;"	d	file:
COUNT_LEADING_ZEROS_SLOW	longlong.h	2152;"	d
CP	demos/expr/expr.c	274;"	d	file:
CPPFLAGS	mini-gmp/tests/Makefile	/^CPPFLAGS =$/;"	m
CPUVEC_THRESHOLD	gmp-impl.h	4656;"	d
CRAY_Pragma	gmp-impl.h	528;"	d
CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
DATALIST	demos/expr/t-expr.c	252;"	d	file:
DATA_2FD	tests/devel/try.c	208;"	d	file:
DATA_2FD	tune/speed.c	118;"	d	file:
DATA_AAS	tune/speed.c	116;"	d	file:
DATA_DIV_QR_1	tests/devel/try.c	364;"	d	file:
DATA_FFS	tests/devel/try.c	207;"	d	file:
DATA_FFS	tune/speed.c	117;"	d	file:
DATA_GCD	tests/devel/try.c	356;"	d	file:
DATA_HIGH_GE_R	tune/tuneup.c	254;"	d	file:
DATA_HIGH_LT_R	tune/tuneup.c	253;"	d	file:
DATA_MULTIPLE_DIVISOR	tests/devel/try.c	362;"	d	file:
DATA_NON_ZERO	tests/devel/try.c	355;"	d	file:
DATA_POP	demos/expr/expr.c	113;"	d	file:
DATA_PUSH	demos/expr/expr.c	105;"	d	file:
DATA_RANDOM	tune/speed.c	113;"	d	file:
DATA_RANDOM2	tune/speed.c	114;"	d	file:
DATA_SEQ	tests/devel/try.c	206;"	d	file:
DATA_SPACE	demos/expr/expr.c	87;"	d	file:
DATA_SRC0_HIGHBIT	tests/devel/try.c	358;"	d	file:
DATA_SRC0_ODD	tests/devel/try.c	357;"	d	file:
DATA_SRC1_HIGHBIT	tests/devel/try.c	361;"	d	file:
DATA_SRC1_ODD	tests/devel/try.c	359;"	d	file:
DATA_SRC1_ODD_PRIME	tests/devel/try.c	360;"	d	file:
DATA_TRAND	tests/devel/try.c	204;"	d	file:
DATA_UDIV_QRNND	tests/devel/try.c	363;"	d	file:
DATA_ZEROS	tests/devel/try.c	205;"	d	file:
DATA_ZEROS	tune/speed.c	115;"	d	file:
DC_BDIV_QR_THRESHOLD	gmp-impl.h	2170;"	d
DC_BDIV_QR_THRESHOLD	gmp-impl.h	4844;"	d
DC_BDIV_QR_THRESHOLD	gmp-impl.h	4845;"	d
DC_BDIV_QR_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	155;"	d
DC_BDIV_QR_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	177;"	d
DC_BDIV_QR_THRESHOLD	mpn/arm/gmp-mparam.h	102;"	d
DC_BDIV_QR_THRESHOLD	mpn/arm/v6/gmp-mparam.h	155;"	d
DC_BDIV_QR_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	160;"	d
DC_BDIV_QR_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	161;"	d
DC_BDIV_QR_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	174;"	d
DC_BDIV_QR_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	176;"	d
DC_BDIV_QR_THRESHOLD	mpn/arm64/gmp-mparam.h	207;"	d
DC_BDIV_QR_THRESHOLD	mpn/ia64/gmp-mparam.h	171;"	d
DC_BDIV_QR_THRESHOLD	mpn/minithres/gmp-mparam.h	85;"	d
DC_BDIV_QR_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	142;"	d
DC_BDIV_QR_THRESHOLD	mpn/pa64/gmp-mparam.h	220;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	167;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc32/gmp-mparam.h	190;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	130;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	172;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	129;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	138;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	132;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	141;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	147;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	180;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	189;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	128;"	d
DC_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	212;"	d
DC_BDIV_QR_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	175;"	d
DC_BDIV_QR_THRESHOLD	mpn/s390_32/gmp-mparam.h	113;"	d
DC_BDIV_QR_THRESHOLD	mpn/s390_64/gmp-mparam.h	143;"	d
DC_BDIV_QR_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	201;"	d
DC_BDIV_QR_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	121;"	d
DC_BDIV_QR_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	172;"	d
DC_BDIV_QR_THRESHOLD	mpn/sparc64/gmp-mparam.h	113;"	d
DC_BDIV_QR_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	189;"	d
DC_BDIV_QR_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	122;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/atom/gmp-mparam.h	175;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	176;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	179;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	165;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/core2/gmp-mparam.h	168;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	178;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	192;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	171;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/geode/gmp-mparam.h	116;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/k10/gmp-mparam.h	182;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/k6/gmp-mparam.h	141;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/k7/gmp-mparam.h	221;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/k8/gmp-mparam.h	166;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/nano/gmp-mparam.h	135;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/p6/gmp-mparam.h	167;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	173;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	168;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	138;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	174;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	183;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	208;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	223;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	186;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	194;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	196;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	213;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	200;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	198;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/gmp-mparam.h	186;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	204;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	203;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	210;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	198;"	d
DC_BDIV_QR_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	197;"	d
DC_BDIV_Q_THRESHOLD	gmp-impl.h	2174;"	d
DC_BDIV_Q_THRESHOLD	gmp-impl.h	4840;"	d
DC_BDIV_Q_THRESHOLD	gmp-impl.h	4841;"	d
DC_BDIV_Q_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	156;"	d
DC_BDIV_Q_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	178;"	d
DC_BDIV_Q_THRESHOLD	mpn/arm/gmp-mparam.h	103;"	d
DC_BDIV_Q_THRESHOLD	mpn/arm/v6/gmp-mparam.h	156;"	d
DC_BDIV_Q_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	161;"	d
DC_BDIV_Q_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	162;"	d
DC_BDIV_Q_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	175;"	d
DC_BDIV_Q_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	177;"	d
DC_BDIV_Q_THRESHOLD	mpn/arm64/gmp-mparam.h	208;"	d
DC_BDIV_Q_THRESHOLD	mpn/ia64/gmp-mparam.h	172;"	d
DC_BDIV_Q_THRESHOLD	mpn/minithres/gmp-mparam.h	86;"	d
DC_BDIV_Q_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	143;"	d
DC_BDIV_Q_THRESHOLD	mpn/pa64/gmp-mparam.h	221;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	168;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc32/gmp-mparam.h	191;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	131;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	173;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	130;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	139;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	133;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	142;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	148;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	181;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	190;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	129;"	d
DC_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	213;"	d
DC_BDIV_Q_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	176;"	d
DC_BDIV_Q_THRESHOLD	mpn/s390_32/gmp-mparam.h	114;"	d
DC_BDIV_Q_THRESHOLD	mpn/s390_64/gmp-mparam.h	144;"	d
DC_BDIV_Q_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	202;"	d
DC_BDIV_Q_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	122;"	d
DC_BDIV_Q_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	173;"	d
DC_BDIV_Q_THRESHOLD	mpn/sparc64/gmp-mparam.h	114;"	d
DC_BDIV_Q_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	190;"	d
DC_BDIV_Q_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	123;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/atom/gmp-mparam.h	176;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	177;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	180;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	166;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/core2/gmp-mparam.h	169;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	179;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	193;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	172;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/geode/gmp-mparam.h	117;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/k10/gmp-mparam.h	183;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/k6/gmp-mparam.h	142;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/k7/gmp-mparam.h	222;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/k8/gmp-mparam.h	167;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/nano/gmp-mparam.h	136;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/p6/gmp-mparam.h	168;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	174;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	169;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	139;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	175;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	184;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	209;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	224;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	187;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	195;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	197;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	214;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	201;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	199;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/gmp-mparam.h	187;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	205;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	204;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	211;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	199;"	d
DC_BDIV_Q_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	198;"	d
DC_DIVAPPR_Q_THRESHOLD	gmp-impl.h	2166;"	d
DC_DIVAPPR_Q_THRESHOLD	gmp-impl.h	4836;"	d
DC_DIVAPPR_Q_THRESHOLD	gmp-impl.h	4837;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	154;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	176;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/arm/gmp-mparam.h	101;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/arm/v6/gmp-mparam.h	154;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	159;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	160;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	173;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	175;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/arm64/gmp-mparam.h	206;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/ia64/gmp-mparam.h	170;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/minithres/gmp-mparam.h	84;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	141;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/pa64/gmp-mparam.h	219;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	166;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/gmp-mparam.h	189;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	129;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	171;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	128;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	137;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	131;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	140;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	146;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	179;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	188;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	127;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	211;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	174;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/s390_32/gmp-mparam.h	112;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/s390_64/gmp-mparam.h	142;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	200;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	120;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	171;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/sparc64/gmp-mparam.h	112;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	188;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	121;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/atom/gmp-mparam.h	174;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	175;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	178;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	164;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/core2/gmp-mparam.h	167;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	177;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	191;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	170;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/geode/gmp-mparam.h	115;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/k10/gmp-mparam.h	181;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/k6/gmp-mparam.h	140;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/k7/gmp-mparam.h	220;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/k8/gmp-mparam.h	165;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/nano/gmp-mparam.h	134;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/p6/gmp-mparam.h	166;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	172;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	167;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	137;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	173;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	182;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	207;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	222;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	185;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	193;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	195;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	212;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	199;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	197;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/gmp-mparam.h	185;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	203;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	202;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	209;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	197;"	d
DC_DIVAPPR_Q_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	196;"	d
DC_DIV_QR_THRESHOLD	gmp-impl.h	2162;"	d
DC_DIV_QR_THRESHOLD	gmp-impl.h	2310;"	d
DC_DIV_QR_THRESHOLD	gmp-impl.h	4832;"	d
DC_DIV_QR_THRESHOLD	gmp-impl.h	4833;"	d
DC_DIV_QR_THRESHOLD	gmp-impl.h	604;"	d
DC_DIV_QR_THRESHOLD	gmp-impl.h	605;"	d
DC_DIV_QR_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	153;"	d
DC_DIV_QR_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	175;"	d
DC_DIV_QR_THRESHOLD	mpn/arm/gmp-mparam.h	100;"	d
DC_DIV_QR_THRESHOLD	mpn/arm/v6/gmp-mparam.h	153;"	d
DC_DIV_QR_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	158;"	d
DC_DIV_QR_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	159;"	d
DC_DIV_QR_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	172;"	d
DC_DIV_QR_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	174;"	d
DC_DIV_QR_THRESHOLD	mpn/arm64/gmp-mparam.h	205;"	d
DC_DIV_QR_THRESHOLD	mpn/ia64/gmp-mparam.h	169;"	d
DC_DIV_QR_THRESHOLD	mpn/minithres/gmp-mparam.h	83;"	d
DC_DIV_QR_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	140;"	d
DC_DIV_QR_THRESHOLD	mpn/pa64/gmp-mparam.h	218;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	165;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc32/gmp-mparam.h	188;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	128;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	170;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	127;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	136;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	130;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	139;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	145;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	178;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	187;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	126;"	d
DC_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	210;"	d
DC_DIV_QR_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	173;"	d
DC_DIV_QR_THRESHOLD	mpn/s390_32/gmp-mparam.h	111;"	d
DC_DIV_QR_THRESHOLD	mpn/s390_64/gmp-mparam.h	141;"	d
DC_DIV_QR_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	199;"	d
DC_DIV_QR_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	119;"	d
DC_DIV_QR_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	170;"	d
DC_DIV_QR_THRESHOLD	mpn/sparc64/gmp-mparam.h	111;"	d
DC_DIV_QR_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	187;"	d
DC_DIV_QR_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	120;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/atom/gmp-mparam.h	173;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	174;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	177;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	163;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/core2/gmp-mparam.h	166;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	176;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	190;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	169;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/geode/gmp-mparam.h	114;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/k10/gmp-mparam.h	180;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/k6/gmp-mparam.h	139;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/k7/gmp-mparam.h	219;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/k8/gmp-mparam.h	164;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/nano/gmp-mparam.h	133;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/p6/gmp-mparam.h	165;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	171;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	166;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	136;"	d
DC_DIV_QR_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	172;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	181;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	206;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	221;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	184;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	192;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	194;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	211;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	198;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	196;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/gmp-mparam.h	184;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	202;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	201;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	208;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	196;"	d
DC_DIV_QR_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	195;"	d
DC_DIV_Q_THRESHOLD	mpn/div_q.c	93;"	d	file:
DC_DIV_Q_THRESHOLD	mpn/generic/div_q.c	93;"	d	file:
DEADVAL	tests/devel/try.c	223;"	d	file:
DEADVAL	tests/devel/try.c	225;"	d	file:
DEBUG_1	tests/rand/gmpstat.h	28;"	d
DEBUG_2	tests/rand/gmpstat.h	29;"	d
DECIMAL	demos/calc/calc.c	/^     DECIMAL = 262,$/;"	e	enum:yytokentype	file:
DECIMAL	demos/calc/calc.c	279;"	d	file:
DECIMAL	demos/calc/calc.h	/^     DECIMAL = 262,$/;"	e	enum:yytokentype
DECIMAL	demos/calc/calc.h	84;"	d
DECL_add_n	gmp-impl.h	66;"	d
DECL_addlsh1_n	gmp-impl.h	68;"	d
DECL_addlsh2_n	gmp-impl.h	70;"	d
DECL_addmul_1	gmp-impl.h	72;"	d
DECL_addmul_2	gmp-impl.h	74;"	d
DECL_bdiv_dbm1c	gmp-impl.h	76;"	d
DECL_cnd_add_n	gmp-impl.h	78;"	d
DECL_cnd_sub_n	gmp-impl.h	80;"	d
DECL_com	gmp-impl.h	82;"	d
DECL_copyd	gmp-impl.h	84;"	d
DECL_copyi	gmp-impl.h	86;"	d
DECL_divexact_1	gmp-impl.h	88;"	d
DECL_divexact_by3c	gmp-impl.h	90;"	d
DECL_divrem_1	gmp-impl.h	92;"	d
DECL_gcd_1	gmp-impl.h	94;"	d
DECL_lshift	gmp-impl.h	96;"	d
DECL_lshiftc	gmp-impl.h	98;"	d
DECL_mod_1	gmp-impl.h	100;"	d
DECL_mod_1_1p	gmp-impl.h	102;"	d
DECL_mod_1_1p_cps	gmp-impl.h	104;"	d
DECL_mod_1s_2p	gmp-impl.h	106;"	d
DECL_mod_1s_2p_cps	gmp-impl.h	108;"	d
DECL_mod_1s_4p	gmp-impl.h	110;"	d
DECL_mod_1s_4p_cps	gmp-impl.h	112;"	d
DECL_mod_34lsub1	gmp-impl.h	114;"	d
DECL_modexact_1c_odd	gmp-impl.h	116;"	d
DECL_mul_1	gmp-impl.h	118;"	d
DECL_mul_basecase	gmp-impl.h	120;"	d
DECL_mullo_basecase	gmp-impl.h	122;"	d
DECL_preinv_divrem_1	gmp-impl.h	124;"	d
DECL_preinv_divrem_1	mpn/x86/fat/fat.c	/^typedef DECL_preinv_divrem_1 ((*preinv_divrem_1_t));$/;"	t	file:
DECL_preinv_divrem_1	mpn/x86_64/fat/fat.c	/^typedef DECL_preinv_divrem_1 ((*preinv_divrem_1_t));$/;"	t	file:
DECL_preinv_mod_1	gmp-impl.h	126;"	d
DECL_preinv_mod_1	mpn/x86/fat/fat.c	/^typedef DECL_preinv_mod_1    ((*preinv_mod_1_t));$/;"	t	file:
DECL_preinv_mod_1	mpn/x86_64/fat/fat.c	/^typedef DECL_preinv_mod_1    ((*preinv_mod_1_t));$/;"	t	file:
DECL_redc_1	gmp-impl.h	128;"	d
DECL_redc_2	gmp-impl.h	130;"	d
DECL_rshift	gmp-impl.h	132;"	d
DECL_sqr_basecase	gmp-impl.h	134;"	d
DECL_sub_n	gmp-impl.h	136;"	d
DECL_sublsh1_n	gmp-impl.h	138;"	d
DECL_submul_1	gmp-impl.h	140;"	d
DEFAULT	tune/time.c	990;"	d	file:
DEFAULT	tune/tuneup.c	529;"	d	file:
DEFAULT_MAX_SIZE	tune/tuneup.c	136;"	d	file:
DEFAULT_REPETITIONS	tests/devel/try.c	186;"	d	file:
DEFAULT_SEED	rand/randmt.c	54;"	d	file:
DEN	gmp-impl.h	550;"	d
DIFF_SECS_ROUTINE	tune/time.c	1359;"	d	file:
DIGITS_IN_BASEGT2_FROM_BITS	gmp-impl.h	2878;"	d
DIGITS_IN_BASE_FROM_BITS	gmp-impl.h	2870;"	d
DIGITS_IN_BASE_PER_LIMB	gmp-impl.h	4326;"	d
DIGIT_VALUE	printf/doprntf.c	53;"	d	file:
DIMS	tests/rand/findlc.c	104;"	d	file:
DIR_BIT	tests/amd64check.c	69;"	d	file:
DIR_BIT	tests/x86check.c	75;"	d	file:
DIV	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
DIVEXACT_1_THRESHOLD	gmp-impl.h	3201;"	d
DIVEXACT_1_THRESHOLD	gmp-impl.h	613;"	d
DIVEXACT_1_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	54;"	d
DIVEXACT_1_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	56;"	d
DIVEXACT_1_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	59;"	d
DIVEXACT_1_THRESHOLD	mpn/alpha/gmp-mparam.h	72;"	d
DIVEXACT_1_THRESHOLD	mpn/arm/gmp-mparam.h	48;"	d
DIVEXACT_1_THRESHOLD	mpn/arm/v6/gmp-mparam.h	53;"	d
DIVEXACT_1_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/arm64/gmp-mparam.h	53;"	d
DIVEXACT_1_THRESHOLD	mpn/cray/gmp-mparam.h	66;"	d
DIVEXACT_1_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	60;"	d
DIVEXACT_1_THRESHOLD	mpn/ia64/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/m68k/gmp-mparam.h	63;"	d
DIVEXACT_1_THRESHOLD	mpn/minithres/gmp-mparam.h	43;"	d
DIVEXACT_1_THRESHOLD	mpn/mips32/gmp-mparam.h	59;"	d
DIVEXACT_1_THRESHOLD	mpn/mips64/gmp-mparam.h	59;"	d
DIVEXACT_1_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	59;"	d
DIVEXACT_1_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	47;"	d
DIVEXACT_1_THRESHOLD	mpn/pa64/gmp-mparam.h	48;"	d
DIVEXACT_1_THRESHOLD	mpn/power/gmp-mparam.h	56;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc32/gmp-mparam.h	63;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	47;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	48;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	48;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	48;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	45;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	68;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	44;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	46;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	45;"	d
DIVEXACT_1_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	53;"	d
DIVEXACT_1_THRESHOLD	mpn/s390_32/gmp-mparam.h	48;"	d
DIVEXACT_1_THRESHOLD	mpn/s390_64/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	54;"	d
DIVEXACT_1_THRESHOLD	mpn/sparc32/gmp-mparam.h	54;"	d
DIVEXACT_1_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	43;"	d
DIVEXACT_1_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	60;"	d
DIVEXACT_1_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	60;"	d
DIVEXACT_1_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	54;"	d
DIVEXACT_1_THRESHOLD	mpn/sparc64/gmp-mparam.h	47;"	d
DIVEXACT_1_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	54;"	d
DIVEXACT_1_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	49;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/atom/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/core2/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/fat/gmp-mparam.h	39;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/geode/gmp-mparam.h	44;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/gmp-mparam.h	38;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/i486/gmp-mparam.h	56;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/k10/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/k6/gmp-mparam.h	46;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/k7/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/k8/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/nano/gmp-mparam.h	46;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/p6/gmp-mparam.h	53;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	52;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	52;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	63;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	51;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	53;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	54;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	53;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	49;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	50;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	49;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	40;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/gmp-mparam.h	44;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	57;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	54;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	53;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	56;"	d
DIVEXACT_1_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	53;"	d
DIVEXACT_BY3_METHOD	gmp-impl.h	1612;"	d
DIVEXACT_BY3_METHOD	gmp-impl.h	1614;"	d
DIVEXACT_BY3_METHOD	mpn/alpha/ev6/gmp-mparam.h	35;"	d
DIVEXACT_JEB_THRESHOLD	gmp-impl.h	2178;"	d
DIVIDE	mpz/bin_ui.c	44;"	d	file:
DIVIDE_BY_ZERO	gmp-impl.h	3884;"	d
DIVISOR_COUNT	tests/devel/try.c	2207;"	d	file:
DIVISOR_ITERATION	tests/devel/try.c	2212;"	d	file:
DIVISOR_LIMB	tests/devel/try.c	350;"	d	file:
DIVISOR_NORM	tests/devel/try.c	351;"	d	file:
DIVISOR_ODD	tests/devel/try.c	352;"	d	file:
DIVISOR_RANDOMS	tests/devel/try.c	199;"	d	file:
DIVREM_1_NORM_THRESHOLD	gmp-impl.h	4932;"	d
DIVREM_1_NORM_THRESHOLD	gmp-impl.h	4933;"	d
DIVREM_1_NORM_THRESHOLD	gmp-impl.h	607;"	d
DIVREM_1_NORM_THRESHOLD	gmp-impl.h	614;"	d
DIVREM_1_NORM_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	39;"	d
DIVREM_1_NORM_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	41;"	d
DIVREM_1_NORM_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	52;"	d
DIVREM_1_NORM_THRESHOLD	mpn/alpha/gmp-mparam.h	63;"	d
DIVREM_1_NORM_THRESHOLD	mpn/arm/gmp-mparam.h	37;"	d
DIVREM_1_NORM_THRESHOLD	mpn/arm/v6/gmp-mparam.h	39;"	d
DIVREM_1_NORM_THRESHOLD	mpn/arm64/gmp-mparam.h	38;"	d
DIVREM_1_NORM_THRESHOLD	mpn/cray/gmp-mparam.h	59;"	d
DIVREM_1_NORM_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	53;"	d
DIVREM_1_NORM_THRESHOLD	mpn/divrem_1.c	46;"	d	file:
DIVREM_1_NORM_THRESHOLD	mpn/generic/divrem_1.c	46;"	d	file:
DIVREM_1_NORM_THRESHOLD	mpn/m68k/gmp-mparam.h	56;"	d
DIVREM_1_NORM_THRESHOLD	mpn/mips32/gmp-mparam.h	52;"	d
DIVREM_1_NORM_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	52;"	d
DIVREM_1_NORM_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	37;"	d
DIVREM_1_NORM_THRESHOLD	mpn/pa64/gmp-mparam.h	36;"	d
DIVREM_1_NORM_THRESHOLD	mpn/power/gmp-mparam.h	49;"	d
DIVREM_1_NORM_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	40;"	d
DIVREM_1_NORM_THRESHOLD	mpn/powerpc32/gmp-mparam.h	48;"	d
DIVREM_1_NORM_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	36;"	d
DIVREM_1_NORM_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	36;"	d
DIVREM_1_NORM_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	36;"	d
DIVREM_1_NORM_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	36;"	d
DIVREM_1_NORM_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	36;"	d
DIVREM_1_NORM_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	33;"	d
DIVREM_1_NORM_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	38;"	d
DIVREM_1_NORM_THRESHOLD	mpn/s390_32/gmp-mparam.h	36;"	d
DIVREM_1_NORM_THRESHOLD	mpn/s390_64/gmp-mparam.h	36;"	d
DIVREM_1_NORM_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	39;"	d
DIVREM_1_NORM_THRESHOLD	mpn/sparc32/gmp-mparam.h	47;"	d
DIVREM_1_NORM_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	31;"	d
DIVREM_1_NORM_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	53;"	d
DIVREM_1_NORM_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	53;"	d
DIVREM_1_NORM_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	39;"	d
DIVREM_1_NORM_THRESHOLD	mpn/sparc64/gmp-mparam.h	37;"	d
DIVREM_1_NORM_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	39;"	d
DIVREM_1_NORM_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	37;"	d
DIVREM_1_NORM_THRESHOLD	tune/divrem1div.c	36;"	d	file:
DIVREM_1_NORM_THRESHOLD	tune/divrem1div.c	38;"	d	file:
DIVREM_1_NORM_THRESHOLD	tune/divrem1inv.c	36;"	d	file:
DIVREM_1_NORM_THRESHOLD	tune/divrem1inv.c	38;"	d	file:
DIVREM_1_UNNORM_THRESHOLD	gmp-impl.h	4936;"	d
DIVREM_1_UNNORM_THRESHOLD	gmp-impl.h	4937;"	d
DIVREM_1_UNNORM_THRESHOLD	gmp-impl.h	608;"	d
DIVREM_1_UNNORM_THRESHOLD	gmp-impl.h	615;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	40;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	42;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	53;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/alpha/gmp-mparam.h	64;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/arm/gmp-mparam.h	38;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/arm/v6/gmp-mparam.h	40;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/arm64/gmp-mparam.h	39;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/cray/gmp-mparam.h	60;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	54;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/divrem_1.c	49;"	d	file:
DIVREM_1_UNNORM_THRESHOLD	mpn/generic/divrem_1.c	49;"	d	file:
DIVREM_1_UNNORM_THRESHOLD	mpn/m68k/gmp-mparam.h	57;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/mips32/gmp-mparam.h	53;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	53;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	38;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/pa64/gmp-mparam.h	37;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/power/gmp-mparam.h	50;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	41;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/powerpc32/gmp-mparam.h	49;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	37;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	37;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	37;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	37;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	37;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	34;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	39;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/s390_32/gmp-mparam.h	37;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/s390_64/gmp-mparam.h	37;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	40;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/sparc32/gmp-mparam.h	48;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	32;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	54;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	54;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	40;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/sparc64/gmp-mparam.h	38;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	40;"	d
DIVREM_1_UNNORM_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	38;"	d
DIVREM_1_UNNORM_THRESHOLD	tune/divrem1div.c	37;"	d	file:
DIVREM_1_UNNORM_THRESHOLD	tune/divrem1div.c	39;"	d	file:
DIVREM_1_UNNORM_THRESHOLD	tune/divrem1inv.c	37;"	d	file:
DIVREM_1_UNNORM_THRESHOLD	tune/divrem1inv.c	39;"	d	file:
DIVREM_2_THRESHOLD	gmp-impl.h	4973;"	d
DIVREM_2_THRESHOLD	gmp-impl.h	4974;"	d
DIVREM_2_THRESHOLD	gmp-impl.h	612;"	d
DIVREM_2_THRESHOLD	gmp-impl.h	619;"	d
DIVREM_2_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	58;"	d
DIVREM_2_THRESHOLD	mpn/arm/gmp-mparam.h	47;"	d
DIVREM_2_THRESHOLD	mpn/cray/gmp-mparam.h	65;"	d
DIVREM_2_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	59;"	d
DIVREM_2_THRESHOLD	mpn/m68k/gmp-mparam.h	62;"	d
DIVREM_2_THRESHOLD	mpn/mips32/gmp-mparam.h	58;"	d
DIVREM_2_THRESHOLD	mpn/mips64/gmp-mparam.h	58;"	d
DIVREM_2_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	58;"	d
DIVREM_2_THRESHOLD	mpn/power/gmp-mparam.h	55;"	d
DIVREM_2_THRESHOLD	mpn/sparc32/gmp-mparam.h	53;"	d
DIVREM_2_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	59;"	d
DIVREM_2_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	59;"	d
DIVREM_2_THRESHOLD	mpn/x86/i486/gmp-mparam.h	55;"	d
DIVREM_2_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	62;"	d
DIVREM_2_THRESHOLD	tune/divrem2div.c	36;"	d	file:
DIVREM_2_THRESHOLD	tune/divrem2div.c	38;"	d	file:
DIVREM_2_THRESHOLD	tune/divrem2inv.c	36;"	d	file:
DIVREM_2_THRESHOLD	tune/divrem2inv.c	38;"	d	file:
DIV_1_PARAMS	tune/tuneup.c	2050;"	d	file:
DIV_DC_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	44;"	d
DIV_DC_THRESHOLD	mpn/alpha/gmp-mparam.h	54;"	d
DIV_DC_THRESHOLD	mpn/cray/gmp-mparam.h	51;"	d
DIV_DC_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	45;"	d
DIV_DC_THRESHOLD	mpn/m68k/gmp-mparam.h	48;"	d
DIV_DC_THRESHOLD	mpn/mips32/gmp-mparam.h	46;"	d
DIV_DC_THRESHOLD	mpn/mips64/gmp-mparam.h	46;"	d
DIV_DC_THRESHOLD	mpn/pa32/gmp-mparam.h	52;"	d
DIV_DC_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	44;"	d
DIV_DC_THRESHOLD	mpn/power/gmp-mparam.h	41;"	d
DIV_DC_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	52;"	d
DIV_DC_THRESHOLD	mpn/sparc32/gmp-mparam.h	41;"	d
DIV_DC_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	45;"	d
DIV_DC_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	45;"	d
DIV_DC_THRESHOLD	mpn/x86/i486/gmp-mparam.h	47;"	d
DIV_DC_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	52;"	d
DIV_QR_1N_METHOD	mpn/div_qr_1n_pi1.c	47;"	d	file:
DIV_QR_1N_METHOD	mpn/generic/div_qr_1n_pi1.c	47;"	d	file:
DIV_QR_1N_METHOD	tune/div_qr_1n_pi1_1.c	34;"	d	file:
DIV_QR_1N_METHOD	tune/div_qr_1n_pi1_1.c	35;"	d	file:
DIV_QR_1N_METHOD	tune/div_qr_1n_pi1_2.c	34;"	d	file:
DIV_QR_1N_METHOD	tune/div_qr_1n_pi1_2.c	35;"	d	file:
DIV_QR_1N_PI1_METHOD	gmp-impl.h	4920;"	d
DIV_QR_1N_PI1_METHOD	gmp-impl.h	4921;"	d
DIV_QR_1N_PI1_METHOD	mpn/alpha/ev5/gmp-mparam.h	50;"	d
DIV_QR_1N_PI1_METHOD	mpn/alpha/ev6/gmp-mparam.h	52;"	d
DIV_QR_1N_PI1_METHOD	mpn/arm/v6/gmp-mparam.h	49;"	d
DIV_QR_1N_PI1_METHOD	mpn/arm/v7a/cora15/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/arm/v7a/cora7/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/arm/v7a/cora8/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/arm/v7a/cora9/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/arm64/gmp-mparam.h	49;"	d
DIV_QR_1N_PI1_METHOD	mpn/ia64/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/powerpc32/gmp-mparam.h	59;"	d
DIV_QR_1N_PI1_METHOD	mpn/powerpc32/p4/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/powerpc64/mode64/p4/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/powerpc64/mode64/p7/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/s390_32/esame/gmp-mparam.h	49;"	d
DIV_QR_1N_PI1_METHOD	mpn/s390_64/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/s390_64/z10/gmp-mparam.h	50;"	d
DIV_QR_1N_PI1_METHOD	mpn/sparc32/v9/gmp-mparam.h	50;"	d
DIV_QR_1N_PI1_METHOD	mpn/sparc64/ultrasparc34/gmp-mparam.h	50;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/atom/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/bd1/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/bd2/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/bobcat/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/core2/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/coreihwl/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/coreinhm/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/coreisbr/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/k10/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/k7/gmp-mparam.h	47;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/k8/gmp-mparam.h	46;"	d
DIV_QR_1N_PI1_METHOD	mpn/x86/pentium4/sse2/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	gmp-impl.h	4924;"	d
DIV_QR_1_NORM_THRESHOLD	gmp-impl.h	4925;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	51;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	53;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/arm/v6/gmp-mparam.h	50;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/arm64/gmp-mparam.h	50;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/div_qr_1.c	39;"	d	file:
DIV_QR_1_NORM_THRESHOLD	mpn/generic/div_qr_1.c	39;"	d	file:
DIV_QR_1_NORM_THRESHOLD	mpn/ia64/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/powerpc32/gmp-mparam.h	60;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	50;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/s390_64/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	51;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	51;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	51;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/atom/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/core2/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/k10/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/k7/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/k8/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	48;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	50;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	51;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	50;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	46;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	47;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	46;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	54;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	51;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	50;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	53;"	d
DIV_QR_1_NORM_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	50;"	d
DIV_QR_1_UNNORM_THRESHOLD	gmp-impl.h	4928;"	d
DIV_QR_1_UNNORM_THRESHOLD	gmp-impl.h	4929;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	52;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	54;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/arm/v6/gmp-mparam.h	51;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/arm64/gmp-mparam.h	51;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/div_qr_1.c	42;"	d	file:
DIV_QR_1_UNNORM_THRESHOLD	mpn/generic/div_qr_1.c	42;"	d	file:
DIV_QR_1_UNNORM_THRESHOLD	mpn/ia64/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/powerpc32/gmp-mparam.h	61;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	51;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/s390_64/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	52;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	52;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	52;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/atom/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/core2/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/k10/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/k7/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/k8/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	49;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	51;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	52;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	51;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	47;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	48;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	47;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	55;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	52;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	51;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	54;"	d
DIV_QR_1_UNNORM_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	51;"	d
DIV_QR_2_PI2_THRESHOLD	gmp-impl.h	4828;"	d
DIV_QR_2_PI2_THRESHOLD	gmp-impl.h	4829;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	53;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	55;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/arm/v6/gmp-mparam.h	52;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/arm64/gmp-mparam.h	52;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/div_qr_2.c	45;"	d	file:
DIV_QR_2_PI2_THRESHOLD	mpn/generic/div_qr_2.c	45;"	d	file:
DIV_QR_2_PI2_THRESHOLD	mpn/ia64/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/pa64/gmp-mparam.h	47;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc32/gmp-mparam.h	62;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	47;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	47;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	47;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	44;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	43;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	45;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	44;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	52;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/s390_32/gmp-mparam.h	47;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/s390_64/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	53;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	42;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	53;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	53;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	48;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/atom/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/core2/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/k10/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/k7/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/k8/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/nano/gmp-mparam.h	45;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/p6/gmp-mparam.h	52;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	51;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	50;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	52;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	53;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	52;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	48;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	49;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	48;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/gmp-mparam.h	43;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	56;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	53;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	52;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	55;"	d
DIV_QR_2_PI2_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	52;"	d
DIV_SB_PREINV_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	43;"	d
DIV_SB_PREINV_THRESHOLD	mpn/alpha/gmp-mparam.h	53;"	d
DIV_SB_PREINV_THRESHOLD	mpn/cray/gmp-mparam.h	50;"	d
DIV_SB_PREINV_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	44;"	d
DIV_SB_PREINV_THRESHOLD	mpn/m68k/gmp-mparam.h	47;"	d
DIV_SB_PREINV_THRESHOLD	mpn/mips32/gmp-mparam.h	45;"	d
DIV_SB_PREINV_THRESHOLD	mpn/mips64/gmp-mparam.h	45;"	d
DIV_SB_PREINV_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	43;"	d
DIV_SB_PREINV_THRESHOLD	mpn/power/gmp-mparam.h	40;"	d
DIV_SB_PREINV_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	51;"	d
DIV_SB_PREINV_THRESHOLD	mpn/sparc32/gmp-mparam.h	40;"	d
DIV_SB_PREINV_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	44;"	d
DIV_SB_PREINV_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	44;"	d
DIV_SB_PREINV_THRESHOLD	mpn/x86/i486/gmp-mparam.h	46;"	d
DIV_SB_PREINV_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	51;"	d
DItype	gmp-impl.h	/^typedef		 int DItype	__attribute__ ((mode (DI)));$/;"	t
DItype	gmp-impl.h	/^typedef	long long int DItype;$/;"	t
DItype	gmp-impl.h	/^typedef long int DItype;$/;"	t
DOPRNT_ACCUMULATE	gmp-impl.h	4489;"	d
DOPRNT_ACCUMULATE_FUN	gmp-impl.h	4497;"	d
DOPRNT_CONV_FIXED	gmp-impl.h	4390;"	d
DOPRNT_CONV_GENERAL	gmp-impl.h	4392;"	d
DOPRNT_CONV_SCIENTIFIC	gmp-impl.h	4391;"	d
DOPRNT_FORMAT	gmp-impl.h	4503;"	d
DOPRNT_JUSTIFY_INTERNAL	gmp-impl.h	4397;"	d
DOPRNT_JUSTIFY_LEFT	gmp-impl.h	4395;"	d
DOPRNT_JUSTIFY_NONE	gmp-impl.h	4394;"	d
DOPRNT_JUSTIFY_RIGHT	gmp-impl.h	4396;"	d
DOPRNT_MEMORY	gmp-impl.h	4505;"	d
DOPRNT_MEMORY_MAYBE	gmp-impl.h	4517;"	d
DOPRNT_REPS	gmp-impl.h	4507;"	d
DOPRNT_REPS_MAYBE	gmp-impl.h	4512;"	d
DOPRNT_SHOWBASE_NO	gmp-impl.h	4400;"	d
DOPRNT_SHOWBASE_NONZERO	gmp-impl.h	4401;"	d
DOPRNT_SHOWBASE_YES	gmp-impl.h	4399;"	d
DOPRNT_STRING	gmp-impl.h	4510;"	d
DOUBLE_NAN_INF_ACTION	gmp-impl.h	3814;"	d
DOUBLE_NAN_INF_ACTION	gmp-impl.h	3830;"	d
DOUBLE_NAN_INF_ACTION	gmp-impl.h	3838;"	d
DO_addlsh2	mpn/generic/toom_eval_pm2.c	131;"	d	file:
DO_addlsh2	mpn/generic/toom_eval_pm2.c	43;"	d	file:
DO_addlsh2	mpn/generic/toom_eval_pm2.c	50;"	d	file:
DO_addlsh2	mpn/generic/toom_eval_pm2.c	58;"	d	file:
DO_addlsh2	mpn/toom_eval_pm2.c	131;"	d	file:
DO_addlsh2	mpn/toom_eval_pm2.c	43;"	d	file:
DO_addlsh2	mpn/toom_eval_pm2.c	50;"	d	file:
DO_addlsh2	mpn/toom_eval_pm2.c	58;"	d	file:
DO_mpn_addlsh_n	mpn/generic/toom_eval_pm2rexp.c	/^DO_mpn_addlsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_addlsh_n	mpn/generic/toom_eval_pm2rexp.c	42;"	d	file:
DO_mpn_addlsh_n	mpn/generic/toom_interpolate_12pts.c	/^DO_mpn_addlsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_addlsh_n	mpn/generic/toom_interpolate_12pts.c	59;"	d	file:
DO_mpn_addlsh_n	mpn/generic/toom_interpolate_16pts.c	/^DO_mpn_addlsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_addlsh_n	mpn/generic/toom_interpolate_16pts.c	67;"	d	file:
DO_mpn_addlsh_n	mpn/toom_eval_pm2rexp.c	/^DO_mpn_addlsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_addlsh_n	mpn/toom_eval_pm2rexp.c	42;"	d	file:
DO_mpn_addlsh_n	mpn/toom_interpolate_12pts.c	/^DO_mpn_addlsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_addlsh_n	mpn/toom_interpolate_12pts.c	59;"	d	file:
DO_mpn_addlsh_n	mpn/toom_interpolate_16pts.c	/^DO_mpn_addlsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_addlsh_n	mpn/toom_interpolate_16pts.c	67;"	d	file:
DO_mpn_sublsh2_n	mpn/generic/toom_interpolate_8pts.c	69;"	d	file:
DO_mpn_sublsh2_n	mpn/generic/toom_interpolate_8pts.c	71;"	d	file:
DO_mpn_sublsh2_n	mpn/toom_interpolate_8pts.c	69;"	d	file:
DO_mpn_sublsh2_n	mpn/toom_interpolate_8pts.c	71;"	d	file:
DO_mpn_sublsh_n	mpn/generic/toom_interpolate_12pts.c	/^DO_mpn_sublsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_sublsh_n	mpn/generic/toom_interpolate_12pts.c	43;"	d	file:
DO_mpn_sublsh_n	mpn/generic/toom_interpolate_16pts.c	/^DO_mpn_sublsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_sublsh_n	mpn/generic/toom_interpolate_16pts.c	51;"	d	file:
DO_mpn_sublsh_n	mpn/generic/toom_interpolate_8pts.c	/^DO_mpn_sublsh_n (mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_sublsh_n	mpn/generic/toom_interpolate_8pts.c	75;"	d	file:
DO_mpn_sublsh_n	mpn/toom_interpolate_12pts.c	/^DO_mpn_sublsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_sublsh_n	mpn/toom_interpolate_12pts.c	43;"	d	file:
DO_mpn_sublsh_n	mpn/toom_interpolate_16pts.c	/^DO_mpn_sublsh_n(mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_sublsh_n	mpn/toom_interpolate_16pts.c	51;"	d	file:
DO_mpn_sublsh_n	mpn/toom_interpolate_8pts.c	/^DO_mpn_sublsh_n (mp_ptr dst, mp_srcptr src, mp_size_t n, unsigned int s, mp_ptr ws)$/;"	f	file:
DO_mpn_sublsh_n	mpn/toom_interpolate_8pts.c	75;"	d	file:
DO_mpn_subrsh	mpn/generic/toom_interpolate_12pts.c	75;"	d	file:
DO_mpn_subrsh	mpn/generic/toom_interpolate_12pts.c	78;"	d	file:
DO_mpn_subrsh	mpn/generic/toom_interpolate_16pts.c	83;"	d	file:
DO_mpn_subrsh	mpn/generic/toom_interpolate_16pts.c	86;"	d	file:
DO_mpn_subrsh	mpn/generic/toom_interpolate_8pts.c	92;"	d	file:
DO_mpn_subrsh	mpn/generic/toom_interpolate_8pts.c	95;"	d	file:
DO_mpn_subrsh	mpn/toom_interpolate_12pts.c	75;"	d	file:
DO_mpn_subrsh	mpn/toom_interpolate_12pts.c	78;"	d	file:
DO_mpn_subrsh	mpn/toom_interpolate_16pts.c	83;"	d	file:
DO_mpn_subrsh	mpn/toom_interpolate_16pts.c	86;"	d	file:
DO_mpn_subrsh	mpn/toom_interpolate_8pts.c	92;"	d	file:
DO_mpn_subrsh	mpn/toom_interpolate_8pts.c	95;"	d	file:
DUMP	tests/cxx/t-ostream.cc	57;"	d	file:
ECHO	demos/calc/calclex.c	527;"	d	file:
EFLAGS	tests/x86check.c	49;"	d	file:
END_ENOUGH	tune/time.c	1405;"	d	file:
END_EXCEED	tune/time.c	1413;"	d	file:
END_USE	tune/time.c	1397;"	d	file:
ENTRY	tests/mpz/t-set_si.c	31;"	d	file:
ENTS	tests/rand/t-rand.c	27;"	d	file:
EOB_ACT_CONTINUE_SCAN	demos/calc/calclex.c	112;"	d	file:
EOB_ACT_END_OF_FILE	demos/calc/calclex.c	113;"	d	file:
EOB_ACT_LAST_MATCH	demos/calc/calclex.c	114;"	d	file:
EOS	demos/calc/calc.c	/^     EOS = 258,$/;"	e	enum:yytokentype	file:
EOS	demos/calc/calc.c	275;"	d	file:
EOS	demos/calc/calc.h	/^     EOS = 258,$/;"	e	enum:yytokentype
EOS	demos/calc/calc.h	80;"	d
EPSIZE	tests/mpq/t-get_d.c	37;"	d	file:
EPSIZE	tests/mpq/t-get_d.c	39;"	d	file:
EQ	demos/calc/calc.c	/^     EQ = 282,$/;"	e	enum:yytokentype	file:
EQ	demos/calc/calc.c	299;"	d	file:
EQ	demos/calc/calc.h	/^     EQ = 282,$/;"	e	enum:yytokentype
EQ	demos/calc/calc.h	104;"	d
ERROR	demos/expr/expr.c	66;"	d	file:
EXIT_SUCCESS	demos/calc/calc.c	462;"	d	file:
EXIT_SUCCESS	demos/calc/calc.c	490;"	d	file:
EXP	gmp-impl.h	546;"	d
EXPECT	tests/mpf/t-fits.c	41;"	d	file:
EXPECT	tests/mpz/t-fits.c	42;"	d	file:
EXPECT_S	tests/mpf/t-fits.c	30;"	d	file:
EXPECT_S	tests/mpz/t-fits.c	31;"	d	file:
EXPO	tests/mpf/reuse.c	50;"	d	file:
EXPO	tests/mpf/t-conv.c	33;"	d	file:
EXTRA	gen-bases.c	107;"	d	file:
EXTRA	mpn/generic/rootrem.c	300;"	d	file:
EXTRA	mpn/rootrem.c	300;"	d	file:
EXTRACT	mpz/export.c	140;"	d	file:
F	tests/cxx/t-ops3.cc	100;"	d	file:
F	tests/cxx/t-ops3.cc	106;"	d	file:
F	tests/cxx/t-ops3.cc	108;"	d	file:
F	tests/cxx/t-ops3.cc	78;"	d	file:
F	tests/cxx/t-ops3.cc	81;"	d	file:
F	tests/cxx/t-ops3.cc	82;"	d	file:
F	tests/cxx/t-ops3.cc	84;"	d	file:
F	tests/cxx/t-ops3.cc	88;"	d	file:
F	tests/cxx/t-ops3.cc	91;"	d	file:
F	tests/cxx/t-ops3.cc	92;"	d	file:
F	tests/cxx/t-ops3.cc	94;"	d	file:
F	tests/cxx/t-ops3.cc	98;"	d	file:
FAC	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
FACTORS_PER_LIMB	mpz/2fac_ui.c	46;"	d	file:
FACTORS_PER_LIMB	mpz/2fac_ui.c	98;"	d	file:
FACTORS_PER_LIMB	mpz/fac_ui.c	107;"	d	file:
FACTORS_PER_LIMB	mpz/fac_ui.c	46;"	d	file:
FACTORS_PER_LIMB	mpz/fac_ui.c	48;"	d	file:
FACTORS_PER_LIMB	mpz/oddfac_1.c	266;"	d	file:
FACTORS_PER_LIMB	mpz/oddfac_1.c	268;"	d	file:
FACTORS_PER_LIMB	mpz/oddfac_1.c	426;"	d	file:
FACTOR_LIST_APPEND	mpz/bin_uiui.c	466;"	d	file:
FACTOR_LIST_APPEND	mpz/oddfac_1.c	259;"	d	file:
FACTOR_LIST_APPEND	mpz/oddfac_1.c	50;"	d	file:
FACTOR_LIST_STORE	mpz/2fac_ui.c	36;"	d	file:
FACTOR_LIST_STORE	mpz/2fac_ui.c	99;"	d	file:
FACTOR_LIST_STORE	mpz/bin_uiui.c	472;"	d	file:
FACTOR_LIST_STORE	mpz/fac_ui.c	108;"	d	file:
FACTOR_LIST_STORE	mpz/fac_ui.c	36;"	d	file:
FACTOR_LIST_STORE	mpz/mfac_uiui.c	40;"	d	file:
FACTOR_LIST_STORE	mpz/oddfac_1.c	427;"	d	file:
FACTOR_LIST_STORE	mpz/oddfac_1.c	56;"	d	file:
FACTOR_LIST_STORE	mpz/primorial_ui.c	43;"	d	file:
FAC_2DSC_THRESHOLD	mpz/2fac_ui.c	100;"	d	file:
FAC_2DSC_THRESHOLD	mpz/2fac_ui.c	45;"	d	file:
FAC_DSC_THRESHOLD	gmp-impl.h	2334;"	d
FAC_DSC_THRESHOLD	gmp-impl.h	5006;"	d
FAC_DSC_THRESHOLD	gmp-impl.h	5007;"	d
FAC_DSC_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	186;"	d
FAC_DSC_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	208;"	d
FAC_DSC_THRESHOLD	mpn/arm/v6/gmp-mparam.h	179;"	d
FAC_DSC_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	184;"	d
FAC_DSC_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	185;"	d
FAC_DSC_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	198;"	d
FAC_DSC_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	200;"	d
FAC_DSC_THRESHOLD	mpn/arm64/gmp-mparam.h	230;"	d
FAC_DSC_THRESHOLD	mpn/ia64/gmp-mparam.h	195;"	d
FAC_DSC_THRESHOLD	mpn/minithres/gmp-mparam.h	113;"	d
FAC_DSC_THRESHOLD	mpn/powerpc32/gmp-mparam.h	213;"	d
FAC_DSC_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	203;"	d
FAC_DSC_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	172;"	d
FAC_DSC_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	178;"	d
FAC_DSC_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	203;"	d
FAC_DSC_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	218;"	d
FAC_DSC_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	159;"	d
FAC_DSC_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	236;"	d
FAC_DSC_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	206;"	d
FAC_DSC_THRESHOLD	mpn/s390_64/gmp-mparam.h	174;"	d
FAC_DSC_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	224;"	d
FAC_DSC_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	152;"	d
FAC_DSC_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	203;"	d
FAC_DSC_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	213;"	d
FAC_DSC_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	153;"	d
FAC_DSC_THRESHOLD	mpn/x86/atom/gmp-mparam.h	198;"	d
FAC_DSC_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	207;"	d
FAC_DSC_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	210;"	d
FAC_DSC_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	196;"	d
FAC_DSC_THRESHOLD	mpn/x86/core2/gmp-mparam.h	199;"	d
FAC_DSC_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	209;"	d
FAC_DSC_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	223;"	d
FAC_DSC_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	202;"	d
FAC_DSC_THRESHOLD	mpn/x86/k10/gmp-mparam.h	213;"	d
FAC_DSC_THRESHOLD	mpn/x86/k7/gmp-mparam.h	244;"	d
FAC_DSC_THRESHOLD	mpn/x86/k8/gmp-mparam.h	197;"	d
FAC_DSC_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	191;"	d
FAC_DSC_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	205;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	207;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	232;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	247;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	210;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	218;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	220;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	237;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	224;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	222;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/gmp-mparam.h	216;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	228;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	235;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	242;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	230;"	d
FAC_DSC_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	221;"	d
FAC_DSC_THRESHOLD_LIMIT	gmp-impl.h	5037;"	d
FAC_ODD_THRESHOLD	gmp-impl.h	2330;"	d
FAC_ODD_THRESHOLD	gmp-impl.h	5002;"	d
FAC_ODD_THRESHOLD	gmp-impl.h	5003;"	d
FAC_ODD_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	187;"	d
FAC_ODD_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	209;"	d
FAC_ODD_THRESHOLD	mpn/arm/v6/gmp-mparam.h	180;"	d
FAC_ODD_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	185;"	d
FAC_ODD_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	186;"	d
FAC_ODD_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	199;"	d
FAC_ODD_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	201;"	d
FAC_ODD_THRESHOLD	mpn/arm64/gmp-mparam.h	231;"	d
FAC_ODD_THRESHOLD	mpn/ia64/gmp-mparam.h	196;"	d
FAC_ODD_THRESHOLD	mpn/minithres/gmp-mparam.h	112;"	d
FAC_ODD_THRESHOLD	mpn/powerpc32/gmp-mparam.h	214;"	d
FAC_ODD_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	204;"	d
FAC_ODD_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	173;"	d
FAC_ODD_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	179;"	d
FAC_ODD_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	204;"	d
FAC_ODD_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	219;"	d
FAC_ODD_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	160;"	d
FAC_ODD_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	237;"	d
FAC_ODD_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	207;"	d
FAC_ODD_THRESHOLD	mpn/s390_64/gmp-mparam.h	175;"	d
FAC_ODD_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	225;"	d
FAC_ODD_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	153;"	d
FAC_ODD_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	204;"	d
FAC_ODD_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	214;"	d
FAC_ODD_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	154;"	d
FAC_ODD_THRESHOLD	mpn/x86/atom/gmp-mparam.h	199;"	d
FAC_ODD_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	208;"	d
FAC_ODD_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	211;"	d
FAC_ODD_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	197;"	d
FAC_ODD_THRESHOLD	mpn/x86/core2/gmp-mparam.h	200;"	d
FAC_ODD_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	210;"	d
FAC_ODD_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	224;"	d
FAC_ODD_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	203;"	d
FAC_ODD_THRESHOLD	mpn/x86/k10/gmp-mparam.h	214;"	d
FAC_ODD_THRESHOLD	mpn/x86/k7/gmp-mparam.h	245;"	d
FAC_ODD_THRESHOLD	mpn/x86/k8/gmp-mparam.h	198;"	d
FAC_ODD_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	192;"	d
FAC_ODD_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	206;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	208;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	233;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	248;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	211;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	219;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	221;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	238;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	225;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	223;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/gmp-mparam.h	217;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	229;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	236;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	243;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	231;"	d
FAC_ODD_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	222;"	d
FAIL	mini-gmp/tests/t-reuse.c	133;"	d	file:
FAIL	tests/mpz/bit.c	327;"	d	file:
FAIL	tests/mpz/reuse.c	164;"	d	file:
FAIL2	mini-gmp/tests/t-reuse.c	139;"	d	file:
FAIL2	tests/mpz/reuse.c	170;"	d	file:
FALSE	tests/rand/t-mt.c	29;"	d	file:
FALSE	tests/rand/t-urndmm.c	29;"	d	file:
FERMAT	demos/pexpr.c	/^	   LOG, LOG2, FERMAT, MERSENNE, FIBONACCI, RANDOM, NEXTPRIME, BINOM,$/;"	e	enum:op_t	file:
FETCH	demos/perl/test.pl	/^sub FETCH {$/;"	s
FFT_CACHE_SIZE	tune/tuneup.c	837;"	d	file:
FFT_FIRST_K	gmp-impl.h	2250;"	d
FFT_MIN_BITSIZE	tests/mpz/t-mul.c	33;"	d	file:
FFT_TABLE3_SIZE	gmp-impl.h	5013;"	d
FFT_TABLE3_SIZE	mpn/generic/mul_fft.c	105;"	d	file:
FFT_TABLE3_SIZE	mpn/generic/mul_fft.c	97;"	d	file:
FFT_TABLE3_SIZE	mpn/generic/mul_fft.c	99;"	d	file:
FFT_TABLE3_SIZE	mpn/mul_fft.c	105;"	d	file:
FFT_TABLE3_SIZE	mpn/mul_fft.c	97;"	d	file:
FFT_TABLE3_SIZE	mpn/mul_fft.c	99;"	d	file:
FFT_TABLE_ATTRS	gmp-impl.h	2303;"	d
FFT_TABLE_ATTRS	gmp-impl.h	5010;"	d
FFT_TABLE_ATTRS	gmp-impl.h	5011;"	d
FFT_THRESHOLD	tests/refmpn.c	1858;"	d	file:
FFT_THRESHOLD	tests/refmpn.c	1860;"	d	file:
FIB	demos/calc/calc.c	/^     FIB = 266,$/;"	e	enum:yytokentype	file:
FIB	demos/calc/calc.c	283;"	d	file:
FIB	demos/calc/calc.h	/^     FIB = 266,$/;"	e	enum:yytokentype
FIB	demos/calc/calc.h	88;"	d
FIBONACCI	demos/pexpr.c	/^	   LOG, LOG2, FERMAT, MERSENNE, FIBONACCI, RANDOM, NEXTPRIME, BINOM,$/;"	e	enum:op_t	file:
FIB_TABLE	gmp-impl.h	1999;"	d
FIB_TABLE_LIMIT	fib_table.h	7;"	d
FIB_TABLE_LUCNUM_LIMIT	fib_table.h	8;"	d
FILENAME	tests/mpf/t-inp_str.c	34;"	d	file:
FILENAME	tests/mpq/io.c	32;"	d	file:
FILENAME	tests/mpq/t-inp_str.c	34;"	d	file:
FILENAME	tests/mpz/io.c	32;"	d	file:
FILENAME	tests/mpz/t-inp_str.c	34;"	d	file:
FILENAME	tests/mpz/t-io_raw.c	33;"	d	file:
FIRST_OMITTED_PRIME	demos/primes.h	551;"	d
FIRST_OMITTED_PRIME	demos/primes.h	552;"	d
FLAG_NODATA	tune/speed.c	141;"	d	file:
FLAG_R	tune/speed.c	138;"	d	file:
FLAG_RSIZE	tune/speed.c	140;"	d	file:
FLAG_R_OPTIONAL	tune/speed.c	139;"	d	file:
FLEX_SCANNER	demos/calc/calclex.c	15;"	d	file:
FLUSH	printf/doprnt.c	137;"	d	file:
FNAME	mpn/generic/popham.c	36;"	d	file:
FNAME	mpn/generic/popham.c	41;"	d	file:
FNAME	mpn/generic/sec_aors_1.c	/^FNAME (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t b, mp_ptr scratch)$/;"	f
FNAME	mpn/generic/sec_aors_1.c	37;"	d	file:
FNAME	mpn/generic/sec_aors_1.c	42;"	d	file:
FNAME	mpn/generic/sec_div.c	40;"	d	file:
FNAME	mpn/generic/sec_div.c	46;"	d	file:
FNAME	mpn/generic/sec_pi1_div.c	67;"	d	file:
FNAME	mpn/generic/sec_pi1_div.c	73;"	d	file:
FNAME	mpn/hamdist.c	36;"	d	file:
FNAME	mpn/hamdist.c	41;"	d	file:
FNAME	mpn/popcount.c	36;"	d	file:
FNAME	mpn/popcount.c	41;"	d	file:
FNAME	mpn/sec_add_1.c	/^FNAME (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t b, mp_ptr scratch)$/;"	f
FNAME	mpn/sec_add_1.c	37;"	d	file:
FNAME	mpn/sec_add_1.c	42;"	d	file:
FNAME	mpn/sec_div_qr.c	40;"	d	file:
FNAME	mpn/sec_div_qr.c	46;"	d	file:
FNAME	mpn/sec_div_r.c	40;"	d	file:
FNAME	mpn/sec_div_r.c	46;"	d	file:
FNAME	mpn/sec_pi1_div_qr.c	67;"	d	file:
FNAME	mpn/sec_pi1_div_qr.c	73;"	d	file:
FNAME	mpn/sec_pi1_div_r.c	67;"	d	file:
FNAME	mpn/sec_pi1_div_r.c	73;"	d	file:
FNAME	mpn/sec_sub_1.c	/^FNAME (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t b, mp_ptr scratch)$/;"	f
FNAME	mpn/sec_sub_1.c	37;"	d	file:
FNAME	mpn/sec_sub_1.c	42;"	d	file:
FNAME_itch	mpn/generic/sec_aors_1.c	/^FNAME_itch (mp_size_t n)$/;"	f
FNAME_itch	mpn/generic/sec_aors_1.c	38;"	d	file:
FNAME_itch	mpn/generic/sec_aors_1.c	43;"	d	file:
FNAME_itch	mpn/generic/sec_div.c	/^FNAME_itch (mp_size_t nn, mp_size_t dn)$/;"	f
FNAME_itch	mpn/generic/sec_div.c	41;"	d	file:
FNAME_itch	mpn/generic/sec_div.c	47;"	d	file:
FNAME_itch	mpn/sec_add_1.c	/^FNAME_itch (mp_size_t n)$/;"	f
FNAME_itch	mpn/sec_add_1.c	38;"	d	file:
FNAME_itch	mpn/sec_add_1.c	43;"	d	file:
FNAME_itch	mpn/sec_div_qr.c	/^FNAME_itch (mp_size_t nn, mp_size_t dn)$/;"	f
FNAME_itch	mpn/sec_div_qr.c	41;"	d	file:
FNAME_itch	mpn/sec_div_qr.c	47;"	d	file:
FNAME_itch	mpn/sec_div_r.c	/^FNAME_itch (mp_size_t nn, mp_size_t dn)$/;"	f
FNAME_itch	mpn/sec_div_r.c	41;"	d	file:
FNAME_itch	mpn/sec_div_r.c	47;"	d	file:
FNAME_itch	mpn/sec_sub_1.c	/^FNAME_itch (mp_size_t n)$/;"	f
FNAME_itch	mpn/sec_sub_1.c	38;"	d	file:
FNAME_itch	mpn/sec_sub_1.c	43;"	d	file:
FORCE_DOUBLE	gmp-impl.h	3868;"	d
FORCE_DOUBLE	gmp-impl.h	3871;"	d
FORMAT_RECOGNIZED	mpn/generic/get_d.c	130;"	d	file:
FORMAT_RECOGNIZED	mpn/generic/get_d.c	304;"	d	file:
FORMAT_RECOGNIZED	mpn/generic/get_d.c	354;"	d	file:
FORMAT_RECOGNIZED	mpn/get_d.c	130;"	d	file:
FORMAT_RECOGNIZED	mpn/get_d.c	304;"	d	file:
FORMAT_RECOGNIZED	mpn/get_d.c	354;"	d	file:
FOR_ALL_BUILTIN	tests/cxx/t-ops3.cc	37;"	d	file:
FOR_ALL_GMPXX	tests/cxx/t-ops3.cc	45;"	d	file:
FOR_ALL_SIGNED_BUILTIN	tests/cxx/t-ops3.cc	29;"	d	file:
FRACTION_COUNT	tests/devel/try.c	200;"	d	file:
FREE_FUNC_LIMBS	demos/expr/expr.c	59;"	d	file:
FREE_FUNC_TYPE	demos/expr/expr.c	58;"	d	file:
FREQ_MEASURE_ONE	tune/speed.h	534;"	d
FSIZE	tests/devel/divmod_1.c	69;"	d	file:
FUDGE	mpn/div_q.c	91;"	d	file:
FUDGE	mpn/generic/div_q.c	91;"	d	file:
FUNCTION	mpf/fits_sint.c	32;"	d	file:
FUNCTION	mpf/fits_slong.c	32;"	d	file:
FUNCTION	mpf/fits_sshort.c	32;"	d	file:
FUNCTION	mpf/fits_uint.c	32;"	d	file:
FUNCTION	mpf/fits_ulong.c	32;"	d	file:
FUNCTION	mpf/fits_ushort.c	32;"	d	file:
FUNCTION	mpz/aors.h	/^FUNCTION (mpz_ptr w, mpz_srcptr u, mpz_srcptr v)$/;"	f
FUNCTION	mpz/aors.h	37;"	d
FUNCTION	mpz/aors.h	41;"	d
FUNCTION	mpz/aors_ui.h	/^FUNCTION (mpz_ptr w, mpz_srcptr u, unsigned long int vval)$/;"	f
FUNCTION	mpz/aors_ui.h	38;"	d
FUNCTION	mpz/aors_ui.h	46;"	d
FUNCTION	mpz/fits_sint.c	32;"	d	file:
FUNCTION	mpz/fits_slong.c	32;"	d	file:
FUNCTION	mpz/fits_sshort.c	32;"	d	file:
FUNCTION	mpz/mul_i.h	/^FUNCTION (mpz_ptr prod, mpz_srcptr mult,$/;"	f
FUNCTION	mpz/mul_i.h	38;"	d
FUNCTION	mpz/mul_i.h	44;"	d
FUNCTION2	mpz/aors_ui.h	39;"	d
FUNCTION2	mpz/aors_ui.h	47;"	d
FVECSIZ	tests/rand/stat.c	50;"	d	file:
GCC	Makefile	/^GCC=gcc$/;"	m
GCC	mpn/Makefile	/^GCC=gcc$/;"	m
GCD	demos/calc/calc.c	/^     GCD = 267,$/;"	e	enum:yytokentype	file:
GCD	demos/calc/calc.c	284;"	d	file:
GCD	demos/calc/calc.h	/^     GCD = 267,$/;"	e	enum:yytokentype
GCD	demos/calc/calc.h	89;"	d
GCD	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
GCDEXT_1_BINARY_METHOD	mpn/gcdext_1.c	40;"	d	file:
GCDEXT_1_BINARY_METHOD	mpn/generic/gcdext_1.c	40;"	d	file:
GCDEXT_1_USE_BINARY	mpn/gcdext_1.c	36;"	d	file:
GCDEXT_1_USE_BINARY	mpn/generic/gcdext_1.c	36;"	d	file:
GCDEXT_DC_THRESHOLD	gmp-impl.h	4287;"	d
GCDEXT_DC_THRESHOLD	gmp-impl.h	4916;"	d
GCDEXT_DC_THRESHOLD	gmp-impl.h	4917;"	d
GCDEXT_DC_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	178;"	d
GCDEXT_DC_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	200;"	d
GCDEXT_DC_THRESHOLD	mpn/alpha/gmp-mparam.h	60;"	d
GCDEXT_DC_THRESHOLD	mpn/arm/gmp-mparam.h	121;"	d
GCDEXT_DC_THRESHOLD	mpn/arm/v6/gmp-mparam.h	187;"	d
GCDEXT_DC_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	192;"	d
GCDEXT_DC_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	193;"	d
GCDEXT_DC_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	206;"	d
GCDEXT_DC_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	208;"	d
GCDEXT_DC_THRESHOLD	mpn/arm64/gmp-mparam.h	238;"	d
GCDEXT_DC_THRESHOLD	mpn/ia64/gmp-mparam.h	203;"	d
GCDEXT_DC_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	161;"	d
GCDEXT_DC_THRESHOLD	mpn/pa64/gmp-mparam.h	241;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	186;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc32/gmp-mparam.h	221;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	149;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	195;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	150;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	159;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	153;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	164;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	58;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	170;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	211;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	210;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	151;"	d
GCDEXT_DC_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	244;"	d
GCDEXT_DC_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	198;"	d
GCDEXT_DC_THRESHOLD	mpn/s390_32/gmp-mparam.h	132;"	d
GCDEXT_DC_THRESHOLD	mpn/s390_64/gmp-mparam.h	166;"	d
GCDEXT_DC_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	232;"	d
GCDEXT_DC_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	144;"	d
GCDEXT_DC_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	195;"	d
GCDEXT_DC_THRESHOLD	mpn/sparc64/gmp-mparam.h	133;"	d
GCDEXT_DC_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	221;"	d
GCDEXT_DC_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	145;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/atom/gmp-mparam.h	206;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	199;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	202;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	188;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/core2/gmp-mparam.h	191;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	201;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	215;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	194;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/geode/gmp-mparam.h	135;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/k10/gmp-mparam.h	205;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/k6/gmp-mparam.h	160;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/k7/gmp-mparam.h	252;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/k8/gmp-mparam.h	189;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/nano/gmp-mparam.h	156;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/p6/gmp-mparam.h	188;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	192;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	199;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	157;"	d
GCDEXT_DC_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	197;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	215;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	240;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	255;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	218;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	226;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	228;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	245;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	232;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	230;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/gmp-mparam.h	208;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	236;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	227;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	234;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	222;"	d
GCDEXT_DC_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	229;"	d
GCDEXT_SCHOENHAGE_THRESHOLD	mpn/minithres/gmp-mparam.h	104;"	d
GCDEXT_THRESHOLD	mpn/pa32/gmp-mparam.h	60;"	d
GCDEXT_THRESHOLD	tune/gcdext_double.c	35;"	d	file:
GCDEXT_THRESHOLD	tune/gcdext_double.c	36;"	d	file:
GCDEXT_THRESHOLD	tune/gcdext_single.c	35;"	d	file:
GCDEXT_THRESHOLD	tune/gcdext_single.c	36;"	d	file:
GCDEXT_THRESHOLD	tune/gcdextod.c	35;"	d	file:
GCDEXT_THRESHOLD	tune/gcdextod.c	36;"	d	file:
GCDEXT_THRESHOLD	tune/gcdextos.c	35;"	d	file:
GCDEXT_THRESHOLD	tune/gcdextos.c	36;"	d	file:
GCD_1_METHOD	mpn/gcd_1.c	36;"	d	file:
GCD_1_METHOD	mpn/generic/gcd_1.c	36;"	d	file:
GCD_ACCEL_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	48;"	d
GCD_ACCEL_THRESHOLD	mpn/cray/gmp-mparam.h	55;"	d
GCD_ACCEL_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	49;"	d
GCD_ACCEL_THRESHOLD	mpn/m68k/gmp-mparam.h	52;"	d
GCD_ACCEL_THRESHOLD	mpn/mips32/gmp-mparam.h	49;"	d
GCD_ACCEL_THRESHOLD	mpn/mips64/gmp-mparam.h	50;"	d
GCD_ACCEL_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	48;"	d
GCD_ACCEL_THRESHOLD	mpn/power/gmp-mparam.h	45;"	d
GCD_ACCEL_THRESHOLD	mpn/sparc32/gmp-mparam.h	44;"	d
GCD_ACCEL_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	49;"	d
GCD_ACCEL_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	49;"	d
GCD_ACCEL_THRESHOLD	mpn/x86/i486/gmp-mparam.h	50;"	d
GCD_ACCEL_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	56;"	d
GCD_DC_THRESHOLD	gmp-impl.h	4283;"	d
GCD_DC_THRESHOLD	gmp-impl.h	4912;"	d
GCD_DC_THRESHOLD	gmp-impl.h	4913;"	d
GCD_DC_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	177;"	d
GCD_DC_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	199;"	d
GCD_DC_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	49;"	d
GCD_DC_THRESHOLD	mpn/alpha/gmp-mparam.h	59;"	d
GCD_DC_THRESHOLD	mpn/arm/gmp-mparam.h	120;"	d
GCD_DC_THRESHOLD	mpn/arm/v6/gmp-mparam.h	186;"	d
GCD_DC_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	191;"	d
GCD_DC_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	192;"	d
GCD_DC_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	205;"	d
GCD_DC_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	207;"	d
GCD_DC_THRESHOLD	mpn/arm64/gmp-mparam.h	237;"	d
GCD_DC_THRESHOLD	mpn/cray/gmp-mparam.h	56;"	d
GCD_DC_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	50;"	d
GCD_DC_THRESHOLD	mpn/ia64/gmp-mparam.h	202;"	d
GCD_DC_THRESHOLD	mpn/m68k/gmp-mparam.h	53;"	d
GCD_DC_THRESHOLD	mpn/minithres/gmp-mparam.h	103;"	d
GCD_DC_THRESHOLD	mpn/mips64/gmp-mparam.h	51;"	d
GCD_DC_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	49;"	d
GCD_DC_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	160;"	d
GCD_DC_THRESHOLD	mpn/pa64/gmp-mparam.h	240;"	d
GCD_DC_THRESHOLD	mpn/power/gmp-mparam.h	46;"	d
GCD_DC_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	185;"	d
GCD_DC_THRESHOLD	mpn/powerpc32/gmp-mparam.h	220;"	d
GCD_DC_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	148;"	d
GCD_DC_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	194;"	d
GCD_DC_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	149;"	d
GCD_DC_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	158;"	d
GCD_DC_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	152;"	d
GCD_DC_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	163;"	d
GCD_DC_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	57;"	d
GCD_DC_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	169;"	d
GCD_DC_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	210;"	d
GCD_DC_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	209;"	d
GCD_DC_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	150;"	d
GCD_DC_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	243;"	d
GCD_DC_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	197;"	d
GCD_DC_THRESHOLD	mpn/s390_32/gmp-mparam.h	131;"	d
GCD_DC_THRESHOLD	mpn/s390_64/gmp-mparam.h	165;"	d
GCD_DC_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	231;"	d
GCD_DC_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	143;"	d
GCD_DC_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	50;"	d
GCD_DC_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	50;"	d
GCD_DC_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	194;"	d
GCD_DC_THRESHOLD	mpn/sparc64/gmp-mparam.h	132;"	d
GCD_DC_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	220;"	d
GCD_DC_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	144;"	d
GCD_DC_THRESHOLD	mpn/x86/atom/gmp-mparam.h	205;"	d
GCD_DC_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	198;"	d
GCD_DC_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	201;"	d
GCD_DC_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	187;"	d
GCD_DC_THRESHOLD	mpn/x86/core2/gmp-mparam.h	190;"	d
GCD_DC_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	200;"	d
GCD_DC_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	214;"	d
GCD_DC_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	193;"	d
GCD_DC_THRESHOLD	mpn/x86/geode/gmp-mparam.h	134;"	d
GCD_DC_THRESHOLD	mpn/x86/k10/gmp-mparam.h	204;"	d
GCD_DC_THRESHOLD	mpn/x86/k6/gmp-mparam.h	159;"	d
GCD_DC_THRESHOLD	mpn/x86/k7/gmp-mparam.h	251;"	d
GCD_DC_THRESHOLD	mpn/x86/k8/gmp-mparam.h	188;"	d
GCD_DC_THRESHOLD	mpn/x86/nano/gmp-mparam.h	155;"	d
GCD_DC_THRESHOLD	mpn/x86/p6/gmp-mparam.h	187;"	d
GCD_DC_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	191;"	d
GCD_DC_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	198;"	d
GCD_DC_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	57;"	d
GCD_DC_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	156;"	d
GCD_DC_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	196;"	d
GCD_DC_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	214;"	d
GCD_DC_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	239;"	d
GCD_DC_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	254;"	d
GCD_DC_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	217;"	d
GCD_DC_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	225;"	d
GCD_DC_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	227;"	d
GCD_DC_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	244;"	d
GCD_DC_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	231;"	d
GCD_DC_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	229;"	d
GCD_DC_THRESHOLD	mpn/x86_64/gmp-mparam.h	207;"	d
GCD_DC_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	235;"	d
GCD_DC_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	226;"	d
GCD_DC_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	233;"	d
GCD_DC_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	221;"	d
GCD_DC_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	228;"	d
GE	demos/calc/calc.c	/^     GE = 279,$/;"	e	enum:yytokentype	file:
GE	demos/calc/calc.c	296;"	d	file:
GE	demos/calc/calc.h	/^     GE = 279,$/;"	e	enum:yytokentype
GE	demos/calc/calc.h	101;"	d
GET	scanf/doscan.c	197;"	d	file:
GET_STR_DC_THRESHOLD	gmp-impl.h	2314;"	d
GET_STR_DC_THRESHOLD	gmp-impl.h	4986;"	d
GET_STR_DC_THRESHOLD	gmp-impl.h	4987;"	d
GET_STR_DC_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	181;"	d
GET_STR_DC_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	203;"	d
GET_STR_DC_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	62;"	d
GET_STR_DC_THRESHOLD	mpn/alpha/gmp-mparam.h	75;"	d
GET_STR_DC_THRESHOLD	mpn/arm/gmp-mparam.h	124;"	d
GET_STR_DC_THRESHOLD	mpn/arm/v6/gmp-mparam.h	174;"	d
GET_STR_DC_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	179;"	d
GET_STR_DC_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	180;"	d
GET_STR_DC_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	193;"	d
GET_STR_DC_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	195;"	d
GET_STR_DC_THRESHOLD	mpn/arm64/gmp-mparam.h	225;"	d
GET_STR_DC_THRESHOLD	mpn/cray/gmp-mparam.h	69;"	d
GET_STR_DC_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	63;"	d
GET_STR_DC_THRESHOLD	mpn/ia64/gmp-mparam.h	190;"	d
GET_STR_DC_THRESHOLD	mpn/m68k/gmp-mparam.h	66;"	d
GET_STR_DC_THRESHOLD	mpn/minithres/gmp-mparam.h	107;"	d
GET_STR_DC_THRESHOLD	mpn/mips32/gmp-mparam.h	62;"	d
GET_STR_DC_THRESHOLD	mpn/mips64/gmp-mparam.h	62;"	d
GET_STR_DC_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	62;"	d
GET_STR_DC_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	164;"	d
GET_STR_DC_THRESHOLD	mpn/pa64/gmp-mparam.h	244;"	d
GET_STR_DC_THRESHOLD	mpn/power/gmp-mparam.h	59;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	189;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc32/gmp-mparam.h	208;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	152;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	198;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	153;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	162;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	156;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	167;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	71;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	173;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	198;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	213;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	154;"	d
GET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	231;"	d
GET_STR_DC_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	201;"	d
GET_STR_DC_THRESHOLD	mpn/s390_32/gmp-mparam.h	135;"	d
GET_STR_DC_THRESHOLD	mpn/s390_64/gmp-mparam.h	169;"	d
GET_STR_DC_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	219;"	d
GET_STR_DC_THRESHOLD	mpn/sparc32/gmp-mparam.h	57;"	d
GET_STR_DC_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	147;"	d
GET_STR_DC_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	63;"	d
GET_STR_DC_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	63;"	d
GET_STR_DC_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	198;"	d
GET_STR_DC_THRESHOLD	mpn/sparc64/gmp-mparam.h	136;"	d
GET_STR_DC_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	208;"	d
GET_STR_DC_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	148;"	d
GET_STR_DC_THRESHOLD	mpn/x86/atom/gmp-mparam.h	193;"	d
GET_STR_DC_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	202;"	d
GET_STR_DC_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	205;"	d
GET_STR_DC_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	191;"	d
GET_STR_DC_THRESHOLD	mpn/x86/core2/gmp-mparam.h	194;"	d
GET_STR_DC_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	204;"	d
GET_STR_DC_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	218;"	d
GET_STR_DC_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	197;"	d
GET_STR_DC_THRESHOLD	mpn/x86/geode/gmp-mparam.h	138;"	d
GET_STR_DC_THRESHOLD	mpn/x86/i486/gmp-mparam.h	59;"	d
GET_STR_DC_THRESHOLD	mpn/x86/k10/gmp-mparam.h	208;"	d
GET_STR_DC_THRESHOLD	mpn/x86/k6/gmp-mparam.h	163;"	d
GET_STR_DC_THRESHOLD	mpn/x86/k7/gmp-mparam.h	239;"	d
GET_STR_DC_THRESHOLD	mpn/x86/k8/gmp-mparam.h	192;"	d
GET_STR_DC_THRESHOLD	mpn/x86/nano/gmp-mparam.h	159;"	d
GET_STR_DC_THRESHOLD	mpn/x86/p6/gmp-mparam.h	191;"	d
GET_STR_DC_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	195;"	d
GET_STR_DC_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	186;"	d
GET_STR_DC_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	66;"	d
GET_STR_DC_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	160;"	d
GET_STR_DC_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	200;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	202;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	227;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	242;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	205;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	213;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	215;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	232;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	219;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	217;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/gmp-mparam.h	211;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	223;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	230;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	237;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	225;"	d
GET_STR_DC_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	216;"	d
GET_STR_PRECOMPUTE_THRESHOLD	gmp-impl.h	2318;"	d
GET_STR_PRECOMPUTE_THRESHOLD	gmp-impl.h	4990;"	d
GET_STR_PRECOMPUTE_THRESHOLD	gmp-impl.h	4991;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	182;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	204;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	63;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/alpha/gmp-mparam.h	76;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/gmp-mparam.h	125;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v6/gmp-mparam.h	175;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	180;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	181;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	194;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	196;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/arm64/gmp-mparam.h	226;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/cray/gmp-mparam.h	70;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	64;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/ia64/gmp-mparam.h	191;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/m68k/gmp-mparam.h	67;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/minithres/gmp-mparam.h	108;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/mips32/gmp-mparam.h	63;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/mips64/gmp-mparam.h	63;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	63;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	165;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/pa64/gmp-mparam.h	245;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/power/gmp-mparam.h	60;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	190;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/gmp-mparam.h	209;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	153;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	199;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	154;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	163;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	157;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	168;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	72;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	174;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	199;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	214;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	155;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	232;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	202;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/s390_32/gmp-mparam.h	136;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/s390_64/gmp-mparam.h	170;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	220;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc32/gmp-mparam.h	58;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	148;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	64;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	64;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	199;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc64/gmp-mparam.h	137;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	209;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	149;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/atom/gmp-mparam.h	194;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	203;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	206;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	192;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/core2/gmp-mparam.h	195;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	205;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	219;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	198;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/geode/gmp-mparam.h	139;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/i486/gmp-mparam.h	60;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/k10/gmp-mparam.h	209;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/k6/gmp-mparam.h	164;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/k7/gmp-mparam.h	240;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/k8/gmp-mparam.h	193;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/nano/gmp-mparam.h	160;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/p6/gmp-mparam.h	192;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	196;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	187;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	67;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	161;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	201;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	203;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	228;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	243;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	206;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	214;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	216;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	233;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	220;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	218;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/gmp-mparam.h	212;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	224;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	231;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	238;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	226;"	d
GET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	217;"	d
GET_STR_THRESHOLD_LIMIT	gmp-impl.h	5036;"	d
GMP	demos/perl/GMP.pm	/^package GMP;$/;"	p
GMP::Mpf	demos/perl/GMP/Mpf.pm	/^package GMP::Mpf;$/;"	p
GMP::Mpq	demos/perl/GMP/Mpq.pm	/^package GMP::Mpq;$/;"	p
GMP::Mpz	demos/perl/GMP/Mpz.pm	/^package GMP::Mpz;$/;"	p
GMP::Rand	demos/perl/GMP/Rand.pm	/^package GMP::Rand;$/;"	p
GMPN_MULWW	mpn/cray/cfp/mulwwc90.s	/^GMPN_MULWW  =               P.*$/;"	d
GMPN_MULWW	mpn/cray/cfp/mulwwj90.s	/^GMPN_MULWW  =               P.*$/;"	d
GMPXX_INSTANTIATE_LIMITS	cxx/limits.cc	34;"	d	file:
GMP_ABS	mini-gmp/mini-gmp.c	66;"	d	file:
GMP_ASPRINTF_T_INIT	gmp-impl.h	4449;"	d
GMP_ASPRINTF_T_NEED	gmp-impl.h	4459;"	d
GMP_CMP	mini-gmp/mini-gmp.c	72;"	d	file:
GMP_DECIMAL_POINT	gmp-impl.h	4375;"	d
GMP_DECIMAL_POINT	gmp-impl.h	4379;"	d
GMP_DECIMAL_POINT	gmp-impl.h	4383;"	d
GMP_DECIMAL_POINT	gmp-impl.h	4386;"	d
GMP_DIV_CEIL	mini-gmp/mini-gmp.c	/^enum mpz_div_round_mode { GMP_DIV_FLOOR, GMP_DIV_CEIL, GMP_DIV_TRUNC };$/;"	e	enum:mpz_div_round_mode	file:
GMP_DIV_FLOOR	mini-gmp/mini-gmp.c	/^enum mpz_div_round_mode { GMP_DIV_FLOOR, GMP_DIV_CEIL, GMP_DIV_TRUNC };$/;"	e	enum:mpz_div_round_mode	file:
GMP_DIV_TRUNC	mini-gmp/mini-gmp.c	/^enum mpz_div_round_mode { GMP_DIV_FLOOR, GMP_DIV_CEIL, GMP_DIV_TRUNC };$/;"	e	enum:mpz_div_round_mode	file:
GMP_ERROR	gmp-impl.h	3883;"	d
GMP_ERROR_DIVISION_BY_ZERO	gmp.h	/^  GMP_ERROR_DIVISION_BY_ZERO = 2,$/;"	e	enum:__anon10
GMP_ERROR_INVALID_ARGUMENT	gmp.h	/^  GMP_ERROR_INVALID_ARGUMENT = 8$/;"	e	enum:__anon10
GMP_ERROR_NONE	gmp.h	/^  GMP_ERROR_NONE = 0,$/;"	e	enum:__anon10
GMP_ERROR_SQRT_OF_NEGATIVE	gmp.h	/^  GMP_ERROR_SQRT_OF_NEGATIVE = 4,$/;"	e	enum:__anon10
GMP_ERROR_UNSUPPORTED_ARGUMENT	gmp.h	/^  GMP_ERROR_UNSUPPORTED_ARGUMENT = 1,$/;"	e	enum:__anon10
GMP_HLIMB_BIT	mini-gmp/mini-gmp.c	60;"	d	file:
GMP_LIMB_BITS	gmp-impl.h	224;"	d
GMP_LIMB_BITS	gmp.h	43;"	d
GMP_LIMB_BITS	mini-gmp/mini-gmp.c	55;"	d	file:
GMP_LIMB_BITS	mini-gmp/tests/t-aorsmul.c	30;"	d	file:
GMP_LIMB_BITS	mini-gmp/tests/t-double.c	28;"	d	file:
GMP_LIMB_BITS	mini-gmp/tests/t-invert.c	27;"	d	file:
GMP_LIMB_BITS	mini-gmp/tests/t-mul.c	30;"	d	file:
GMP_LIMB_BITS	mini-gmp/tests/t-str.c	31;"	d	file:
GMP_LIMB_BITS	mpn/alpha/ev5/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/alpha/ev6/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/alpha/ev6/nails/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/alpha/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/arm/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/arm/v6/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/arm/v7a/cora15/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/arm/v7a/cora7/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/arm/v7a/cora8/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/arm/v7a/cora9/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/arm64/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/cray/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/cray/ieee/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/ia64/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/m68k/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/mips32/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/mips64/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/pa32/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/pa32/hppa1_1/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/pa32/hppa2_0/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/pa64/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc32/750/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc32/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/powerpc32/p3/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc32/p5/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc32/p6/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc32/p7/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc64/mode64/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc64/mode64/p3/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc64/mode64/p4/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc64/mode64/p5/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/powerpc64/mode64/p6/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/powerpc64/mode64/p7/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/s390_32/esame/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/s390_32/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/s390_64/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/s390_64/z10/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/sparc32/v8/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/sparc32/v8/supersparc/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/sparc32/v9/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/sparc64/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/sparc64/ultrasparc34/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/sparc64/ultrasparct1/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86/atom/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/bd1/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86/bd2/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86/bobcat/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/core2/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/coreihwl/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/coreinhm/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/coreisbr/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/fat/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/geode/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/i486/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/k10/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/k6/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86/k7/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86/k8/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/nano/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86/p6/gmp-mparam.h	33;"	d
GMP_LIMB_BITS	mpn/x86/p6/mmx/gmp-mparam.h	33;"	d
GMP_LIMB_BITS	mpn/x86/p6/sse2/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86/pentium/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86/pentium/mmx/gmp-mparam.h	33;"	d
GMP_LIMB_BITS	mpn/x86/pentium4/sse2/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/atom/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/bd1/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/bd2/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/bobcat/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/core2/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/coreibwl/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86_64/coreihwl/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86_64/coreinhm/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/coreisbr/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86_64/fat/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86_64/k10/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/k8/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86_64/nano/gmp-mparam.h	32;"	d
GMP_LIMB_BITS	mpn/x86_64/pentium4/gmp-mparam.h	31;"	d
GMP_LIMB_BITS	mpn/x86_64/skylake/gmp-mparam.h	31;"	d
GMP_LIMB_BYTES	gmp-impl.h	221;"	d
GMP_LIMB_BYTES	mpn/alpha/ev5/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/alpha/ev6/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/alpha/ev6/nails/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/alpha/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/arm/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/arm/v6/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/arm/v7a/cora15/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/arm/v7a/cora7/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/arm/v7a/cora8/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/arm/v7a/cora9/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/arm64/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/cray/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/cray/ieee/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/ia64/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/m68k/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/mips32/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/mips64/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/pa32/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/pa32/hppa1_1/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/pa32/hppa2_0/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/pa64/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc32/750/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc32/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/powerpc32/p3/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc32/p5/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc32/p6/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc32/p7/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc64/mode64/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc64/mode64/p3/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc64/mode64/p4/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc64/mode64/p5/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/powerpc64/mode64/p6/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/powerpc64/mode64/p7/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/s390_32/esame/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/s390_32/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/s390_64/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/s390_64/z10/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/sparc32/v8/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/sparc32/v8/supersparc/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/sparc32/v9/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/sparc64/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/sparc64/ultrasparc34/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/sparc64/ultrasparct1/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86/atom/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/bd1/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86/bd2/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86/bobcat/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/core2/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/coreihwl/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/coreinhm/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/coreisbr/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/fat/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/geode/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/i486/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/k10/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/k6/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86/k7/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86/k8/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/nano/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86/p6/gmp-mparam.h	34;"	d
GMP_LIMB_BYTES	mpn/x86/p6/mmx/gmp-mparam.h	34;"	d
GMP_LIMB_BYTES	mpn/x86/p6/sse2/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86/pentium/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86/pentium/mmx/gmp-mparam.h	34;"	d
GMP_LIMB_BYTES	mpn/x86/pentium4/sse2/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/atom/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/bd1/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/bd2/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/bobcat/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/core2/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/coreibwl/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86_64/coreihwl/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86_64/coreinhm/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/coreisbr/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86_64/fat/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86_64/k10/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/k8/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86_64/nano/gmp-mparam.h	33;"	d
GMP_LIMB_BYTES	mpn/x86_64/pentium4/gmp-mparam.h	32;"	d
GMP_LIMB_BYTES	mpn/x86_64/skylake/gmp-mparam.h	32;"	d
GMP_LIMB_HIGHBIT	gmp-impl.h	573;"	d
GMP_LIMB_HIGHBIT	mini-gmp/mini-gmp.c	58;"	d	file:
GMP_LIMB_MAX	mini-gmp/mini-gmp.c	57;"	d	file:
GMP_LLIMB_MASK	mini-gmp/mini-gmp.c	61;"	d	file:
GMP_MAX	mini-gmp/mini-gmp.c	70;"	d	file:
GMP_MIN	mini-gmp/mini-gmp.c	69;"	d	file:
GMP_MPARAM_H_SUGGEST	config.h	40;"	d
GMP_NAIL_BITS	gmp.h	44;"	d
GMP_NAIL_LOWBIT	gmp-impl.h	595;"	d
GMP_NAIL_LOWBIT	gmp-impl.h	597;"	d
GMP_NAIL_MASK	gmp.h	49;"	d
GMP_NEG_CAST	mini-gmp/mini-gmp.c	67;"	d	file:
GMP_NUMB_0xAA	tune/speed.c	95;"	d	file:
GMP_NUMB_0xAA	tune/speed.c	98;"	d	file:
GMP_NUMB_BITS	gmp.h	46;"	d
GMP_NUMB_CEIL_2MAX_DIV3	gmp-impl.h	3293;"	d
GMP_NUMB_CEIL_MAX_DIV3	gmp-impl.h	3292;"	d
GMP_NUMB_HALFMASK	tune/tuneup.c	309;"	d	file:
GMP_NUMB_HALFMAX	mpz/n_pow_ui.c	87;"	d	file:
GMP_NUMB_HIGHBIT	gmp-impl.h	592;"	d
GMP_NUMB_MASK	gmp.h	47;"	d
GMP_NUMB_MAX	gmp.h	48;"	d
GMP_PRIME_MASK	mini-gmp/mini-gmp.c	3407;"	d	file:
GMP_PRIME_PRODUCT	mini-gmp/mini-gmp.c	3403;"	d	file:
GMP_RAND_ALG_DEFAULT	gmp.h	/^  GMP_RAND_ALG_DEFAULT = 0,$/;"	e	enum:__anon7
GMP_RAND_ALG_LC	gmp.h	/^  GMP_RAND_ALG_LC = GMP_RAND_ALG_DEFAULT \/* Linear congruential.  *\/$/;"	e	enum:__anon7
GMP_SPECT_MAXT	tests/rand/gmpstat.h	32;"	d
GMP_ULONG_BITS	mini-gmp/mini-gmp.c	63;"	d	file:
GMP_ULONG_HIGHBIT	mini-gmp/mini-gmp.c	64;"	d	file:
GOT_CALLEE_SAVES	tests/arm32check.c	67;"	d	file:
HALF_ENDIAN_ADJ	mpn/sparc64/sparc64.h	44;"	d
HALF_ENDIAN_ADJ	mpn/sparc64/sparc64.h	47;"	d
HAMDIST	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
HANDLE_NEGATIVE_EXPONENT	mpz/powm.c	60;"	d	file:
HAVE_ALARM	config.h	43;"	d
HAVE_ALLOCA	config.h	46;"	d
HAVE_ALLOCA_H	config.h	50;"	d
HAVE_ATTRIBUTE_CONST	config.h	53;"	d
HAVE_ATTRIBUTE_MALLOC	config.h	56;"	d
HAVE_ATTRIBUTE_MODE	config.h	60;"	d
HAVE_ATTRIBUTE_NORETURN	config.h	63;"	d
HAVE_CLOCK	config.h	73;"	d
HAVE_CLOCK_GETTIME	config.h	76;"	d
HAVE_CONST	gen-psqr.c	90;"	d	file:
HAVE_DECL_FGETC	config.h	83;"	d
HAVE_DECL_FSCANF	config.h	87;"	d
HAVE_DECL_OPTARG	config.h	91;"	d
HAVE_DECL_SYS_ERRLIST	config.h	95;"	d
HAVE_DECL_SYS_NERR	config.h	99;"	d
HAVE_DECL_UNGETC	config.h	103;"	d
HAVE_DECL_VFPRINTF	config.h	107;"	d
HAVE_DLFCN_H	config.h	110;"	d
HAVE_DOUBLE_IEEE_LITTLE_ENDIAN	config.h	118;"	d
HAVE_FCNTL_H	config.h	125;"	d
HAVE_FLOAT_H	config.h	128;"	d
HAVE_GETPAGESIZE	config.h	131;"	d
HAVE_GETRUSAGE	config.h	134;"	d
HAVE_GETTIMEOFDAY	config.h	140;"	d
HAVE_HIDDEN_ALIAS	config.h	144;"	d
HAVE_HOST_CPU_alpha_CIX	gmp-impl.h	317;"	d
HAVE_INTMAX_T	config.h	189;"	d
HAVE_INTPTR_T	config.h	192;"	d
HAVE_INTTYPES_H	config.h	195;"	d
HAVE_LANGINFO_H	config.h	201;"	d
HAVE_LIMB_LITTLE_ENDIAN	config.h	207;"	d
HAVE_LOCALECONV	config.h	210;"	d
HAVE_LOCALE_H	config.h	213;"	d
HAVE_LONG_DOUBLE	config.h	216;"	d
HAVE_LONG_LONG	config.h	219;"	d
HAVE_MEMORY_H	config.h	225;"	d
HAVE_MEMSET	config.h	228;"	d
HAVE_MMAP	config.h	231;"	d
HAVE_MPROTECT	config.h	234;"	d
HAVE_NATIVE_mpn_add_n_sub_n	mpn/generic/mul_fft.c	74;"	d	file:
HAVE_NATIVE_mpn_add_n_sub_n	mpn/mul_fft.c	74;"	d	file:
HAVE_NATIVE_mpn_addlsh1_n	gmp-impl.h	1576;"	d
HAVE_NATIVE_mpn_addlsh1_n_ip1	gmp-impl.h	850;"	d
HAVE_NATIVE_mpn_addlsh1_nc_ip1	gmp-impl.h	857;"	d
HAVE_NATIVE_mpn_addlsh2_n	gmp-impl.h	1582;"	d
HAVE_NATIVE_mpn_addlsh2_n_ip1	gmp-impl.h	873;"	d
HAVE_NATIVE_mpn_addlsh2_nc_ip1	gmp-impl.h	880;"	d
HAVE_NATIVE_mpn_addlsh_n	mpn/x86_64/pentium4/gmp-mparam.h	38;"	d
HAVE_NATIVE_mpn_addlsh_n_ip1	gmp-impl.h	894;"	d
HAVE_NATIVE_mpn_addlsh_nc_ip1	gmp-impl.h	901;"	d
HAVE_NATIVE_mpn_addmul_2	mpn/x86_64/bobcat/gmp-mparam.h	37;"	d
HAVE_NATIVE_mpn_addmul_2	mpn/x86_64/coreibwl/gmp-mparam.h	36;"	d
HAVE_NATIVE_mpn_addmul_2	mpn/x86_64/skylake/gmp-mparam.h	36;"	d
HAVE_NATIVE_mpn_and_n	tests/mpn/logic.c	29;"	d	file:
HAVE_NATIVE_mpn_andn_n	tests/mpn/logic.c	30;"	d	file:
HAVE_NATIVE_mpn_com	tests/mpn/logic.c	28;"	d	file:
HAVE_NATIVE_mpn_div_qr_1n_pi1	tune/tuneup.c	270;"	d	file:
HAVE_NATIVE_mpn_divexact_1	tune/tuneup.c	267;"	d	file:
HAVE_NATIVE_mpn_divrem_1	tune/tuneup.c	273;"	d	file:
HAVE_NATIVE_mpn_divrem_2	tune/tuneup.c	276;"	d	file:
HAVE_NATIVE_mpn_ior_n	tests/mpn/logic.c	32;"	d	file:
HAVE_NATIVE_mpn_iorn_n	tests/mpn/logic.c	33;"	d	file:
HAVE_NATIVE_mpn_mod_1	tune/tuneup.c	279;"	d	file:
HAVE_NATIVE_mpn_mod_1_1p	tune/tuneup.c	282;"	d	file:
HAVE_NATIVE_mpn_modexact_1_odd	tune/tuneup.c	285;"	d	file:
HAVE_NATIVE_mpn_mul_2	mpn/x86_64/bobcat/gmp-mparam.h	36;"	d
HAVE_NATIVE_mpn_mul_2	mpn/x86_64/coreibwl/gmp-mparam.h	35;"	d
HAVE_NATIVE_mpn_mul_2	mpn/x86_64/skylake/gmp-mparam.h	35;"	d
HAVE_NATIVE_mpn_nand_n	tests/mpn/logic.c	31;"	d	file:
HAVE_NATIVE_mpn_nior_n	tests/mpn/logic.c	34;"	d	file:
HAVE_NATIVE_mpn_preinv_divrem_1	tune/tuneup.c	288;"	d	file:
HAVE_NATIVE_mpn_preinv_mod_1	tune/tuneup.c	291;"	d	file:
HAVE_NATIVE_mpn_rsblsh1_n	gmp-impl.h	1600;"	d
HAVE_NATIVE_mpn_rsblsh1_n	mpn/x86_64/pentium4/gmp-mparam.h	36;"	d
HAVE_NATIVE_mpn_rsblsh2_n	gmp-impl.h	1606;"	d
HAVE_NATIVE_mpn_rsblsh2_n	mpn/x86_64/pentium4/gmp-mparam.h	37;"	d
HAVE_NATIVE_mpn_rsblsh_n	mpn/x86_64/pentium4/gmp-mparam.h	39;"	d
HAVE_NATIVE_mpn_sqr_basecase	tune/tuneup.c	294;"	d	file:
HAVE_NATIVE_mpn_sublsh1_n	gmp-impl.h	1588;"	d
HAVE_NATIVE_mpn_sublsh1_n_ip1	gmp-impl.h	917;"	d
HAVE_NATIVE_mpn_sublsh1_nc_ip1	gmp-impl.h	924;"	d
HAVE_NATIVE_mpn_sublsh2_n	gmp-impl.h	1594;"	d
HAVE_NATIVE_mpn_sublsh2_n_ip1	gmp-impl.h	945;"	d
HAVE_NATIVE_mpn_sublsh2_nc_ip1	gmp-impl.h	952;"	d
HAVE_NATIVE_mpn_sublsh_n_ip1	gmp-impl.h	964;"	d
HAVE_NATIVE_mpn_sublsh_nc_ip1	gmp-impl.h	971;"	d
HAVE_NATIVE_mpn_xnor_n	tests/mpn/logic.c	36;"	d	file:
HAVE_NATIVE_mpn_xor_n	tests/mpn/logic.c	35;"	d	file:
HAVE_NL_LANGINFO	config.h	356;"	d
HAVE_NL_TYPES_H	config.h	359;"	d
HAVE_OBSTACK_VPRINTF	config.h	362;"	d
HAVE_POPEN	config.h	365;"	d
HAVE_PTRDIFF_T	config.h	378;"	d
HAVE_QUAD_T	config.h	381;"	d
HAVE_RAISE	config.h	384;"	d
HAVE_SIGACTION	config.h	390;"	d
HAVE_SIGALTSTACK	config.h	393;"	d
HAVE_SIGSTACK	config.h	396;"	d
HAVE_STACK_T	config.h	405;"	d
HAVE_STDINT_H	config.h	408;"	d
HAVE_STDLIB_H	config.h	411;"	d
HAVE_STRCHR	config.h	417;"	d
HAVE_STRERROR	config.h	420;"	d
HAVE_STRINGS_H	config.h	423;"	d
HAVE_STRING_H	config.h	426;"	d
HAVE_STRNLEN	config.h	429;"	d
HAVE_STRTOL	config.h	432;"	d
HAVE_STRTOUL	config.h	435;"	d
HAVE_SYSCONF	config.h	438;"	d
HAVE_SYSCTL	config.h	441;"	d
HAVE_SYS_MMAN_H	config.h	456;"	d
HAVE_SYS_PARAM_H	config.h	459;"	d
HAVE_SYS_RESOURCE_H	config.h	468;"	d
HAVE_SYS_STAT_H	config.h	471;"	d
HAVE_SYS_SYSCTL_H	config.h	474;"	d
HAVE_SYS_SYSINFO_H	config.h	477;"	d
HAVE_SYS_TIMES_H	config.h	486;"	d
HAVE_SYS_TIME_H	config.h	489;"	d
HAVE_SYS_TYPES_H	config.h	492;"	d
HAVE_TIMES	config.h	495;"	d
HAVE_UINT_LEAST32_T	config.h	498;"	d
HAVE_UNISTD_H	config.h	501;"	d
HAVE_VSNPRINTF	config.h	504;"	d
HELP	demos/calc/calc.c	/^     HELP = 260,$/;"	e	enum:yytokentype	file:
HELP	demos/calc/calc.c	277;"	d	file:
HELP	demos/calc/calc.h	/^     HELP = 260,$/;"	e	enum:yytokentype
HELP	demos/calc/calc.h	82;"	d
HELP	tune/freq.c	146;"	d	file:
HEX	demos/calc/calc.c	/^     HEX = 261,$/;"	e	enum:yytokentype	file:
HEX	demos/calc/calc.c	278;"	d	file:
HEX	demos/calc/calc.h	/^     HEX = 261,$/;"	e	enum:yytokentype
HEX	demos/calc/calc.h	83;"	d
HGCD_APPR_THRESHOLD	gmp-impl.h	4275;"	d
HGCD_APPR_THRESHOLD	gmp-impl.h	4904;"	d
HGCD_APPR_THRESHOLD	gmp-impl.h	4905;"	d
HGCD_APPR_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	175;"	d
HGCD_APPR_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	197;"	d
HGCD_APPR_THRESHOLD	mpn/arm/v6/gmp-mparam.h	184;"	d
HGCD_APPR_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	189;"	d
HGCD_APPR_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	190;"	d
HGCD_APPR_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	203;"	d
HGCD_APPR_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	205;"	d
HGCD_APPR_THRESHOLD	mpn/arm64/gmp-mparam.h	235;"	d
HGCD_APPR_THRESHOLD	mpn/ia64/gmp-mparam.h	200;"	d
HGCD_APPR_THRESHOLD	mpn/pa64/gmp-mparam.h	238;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc32/gmp-mparam.h	218;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	192;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	147;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	156;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	150;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	161;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	167;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	208;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	207;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	148;"	d
HGCD_APPR_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	241;"	d
HGCD_APPR_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	195;"	d
HGCD_APPR_THRESHOLD	mpn/s390_64/gmp-mparam.h	163;"	d
HGCD_APPR_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	229;"	d
HGCD_APPR_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	141;"	d
HGCD_APPR_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	192;"	d
HGCD_APPR_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	218;"	d
HGCD_APPR_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	142;"	d
HGCD_APPR_THRESHOLD	mpn/x86/atom/gmp-mparam.h	203;"	d
HGCD_APPR_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	196;"	d
HGCD_APPR_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	199;"	d
HGCD_APPR_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	185;"	d
HGCD_APPR_THRESHOLD	mpn/x86/core2/gmp-mparam.h	188;"	d
HGCD_APPR_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	198;"	d
HGCD_APPR_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	212;"	d
HGCD_APPR_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	191;"	d
HGCD_APPR_THRESHOLD	mpn/x86/k10/gmp-mparam.h	202;"	d
HGCD_APPR_THRESHOLD	mpn/x86/k7/gmp-mparam.h	249;"	d
HGCD_APPR_THRESHOLD	mpn/x86/k8/gmp-mparam.h	186;"	d
HGCD_APPR_THRESHOLD	mpn/x86/nano/gmp-mparam.h	153;"	d
HGCD_APPR_THRESHOLD	mpn/x86/p6/gmp-mparam.h	185;"	d
HGCD_APPR_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	196;"	d
HGCD_APPR_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	194;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	212;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	237;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	252;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	215;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	223;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	225;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	242;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	229;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	227;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/gmp-mparam.h	205;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	233;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	224;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	231;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	219;"	d
HGCD_APPR_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	226;"	d
HGCD_APPR_THRESHOLD	tune/hgcd_appr_lehmer.c	35;"	d	file:
HGCD_APPR_THRESHOLD	tune/hgcd_appr_lehmer.c	36;"	d	file:
HGCD_REDUCE_THRESHOLD	gmp-impl.h	4279;"	d
HGCD_REDUCE_THRESHOLD	gmp-impl.h	4908;"	d
HGCD_REDUCE_THRESHOLD	gmp-impl.h	4909;"	d
HGCD_REDUCE_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	176;"	d
HGCD_REDUCE_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	198;"	d
HGCD_REDUCE_THRESHOLD	mpn/arm/v6/gmp-mparam.h	185;"	d
HGCD_REDUCE_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	190;"	d
HGCD_REDUCE_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	191;"	d
HGCD_REDUCE_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	204;"	d
HGCD_REDUCE_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	206;"	d
HGCD_REDUCE_THRESHOLD	mpn/arm64/gmp-mparam.h	236;"	d
HGCD_REDUCE_THRESHOLD	mpn/ia64/gmp-mparam.h	201;"	d
HGCD_REDUCE_THRESHOLD	mpn/pa64/gmp-mparam.h	239;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc32/gmp-mparam.h	219;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	193;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	148;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	157;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	151;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	162;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	168;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	209;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	208;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	149;"	d
HGCD_REDUCE_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	242;"	d
HGCD_REDUCE_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	196;"	d
HGCD_REDUCE_THRESHOLD	mpn/s390_64/gmp-mparam.h	164;"	d
HGCD_REDUCE_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	230;"	d
HGCD_REDUCE_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	142;"	d
HGCD_REDUCE_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	193;"	d
HGCD_REDUCE_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	219;"	d
HGCD_REDUCE_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	143;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/atom/gmp-mparam.h	204;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	197;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	200;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	186;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/core2/gmp-mparam.h	189;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	199;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	213;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	192;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/k10/gmp-mparam.h	203;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/k7/gmp-mparam.h	250;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/k8/gmp-mparam.h	187;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/nano/gmp-mparam.h	154;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/p6/gmp-mparam.h	186;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	197;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	195;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	213;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	238;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	253;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	216;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	224;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	226;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	243;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	230;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	228;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/gmp-mparam.h	206;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	234;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	225;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	232;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	220;"	d
HGCD_REDUCE_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	227;"	d
HGCD_REDUCE_THRESHOLD	tune/hgcd_reduce_1.c	35;"	d	file:
HGCD_REDUCE_THRESHOLD	tune/hgcd_reduce_1.c	36;"	d	file:
HGCD_REDUCE_THRESHOLD	tune/hgcd_reduce_2.c	35;"	d	file:
HGCD_REDUCE_THRESHOLD	tune/hgcd_reduce_2.c	36;"	d	file:
HGCD_THRESHOLD	gmp-impl.h	4271;"	d
HGCD_THRESHOLD	gmp-impl.h	4900;"	d
HGCD_THRESHOLD	gmp-impl.h	4901;"	d
HGCD_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	174;"	d
HGCD_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	196;"	d
HGCD_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	47;"	d
HGCD_THRESHOLD	mpn/alpha/gmp-mparam.h	58;"	d
HGCD_THRESHOLD	mpn/arm/gmp-mparam.h	119;"	d
HGCD_THRESHOLD	mpn/arm/v6/gmp-mparam.h	183;"	d
HGCD_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	188;"	d
HGCD_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	189;"	d
HGCD_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	202;"	d
HGCD_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	204;"	d
HGCD_THRESHOLD	mpn/arm64/gmp-mparam.h	234;"	d
HGCD_THRESHOLD	mpn/cray/gmp-mparam.h	54;"	d
HGCD_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	48;"	d
HGCD_THRESHOLD	mpn/ia64/gmp-mparam.h	199;"	d
HGCD_THRESHOLD	mpn/m68k/gmp-mparam.h	51;"	d
HGCD_THRESHOLD	mpn/minithres/gmp-mparam.h	102;"	d
HGCD_THRESHOLD	mpn/mips64/gmp-mparam.h	49;"	d
HGCD_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	47;"	d
HGCD_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	159;"	d
HGCD_THRESHOLD	mpn/pa64/gmp-mparam.h	237;"	d
HGCD_THRESHOLD	mpn/power/gmp-mparam.h	44;"	d
HGCD_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	184;"	d
HGCD_THRESHOLD	mpn/powerpc32/gmp-mparam.h	217;"	d
HGCD_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	147;"	d
HGCD_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	191;"	d
HGCD_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	146;"	d
HGCD_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	155;"	d
HGCD_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	149;"	d
HGCD_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	160;"	d
HGCD_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	56;"	d
HGCD_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	166;"	d
HGCD_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	207;"	d
HGCD_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	206;"	d
HGCD_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	147;"	d
HGCD_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	240;"	d
HGCD_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	194;"	d
HGCD_THRESHOLD	mpn/s390_32/gmp-mparam.h	130;"	d
HGCD_THRESHOLD	mpn/s390_64/gmp-mparam.h	162;"	d
HGCD_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	228;"	d
HGCD_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	140;"	d
HGCD_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	48;"	d
HGCD_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	48;"	d
HGCD_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	191;"	d
HGCD_THRESHOLD	mpn/sparc64/gmp-mparam.h	131;"	d
HGCD_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	217;"	d
HGCD_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	141;"	d
HGCD_THRESHOLD	mpn/x86/atom/gmp-mparam.h	202;"	d
HGCD_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	195;"	d
HGCD_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	198;"	d
HGCD_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	184;"	d
HGCD_THRESHOLD	mpn/x86/core2/gmp-mparam.h	187;"	d
HGCD_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	197;"	d
HGCD_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	211;"	d
HGCD_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	190;"	d
HGCD_THRESHOLD	mpn/x86/geode/gmp-mparam.h	133;"	d
HGCD_THRESHOLD	mpn/x86/k10/gmp-mparam.h	201;"	d
HGCD_THRESHOLD	mpn/x86/k6/gmp-mparam.h	158;"	d
HGCD_THRESHOLD	mpn/x86/k7/gmp-mparam.h	248;"	d
HGCD_THRESHOLD	mpn/x86/k8/gmp-mparam.h	185;"	d
HGCD_THRESHOLD	mpn/x86/nano/gmp-mparam.h	152;"	d
HGCD_THRESHOLD	mpn/x86/p6/gmp-mparam.h	184;"	d
HGCD_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	190;"	d
HGCD_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	195;"	d
HGCD_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	55;"	d
HGCD_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	155;"	d
HGCD_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	193;"	d
HGCD_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	211;"	d
HGCD_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	236;"	d
HGCD_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	251;"	d
HGCD_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	214;"	d
HGCD_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	222;"	d
HGCD_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	224;"	d
HGCD_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	241;"	d
HGCD_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	228;"	d
HGCD_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	226;"	d
HGCD_THRESHOLD	mpn/x86_64/gmp-mparam.h	204;"	d
HGCD_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	232;"	d
HGCD_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	223;"	d
HGCD_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	230;"	d
HGCD_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	218;"	d
HGCD_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	225;"	d
HGCD_THRESHOLD	tune/hgcd_lehmer.c	35;"	d	file:
HGCD_THRESHOLD	tune/hgcd_lehmer.c	36;"	d	file:
HIBITS	tests/mpf/t-eq.c	110;"	d	file:
HIGH0	mpn/generic/mod_34lsub1.c	78;"	d	file:
HIGH0	mpn/mod_34lsub1.c	78;"	d	file:
HIGH1	mpn/generic/mod_34lsub1.c	81;"	d	file:
HIGH1	mpn/mod_34lsub1.c	81;"	d	file:
HIGH2	mpn/generic/mod_34lsub1.c	84;"	d	file:
HIGH2	mpn/mod_34lsub1.c	84;"	d	file:
HIGH32	mpn/sparc64/sparc64.h	37;"	d
HIGHMASK	tests/refmpn.c	1090;"	d	file:
HIGHPART	tests/refmpn.c	1093;"	d	file:
HIGH_BOUND	tests/mpf/t-get_d.c	27;"	d	file:
HIGH_BOUND	tests/mpf/t-get_d.c	35;"	d	file:
HIGH_BOUND	tests/mpf/t-get_d.c	40;"	d	file:
HIGH_COUNT	tests/devel/try.c	3302;"	d	file:
HIGH_ITERATION	tests/devel/try.c	3303;"	d	file:
HIGH_LIMIT	tests/devel/try.c	3301;"	d	file:
HOST_ENDIAN	mpz/export.c	38;"	d	file:
HOST_ENDIAN	mpz/export.c	41;"	d	file:
HOST_ENDIAN	mpz/export.c	45;"	d	file:
HOST_ENDIAN	mpz/import.c	38;"	d	file:
HOST_ENDIAN	mpz/import.c	41;"	d	file:
HOST_ENDIAN	mpz/import.c	45;"	d	file:
HSIZ	tal-notreent.c	52;"	d	file:
HSIZ	tal-reent.c	53;"	d	file:
HTON_LIMB_STORE	mpz/out_raw.c	41;"	d	file:
HTON_LIMB_STORE	mpz/out_raw.c	45;"	d	file:
HTON_LIMB_STORE	mpz/out_raw.c	49;"	d	file:
INCR_LIMIT	mpz/nextprime.c	96;"	d	file:
INITIAL	demos/calc/calclex.c	393;"	d	file:
INIT_EACH	tests/devel/try.c	3455;"	d	file:
INNERLOOP	mpn/generic/powm.c	282;"	d	file:
INNERLOOP	mpn/generic/sec_powm.c	302;"	d	file:
INNERLOOP	mpn/powm.c	282;"	d	file:
INNERLOOP	mpn/sec_powm.c	302;"	d	file:
INPLACE	tests/mpz/t-div_2exp.c	45;"	d	file:
INSERT_FFTTAB	tune/tuneup.c	869;"	d	file:
INT_HIGHBIT	gmp-impl.h	588;"	d
INVMOD	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
INVOKE_RRS	tests/mpz/reuse.c	177;"	d	file:
INVOKE_RRSS	tests/mpz/reuse.c	188;"	d	file:
INVOKE_RS	tests/mpz/reuse.c	183;"	d	file:
INVOKE_RSS	tests/mpz/reuse.c	194;"	d	file:
INV_APPR_THRESHOLD	gmp-impl.h	2186;"	d
INV_APPR_THRESHOLD	gmp-impl.h	4876;"	d
INV_APPR_THRESHOLD	gmp-impl.h	4877;"	d
INV_APPR_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	160;"	d
INV_APPR_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	182;"	d
INV_APPR_THRESHOLD	mpn/arm/gmp-mparam.h	107;"	d
INV_APPR_THRESHOLD	mpn/arm/v6/gmp-mparam.h	160;"	d
INV_APPR_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	165;"	d
INV_APPR_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	166;"	d
INV_APPR_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	179;"	d
INV_APPR_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	181;"	d
INV_APPR_THRESHOLD	mpn/arm64/gmp-mparam.h	212;"	d
INV_APPR_THRESHOLD	mpn/ia64/gmp-mparam.h	176;"	d
INV_APPR_THRESHOLD	mpn/minithres/gmp-mparam.h	90;"	d
INV_APPR_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	147;"	d
INV_APPR_THRESHOLD	mpn/pa64/gmp-mparam.h	225;"	d
INV_APPR_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	172;"	d
INV_APPR_THRESHOLD	mpn/powerpc32/gmp-mparam.h	195;"	d
INV_APPR_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	135;"	d
INV_APPR_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	177;"	d
INV_APPR_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	134;"	d
INV_APPR_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	143;"	d
INV_APPR_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	137;"	d
INV_APPR_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	146;"	d
INV_APPR_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	152;"	d
INV_APPR_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	185;"	d
INV_APPR_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	194;"	d
INV_APPR_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	133;"	d
INV_APPR_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	217;"	d
INV_APPR_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	180;"	d
INV_APPR_THRESHOLD	mpn/s390_32/gmp-mparam.h	118;"	d
INV_APPR_THRESHOLD	mpn/s390_64/gmp-mparam.h	148;"	d
INV_APPR_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	206;"	d
INV_APPR_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	126;"	d
INV_APPR_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	177;"	d
INV_APPR_THRESHOLD	mpn/sparc64/gmp-mparam.h	118;"	d
INV_APPR_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	194;"	d
INV_APPR_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	127;"	d
INV_APPR_THRESHOLD	mpn/x86/atom/gmp-mparam.h	180;"	d
INV_APPR_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	181;"	d
INV_APPR_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	184;"	d
INV_APPR_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	170;"	d
INV_APPR_THRESHOLD	mpn/x86/core2/gmp-mparam.h	173;"	d
INV_APPR_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	183;"	d
INV_APPR_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	197;"	d
INV_APPR_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	176;"	d
INV_APPR_THRESHOLD	mpn/x86/geode/gmp-mparam.h	121;"	d
INV_APPR_THRESHOLD	mpn/x86/k10/gmp-mparam.h	187;"	d
INV_APPR_THRESHOLD	mpn/x86/k6/gmp-mparam.h	146;"	d
INV_APPR_THRESHOLD	mpn/x86/k7/gmp-mparam.h	226;"	d
INV_APPR_THRESHOLD	mpn/x86/k8/gmp-mparam.h	171;"	d
INV_APPR_THRESHOLD	mpn/x86/nano/gmp-mparam.h	140;"	d
INV_APPR_THRESHOLD	mpn/x86/p6/gmp-mparam.h	172;"	d
INV_APPR_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	178;"	d
INV_APPR_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	173;"	d
INV_APPR_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	143;"	d
INV_APPR_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	179;"	d
INV_APPR_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	188;"	d
INV_APPR_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	213;"	d
INV_APPR_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	228;"	d
INV_APPR_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	191;"	d
INV_APPR_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	199;"	d
INV_APPR_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	201;"	d
INV_APPR_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	218;"	d
INV_APPR_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	205;"	d
INV_APPR_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	203;"	d
INV_APPR_THRESHOLD	mpn/x86_64/gmp-mparam.h	191;"	d
INV_APPR_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	209;"	d
INV_APPR_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	208;"	d
INV_APPR_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	215;"	d
INV_APPR_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	203;"	d
INV_APPR_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	202;"	d
INV_MULMOD_BNM1_THRESHOLD	gmp-impl.h	2182;"	d
INV_MULMOD_BNM1_THRESHOLD	gmp-impl.h	4868;"	d
INV_MULMOD_BNM1_THRESHOLD	gmp-impl.h	4869;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	158;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	180;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/arm/gmp-mparam.h	105;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/arm/v6/gmp-mparam.h	158;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	163;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	164;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	177;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	179;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/arm64/gmp-mparam.h	210;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/generic/invertappr.c	62;"	d	file:
INV_MULMOD_BNM1_THRESHOLD	mpn/generic/invertappr.c	63;"	d	file:
INV_MULMOD_BNM1_THRESHOLD	mpn/ia64/gmp-mparam.h	174;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/invertappr.c	62;"	d	file:
INV_MULMOD_BNM1_THRESHOLD	mpn/invertappr.c	63;"	d	file:
INV_MULMOD_BNM1_THRESHOLD	mpn/minithres/gmp-mparam.h	88;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	145;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/pa64/gmp-mparam.h	223;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	170;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc32/gmp-mparam.h	193;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	133;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	175;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	132;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	141;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	135;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	144;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	150;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	183;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	192;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	131;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	215;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	178;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/s390_32/gmp-mparam.h	116;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/s390_64/gmp-mparam.h	146;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	204;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	124;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	175;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/sparc64/gmp-mparam.h	116;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	192;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	125;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/atom/gmp-mparam.h	178;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	179;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	182;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	168;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/core2/gmp-mparam.h	171;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	181;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	195;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	174;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/geode/gmp-mparam.h	119;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/k10/gmp-mparam.h	185;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/k6/gmp-mparam.h	144;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/k7/gmp-mparam.h	224;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/k8/gmp-mparam.h	169;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/nano/gmp-mparam.h	138;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/p6/gmp-mparam.h	170;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	176;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	171;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	141;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	177;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	186;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	211;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	226;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	189;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	197;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	199;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	216;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	203;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	201;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/gmp-mparam.h	189;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	207;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	206;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	213;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	201;"	d
INV_MULMOD_BNM1_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	200;"	d
INV_NEWTON_THRESHOLD	gmp-impl.h	2190;"	d
INV_NEWTON_THRESHOLD	gmp-impl.h	4872;"	d
INV_NEWTON_THRESHOLD	gmp-impl.h	4873;"	d
INV_NEWTON_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	159;"	d
INV_NEWTON_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	181;"	d
INV_NEWTON_THRESHOLD	mpn/arm/gmp-mparam.h	106;"	d
INV_NEWTON_THRESHOLD	mpn/arm/v6/gmp-mparam.h	159;"	d
INV_NEWTON_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	164;"	d
INV_NEWTON_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	165;"	d
INV_NEWTON_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	178;"	d
INV_NEWTON_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	180;"	d
INV_NEWTON_THRESHOLD	mpn/arm64/gmp-mparam.h	211;"	d
INV_NEWTON_THRESHOLD	mpn/ia64/gmp-mparam.h	175;"	d
INV_NEWTON_THRESHOLD	mpn/minithres/gmp-mparam.h	89;"	d
INV_NEWTON_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	146;"	d
INV_NEWTON_THRESHOLD	mpn/pa64/gmp-mparam.h	224;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	171;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc32/gmp-mparam.h	194;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	134;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	176;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	133;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	142;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	136;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	145;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	151;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	184;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	193;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	132;"	d
INV_NEWTON_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	216;"	d
INV_NEWTON_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	179;"	d
INV_NEWTON_THRESHOLD	mpn/s390_32/gmp-mparam.h	117;"	d
INV_NEWTON_THRESHOLD	mpn/s390_64/gmp-mparam.h	147;"	d
INV_NEWTON_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	205;"	d
INV_NEWTON_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	125;"	d
INV_NEWTON_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	176;"	d
INV_NEWTON_THRESHOLD	mpn/sparc64/gmp-mparam.h	117;"	d
INV_NEWTON_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	193;"	d
INV_NEWTON_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	126;"	d
INV_NEWTON_THRESHOLD	mpn/x86/atom/gmp-mparam.h	179;"	d
INV_NEWTON_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	180;"	d
INV_NEWTON_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	183;"	d
INV_NEWTON_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	169;"	d
INV_NEWTON_THRESHOLD	mpn/x86/core2/gmp-mparam.h	172;"	d
INV_NEWTON_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	182;"	d
INV_NEWTON_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	196;"	d
INV_NEWTON_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	175;"	d
INV_NEWTON_THRESHOLD	mpn/x86/geode/gmp-mparam.h	120;"	d
INV_NEWTON_THRESHOLD	mpn/x86/k10/gmp-mparam.h	186;"	d
INV_NEWTON_THRESHOLD	mpn/x86/k6/gmp-mparam.h	145;"	d
INV_NEWTON_THRESHOLD	mpn/x86/k7/gmp-mparam.h	225;"	d
INV_NEWTON_THRESHOLD	mpn/x86/k8/gmp-mparam.h	170;"	d
INV_NEWTON_THRESHOLD	mpn/x86/nano/gmp-mparam.h	139;"	d
INV_NEWTON_THRESHOLD	mpn/x86/p6/gmp-mparam.h	171;"	d
INV_NEWTON_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	177;"	d
INV_NEWTON_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	172;"	d
INV_NEWTON_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	142;"	d
INV_NEWTON_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	178;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	187;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	212;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	227;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	190;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	198;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	200;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	217;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	204;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	202;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/gmp-mparam.h	190;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	208;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	207;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	214;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	202;"	d
INV_NEWTON_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	201;"	d
IOR	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
IS_EXPONENT	demos/expr/exprfa.c	84;"	d	file:
IS_PAIRWISE	demos/expr/expr.c	488;"	d	file:
ITCH	mpn/generic/mul.c	116;"	d	file:
ITCH	mpn/mul.c	116;"	d	file:
ITCH_TOOMX2	mpn/generic/mul.c	212;"	d	file:
ITCH_TOOMX2	mpn/generic/mul.c	217;"	d	file:
ITCH_TOOMX2	mpn/mul.c	212;"	d	file:
ITCH_TOOMX2	mpn/mul.c	217;"	d	file:
ITCH_TOOMX3	mpn/generic/mul.c	284;"	d	file:
ITCH_TOOMX3	mpn/generic/mul.c	292;"	d	file:
ITCH_TOOMX3	mpn/mul.c	284;"	d	file:
ITCH_TOOMX3	mpn/mul.c	292;"	d	file:
ITERATE	tests/mpn/t-fat.c	286;"	d	file:
ITERATE_FAT_THRESHOLDS	tests/mpn/t-fat.c	72;"	d	file:
JACOBI_0LS	gmp-impl.h	3960;"	d
JACOBI_0S	gmp-impl.h	3957;"	d
JACOBI_0U	gmp-impl.h	3954;"	d
JACOBI_0Z	tests/refmpz.c	84;"	d	file:
JACOBI_2_METHOD	mpn/generic/jacobi_2.c	40;"	d	file:
JACOBI_2_METHOD	mpn/jacobi_2.c	40;"	d	file:
JACOBI_A	gen-jacobitab.c	60;"	d	file:
JACOBI_A	mpn/generic/jacobi.c	125;"	d	file:
JACOBI_A	mpn/jacobi.c	125;"	d	file:
JACOBI_ASGN_SU_BIT1	gmp-impl.h	3988;"	d
JACOBI_ASGN_ZZU_BIT1	tests/refmpz.c	91;"	d	file:
JACOBI_B	gen-jacobitab.c	61;"	d	file:
JACOBI_B	mpn/generic/jacobi.c	126;"	d	file:
JACOBI_B	mpn/jacobi.c	126;"	d	file:
JACOBI_BASE_METHOD	mpn/alpha/ev5/gmp-mparam.h	179;"	d
JACOBI_BASE_METHOD	mpn/alpha/ev6/gmp-mparam.h	201;"	d
JACOBI_BASE_METHOD	mpn/alpha/ev6/nails/gmp-mparam.h	50;"	d
JACOBI_BASE_METHOD	mpn/alpha/gmp-mparam.h	61;"	d
JACOBI_BASE_METHOD	mpn/arm/gmp-mparam.h	122;"	d
JACOBI_BASE_METHOD	mpn/arm/v6/gmp-mparam.h	188;"	d
JACOBI_BASE_METHOD	mpn/arm/v7a/cora15/gmp-mparam.h	193;"	d
JACOBI_BASE_METHOD	mpn/arm/v7a/cora7/gmp-mparam.h	194;"	d
JACOBI_BASE_METHOD	mpn/arm/v7a/cora8/gmp-mparam.h	207;"	d
JACOBI_BASE_METHOD	mpn/arm/v7a/cora9/gmp-mparam.h	209;"	d
JACOBI_BASE_METHOD	mpn/arm64/gmp-mparam.h	239;"	d
JACOBI_BASE_METHOD	mpn/cray/gmp-mparam.h	57;"	d
JACOBI_BASE_METHOD	mpn/cray/ieee/gmp-mparam.h	51;"	d
JACOBI_BASE_METHOD	mpn/generic/jacbase.c	43;"	d	file:
JACOBI_BASE_METHOD	mpn/ia64/gmp-mparam.h	204;"	d
JACOBI_BASE_METHOD	mpn/jacbase.c	43;"	d	file:
JACOBI_BASE_METHOD	mpn/m68k/gmp-mparam.h	54;"	d
JACOBI_BASE_METHOD	mpn/minithres/gmp-mparam.h	105;"	d
JACOBI_BASE_METHOD	mpn/mips32/gmp-mparam.h	50;"	d
JACOBI_BASE_METHOD	mpn/mips64/gmp-mparam.h	52;"	d
JACOBI_BASE_METHOD	mpn/pa32/hppa1_1/gmp-mparam.h	50;"	d
JACOBI_BASE_METHOD	mpn/pa32/hppa2_0/gmp-mparam.h	162;"	d
JACOBI_BASE_METHOD	mpn/pa64/gmp-mparam.h	242;"	d
JACOBI_BASE_METHOD	mpn/power/gmp-mparam.h	47;"	d
JACOBI_BASE_METHOD	mpn/powerpc32/750/gmp-mparam.h	187;"	d
JACOBI_BASE_METHOD	mpn/powerpc32/gmp-mparam.h	222;"	d
JACOBI_BASE_METHOD	mpn/powerpc32/p3/gmp-mparam.h	150;"	d
JACOBI_BASE_METHOD	mpn/powerpc32/p4/gmp-mparam.h	196;"	d
JACOBI_BASE_METHOD	mpn/powerpc32/p5/gmp-mparam.h	151;"	d
JACOBI_BASE_METHOD	mpn/powerpc32/p6/gmp-mparam.h	160;"	d
JACOBI_BASE_METHOD	mpn/powerpc32/p7/gmp-mparam.h	154;"	d
JACOBI_BASE_METHOD	mpn/powerpc64/mode32/p4/gmp-mparam.h	165;"	d
JACOBI_BASE_METHOD	mpn/powerpc64/mode64/gmp-mparam.h	59;"	d
JACOBI_BASE_METHOD	mpn/powerpc64/mode64/p3/gmp-mparam.h	171;"	d
JACOBI_BASE_METHOD	mpn/powerpc64/mode64/p4/gmp-mparam.h	212;"	d
JACOBI_BASE_METHOD	mpn/powerpc64/mode64/p5/gmp-mparam.h	211;"	d
JACOBI_BASE_METHOD	mpn/powerpc64/mode64/p6/gmp-mparam.h	152;"	d
JACOBI_BASE_METHOD	mpn/powerpc64/mode64/p7/gmp-mparam.h	245;"	d
JACOBI_BASE_METHOD	mpn/s390_32/esame/gmp-mparam.h	199;"	d
JACOBI_BASE_METHOD	mpn/s390_32/gmp-mparam.h	133;"	d
JACOBI_BASE_METHOD	mpn/s390_64/gmp-mparam.h	167;"	d
JACOBI_BASE_METHOD	mpn/s390_64/z10/gmp-mparam.h	233;"	d
JACOBI_BASE_METHOD	mpn/sparc32/gmp-mparam.h	45;"	d
JACOBI_BASE_METHOD	mpn/sparc32/ultrasparct1/gmp-mparam.h	145;"	d
JACOBI_BASE_METHOD	mpn/sparc32/v8/gmp-mparam.h	51;"	d
JACOBI_BASE_METHOD	mpn/sparc32/v8/supersparc/gmp-mparam.h	51;"	d
JACOBI_BASE_METHOD	mpn/sparc32/v9/gmp-mparam.h	196;"	d
JACOBI_BASE_METHOD	mpn/sparc64/gmp-mparam.h	134;"	d
JACOBI_BASE_METHOD	mpn/sparc64/ultrasparc34/gmp-mparam.h	222;"	d
JACOBI_BASE_METHOD	mpn/sparc64/ultrasparct1/gmp-mparam.h	146;"	d
JACOBI_BASE_METHOD	mpn/x86/atom/gmp-mparam.h	207;"	d
JACOBI_BASE_METHOD	mpn/x86/bd1/gmp-mparam.h	200;"	d
JACOBI_BASE_METHOD	mpn/x86/bd2/gmp-mparam.h	203;"	d
JACOBI_BASE_METHOD	mpn/x86/bobcat/gmp-mparam.h	189;"	d
JACOBI_BASE_METHOD	mpn/x86/core2/gmp-mparam.h	192;"	d
JACOBI_BASE_METHOD	mpn/x86/coreihwl/gmp-mparam.h	202;"	d
JACOBI_BASE_METHOD	mpn/x86/coreinhm/gmp-mparam.h	216;"	d
JACOBI_BASE_METHOD	mpn/x86/coreisbr/gmp-mparam.h	195;"	d
JACOBI_BASE_METHOD	mpn/x86/geode/gmp-mparam.h	136;"	d
JACOBI_BASE_METHOD	mpn/x86/i486/gmp-mparam.h	51;"	d
JACOBI_BASE_METHOD	mpn/x86/k10/gmp-mparam.h	206;"	d
JACOBI_BASE_METHOD	mpn/x86/k6/gmp-mparam.h	161;"	d
JACOBI_BASE_METHOD	mpn/x86/k7/gmp-mparam.h	253;"	d
JACOBI_BASE_METHOD	mpn/x86/k8/gmp-mparam.h	190;"	d
JACOBI_BASE_METHOD	mpn/x86/nano/gmp-mparam.h	157;"	d
JACOBI_BASE_METHOD	mpn/x86/p6/gmp-mparam.h	189;"	d
JACOBI_BASE_METHOD	mpn/x86/p6/mmx/gmp-mparam.h	193;"	d
JACOBI_BASE_METHOD	mpn/x86/p6/sse2/gmp-mparam.h	200;"	d
JACOBI_BASE_METHOD	mpn/x86/pentium/gmp-mparam.h	58;"	d
JACOBI_BASE_METHOD	mpn/x86/pentium/mmx/gmp-mparam.h	158;"	d
JACOBI_BASE_METHOD	mpn/x86/pentium4/sse2/gmp-mparam.h	198;"	d
JACOBI_BASE_METHOD	mpn/x86_64/atom/gmp-mparam.h	216;"	d
JACOBI_BASE_METHOD	mpn/x86_64/bd1/gmp-mparam.h	241;"	d
JACOBI_BASE_METHOD	mpn/x86_64/bd2/gmp-mparam.h	256;"	d
JACOBI_BASE_METHOD	mpn/x86_64/bobcat/gmp-mparam.h	219;"	d
JACOBI_BASE_METHOD	mpn/x86_64/core2/gmp-mparam.h	227;"	d
JACOBI_BASE_METHOD	mpn/x86_64/coreibwl/gmp-mparam.h	229;"	d
JACOBI_BASE_METHOD	mpn/x86_64/coreihwl/gmp-mparam.h	246;"	d
JACOBI_BASE_METHOD	mpn/x86_64/coreinhm/gmp-mparam.h	233;"	d
JACOBI_BASE_METHOD	mpn/x86_64/coreisbr/gmp-mparam.h	231;"	d
JACOBI_BASE_METHOD	mpn/x86_64/gmp-mparam.h	209;"	d
JACOBI_BASE_METHOD	mpn/x86_64/k10/gmp-mparam.h	237;"	d
JACOBI_BASE_METHOD	mpn/x86_64/k8/gmp-mparam.h	228;"	d
JACOBI_BASE_METHOD	mpn/x86_64/nano/gmp-mparam.h	235;"	d
JACOBI_BASE_METHOD	mpn/x86_64/pentium4/gmp-mparam.h	223;"	d
JACOBI_BASE_METHOD	mpn/x86_64/skylake/gmp-mparam.h	230;"	d
JACOBI_BASE_METHOD	tune/jacbase1.c	34;"	d	file:
JACOBI_BASE_METHOD	tune/jacbase1.c	35;"	d	file:
JACOBI_BASE_METHOD	tune/jacbase2.c	34;"	d	file:
JACOBI_BASE_METHOD	tune/jacbase2.c	35;"	d	file:
JACOBI_BASE_METHOD	tune/jacbase3.c	34;"	d	file:
JACOBI_BASE_METHOD	tune/jacbase3.c	35;"	d	file:
JACOBI_BASE_METHOD	tune/jacbase4.c	34;"	d	file:
JACOBI_BASE_METHOD	tune/jacbase4.c	35;"	d	file:
JACOBI_BIT1_TO_PN	gmp-impl.h	3964;"	d
JACOBI_BSGN_SS_BIT1	gmp-impl.h	3993;"	d
JACOBI_BSGN_SZ_BIT1	gmp-impl.h	3998;"	d
JACOBI_BSGN_ZS_BIT1	gmp-impl.h	4003;"	d
JACOBI_BSGN_ZZ_BIT1	tests/refmpz.c	87;"	d	file:
JACOBI_D	gen-jacobitab.c	64;"	d	file:
JACOBI_DC_THRESHOLD	mpn/generic/jacobi.c	41;"	d	file:
JACOBI_DC_THRESHOLD	mpn/jacobi.c	41;"	d	file:
JACOBI_E	gen-jacobitab.c	63;"	d	file:
JACOBI_LS0	gmp-impl.h	3946;"	d
JACOBI_MOD_OR_MODEXACT_1_ODD	gmp-impl.h	4050;"	d
JACOBI_N1B_BIT1	gmp-impl.h	3983;"	d
JACOBI_RECIP_UU_BIT1	gmp-impl.h	4011;"	d
JACOBI_S0	gmp-impl.h	3936;"	d
JACOBI_STRIP_LOW_ZEROS	gmp-impl.h	4018;"	d
JACOBI_TWOS_U	gmp-impl.h	3978;"	d
JACOBI_TWOS_U_BIT1	gmp-impl.h	3974;"	d
JACOBI_TWO_U_BIT1	gmp-impl.h	3970;"	d
JACOBI_U0	gmp-impl.h	3939;"	d
JACOBI_Z0	gmp-impl.h	3951;"	d
JUNK	tests/amd64check.c	46;"	d	file:
JUNK	tests/x86check.c	45;"	d	file:
JUNK_PARAMS	tests/arm32check.c	68;"	d	file:
KRON	demos/calc/calc.c	/^     KRON = 268,$/;"	e	enum:yytokentype	file:
KRON	demos/calc/calc.c	285;"	d	file:
KRON	demos/calc/calc.h	/^     KRON = 268,$/;"	e	enum:yytokentype
KRON	demos/calc/calc.h	90;"	d
L0	mpn/m88k/mc88110/add_n.S	/^L0:	bb0	 2,res_ptr,L_v1		; branch if res_ptr is aligned?$/;"	l
L0	mpn/m88k/mc88110/sub_n.S	/^L0:	bb0	 2,res_ptr,L_v1		; branch if res_ptr is aligned$/;"	l
L1	mpn/m88k/mc88110/add_n.S	/^L1:	xor	 r12,s1_ptr,res_ptr$/;"	l
L1	mpn/m88k/mc88110/sub_n.S	/^L1:	xor	 r12,s1_ptr,res_ptr$/;"	l
L1	mpn/m88k/mul_1.s	/^L1:	mul	 r26,r9,r5	; low word of product	mul_1	WB ld$/;"	l
L1	mpn/power/add_n.asm	/^L1:	lu	8,4(4)		C load s1 limb and update s1_ptr$/;"	l
L1	mpn/power/sub_n.asm	/^L1:	lu	8,4(4)		C load s1 limb and update s1_ptr$/;"	l
L1_CACHE_SIZE	mpn/add_n_sub_n.c	39;"	d	file:
L1_CACHE_SIZE	mpn/generic/add_n_sub_n.c	39;"	d	file:
L2	mpn/m88k/mc88110/add_n.S	/^L2:	cmp	 r12,size,1$/;"	l
L2	mpn/m88k/mc88110/sub_n.S	/^L2:	cmp	 r12,size,1$/;"	l
L3	mpn/cray/cfp/mulwwc90.s	/^L3          =               P.*$/;"	d
L3	mpn/cray/cfp/mulwwj90.s	/^L3          =               P.*$/;"	d
L4	mpn/cray/cfp/mulwwc90.s	/^L4          =               P.*$/;"	d
L4	mpn/cray/cfp/mulwwj90.s	/^L4          =               P.*$/;"	d
L5	mpn/cray/cfp/mulwwc90.s	/^L5          =               P.*$/;"	d
L5	mpn/cray/cfp/mulwwj90.s	/^L5          =               P.*$/;"	d
L6	mpn/cray/cfp/mulwwc90.s	/^L6          =               P.*$/;"	d
L6	mpn/cray/cfp/mulwwj90.s	/^L6          =               P.*$/;"	d
L7	mpn/cray/cfp/mulwwc90.s	/^L7          =               P.*$/;"	d
L7	mpn/cray/cfp/mulwwj90.s	/^L7          =               P.*$/;"	d
L8	mpn/cray/cfp/mulwwc90.s	/^L8          =               P.*$/;"	d
L8	mpn/cray/cfp/mulwwj90.s	/^L8          =               P.*$/;"	d
LAND	demos/calc/calc.c	/^     LAND = 278,$/;"	e	enum:yytokentype	file:
LAND	demos/calc/calc.c	295;"	d	file:
LAND	demos/calc/calc.h	/^     LAND = 278,$/;"	e	enum:yytokentype
LAND	demos/calc/calc.h	100;"	d
LCM	demos/calc/calc.c	/^     LCM = 269,$/;"	e	enum:yytokentype	file:
LCM	demos/calc/calc.c	286;"	d	file:
LCM	demos/calc/calc.h	/^     LCM = 269,$/;"	e	enum:yytokentype
LCM	demos/calc/calc.h	91;"	d
LCM	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
LDFLAGS	mini-gmp/tests/Makefile	/^LDFLAGS =$/;"	m
LE	demos/calc/calc.c	/^     LE = 280,$/;"	e	enum:yytokentype	file:
LE	demos/calc/calc.c	297;"	d	file:
LE	demos/calc/calc.h	/^     LE = 280,$/;"	e	enum:yytokentype
LE	demos/calc/calc.h	102;"	d
LIBS	mini-gmp/tests/Makefile	/^LIBS = -lgmp -lm -lmcheck$/;"	m
LIKELY	gmp-impl.h	530;"	d
LIM	mini-gmp/tests/t-cmp_d.c	163;"	d	file:
LIM	tests/mpz/t-cmp_d.c	168;"	d	file:
LIMBS_PER_DIGIT_IN_BASE	gmp-impl.h	4336;"	d
LIMBS_PER_DOUBLE	gmp-impl.h	3801;"	d
LIMBS_PER_ULONG	gmp-impl.h	2945;"	d
LIMBS_PER_ULONG	gmp-impl.h	2957;"	d
LIMB_HIGHBIT_TO_MASK	gmp-impl.h	2992;"	d
LIMB_ONES	tune/speed.c	917;"	d	file:
LIMIT_denominat	mpn/generic/toom6h_mul.c	126;"	d	file:
LIMIT_denominat	mpn/generic/toom6h_mul.c	163;"	d	file:
LIMIT_denominat	mpn/generic/toom8h_mul.c	139;"	d	file:
LIMIT_denominat	mpn/generic/toom8h_mul.c	187;"	d	file:
LIMIT_denominat	mpn/toom6h_mul.c	126;"	d	file:
LIMIT_denominat	mpn/toom6h_mul.c	163;"	d	file:
LIMIT_denominat	mpn/toom8h_mul.c	139;"	d	file:
LIMIT_denominat	mpn/toom8h_mul.c	187;"	d	file:
LIMIT_numerator	mpn/generic/toom6h_mul.c	125;"	d	file:
LIMIT_numerator	mpn/generic/toom6h_mul.c	162;"	d	file:
LIMIT_numerator	mpn/generic/toom8h_mul.c	138;"	d	file:
LIMIT_numerator	mpn/generic/toom8h_mul.c	186;"	d	file:
LIMIT_numerator	mpn/toom6h_mul.c	125;"	d	file:
LIMIT_numerator	mpn/toom6h_mul.c	162;"	d	file:
LIMIT_numerator	mpn/toom8h_mul.c	138;"	d	file:
LIMIT_numerator	mpn/toom8h_mul.c	186;"	d	file:
LIT	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
LL	tests/mpz/t-jac.c	45;"	d	file:
LL	tests/mpz/t-jac.c	47;"	d	file:
LL	tests/t-constants.c	64;"	d	file:
LL	tests/t-constants.c	66;"	d	file:
LOG	demos/pexpr.c	/^	   LOG, LOG2, FERMAT, MERSENNE, FIBONACCI, RANDOM, NEXTPRIME, BINOM,$/;"	e	enum:op_t	file:
LOG	mpn/generic/remove.c	42;"	d	file:
LOG	mpn/generic/remove.c	44;"	d	file:
LOG	mpn/remove.c	42;"	d	file:
LOG	mpn/remove.c	44;"	d	file:
LOG2	demos/pexpr.c	/^	   LOG, LOG2, FERMAT, MERSENNE, FIBONACCI, RANDOM, NEXTPRIME, BINOM,$/;"	e	enum:op_t	file:
LOG2C	gmp-impl.h	559;"	d
LOGOPS	tests/refmpn.c	399;"	d	file:
LOGROOT_NEEDS_TWO_CORRECTIONS	mpn/generic/rootrem.c	131;"	d	file:
LOGROOT_NEEDS_TWO_CORRECTIONS	mpn/rootrem.c	131;"	d	file:
LOGROOT_RETURNED_BITS	mpn/generic/rootrem.c	132;"	d	file:
LOGROOT_RETURNED_BITS	mpn/rootrem.c	132;"	d	file:
LOGROOT_USED_BITS	mpn/generic/rootrem.c	130;"	d	file:
LOGROOT_USED_BITS	mpn/rootrem.c	130;"	d	file:
LONG_HIGHBIT	gmp-impl.h	587;"	d
LOOKAHEAD	demos/expr/expr.c	323;"	d	file:
LOOP_ON_SIEVE_BEGIN	mpz/bin_uiui.c	490;"	d	file:
LOOP_ON_SIEVE_BEGIN	mpz/bin_uiui.c	655;"	d	file:
LOOP_ON_SIEVE_BEGIN	mpz/oddfac_1.c	257;"	d	file:
LOOP_ON_SIEVE_BEGIN	mpz/oddfac_1.c	74;"	d	file:
LOOP_ON_SIEVE_BEGIN	mpz/primorial_ui.c	61;"	d	file:
LOOP_ON_SIEVE_BEGIN	primesieve.c	294;"	d	file:
LOOP_ON_SIEVE_BEGIN	primesieve.c	54;"	d	file:
LOOP_ON_SIEVE_CONTINUE	mpz/bin_uiui.c	481;"	d	file:
LOOP_ON_SIEVE_CONTINUE	mpz/bin_uiui.c	656;"	d	file:
LOOP_ON_SIEVE_CONTINUE	mpz/oddfac_1.c	258;"	d	file:
LOOP_ON_SIEVE_CONTINUE	mpz/oddfac_1.c	65;"	d	file:
LOOP_ON_SIEVE_CONTINUE	mpz/primorial_ui.c	52;"	d	file:
LOOP_ON_SIEVE_CONTINUE	primesieve.c	295;"	d	file:
LOOP_ON_SIEVE_CONTINUE	primesieve.c	45;"	d	file:
LOOP_ON_SIEVE_END	mpz/bin_uiui.c	507;"	d	file:
LOOP_ON_SIEVE_END	mpz/bin_uiui.c	653;"	d	file:
LOOP_ON_SIEVE_END	mpz/oddfac_1.c	255;"	d	file:
LOOP_ON_SIEVE_END	mpz/oddfac_1.c	91;"	d	file:
LOOP_ON_SIEVE_END	mpz/primorial_ui.c	78;"	d	file:
LOOP_ON_SIEVE_END	primesieve.c	292;"	d	file:
LOOP_ON_SIEVE_END	primesieve.c	71;"	d	file:
LOOP_ON_SIEVE_STOP	mpz/bin_uiui.c	501;"	d	file:
LOOP_ON_SIEVE_STOP	mpz/bin_uiui.c	654;"	d	file:
LOOP_ON_SIEVE_STOP	mpz/oddfac_1.c	256;"	d	file:
LOOP_ON_SIEVE_STOP	mpz/oddfac_1.c	85;"	d	file:
LOOP_ON_SIEVE_STOP	mpz/primorial_ui.c	72;"	d	file:
LOOP_ON_SIEVE_STOP	primesieve.c	293;"	d	file:
LOOP_ON_SIEVE_STOP	primesieve.c	65;"	d	file:
LOR	demos/calc/calc.c	/^     LOR = 277,$/;"	e	enum:yytokentype	file:
LOR	demos/calc/calc.c	294;"	d	file:
LOR	demos/calc/calc.h	/^     LOR = 277,$/;"	e	enum:yytokentype
LOR	demos/calc/calc.h	99;"	d
LOW0	mpn/generic/mod_34lsub1.c	77;"	d	file:
LOW0	mpn/mod_34lsub1.c	77;"	d	file:
LOW1	mpn/generic/mod_34lsub1.c	80;"	d	file:
LOW1	mpn/mod_34lsub1.c	80;"	d	file:
LOW2	mpn/generic/mod_34lsub1.c	83;"	d	file:
LOW2	mpn/mod_34lsub1.c	83;"	d	file:
LOW32	mpn/sparc64/sparc64.h	36;"	d
LOWMASK	tests/refmpn.c	1089;"	d	file:
LOWPART	tests/refmpn.c	1092;"	d	file:
LOW_BOUND	tests/mpf/t-get_d.c	26;"	d	file:
LOW_BOUND	tests/mpf/t-get_d.c	34;"	d	file:
LOW_BOUND	tests/mpf/t-get_d.c	39;"	d	file:
LOW_MASK	mpz/cfdiv_r_2exp.c	36;"	d	file:
LOW_ZEROS_MASK	gmp-impl.h	3327;"	d
LSHIFT	demos/calc/calc.c	/^     LSHIFT = 284,$/;"	e	enum:yytokentype	file:
LSHIFT	demos/calc/calc.c	301;"	d	file:
LSHIFT	demos/calc/calc.h	/^     LSHIFT = 284,$/;"	e	enum:yytokentype
LSHIFT	demos/calc/calc.h	106;"	d
LSHIFT1	tests/mpf/t-eq.c	111;"	d	file:
LSHIFT2	tests/mpf/t-eq.c	112;"	d	file:
LT_OBJDIR	config.h	513;"	d
LUCNUM	demos/calc/calc.c	/^     LUCNUM = 270,$/;"	e	enum:yytokentype	file:
LUCNUM	demos/calc/calc.c	287;"	d	file:
LUCNUM	demos/calc/calc.h	/^     LUCNUM = 270,$/;"	e	enum:yytokentype
LUCNUM	demos/calc/calc.h	92;"	d
LXW	tests/devel/anymul_1.c	73;"	d	file:
LXW	tests/devel/aors_n.c	90;"	d	file:
LXW	tests/devel/copy.c	66;"	d	file:
LXW	tests/devel/shift.c	67;"	d	file:
L_v1	mpn/m88k/mc88110/add_n.S	/^L_v1:	cmp	 r12,size,2$/;"	l
L_v1	mpn/m88k/mc88110/sub_n.S	/^L_v1:	cmp	 r12,size,2$/;"	l
L_v1b	mpn/m88k/mc88110/sub_n.S	/^L_v1b:	cmp	 r12,size,2$/;"	l
L_v2	mpn/m88k/mc88110/add_n.S	/^L_v2:	subu	 size,size,8$/;"	l
L_v2	mpn/m88k/mc88110/sub_n.S	/^L_v2:	subu	 size,size,8$/;"	l
Lbase	mpn/m88k/add_n.s	/^Lbase:	ld	r8,r3,4$/;"	l
Lbase	mpn/m88k/sub_n.s	/^Lbase:	ld	r8,r3,4$/;"	l
Lend	mpn/m88k/mc88110/addmul_1.s	/^Lend:	ld	 r7,r8,0$/;"	l
Lend	mpn/m88k/mc88110/mul_1.s	/^Lend:	addu.cio r9,r11,r2$/;"	l
Lend	mpn/power/add_n.asm	/^Lend:	ae	11,10,9		C add limbs with cy, set cy$/;"	l
Lend	mpn/power/addmul_1.asm	/^Lend:	st	8,4(3)$/;"	l
Lend	mpn/power/lshift.asm	/^Lend:	stu	7,-4(9)		C store 2:nd least significant limb$/;"	l
Lend	mpn/power/mul_1.asm	/^Lend:	st	8,4(3)$/;"	l
Lend	mpn/power/rshift.asm	/^Lend:	stu	7,4(9)		C store 2:nd most significant limb$/;"	l
Lend	mpn/power/sub_n.asm	/^Lend:	sfe	11,10,9		C subtract limbs with cy, set cy$/;"	l
Lend	mpn/power/submul_1.asm	/^Lend:	st	8,4(3)$/;"	l
Lend0	mpn/power/addmul_1.asm	/^Lend0:	cal	9,0(10)$/;"	l
Lend0	mpn/power/mul_1.asm	/^Lend0:	cal	9,0(10)$/;"	l
Lend0	mpn/power/submul_1.asm	/^Lend0:	cal	9,0(10)$/;"	l
Lend1	mpn/m88k/mc88110/add_n.S	/^Lend1:	addu.cio r6,r10,r8$/;"	l
Lend1	mpn/m88k/mc88110/sub_n.S	/^Lend1:	subu.cio r6,r10,r8$/;"	l
Lend1b	mpn/m88k/mc88110/sub_n.S	/^Lend1b:	subu.cio r6,r8,r10$/;"	l
Lend2	mpn/m88k/mc88110/add_n.S	/^Lend2:	bb0	 0,size,Lret2$/;"	l
Lend2	mpn/m88k/mc88110/sub_n.S	/^Lend2:	bb0	 0,size,Lret2$/;"	l
Lend2	mpn/power/lshift.asm	/^Lend2:	sle	7,0,6		C compute least significant limb$/;"	l
Lend2	mpn/power/rshift.asm	/^Lend2:	sre	7,0,6		C compute most significant limb$/;"	l
Leven	mpn/power/add_n.asm	/^Leven:	lu	9,4(4)		C load s1 limb and update s1_ptr$/;"	l
Leven	mpn/power/sub_n.asm	/^Leven:	lu	9,4(4)		C load s1 limb and update s1_ptr$/;"	l
Lfin1	mpn/m88k/mc88110/add_n.S	/^Lfin1:	addu	 size,size,8-2$/;"	l
Lfin1	mpn/m88k/mc88110/sub_n.S	/^Lfin1:	addu	 size,size,8-2$/;"	l
Lfin1b	mpn/m88k/mc88110/sub_n.S	/^Lfin1b:	addu	 size,size,8-2$/;"	l
Lfin2	mpn/m88k/mc88110/add_n.S	/^Lfin2:	addu	 size,size,8-2$/;"	l
Lfin2	mpn/m88k/mc88110/sub_n.S	/^Lfin2:	addu	 size,size,8-2$/;"	l
Linear_Congruential_Generator	rand/randlc2x.c	/^static const gmp_randfnptr_t Linear_Congruential_Generator = {$/;"	v	file:
Ljone	mpn/m88k/mc88110/add_n.S	/^Ljone:	ld	 r10,s1_ptr,0$/;"	l
Ljone	mpn/m88k/mc88110/sub_n.S	/^Ljone:	ld	 r10,s1_ptr,0$/;"	l
Ln0	mpn/power/addmul_1.asm	/^Ln0:	bdz	Lend0$/;"	l
Ln0	mpn/power/mul_1.asm	/^Ln0:	bdz	Lend0$/;"	l
Ln0	mpn/power/submul_1.asm	/^Ln0:	bdz	Lend0$/;"	l
Ln1	mpn/power/addmul_1.asm	/^Ln1:	bdn	Lnloop$/;"	l
Ln1	mpn/power/mul_1.asm	/^Ln1:	bdn	Lnloop$/;"	l
Ln1	mpn/power/submul_1.asm	/^Ln1:	bdn	Lnloop$/;"	l
Lneg	mpn/power/addmul_1.asm	/^Lneg:	cax	9,9,0$/;"	l
Lneg	mpn/power/mul_1.asm	/^Lneg:	cax	9,9,0$/;"	l
Lneg	mpn/power/submul_1.asm	/^Lneg:	cax	9,9,0$/;"	l
Lnloop	mpn/power/addmul_1.asm	/^Lnloop:	lu	0,4(4)$/;"	l
Lnloop	mpn/power/mul_1.asm	/^Lnloop:	lu	0,4(4)$/;"	l
Lnloop	mpn/power/submul_1.asm	/^Lnloop:	lu	0,4(4)$/;"	l
Loop	mpn/m88k/add_n.s	/^Loop:	addu	r3,r3,32$/;"	l
Loop	mpn/m88k/mc88110/addmul_1.s	/^Loop:	ld	 r7,r8[r4]$/;"	l
Loop	mpn/m88k/mc88110/mul_1.s	/^Loop:	ld	 r6,r3[r4]$/;"	l
Loop	mpn/m88k/mul_1.s	/^Loop:	ld	 r9,r3[r4]$/;"	l
Loop	mpn/m88k/sub_n.s	/^Loop:	addu	r3,r3,32$/;"	l
Loop	mpn/mips32/addmul_1.asm	/^Loop:	lw	$10,0($4)$/;"	l
Loop	mpn/mips32/mul_1.asm	/^Loop:	mflo	$10$/;"	l
Loop	mpn/mips32/submul_1.asm	/^Loop:	lw	$10,0($4)$/;"	l
Loop	mpn/mips64/addmul_1.asm	/^Loop:	ld	$10,0($4)$/;"	l
Loop	mpn/mips64/mul_1.asm	/^Loop:	nop$/;"	l
Loop	mpn/mips64/submul_1.asm	/^Loop:	ld	$10,0($4)$/;"	l
Loop	mpn/power/add_n.asm	/^Loop:	lu	8,4(4)		C load s1 limb and update s1_ptr$/;"	l
Loop	mpn/power/lshift.asm	/^Loop:	lu	0,-4(4)		C load next lower limb$/;"	l
Loop	mpn/power/rshift.asm	/^Loop:	lu	0,4(4)		C load next higher limb$/;"	l
Loop	mpn/power/sub_n.asm	/^Loop:	lu	8,4(4)		C load s1 limb and update s1_ptr$/;"	l
Loop1	mpn/m88k/mc88110/add_n.S	/^Loop1:	subu	 size,size,8$/;"	l
Loop1	mpn/m88k/mc88110/sub_n.S	/^Loop1:	subu	 size,size,8$/;"	l
Loop1b	mpn/m88k/mc88110/sub_n.S	/^Loop1b:	subu	 size,size,8$/;"	l
Loop2	mpn/m88k/mc88110/add_n.S	/^Loop2:	subu	 size,size,8$/;"	l
Loop2	mpn/m88k/mc88110/sub_n.S	/^Loop2:	subu	 size,size,8$/;"	l
Loope1	mpn/m88k/mc88110/add_n.S	/^Loope1:	addu.cio r6,r10,r8$/;"	l
Loope1	mpn/m88k/mc88110/sub_n.S	/^Loope1:	subu.cio r6,r10,r8$/;"	l
Loope2	mpn/m88k/mc88110/add_n.S	/^Loope2:	ld.d	 r8,s1_ptr,0$/;"	l
Loope2	mpn/m88k/mc88110/sub_n.S	/^Loope2:	ld.d	 r8,s1_ptr,0$/;"	l
Lp0	mpn/power/addmul_1.asm	/^Lp0:	bdz	Lend0$/;"	l
Lp0	mpn/power/mul_1.asm	/^Lp0:	bdz	Lend0$/;"	l
Lp0	mpn/power/submul_1.asm	/^Lp0:	bdz	Lend0$/;"	l
Lp1	mpn/power/addmul_1.asm	/^Lp1:	bdn	Lploop$/;"	l
Lp1	mpn/power/mul_1.asm	/^Lp1:	bdn	Lploop$/;"	l
Lp1	mpn/power/submul_1.asm	/^Lp1:	bdn	Lploop$/;"	l
Lploop	mpn/power/addmul_1.asm	/^Lploop:	lu	0,4(4)$/;"	l
Lploop	mpn/power/mul_1.asm	/^Lploop:	lu	0,4(4)$/;"	l
Lploop	mpn/power/submul_1.asm	/^Lploop:	lu	0,4(4)$/;"	l
Lpos	mpn/power/addmul_1.asm	/^Lpos:	bdz	Lend$/;"	l
Lpos	mpn/power/mul_1.asm	/^Lpos:	bdz	Lend$/;"	l
Lpos	mpn/power/submul_1.asm	/^Lpos:	bdz	Lend$/;"	l
Lret1	mpn/m88k/mc88110/add_n.S	/^Lret1:	jmp.n	 r1$/;"	l
Lret1	mpn/m88k/mc88110/sub_n.S	/^Lret1:	addu.ci r2,r0,r0		; return carry-out from most sign. limb$/;"	l
Lret1b	mpn/m88k/mc88110/sub_n.S	/^Lret1b:	addu.ci r2,r0,r0		; return carry-out from most sign. limb$/;"	l
Lret2	mpn/m88k/mc88110/add_n.S	/^Lret2:	jmp.n	 r1$/;"	l
Lret2	mpn/m88k/mc88110/sub_n.S	/^Lret2:	addu.ci r2,r0,r0		; return carry-out from most sign. limb$/;"	l
Lsmall	mpn/m88k/mul_1.s	/^Lsmall:$/;"	l
Lzero	mpn/m88k/add_n.s	/^Lzero:	subu	r10,r10,1		; add 0 + 8r limbs (adj loop cnt)$/;"	l
Lzero	mpn/m88k/sub_n.s	/^Lzero:	subu	r10,r10,1		; subtract 0 + 8r limbs (adj loop cnt)$/;"	l
M	mpn/generic/hgcd_jacobi.c	/^  struct hgcd_matrix *M;$/;"	m	struct:hgcd_jacobi_ctx	typeref:struct:hgcd_jacobi_ctx::hgcd_matrix	file:
M	mpn/hgcd_jacobi.c	/^  struct hgcd_matrix *M;$/;"	m	struct:hgcd_jacobi_ctx	typeref:struct:hgcd_jacobi_ctx::hgcd_matrix	file:
M	mpz/bin_uiui.c	161;"	d	file:
M	rand/randmt.h	37;"	d
M	tests/devel/anymul_1.c	74;"	d	file:
M	tests/devel/aors_n.c	91;"	d	file:
M	tests/devel/copy.c	67;"	d	file:
M	tests/devel/divmod_1.c	52;"	d	file:
M	tests/devel/divrem.c	49;"	d	file:
M	tests/devel/logops_n.c	100;"	d	file:
M	tests/devel/shift.c	68;"	d	file:
M	tests/mpf/t-get_si.c	123;"	d	file:
M	tests/mpf/t-get_ui.c	30;"	d	file:
M	tests/mpn/t-aors_1.c	28;"	d	file:
M	tests/mpn/t-iord_u.c	32;"	d	file:
M	tests/mpz/t-aorsmul.c	30;"	d	file:
M	tests/t-sub.c	32;"	d	file:
M1	mpn/generic/mod_34lsub1.c	73;"	d	file:
M1	mpn/mod_34lsub1.c	73;"	d	file:
M2	mpn/generic/mod_34lsub1.c	74;"	d	file:
M2	mpn/mod_34lsub1.c	74;"	d	file:
M3	mpn/generic/mod_34lsub1.c	75;"	d	file:
M3	mpn/mod_34lsub1.c	75;"	d	file:
MAGIC	mpn/generic/sqrtrem.c	108;"	d	file:
MAGIC	mpn/generic/sqrtrem.c	110;"	d	file:
MAGIC	mpn/sqrtrem.c	108;"	d	file:
MAGIC	mpn/sqrtrem.c	110;"	d	file:
MAGIC	tests/mpn/t-aors_1.c	30;"	d	file:
MAKE_FMS	mpn/x86/fat/fat.c	59;"	d	file:
MAKE_FMS	mpn/x86_64/fat/fat.c	60;"	d	file:
MAP_ANON	tests/devel/try.c	2096;"	d	file:
MASK	mpn/gcd_1.c	43;"	d	file:
MASK	mpn/generic/gcd_1.c	43;"	d	file:
MASK_1	rand/randmt.c	57;"	d	file:
MASK_2	rand/randmt.c	58;"	d	file:
MATRIX22_STRASSEN_THRESHOLD	gmp-impl.h	4144;"	d
MATRIX22_STRASSEN_THRESHOLD	gmp-impl.h	4896;"	d
MATRIX22_STRASSEN_THRESHOLD	gmp-impl.h	4897;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	173;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	195;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/alpha/gmp-mparam.h	57;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/arm/gmp-mparam.h	118;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/arm/v6/gmp-mparam.h	182;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	187;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	188;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	201;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	203;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/arm64/gmp-mparam.h	233;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/ia64/gmp-mparam.h	198;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/minithres/gmp-mparam.h	101;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	158;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/pa64/gmp-mparam.h	236;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	183;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc32/gmp-mparam.h	216;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	146;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	190;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	145;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	154;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	148;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	159;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	55;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	165;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	206;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	205;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	146;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	239;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	193;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/s390_32/gmp-mparam.h	129;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/s390_64/gmp-mparam.h	161;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	227;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	139;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	190;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/sparc64/gmp-mparam.h	130;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	216;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	140;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/atom/gmp-mparam.h	201;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	194;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	197;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	183;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/core2/gmp-mparam.h	186;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	196;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	210;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	189;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/geode/gmp-mparam.h	132;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/k10/gmp-mparam.h	200;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/k6/gmp-mparam.h	157;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/k7/gmp-mparam.h	247;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/k8/gmp-mparam.h	184;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/nano/gmp-mparam.h	151;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/p6/gmp-mparam.h	183;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	189;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	194;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	154;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	192;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	210;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	235;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	250;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	213;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	221;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	223;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	240;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	227;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	225;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/gmp-mparam.h	203;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	231;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	222;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	229;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	217;"	d
MATRIX22_STRASSEN_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	224;"	d
MATRIX_A	rand/randmt.h	38;"	d
MAX	gmp-impl.h	538;"	d
MAX	gmp-impl.h	539;"	d
MAX	tune/freq.c	137;"	d	file:
MAX3	tests/devel/try.c	220;"	d	file:
MAX3	tune/tuneup.c	298;"	d	file:
MAXBITS	mini-gmp/tests/t-add.c	25;"	d	file:
MAXBITS	mini-gmp/tests/t-aorsmul.c	27;"	d	file:
MAXBITS	mini-gmp/tests/t-bitops.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-div.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-div_2exp.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-gcd.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-lcm.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-limbs.c	28;"	d	file:
MAXBITS	mini-gmp/tests/t-logops.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-mul.c	27;"	d	file:
MAXBITS	mini-gmp/tests/t-powm.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-root.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-scan.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-sqrt.c	26;"	d	file:
MAXBITS	mini-gmp/tests/t-str.c	28;"	d	file:
MAXBITS	mini-gmp/tests/t-sub.c	25;"	d	file:
MAXEXP	tests/mpq/t-get_d.c	156;"	d	file:
MAXEXP	tests/mpq/t-get_d.c	159;"	d	file:
MAXEXP	tests/mpq/t-get_d.c	160;"	d	file:
MAXFACS	mpz/bin_uiui.c	168;"	d	file:
MAXFACS	mpz/bin_uiui.c	186;"	d	file:
MAXIMUM	mpf/fits_sint.c	33;"	d	file:
MAXIMUM	mpf/fits_slong.c	33;"	d	file:
MAXIMUM	mpf/fits_sshort.c	33;"	d	file:
MAXIMUM	mpf/fits_uint.c	33;"	d	file:
MAXIMUM	mpf/fits_ulong.c	33;"	d	file:
MAXIMUM	mpf/fits_ushort.c	33;"	d	file:
MAXIMUM	mpz/fits_sint.c	33;"	d	file:
MAXIMUM	mpz/fits_slong.c	33;"	d	file:
MAXIMUM	mpz/fits_sshort.c	33;"	d	file:
MAXLIMBS	mini-gmp/tests/t-aorsmul.c	31;"	d	file:
MAXLIMBS	mini-gmp/tests/t-mul.c	31;"	d	file:
MAXLIMBS	mini-gmp/tests/t-str.c	32;"	d	file:
MAXN	tests/mpq/t-cmp_z.c	48;"	d	file:
MAXSHIFT	mpn/gcd_1.c	42;"	d	file:
MAXSHIFT	mpn/generic/gcd_1.c	42;"	d	file:
MAX_AN	tests/mpn/t-toom2-sqr.c	4;"	d	file:
MAX_AN	tests/mpn/t-toom3-sqr.c	4;"	d	file:
MAX_AN	tests/mpn/t-toom4-sqr.c	4;"	d	file:
MAX_AN	tests/mpn/t-toom6-sqr.c	4;"	d	file:
MAX_AN	tests/mpn/t-toom8-sqr.c	4;"	d	file:
MAX_AN	tests/mpn/toom-shared.h	41;"	d
MAX_BN	tests/mpn/t-toom32.c	6;"	d	file:
MAX_BN	tests/mpn/t-toom42.c	6;"	d	file:
MAX_BN	tests/mpn/t-toom43.c	6;"	d	file:
MAX_BN	tests/mpn/t-toom52.c	6;"	d	file:
MAX_BN	tests/mpn/t-toom53.c	6;"	d	file:
MAX_BN	tests/mpn/t-toom54.c	6;"	d	file:
MAX_BN	tests/mpn/t-toom62.c	6;"	d	file:
MAX_BN	tests/mpn/t-toom63.c	6;"	d	file:
MAX_BN	tests/mpn/toom-shared.h	44;"	d
MAX_DN	tests/mpn/t-bdiv.c	115;"	d	file:
MAX_DN	tests/mpn/t-div.c	120;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	100;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	113;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	114;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	127;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	128;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	141;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	142;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	155;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	156;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	86;"	d	file:
MAX_LEFT	mpn/generic/mul_basecase.c	99;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	100;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	113;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	114;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	127;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	128;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	141;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	142;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	155;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	156;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	86;"	d	file:
MAX_LEFT	mpn/mul_basecase.c	99;"	d	file:
MAX_LIMBS	tests/mpn/t-broot.c	27;"	d	file:
MAX_LIMBS	tests/mpn/t-brootinv.c	27;"	d	file:
MAX_N	tests/mpn/t-invert.c	39;"	d	file:
MAX_N	tests/mpn/t-mullo.c	37;"	d	file:
MAX_N	tests/mpn/t-mulmid.c	37;"	d	file:
MAX_N	tests/mpn/t-mulmod_bnm1.c	39;"	d	file:
MAX_N	tests/mpn/t-sizeinbase.c	37;"	d	file:
MAX_N	tests/mpn/t-sqrlo.c	37;"	d	file:
MAX_N	tests/mpn/t-sqrmod_bnm1.c	39;"	d	file:
MAX_NN	tests/mpn/t-bdiv.c	116;"	d	file:
MAX_NN	tests/mpn/t-div.c	121;"	d	file:
MAX_OUTPUT	tests/misc/t-printf.c	67;"	d	file:
MAX_QBITS	tests/mpz/t-jac.c	882;"	d	file:
MAX_QBITS	tests/mpz/t-jac.c	983;"	d	file:
MAX_REPS	tune/tuneup.c	770;"	d	file:
MAX_SCHOENHAGE_THRESHOLD	tests/mpz/t-gcd.c	37;"	d	file:
MAX_SIZE	tests/mpn/t-matrix22.c	169;"	d	file:
MAX_SIZE	tests/mpn/t-minvert.c	26;"	d	file:
MAX_SIZE	tests/mpz/t-limbs.c	161;"	d	file:
MAX_URANDOMM_ITER	mpz/urandomm.c	38;"	d	file:
MAX_URANDOMM_ITER	rand/randmui.c	44;"	d	file:
MAX_WORDS	mini-gmp/tests/t-import.c	26;"	d	file:
MAX_WORD_SIZE	mini-gmp/tests/t-import.c	27;"	d	file:
MAX_ZEROS	tests/mpz/bit.c	170;"	d	file:
MAYBE_dcpi1_divappr	mpn/generic/invertappr.c	54;"	d	file:
MAYBE_dcpi1_divappr	mpn/generic/invertappr.c	58;"	d	file:
MAYBE_dcpi1_divappr	mpn/invertappr.c	54;"	d	file:
MAYBE_dcpi1_divappr	mpn/invertappr.c	58;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom33_mul.c	59;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom33_mul.c	62;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom44_mul.c	60;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom44_mul.c	64;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom6h_mul.c	260;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom6h_mul.c	47;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom6h_mul.c	52;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom8h_mul.c	302;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom8h_mul.c	56;"	d	file:
MAYBE_mul_basecase	mpn/generic/toom8h_mul.c	62;"	d	file:
MAYBE_mul_basecase	mpn/toom33_mul.c	59;"	d	file:
MAYBE_mul_basecase	mpn/toom33_mul.c	62;"	d	file:
MAYBE_mul_basecase	mpn/toom44_mul.c	60;"	d	file:
MAYBE_mul_basecase	mpn/toom44_mul.c	64;"	d	file:
MAYBE_mul_basecase	mpn/toom6h_mul.c	260;"	d	file:
MAYBE_mul_basecase	mpn/toom6h_mul.c	47;"	d	file:
MAYBE_mul_basecase	mpn/toom6h_mul.c	52;"	d	file:
MAYBE_mul_basecase	mpn/toom8h_mul.c	302;"	d	file:
MAYBE_mul_basecase	mpn/toom8h_mul.c	56;"	d	file:
MAYBE_mul_basecase	mpn/toom8h_mul.c	62;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom22_mul.c	56;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom22_mul.c	58;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom44_mul.c	61;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom44_mul.c	66;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom6h_mul.c	261;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom6h_mul.c	48;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom6h_mul.c	54;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom8h_mul.c	303;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom8h_mul.c	57;"	d	file:
MAYBE_mul_toom22	mpn/generic/toom8h_mul.c	64;"	d	file:
MAYBE_mul_toom22	mpn/toom22_mul.c	56;"	d	file:
MAYBE_mul_toom22	mpn/toom22_mul.c	58;"	d	file:
MAYBE_mul_toom22	mpn/toom44_mul.c	61;"	d	file:
MAYBE_mul_toom22	mpn/toom44_mul.c	66;"	d	file:
MAYBE_mul_toom22	mpn/toom6h_mul.c	261;"	d	file:
MAYBE_mul_toom22	mpn/toom6h_mul.c	48;"	d	file:
MAYBE_mul_toom22	mpn/toom6h_mul.c	54;"	d	file:
MAYBE_mul_toom22	mpn/toom8h_mul.c	303;"	d	file:
MAYBE_mul_toom22	mpn/toom8h_mul.c	57;"	d	file:
MAYBE_mul_toom22	mpn/toom8h_mul.c	64;"	d	file:
MAYBE_mul_toom33	mpn/generic/toom33_mul.c	60;"	d	file:
MAYBE_mul_toom33	mpn/generic/toom33_mul.c	64;"	d	file:
MAYBE_mul_toom33	mpn/generic/toom6h_mul.c	262;"	d	file:
MAYBE_mul_toom33	mpn/generic/toom6h_mul.c	49;"	d	file:
MAYBE_mul_toom33	mpn/generic/toom6h_mul.c	56;"	d	file:
MAYBE_mul_toom33	mpn/generic/toom8h_mul.c	304;"	d	file:
MAYBE_mul_toom33	mpn/generic/toom8h_mul.c	58;"	d	file:
MAYBE_mul_toom33	mpn/generic/toom8h_mul.c	66;"	d	file:
MAYBE_mul_toom33	mpn/toom33_mul.c	60;"	d	file:
MAYBE_mul_toom33	mpn/toom33_mul.c	64;"	d	file:
MAYBE_mul_toom33	mpn/toom6h_mul.c	262;"	d	file:
MAYBE_mul_toom33	mpn/toom6h_mul.c	49;"	d	file:
MAYBE_mul_toom33	mpn/toom6h_mul.c	56;"	d	file:
MAYBE_mul_toom33	mpn/toom8h_mul.c	304;"	d	file:
MAYBE_mul_toom33	mpn/toom8h_mul.c	58;"	d	file:
MAYBE_mul_toom33	mpn/toom8h_mul.c	66;"	d	file:
MAYBE_mul_toom44	mpn/generic/toom44_mul.c	62;"	d	file:
MAYBE_mul_toom44	mpn/generic/toom44_mul.c	68;"	d	file:
MAYBE_mul_toom44	mpn/generic/toom8h_mul.c	305;"	d	file:
MAYBE_mul_toom44	mpn/generic/toom8h_mul.c	59;"	d	file:
MAYBE_mul_toom44	mpn/generic/toom8h_mul.c	68;"	d	file:
MAYBE_mul_toom44	mpn/toom44_mul.c	62;"	d	file:
MAYBE_mul_toom44	mpn/toom44_mul.c	68;"	d	file:
MAYBE_mul_toom44	mpn/toom8h_mul.c	305;"	d	file:
MAYBE_mul_toom44	mpn/toom8h_mul.c	59;"	d	file:
MAYBE_mul_toom44	mpn/toom8h_mul.c	68;"	d	file:
MAYBE_mul_toom6h	mpn/generic/toom6h_mul.c	263;"	d	file:
MAYBE_mul_toom6h	mpn/generic/toom6h_mul.c	50;"	d	file:
MAYBE_mul_toom6h	mpn/generic/toom6h_mul.c	58;"	d	file:
MAYBE_mul_toom6h	mpn/toom6h_mul.c	263;"	d	file:
MAYBE_mul_toom6h	mpn/toom6h_mul.c	50;"	d	file:
MAYBE_mul_toom6h	mpn/toom6h_mul.c	58;"	d	file:
MAYBE_mul_toom8h	mpn/generic/toom8h_mul.c	306;"	d	file:
MAYBE_mul_toom8h	mpn/generic/toom8h_mul.c	60;"	d	file:
MAYBE_mul_toom8h	mpn/generic/toom8h_mul.c	70;"	d	file:
MAYBE_mul_toom8h	mpn/toom8h_mul.c	306;"	d	file:
MAYBE_mul_toom8h	mpn/toom8h_mul.c	60;"	d	file:
MAYBE_mul_toom8h	mpn/toom8h_mul.c	70;"	d	file:
MAYBE_range_basecase	mpn/generic/mullo_n.c	43;"	d	file:
MAYBE_range_basecase	mpn/generic/mullo_n.c	46;"	d	file:
MAYBE_range_basecase	mpn/generic/sqrlo.c	42;"	d	file:
MAYBE_range_basecase	mpn/generic/sqrlo.c	45;"	d	file:
MAYBE_range_basecase	mpn/mullo_n.c	43;"	d	file:
MAYBE_range_basecase	mpn/mullo_n.c	46;"	d	file:
MAYBE_range_basecase	mpn/sqrlo.c	42;"	d	file:
MAYBE_range_basecase	mpn/sqrlo.c	45;"	d	file:
MAYBE_range_toom22	mpn/generic/mullo_n.c	44;"	d	file:
MAYBE_range_toom22	mpn/generic/mullo_n.c	48;"	d	file:
MAYBE_range_toom22	mpn/generic/sqrlo.c	43;"	d	file:
MAYBE_range_toom22	mpn/generic/sqrlo.c	47;"	d	file:
MAYBE_range_toom22	mpn/mullo_n.c	44;"	d	file:
MAYBE_range_toom22	mpn/mullo_n.c	48;"	d	file:
MAYBE_range_toom22	mpn/sqrlo.c	43;"	d	file:
MAYBE_range_toom22	mpn/sqrlo.c	47;"	d	file:
MAYBE_sqr_above_basecase	mpn/generic/toom6_sqr.c	177;"	d	file:
MAYBE_sqr_above_basecase	mpn/generic/toom6_sqr.c	49;"	d	file:
MAYBE_sqr_above_basecase	mpn/generic/toom6_sqr.c	66;"	d	file:
MAYBE_sqr_above_basecase	mpn/generic/toom8_sqr.c	221;"	d	file:
MAYBE_sqr_above_basecase	mpn/generic/toom8_sqr.c	63;"	d	file:
MAYBE_sqr_above_basecase	mpn/generic/toom8_sqr.c	78;"	d	file:
MAYBE_sqr_above_basecase	mpn/toom6_sqr.c	177;"	d	file:
MAYBE_sqr_above_basecase	mpn/toom6_sqr.c	49;"	d	file:
MAYBE_sqr_above_basecase	mpn/toom6_sqr.c	66;"	d	file:
MAYBE_sqr_above_basecase	mpn/toom8_sqr.c	221;"	d	file:
MAYBE_sqr_above_basecase	mpn/toom8_sqr.c	63;"	d	file:
MAYBE_sqr_above_basecase	mpn/toom8_sqr.c	78;"	d	file:
MAYBE_sqr_above_toom2	mpn/generic/toom6_sqr.c	179;"	d	file:
MAYBE_sqr_above_toom2	mpn/generic/toom6_sqr.c	51;"	d	file:
MAYBE_sqr_above_toom2	mpn/generic/toom6_sqr.c	70;"	d	file:
MAYBE_sqr_above_toom2	mpn/generic/toom8_sqr.c	223;"	d	file:
MAYBE_sqr_above_toom2	mpn/generic/toom8_sqr.c	65;"	d	file:
MAYBE_sqr_above_toom2	mpn/generic/toom8_sqr.c	82;"	d	file:
MAYBE_sqr_above_toom2	mpn/toom6_sqr.c	179;"	d	file:
MAYBE_sqr_above_toom2	mpn/toom6_sqr.c	51;"	d	file:
MAYBE_sqr_above_toom2	mpn/toom6_sqr.c	70;"	d	file:
MAYBE_sqr_above_toom2	mpn/toom8_sqr.c	223;"	d	file:
MAYBE_sqr_above_toom2	mpn/toom8_sqr.c	65;"	d	file:
MAYBE_sqr_above_toom2	mpn/toom8_sqr.c	82;"	d	file:
MAYBE_sqr_above_toom3	mpn/generic/toom6_sqr.c	181;"	d	file:
MAYBE_sqr_above_toom3	mpn/generic/toom6_sqr.c	53;"	d	file:
MAYBE_sqr_above_toom3	mpn/generic/toom6_sqr.c	74;"	d	file:
MAYBE_sqr_above_toom3	mpn/generic/toom8_sqr.c	225;"	d	file:
MAYBE_sqr_above_toom3	mpn/generic/toom8_sqr.c	67;"	d	file:
MAYBE_sqr_above_toom3	mpn/generic/toom8_sqr.c	86;"	d	file:
MAYBE_sqr_above_toom3	mpn/toom6_sqr.c	181;"	d	file:
MAYBE_sqr_above_toom3	mpn/toom6_sqr.c	53;"	d	file:
MAYBE_sqr_above_toom3	mpn/toom6_sqr.c	74;"	d	file:
MAYBE_sqr_above_toom3	mpn/toom8_sqr.c	225;"	d	file:
MAYBE_sqr_above_toom3	mpn/toom8_sqr.c	67;"	d	file:
MAYBE_sqr_above_toom3	mpn/toom8_sqr.c	86;"	d	file:
MAYBE_sqr_above_toom4	mpn/generic/toom6_sqr.c	182;"	d	file:
MAYBE_sqr_above_toom4	mpn/generic/toom6_sqr.c	54;"	d	file:
MAYBE_sqr_above_toom4	mpn/generic/toom6_sqr.c	76;"	d	file:
MAYBE_sqr_above_toom4	mpn/generic/toom8_sqr.c	226;"	d	file:
MAYBE_sqr_above_toom4	mpn/generic/toom8_sqr.c	69;"	d	file:
MAYBE_sqr_above_toom4	mpn/generic/toom8_sqr.c	90;"	d	file:
MAYBE_sqr_above_toom4	mpn/toom6_sqr.c	182;"	d	file:
MAYBE_sqr_above_toom4	mpn/toom6_sqr.c	54;"	d	file:
MAYBE_sqr_above_toom4	mpn/toom6_sqr.c	76;"	d	file:
MAYBE_sqr_above_toom4	mpn/toom8_sqr.c	226;"	d	file:
MAYBE_sqr_above_toom4	mpn/toom8_sqr.c	69;"	d	file:
MAYBE_sqr_above_toom4	mpn/toom8_sqr.c	90;"	d	file:
MAYBE_sqr_above_toom6	mpn/generic/toom8_sqr.c	70;"	d	file:
MAYBE_sqr_above_toom6	mpn/generic/toom8_sqr.c	92;"	d	file:
MAYBE_sqr_above_toom6	mpn/toom8_sqr.c	70;"	d	file:
MAYBE_sqr_above_toom6	mpn/toom8_sqr.c	92;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom3_sqr.c	56;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom3_sqr.c	59;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom4_sqr.c	57;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom4_sqr.c	61;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom6_sqr.c	176;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom6_sqr.c	48;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom6_sqr.c	64;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom8_sqr.c	220;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom8_sqr.c	62;"	d	file:
MAYBE_sqr_basecase	mpn/generic/toom8_sqr.c	76;"	d	file:
MAYBE_sqr_basecase	mpn/toom3_sqr.c	56;"	d	file:
MAYBE_sqr_basecase	mpn/toom3_sqr.c	59;"	d	file:
MAYBE_sqr_basecase	mpn/toom4_sqr.c	57;"	d	file:
MAYBE_sqr_basecase	mpn/toom4_sqr.c	61;"	d	file:
MAYBE_sqr_basecase	mpn/toom6_sqr.c	176;"	d	file:
MAYBE_sqr_basecase	mpn/toom6_sqr.c	48;"	d	file:
MAYBE_sqr_basecase	mpn/toom6_sqr.c	64;"	d	file:
MAYBE_sqr_basecase	mpn/toom8_sqr.c	220;"	d	file:
MAYBE_sqr_basecase	mpn/toom8_sqr.c	62;"	d	file:
MAYBE_sqr_basecase	mpn/toom8_sqr.c	76;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom2_sqr.c	53;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom2_sqr.c	55;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom4_sqr.c	58;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom4_sqr.c	63;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom6_sqr.c	178;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom6_sqr.c	50;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom6_sqr.c	68;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom8_sqr.c	222;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom8_sqr.c	64;"	d	file:
MAYBE_sqr_toom2	mpn/generic/toom8_sqr.c	80;"	d	file:
MAYBE_sqr_toom2	mpn/toom2_sqr.c	53;"	d	file:
MAYBE_sqr_toom2	mpn/toom2_sqr.c	55;"	d	file:
MAYBE_sqr_toom2	mpn/toom4_sqr.c	58;"	d	file:
MAYBE_sqr_toom2	mpn/toom4_sqr.c	63;"	d	file:
MAYBE_sqr_toom2	mpn/toom6_sqr.c	178;"	d	file:
MAYBE_sqr_toom2	mpn/toom6_sqr.c	50;"	d	file:
MAYBE_sqr_toom2	mpn/toom6_sqr.c	68;"	d	file:
MAYBE_sqr_toom2	mpn/toom8_sqr.c	222;"	d	file:
MAYBE_sqr_toom2	mpn/toom8_sqr.c	64;"	d	file:
MAYBE_sqr_toom2	mpn/toom8_sqr.c	80;"	d	file:
MAYBE_sqr_toom3	mpn/generic/toom3_sqr.c	57;"	d	file:
MAYBE_sqr_toom3	mpn/generic/toom3_sqr.c	61;"	d	file:
MAYBE_sqr_toom3	mpn/generic/toom6_sqr.c	180;"	d	file:
MAYBE_sqr_toom3	mpn/generic/toom6_sqr.c	52;"	d	file:
MAYBE_sqr_toom3	mpn/generic/toom6_sqr.c	72;"	d	file:
MAYBE_sqr_toom3	mpn/generic/toom8_sqr.c	224;"	d	file:
MAYBE_sqr_toom3	mpn/generic/toom8_sqr.c	66;"	d	file:
MAYBE_sqr_toom3	mpn/generic/toom8_sqr.c	84;"	d	file:
MAYBE_sqr_toom3	mpn/toom3_sqr.c	57;"	d	file:
MAYBE_sqr_toom3	mpn/toom3_sqr.c	61;"	d	file:
MAYBE_sqr_toom3	mpn/toom6_sqr.c	180;"	d	file:
MAYBE_sqr_toom3	mpn/toom6_sqr.c	52;"	d	file:
MAYBE_sqr_toom3	mpn/toom6_sqr.c	72;"	d	file:
MAYBE_sqr_toom3	mpn/toom8_sqr.c	224;"	d	file:
MAYBE_sqr_toom3	mpn/toom8_sqr.c	66;"	d	file:
MAYBE_sqr_toom3	mpn/toom8_sqr.c	84;"	d	file:
MAYBE_sqr_toom4	mpn/generic/toom4_sqr.c	59;"	d	file:
MAYBE_sqr_toom4	mpn/generic/toom4_sqr.c	65;"	d	file:
MAYBE_sqr_toom4	mpn/generic/toom8_sqr.c	68;"	d	file:
MAYBE_sqr_toom4	mpn/generic/toom8_sqr.c	88;"	d	file:
MAYBE_sqr_toom4	mpn/toom4_sqr.c	59;"	d	file:
MAYBE_sqr_toom4	mpn/toom4_sqr.c	65;"	d	file:
MAYBE_sqr_toom4	mpn/toom8_sqr.c	68;"	d	file:
MAYBE_sqr_toom4	mpn/toom8_sqr.c	88;"	d	file:
MEASURE_MATCH	tune/freq.c	725;"	d	file:
MEASURE_MAX_ATTEMPTS	tune/freq.c	723;"	d	file:
MEASURE_TOLERANCE	tune/freq.c	724;"	d	file:
MEDIUM	mpn/generic/perfpow.c	38;"	d	file:
MEDIUM	mpn/perfpow.c	38;"	d	file:
MEM_OVERLAP_P	gmp-impl.h	2342;"	d
MERSENNE	demos/pexpr.c	/^	   LOG, LOG2, FERMAT, MERSENNE, FIBONACCI, RANDOM, NEXTPRIME, BINOM,$/;"	e	enum:op_t	file:
METHOD	tests/devel/tst-addsub.c	28;"	d	file:
MFTB	tune/time.c	285;"	d	file:
MFTB	tune/time.c	300;"	d	file:
MFTB	tune/time.c	304;"	d	file:
MICROSECONDS_P	tune/time.c	581;"	d	file:
MIN	bootstrap.c	34;"	d	file:
MIN	demos/calc/calcread.c	36;"	d	file:
MIN	gmp-impl.h	536;"	d
MIN	gmp-impl.h	537;"	d
MIN	tune/freq.c	134;"	d	file:
MINIMUM	mpf/fits_sint.c	34;"	d	file:
MINIMUM	mpf/fits_slong.c	34;"	d	file:
MINIMUM	mpf/fits_sshort.c	34;"	d	file:
MINIMUM	mpz/fits_sint.c	34;"	d	file:
MINIMUM	mpz/fits_slong.c	34;"	d	file:
MINIMUM	mpz/fits_sshort.c	34;"	d	file:
MINI_GMP_DIR	mini-gmp/tests/Makefile	/^MINI_GMP_DIR=..$/;"	m
MINUS	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
MIN_AN	tests/mpn/t-toom2-sqr.c	3;"	d	file:
MIN_AN	tests/mpn/t-toom22.c	3;"	d	file:
MIN_AN	tests/mpn/t-toom3-sqr.c	3;"	d	file:
MIN_AN	tests/mpn/t-toom32.c	4;"	d	file:
MIN_AN	tests/mpn/t-toom33.c	6;"	d	file:
MIN_AN	tests/mpn/t-toom4-sqr.c	3;"	d	file:
MIN_AN	tests/mpn/t-toom42.c	4;"	d	file:
MIN_AN	tests/mpn/t-toom43.c	4;"	d	file:
MIN_AN	tests/mpn/t-toom44.c	6;"	d	file:
MIN_AN	tests/mpn/t-toom52.c	4;"	d	file:
MIN_AN	tests/mpn/t-toom53.c	4;"	d	file:
MIN_AN	tests/mpn/t-toom54.c	4;"	d	file:
MIN_AN	tests/mpn/t-toom6-sqr.c	3;"	d	file:
MIN_AN	tests/mpn/t-toom62.c	4;"	d	file:
MIN_AN	tests/mpn/t-toom63.c	4;"	d	file:
MIN_AN	tests/mpn/t-toom6h.c	8;"	d	file:
MIN_AN	tests/mpn/t-toom8-sqr.c	3;"	d	file:
MIN_AN	tests/mpn/t-toom8h.c	8;"	d	file:
MIN_BN	tests/mpn/t-toom22.c	5;"	d	file:
MIN_BN	tests/mpn/t-toom32.c	5;"	d	file:
MIN_BN	tests/mpn/t-toom33.c	7;"	d	file:
MIN_BN	tests/mpn/t-toom42.c	5;"	d	file:
MIN_BN	tests/mpn/t-toom43.c	5;"	d	file:
MIN_BN	tests/mpn/t-toom44.c	7;"	d	file:
MIN_BN	tests/mpn/t-toom52.c	5;"	d	file:
MIN_BN	tests/mpn/t-toom53.c	5;"	d	file:
MIN_BN	tests/mpn/t-toom54.c	5;"	d	file:
MIN_BN	tests/mpn/t-toom62.c	5;"	d	file:
MIN_BN	tests/mpn/t-toom63.c	5;"	d	file:
MIN_BN	tests/mpn/t-toom6h.c	9;"	d	file:
MIN_BN	tests/mpn/t-toom8h.c	10;"	d	file:
MIN_N	tests/mpn/t-invert.c	40;"	d	file:
MIN_N	tests/mpn/t-mullo.c	38;"	d	file:
MIN_N	tests/mpn/t-mulmod_bnm1.c	40;"	d	file:
MIN_N	tests/mpn/t-sqrlo.c	38;"	d	file:
MIN_N	tests/mpn/t-sqrmod_bnm1.c	40;"	d	file:
MIN_OPERAND_BITSIZE	tests/mpz/t-gcd.c	46;"	d	file:
MIN_OPERAND_BITSIZE	tests/mpz/t-gcd.c	48;"	d	file:
MIN_OPERAND_SIZE	tests/mpn/t-hgcd.c	31;"	d	file:
MIN_OPERAND_SIZE	tests/mpn/t-hgcd_appr.c	32;"	d	file:
MIN_REPS	tune/tuneup.c	771;"	d	file:
MISC_OBJS	mini-gmp/tests/Makefile	/^MISC_OBJS = hex-random.o mini-random.o testutils.o$/;"	m
MOD	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
MOD34_BITS	mpn/generic/perfsqr.c	104;"	d	file:
MOD34_BITS	mpn/perfsqr.c	104;"	d	file:
MOD34_MASK	mpn/generic/perfsqr.c	105;"	d	file:
MOD34_MASK	mpn/perfsqr.c	105;"	d	file:
MODEXACT_1_ODD_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	60;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/alpha/gmp-mparam.h	73;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/cray/gmp-mparam.h	67;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	61;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/m68k/gmp-mparam.h	64;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/mips32/gmp-mparam.h	60;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/mips64/gmp-mparam.h	60;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	60;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/power/gmp-mparam.h	57;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	69;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/sparc32/gmp-mparam.h	55;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	61;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	61;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/x86/i486/gmp-mparam.h	57;"	d
MODEXACT_1_ODD_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	64;"	d
MODLIMB_INVERSE_3	gmp-impl.h	3288;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	gmp-impl.h	4952;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	gmp-impl.h	4953;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	44;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	46;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/arm/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/arm/v6/gmp-mparam.h	43;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/arm64/gmp-mparam.h	43;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/generic/mod_1.c	61;"	d	file:
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/ia64/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/minithres/gmp-mparam.h	37;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/mod_1.c	61;"	d	file:
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/pa64/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	44;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/gmp-mparam.h	53;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	38;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	37;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	39;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	38;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	43;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/s390_32/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/s390_64/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	44;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	36;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	44;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/sparc64/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	44;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	42;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/atom/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/core2/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/geode/gmp-mparam.h	38;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/k10/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/k6/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/k7/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/k8/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/nano/gmp-mparam.h	39;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/p6/gmp-mparam.h	46;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	46;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	45;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	45;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	44;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	45;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	44;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	41;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	40;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/gmp-mparam.h	37;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	48;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	45;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	44;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	47;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	44;"	d
MOD_1N_TO_MOD_1_1_THRESHOLD	tune/mod_1_div.c	38;"	d	file:
MOD_1N_TO_MOD_1_1_THRESHOLD	tune/mod_1_div.c	42;"	d	file:
MOD_1N_TO_MOD_1_1_THRESHOLD	tune/mod_1_inv.c	38;"	d	file:
MOD_1N_TO_MOD_1_1_THRESHOLD	tune/mod_1_inv.c	42;"	d	file:
MOD_1U_TO_MOD_1_1_THRESHOLD	gmp-impl.h	4956;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	gmp-impl.h	4957;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	45;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	47;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/arm/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/arm/v6/gmp-mparam.h	44;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/arm64/gmp-mparam.h	44;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/generic/mod_1.c	57;"	d	file:
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/ia64/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/minithres/gmp-mparam.h	38;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/mod_1.c	57;"	d	file:
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/pa64/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	45;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/gmp-mparam.h	54;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	39;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	38;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	40;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	39;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	44;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/s390_32/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/s390_64/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	45;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	37;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	45;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/sparc64/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	45;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	43;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/atom/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/core2/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/geode/gmp-mparam.h	39;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/k10/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/k6/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/k7/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/k8/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/nano/gmp-mparam.h	40;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/p6/gmp-mparam.h	47;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	47;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	46;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	46;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	45;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	46;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	45;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	42;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	41;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/gmp-mparam.h	38;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	49;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	46;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	45;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	48;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	45;"	d
MOD_1U_TO_MOD_1_1_THRESHOLD	tune/mod_1_div.c	39;"	d	file:
MOD_1U_TO_MOD_1_1_THRESHOLD	tune/mod_1_div.c	43;"	d	file:
MOD_1U_TO_MOD_1_1_THRESHOLD	tune/mod_1_inv.c	39;"	d	file:
MOD_1U_TO_MOD_1_1_THRESHOLD	tune/mod_1_inv.c	43;"	d	file:
MOD_1_1P_METHOD	gmp-impl.h	4948;"	d
MOD_1_1P_METHOD	gmp-impl.h	4949;"	d
MOD_1_1P_METHOD	mpn/alpha/ev5/gmp-mparam.h	41;"	d
MOD_1_1P_METHOD	mpn/alpha/ev6/gmp-mparam.h	43;"	d
MOD_1_1P_METHOD	mpn/arm64/gmp-mparam.h	40;"	d
MOD_1_1P_METHOD	mpn/generic/mod_1_1.c	44;"	d	file:
MOD_1_1P_METHOD	mpn/ia64/gmp-mparam.h	38;"	d
MOD_1_1P_METHOD	mpn/mod_1_1.c	44;"	d	file:
MOD_1_1P_METHOD	mpn/pa64/gmp-mparam.h	38;"	d
MOD_1_1P_METHOD	mpn/powerpc32/gmp-mparam.h	50;"	d
MOD_1_1P_METHOD	mpn/powerpc32/p3/gmp-mparam.h	38;"	d
MOD_1_1P_METHOD	mpn/powerpc32/p4/gmp-mparam.h	38;"	d
MOD_1_1P_METHOD	mpn/powerpc32/p5/gmp-mparam.h	38;"	d
MOD_1_1P_METHOD	mpn/powerpc32/p6/gmp-mparam.h	38;"	d
MOD_1_1P_METHOD	mpn/powerpc32/p7/gmp-mparam.h	38;"	d
MOD_1_1P_METHOD	mpn/powerpc64/mode32/p4/gmp-mparam.h	35;"	d
MOD_1_1P_METHOD	mpn/s390_32/esame/gmp-mparam.h	40;"	d
MOD_1_1P_METHOD	mpn/s390_32/gmp-mparam.h	38;"	d
MOD_1_1P_METHOD	mpn/s390_64/gmp-mparam.h	38;"	d
MOD_1_1P_METHOD	mpn/s390_64/z10/gmp-mparam.h	41;"	d
MOD_1_1P_METHOD	mpn/sparc32/ultrasparct1/gmp-mparam.h	33;"	d
MOD_1_1P_METHOD	mpn/sparc32/v9/gmp-mparam.h	41;"	d
MOD_1_1P_METHOD	mpn/sparc64/ultrasparc34/gmp-mparam.h	41;"	d
MOD_1_1P_METHOD	mpn/sparc64/ultrasparct1/gmp-mparam.h	39;"	d
MOD_1_1P_METHOD	mpn/x86/nano/gmp-mparam.h	36;"	d
MOD_1_1P_METHOD	tune/mod_1_1-1.c	34;"	d	file:
MOD_1_1P_METHOD	tune/mod_1_1-1.c	35;"	d	file:
MOD_1_1P_METHOD	tune/mod_1_1-2.c	34;"	d	file:
MOD_1_1P_METHOD	tune/mod_1_1-2.c	35;"	d	file:
MOD_1_1_THRESHOLD	mpn/alpha/gmp-mparam.h	67;"	d
MOD_1_1_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	63;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	gmp-impl.h	4960;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	gmp-impl.h	4961;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	46;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	48;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/arm/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/arm/v6/gmp-mparam.h	45;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/arm64/gmp-mparam.h	45;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/generic/mod_1.c	65;"	d	file:
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/ia64/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/minithres/gmp-mparam.h	39;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/mod_1.c	65;"	d	file:
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/pa64/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	46;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc32/gmp-mparam.h	55;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	40;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	39;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	41;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	40;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	45;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/s390_32/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/s390_64/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	46;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	38;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	46;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/sparc64/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	46;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	44;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/atom/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/core2/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/geode/gmp-mparam.h	40;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/k10/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/k6/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/k7/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/k8/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/nano/gmp-mparam.h	41;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/p6/gmp-mparam.h	48;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	48;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	47;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	47;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	46;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	47;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	46;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	43;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	42;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/gmp-mparam.h	39;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	50;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	47;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	46;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	49;"	d
MOD_1_1_TO_MOD_1_2_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	46;"	d
MOD_1_2_THRESHOLD	mpn/alpha/gmp-mparam.h	68;"	d
MOD_1_2_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	64;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	gmp-impl.h	4964;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	gmp-impl.h	4965;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	47;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	49;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/arm/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/arm/v6/gmp-mparam.h	46;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/arm64/gmp-mparam.h	46;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/generic/mod_1.c	69;"	d	file:
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/ia64/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/minithres/gmp-mparam.h	40;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/mod_1.c	69;"	d	file:
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/pa64/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	47;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc32/gmp-mparam.h	56;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	41;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	40;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	42;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	41;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	46;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/s390_32/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/s390_64/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	47;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	39;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	47;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/sparc64/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	47;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	45;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/atom/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/core2/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/geode/gmp-mparam.h	41;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/k10/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/k6/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/k7/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/k8/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/nano/gmp-mparam.h	42;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/p6/gmp-mparam.h	49;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	49;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	48;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	48;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	47;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	48;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	47;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	44;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	43;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/gmp-mparam.h	40;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	51;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	48;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	47;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	50;"	d
MOD_1_2_TO_MOD_1_4_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	47;"	d
MOD_1_4_THRESHOLD	mpn/alpha/gmp-mparam.h	69;"	d
MOD_1_4_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	65;"	d
MOD_1_NORM_THRESHOLD	gmp-impl.h	4940;"	d
MOD_1_NORM_THRESHOLD	gmp-impl.h	4941;"	d
MOD_1_NORM_THRESHOLD	gmp-impl.h	609;"	d
MOD_1_NORM_THRESHOLD	gmp-impl.h	616;"	d
MOD_1_NORM_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	42;"	d
MOD_1_NORM_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	44;"	d
MOD_1_NORM_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	54;"	d
MOD_1_NORM_THRESHOLD	mpn/alpha/gmp-mparam.h	65;"	d
MOD_1_NORM_THRESHOLD	mpn/arm/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/arm/v6/gmp-mparam.h	41;"	d
MOD_1_NORM_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/arm64/gmp-mparam.h	41;"	d
MOD_1_NORM_THRESHOLD	mpn/cray/gmp-mparam.h	61;"	d
MOD_1_NORM_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	55;"	d
MOD_1_NORM_THRESHOLD	mpn/generic/mod_1.c	49;"	d	file:
MOD_1_NORM_THRESHOLD	mpn/ia64/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/m68k/gmp-mparam.h	58;"	d
MOD_1_NORM_THRESHOLD	mpn/minithres/gmp-mparam.h	35;"	d
MOD_1_NORM_THRESHOLD	mpn/mips32/gmp-mparam.h	54;"	d
MOD_1_NORM_THRESHOLD	mpn/mips64/gmp-mparam.h	54;"	d
MOD_1_NORM_THRESHOLD	mpn/mod_1.c	49;"	d	file:
MOD_1_NORM_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	54;"	d
MOD_1_NORM_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/pa64/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/power/gmp-mparam.h	51;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	42;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc32/gmp-mparam.h	51;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	36;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	61;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	35;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	37;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	36;"	d
MOD_1_NORM_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	41;"	d
MOD_1_NORM_THRESHOLD	mpn/s390_32/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/s390_64/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	42;"	d
MOD_1_NORM_THRESHOLD	mpn/sparc32/gmp-mparam.h	49;"	d
MOD_1_NORM_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	34;"	d
MOD_1_NORM_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	55;"	d
MOD_1_NORM_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	55;"	d
MOD_1_NORM_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	42;"	d
MOD_1_NORM_THRESHOLD	mpn/sparc64/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	42;"	d
MOD_1_NORM_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	40;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/atom/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/core2/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/geode/gmp-mparam.h	36;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/k10/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/k6/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/k7/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/k8/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/nano/gmp-mparam.h	37;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/p6/gmp-mparam.h	44;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	44;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	43;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	43;"	d
MOD_1_NORM_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	42;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	43;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	42;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	39;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	38;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/gmp-mparam.h	35;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	46;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	43;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	42;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	45;"	d
MOD_1_NORM_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	42;"	d
MOD_1_NORM_THRESHOLD	tune/mod_1_div.c	36;"	d	file:
MOD_1_NORM_THRESHOLD	tune/mod_1_div.c	40;"	d	file:
MOD_1_NORM_THRESHOLD	tune/mod_1_inv.c	36;"	d	file:
MOD_1_NORM_THRESHOLD	tune/mod_1_inv.c	40;"	d	file:
MOD_1_UNNORM_THRESHOLD	gmp-impl.h	4944;"	d
MOD_1_UNNORM_THRESHOLD	gmp-impl.h	4945;"	d
MOD_1_UNNORM_THRESHOLD	gmp-impl.h	610;"	d
MOD_1_UNNORM_THRESHOLD	gmp-impl.h	617;"	d
MOD_1_UNNORM_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	43;"	d
MOD_1_UNNORM_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	45;"	d
MOD_1_UNNORM_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	55;"	d
MOD_1_UNNORM_THRESHOLD	mpn/alpha/gmp-mparam.h	66;"	d
MOD_1_UNNORM_THRESHOLD	mpn/arm/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/arm/v6/gmp-mparam.h	42;"	d
MOD_1_UNNORM_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/arm64/gmp-mparam.h	42;"	d
MOD_1_UNNORM_THRESHOLD	mpn/cray/gmp-mparam.h	62;"	d
MOD_1_UNNORM_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	56;"	d
MOD_1_UNNORM_THRESHOLD	mpn/generic/mod_1.c	53;"	d	file:
MOD_1_UNNORM_THRESHOLD	mpn/ia64/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/m68k/gmp-mparam.h	59;"	d
MOD_1_UNNORM_THRESHOLD	mpn/minithres/gmp-mparam.h	36;"	d
MOD_1_UNNORM_THRESHOLD	mpn/mips32/gmp-mparam.h	55;"	d
MOD_1_UNNORM_THRESHOLD	mpn/mips64/gmp-mparam.h	55;"	d
MOD_1_UNNORM_THRESHOLD	mpn/mod_1.c	53;"	d	file:
MOD_1_UNNORM_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	55;"	d
MOD_1_UNNORM_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/pa64/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/power/gmp-mparam.h	52;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	43;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc32/gmp-mparam.h	52;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	37;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	62;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	36;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	38;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	37;"	d
MOD_1_UNNORM_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	42;"	d
MOD_1_UNNORM_THRESHOLD	mpn/s390_32/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/s390_64/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	43;"	d
MOD_1_UNNORM_THRESHOLD	mpn/sparc32/gmp-mparam.h	50;"	d
MOD_1_UNNORM_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	35;"	d
MOD_1_UNNORM_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	56;"	d
MOD_1_UNNORM_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	56;"	d
MOD_1_UNNORM_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	43;"	d
MOD_1_UNNORM_THRESHOLD	mpn/sparc64/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	43;"	d
MOD_1_UNNORM_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	41;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/atom/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/core2/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/geode/gmp-mparam.h	37;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/k10/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/k6/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/k7/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/k8/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/nano/gmp-mparam.h	38;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/p6/gmp-mparam.h	45;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	45;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	44;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	44;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	43;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	44;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	43;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	40;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	39;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/gmp-mparam.h	36;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	47;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	44;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	43;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	46;"	d
MOD_1_UNNORM_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	43;"	d
MOD_1_UNNORM_THRESHOLD	tune/mod_1_div.c	37;"	d	file:
MOD_1_UNNORM_THRESHOLD	tune/mod_1_div.c	41;"	d	file:
MOD_1_UNNORM_THRESHOLD	tune/mod_1_inv.c	37;"	d	file:
MOD_1_UNNORM_THRESHOLD	tune/mod_1_inv.c	41;"	d	file:
MPEXPR_RESULT_BAD_TABLE	demos/expr/expr.h	37;"	d
MPEXPR_RESULT_BAD_VARIABLE	demos/expr/expr.h	36;"	d
MPEXPR_RESULT_NOT_UI	demos/expr/expr.h	39;"	d
MPEXPR_RESULT_OK	demos/expr/expr.h	35;"	d
MPEXPR_RESULT_PARSE_ERROR	demos/expr/expr.h	38;"	d
MPEXPR_TYPE_0ARY	demos/expr/expr.h	45;"	d
MPEXPR_TYPE_ARGSEP	demos/expr/expr.h	88;"	d
MPEXPR_TYPE_BINARY	demos/expr/expr.h	47;"	d
MPEXPR_TYPE_BINARY_UI	demos/expr/expr.h	58;"	d
MPEXPR_TYPE_CLOSEPAREN	demos/expr/expr.h	82;"	d
MPEXPR_TYPE_CMP_EQ	demos/expr/expr.h	99;"	d
MPEXPR_TYPE_CMP_GE	demos/expr/expr.h	105;"	d
MPEXPR_TYPE_CMP_GT	demos/expr/expr.h	101;"	d
MPEXPR_TYPE_CMP_LE	demos/expr/expr.h	103;"	d
MPEXPR_TYPE_CMP_LT	demos/expr/expr.h	97;"	d
MPEXPR_TYPE_CMP_NE	demos/expr/expr.h	104;"	d
MPEXPR_TYPE_COLON	demos/expr/expr.h	90;"	d
MPEXPR_TYPE_CONSTANT	demos/expr/expr.h	66;"	d
MPEXPR_TYPE_DONE	demos/expr/expr.h	79;"	d
MPEXPR_TYPE_I_BINARY	demos/expr/expr.h	59;"	d
MPEXPR_TYPE_I_BINARY_UI	demos/expr/expr.h	60;"	d
MPEXPR_TYPE_I_TERNARY	demos/expr/expr.h	62;"	d
MPEXPR_TYPE_I_TERNARY_UI	demos/expr/expr.h	63;"	d
MPEXPR_TYPE_I_UNARY	demos/expr/expr.h	56;"	d
MPEXPR_TYPE_I_UNARY_UI	demos/expr/expr.h	57;"	d
MPEXPR_TYPE_LAST_UI	demos/expr/expr.h	51;"	d
MPEXPR_TYPE_LOGICAL_AND	demos/expr/expr.h	86;"	d
MPEXPR_TYPE_LOGICAL_NOT	demos/expr/expr.h	81;"	d
MPEXPR_TYPE_LOGICAL_OR	demos/expr/expr.h	87;"	d
MPEXPR_TYPE_MASK_ARGCOUNT	demos/expr/expr.h	44;"	d
MPEXPR_TYPE_MASK_ARGSTYLE	demos/expr/expr.h	53;"	d
MPEXPR_TYPE_MASK_CMP	demos/expr/expr.h	93;"	d
MPEXPR_TYPE_MASK_CMP_EQ	demos/expr/expr.h	95;"	d
MPEXPR_TYPE_MASK_CMP_GT	demos/expr/expr.h	96;"	d
MPEXPR_TYPE_MASK_CMP_LT	demos/expr/expr.h	94;"	d
MPEXPR_TYPE_MASK_SPECIAL	demos/expr/expr.h	75;"	d
MPEXPR_TYPE_MAX	demos/expr/expr.h	91;"	d
MPEXPR_TYPE_MIN	demos/expr/expr.h	92;"	d
MPEXPR_TYPE_NARY	demos/expr/expr.h	43;"	d
MPEXPR_TYPE_NEW_TABLE	demos/expr/expr.h	78;"	d
MPEXPR_TYPE_OPENPAREN	demos/expr/expr.h	83;"	d
MPEXPR_TYPE_OPERATOR	demos/expr/expr.h	109;"	d
MPEXPR_TYPE_PAIRWISE	demos/expr/expr.h	73;"	d
MPEXPR_TYPE_PREFIX	demos/expr/expr.h	69;"	d
MPEXPR_TYPE_QUESTION	demos/expr/expr.h	89;"	d
MPEXPR_TYPE_RESULT_INT	demos/expr/expr.h	52;"	d
MPEXPR_TYPE_RIGHTASSOC	demos/expr/expr.h	72;"	d
MPEXPR_TYPE_TERNARY	demos/expr/expr.h	48;"	d
MPEXPR_TYPE_TERNARY_UI	demos/expr/expr.h	61;"	d
MPEXPR_TYPE_UNARY	demos/expr/expr.h	46;"	d
MPEXPR_TYPE_UNARY_UI	demos/expr/expr.h	55;"	d
MPEXPR_TYPE_VARIABLE	demos/expr/expr.h	80;"	d
MPEXPR_TYPE_WHOLEWORD	demos/expr/expr.h	108;"	d
MPEXPR_VARIABLES	demos/expr/expr-impl.h	86;"	d
MPF_CHECK_FORMAT	gmp-impl.h	4583;"	d
MPF_SIGNIFICANT_DIGITS	gmp-impl.h	4356;"	d
MPN_BSWAP	gmp-impl.h	3568;"	d
MPN_BSWAP_REVERSE	gmp-impl.h	3586;"	d
MPN_CMP	gmp-impl.h	529;"	d
MPN_COPY	gmp-impl.h	1802;"	d
MPN_COPY_DECR	gmp-impl.h	1749;"	d
MPN_COPY_DECR	gmp-impl.h	1765;"	d
MPN_COPY_DECR	gmp-impl.h	1775;"	d
MPN_COPY_DECR_fun	tests/devel/try.c	/^MPN_COPY_DECR_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
MPN_COPY_INCR	gmp-impl.h	1696;"	d
MPN_COPY_INCR	gmp-impl.h	1712;"	d
MPN_COPY_INCR	gmp-impl.h	1722;"	d
MPN_COPY_INCR_fun	tests/devel/try.c	/^MPN_COPY_INCR_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
MPN_COPY_fun	tests/devel/try.c	/^MPN_COPY_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
MPN_DECR_U	gmp-impl.h	2697;"	d
MPN_DECR_U	gmp-impl.h	2701;"	d
MPN_DECR_U	gmp-impl.h	2827;"	d
MPN_DECR_U	gmp-impl.h	2833;"	d
MPN_DIVREM_OR_DIVEXACT_1	gmp-impl.h	3207;"	d
MPN_DIVREM_OR_PREINV_DIVREM_1	gmp-impl.h	3170;"	d
MPN_DIVREM_OR_PREINV_DIVREM_1	gmp-impl.h	3173;"	d
MPN_EXTRACT_NUMB	gmp-impl.h	4163;"	d
MPN_FFT_BEST_READY	mpn/generic/mul_fft.c	134;"	d	file:
MPN_FFT_BEST_READY	mpn/mul_fft.c	134;"	d	file:
MPN_FFT_TABLE_SIZE	gmp-impl.h	2306;"	d
MPN_FIB2_SIZE	gmp-impl.h	1988;"	d
MPN_FILL	gmp-impl.h	1849;"	d
MPN_FILL	gmp-impl.h	1861;"	d
MPN_GCDEXT_LEHMER_ITCH	gmp-impl.h	4268;"	d
MPN_GCDEXT_LEHMER_N_ITCH	gmp-impl.h	4262;"	d
MPN_GCD_SUBDIV_STEP_ITCH	gmp-impl.h	4241;"	d
MPN_HGCD_MATRIX_INIT_ITCH	gmp-impl.h	4197;"	d
MPN_INCR_U	gmp-impl.h	2696;"	d
MPN_INCR_U	gmp-impl.h	2700;"	d
MPN_INCR_U	gmp-impl.h	2815;"	d
MPN_INCR_U	gmp-impl.h	2821;"	d
MPN_IORD_U	gmp-impl.h	2661;"	d
MPN_LOGOPS_N_INLINE	gmp-impl.h	2520;"	d
MPN_LSHIFT	mpn/generic/rootrem.c	64;"	d	file:
MPN_LSHIFT	mpn/rootrem.c	64;"	d	file:
MPN_LSHIFT	mpz/n_pow_ui.c	128;"	d	file:
MPN_MOD_OR_MODEXACT_1_ODD	gmp-impl.h	3231;"	d
MPN_MOD_OR_PREINV_MOD_1	gmp-impl.h	3183;"	d
MPN_MUL	mpz/n_pow_ui.c	101;"	d	file:
MPN_MUL_1	mpz/n_pow_ui.c	119;"	d	file:
MPN_MUL_1C	mpz/aorsmul_i.c	40;"	d	file:
MPN_MUL_1C	mpz/aorsmul_i.c	45;"	d	file:
MPN_MUL_2	mpz/n_pow_ui.c	109;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	334;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	337;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	344;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	347;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	358;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	361;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	368;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	371;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	379;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	382;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	389;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	392;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	405;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	408;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	415;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	418;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	426;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	429;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	436;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	439;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	446;"	d	file:
MPN_MUL_N	mpn/generic/powm.c	449;"	d	file:
MPN_MUL_N	mpn/generic/sec_powm.c	332;"	d	file:
MPN_MUL_N	mpn/generic/sec_powm.c	335;"	d	file:
MPN_MUL_N	mpn/generic/sec_powm.c	342;"	d	file:
MPN_MUL_N	mpn/generic/sec_powm.c	345;"	d	file:
MPN_MUL_N	mpn/powm.c	334;"	d	file:
MPN_MUL_N	mpn/powm.c	337;"	d	file:
MPN_MUL_N	mpn/powm.c	344;"	d	file:
MPN_MUL_N	mpn/powm.c	347;"	d	file:
MPN_MUL_N	mpn/powm.c	358;"	d	file:
MPN_MUL_N	mpn/powm.c	361;"	d	file:
MPN_MUL_N	mpn/powm.c	368;"	d	file:
MPN_MUL_N	mpn/powm.c	371;"	d	file:
MPN_MUL_N	mpn/powm.c	379;"	d	file:
MPN_MUL_N	mpn/powm.c	382;"	d	file:
MPN_MUL_N	mpn/powm.c	389;"	d	file:
MPN_MUL_N	mpn/powm.c	392;"	d	file:
MPN_MUL_N	mpn/powm.c	405;"	d	file:
MPN_MUL_N	mpn/powm.c	408;"	d	file:
MPN_MUL_N	mpn/powm.c	415;"	d	file:
MPN_MUL_N	mpn/powm.c	418;"	d	file:
MPN_MUL_N	mpn/powm.c	426;"	d	file:
MPN_MUL_N	mpn/powm.c	429;"	d	file:
MPN_MUL_N	mpn/powm.c	436;"	d	file:
MPN_MUL_N	mpn/powm.c	439;"	d	file:
MPN_MUL_N	mpn/powm.c	446;"	d	file:
MPN_MUL_N	mpn/powm.c	449;"	d	file:
MPN_MUL_N	mpn/sec_powm.c	332;"	d	file:
MPN_MUL_N	mpn/sec_powm.c	335;"	d	file:
MPN_MUL_N	mpn/sec_powm.c	342;"	d	file:
MPN_MUL_N	mpn/sec_powm.c	345;"	d	file:
MPN_NORMALIZE	gmp-impl.h	1892;"	d
MPN_NORMALIZE_NOT_ZERO	gmp-impl.h	1903;"	d
MPN_OVERLAP_P	gmp-impl.h	2340;"	d
MPN_PTR_SWAP	gmp-impl.h	656;"	d
MPN_PTR_SWAP	mini-gmp/mini-gmp.c	217;"	d	file:
MPN_RANDOM	tests/devel/anymul_1.c	123;"	d	file:
MPN_RANDOM_ALT	tests/devel/try.c	2148;"	d	file:
MPN_REDC_1	mpn/generic/powm.c	88;"	d	file:
MPN_REDC_1	mpn/generic/powm.c	89;"	d	file:
MPN_REDC_1	mpn/powm.c	88;"	d	file:
MPN_REDC_1	mpn/powm.c	89;"	d	file:
MPN_REDC_1_SEC	mpn/generic/sec_powm.c	63;"	d	file:
MPN_REDC_1_SEC	mpn/generic/sec_powm.c	64;"	d	file:
MPN_REDC_1_SEC	mpn/sec_powm.c	63;"	d	file:
MPN_REDC_1_SEC	mpn/sec_powm.c	64;"	d	file:
MPN_REDC_2	mpn/generic/powm.c	97;"	d	file:
MPN_REDC_2	mpn/generic/powm.c	98;"	d	file:
MPN_REDC_2	mpn/powm.c	97;"	d	file:
MPN_REDC_2	mpn/powm.c	98;"	d	file:
MPN_REDC_2_SEC	mpn/generic/sec_powm.c	71;"	d	file:
MPN_REDC_2_SEC	mpn/generic/sec_powm.c	72;"	d	file:
MPN_REDC_2_SEC	mpn/sec_powm.c	71;"	d	file:
MPN_REDC_2_SEC	mpn/sec_powm.c	72;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	336;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	339;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	346;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	349;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	360;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	363;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	370;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	373;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	381;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	384;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	391;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	394;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	407;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	410;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	417;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	420;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	428;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	431;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	438;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	441;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	448;"	d	file:
MPN_REDUCE	mpn/generic/powm.c	451;"	d	file:
MPN_REDUCE	mpn/generic/sec_powm.c	334;"	d	file:
MPN_REDUCE	mpn/generic/sec_powm.c	337;"	d	file:
MPN_REDUCE	mpn/generic/sec_powm.c	344;"	d	file:
MPN_REDUCE	mpn/generic/sec_powm.c	347;"	d	file:
MPN_REDUCE	mpn/powm.c	336;"	d	file:
MPN_REDUCE	mpn/powm.c	339;"	d	file:
MPN_REDUCE	mpn/powm.c	346;"	d	file:
MPN_REDUCE	mpn/powm.c	349;"	d	file:
MPN_REDUCE	mpn/powm.c	360;"	d	file:
MPN_REDUCE	mpn/powm.c	363;"	d	file:
MPN_REDUCE	mpn/powm.c	370;"	d	file:
MPN_REDUCE	mpn/powm.c	373;"	d	file:
MPN_REDUCE	mpn/powm.c	381;"	d	file:
MPN_REDUCE	mpn/powm.c	384;"	d	file:
MPN_REDUCE	mpn/powm.c	391;"	d	file:
MPN_REDUCE	mpn/powm.c	394;"	d	file:
MPN_REDUCE	mpn/powm.c	407;"	d	file:
MPN_REDUCE	mpn/powm.c	410;"	d	file:
MPN_REDUCE	mpn/powm.c	417;"	d	file:
MPN_REDUCE	mpn/powm.c	420;"	d	file:
MPN_REDUCE	mpn/powm.c	428;"	d	file:
MPN_REDUCE	mpn/powm.c	431;"	d	file:
MPN_REDUCE	mpn/powm.c	438;"	d	file:
MPN_REDUCE	mpn/powm.c	441;"	d	file:
MPN_REDUCE	mpn/powm.c	448;"	d	file:
MPN_REDUCE	mpn/powm.c	451;"	d	file:
MPN_REDUCE	mpn/sec_powm.c	334;"	d	file:
MPN_REDUCE	mpn/sec_powm.c	337;"	d	file:
MPN_REDUCE	mpn/sec_powm.c	344;"	d	file:
MPN_REDUCE	mpn/sec_powm.c	347;"	d	file:
MPN_REVERSE	gmp-impl.h	1811;"	d
MPN_RSHIFT	mpn/generic/rootrem.c	54;"	d	file:
MPN_RSHIFT	mpn/rootrem.c	54;"	d	file:
MPN_RSHIFT_OR_COPY	mpz/n_pow_ui.c	137;"	d	file:
MPN_SAME_OR_DECR2_P	gmp-impl.h	2360;"	d
MPN_SAME_OR_DECR_P	gmp-impl.h	2362;"	d
MPN_SAME_OR_INCR2_P	gmp-impl.h	2356;"	d
MPN_SAME_OR_INCR_P	gmp-impl.h	2358;"	d
MPN_SAME_OR_SEPARATE2_P	gmp-impl.h	2350;"	d
MPN_SAME_OR_SEPARATE_P	gmp-impl.h	2348;"	d
MPN_SET_UI	gmp-impl.h	2946;"	d
MPN_SET_UI	gmp-impl.h	2958;"	d
MPN_SIZEINBASE	gmp-impl.h	2895;"	d
MPN_SIZEINBASE_2EXP	gmp-impl.h	2925;"	d
MPN_SQR	mpn/generic/powm.c	335;"	d	file:
MPN_SQR	mpn/generic/powm.c	338;"	d	file:
MPN_SQR	mpn/generic/powm.c	345;"	d	file:
MPN_SQR	mpn/generic/powm.c	348;"	d	file:
MPN_SQR	mpn/generic/powm.c	359;"	d	file:
MPN_SQR	mpn/generic/powm.c	362;"	d	file:
MPN_SQR	mpn/generic/powm.c	369;"	d	file:
MPN_SQR	mpn/generic/powm.c	372;"	d	file:
MPN_SQR	mpn/generic/powm.c	380;"	d	file:
MPN_SQR	mpn/generic/powm.c	383;"	d	file:
MPN_SQR	mpn/generic/powm.c	390;"	d	file:
MPN_SQR	mpn/generic/powm.c	393;"	d	file:
MPN_SQR	mpn/generic/powm.c	406;"	d	file:
MPN_SQR	mpn/generic/powm.c	409;"	d	file:
MPN_SQR	mpn/generic/powm.c	416;"	d	file:
MPN_SQR	mpn/generic/powm.c	419;"	d	file:
MPN_SQR	mpn/generic/powm.c	427;"	d	file:
MPN_SQR	mpn/generic/powm.c	430;"	d	file:
MPN_SQR	mpn/generic/powm.c	437;"	d	file:
MPN_SQR	mpn/generic/powm.c	440;"	d	file:
MPN_SQR	mpn/generic/powm.c	447;"	d	file:
MPN_SQR	mpn/generic/powm.c	450;"	d	file:
MPN_SQR	mpn/generic/sec_powm.c	333;"	d	file:
MPN_SQR	mpn/generic/sec_powm.c	336;"	d	file:
MPN_SQR	mpn/generic/sec_powm.c	343;"	d	file:
MPN_SQR	mpn/generic/sec_powm.c	346;"	d	file:
MPN_SQR	mpn/powm.c	335;"	d	file:
MPN_SQR	mpn/powm.c	338;"	d	file:
MPN_SQR	mpn/powm.c	345;"	d	file:
MPN_SQR	mpn/powm.c	348;"	d	file:
MPN_SQR	mpn/powm.c	359;"	d	file:
MPN_SQR	mpn/powm.c	362;"	d	file:
MPN_SQR	mpn/powm.c	369;"	d	file:
MPN_SQR	mpn/powm.c	372;"	d	file:
MPN_SQR	mpn/powm.c	380;"	d	file:
MPN_SQR	mpn/powm.c	383;"	d	file:
MPN_SQR	mpn/powm.c	390;"	d	file:
MPN_SQR	mpn/powm.c	393;"	d	file:
MPN_SQR	mpn/powm.c	406;"	d	file:
MPN_SQR	mpn/powm.c	409;"	d	file:
MPN_SQR	mpn/powm.c	416;"	d	file:
MPN_SQR	mpn/powm.c	419;"	d	file:
MPN_SQR	mpn/powm.c	427;"	d	file:
MPN_SQR	mpn/powm.c	430;"	d	file:
MPN_SQR	mpn/powm.c	437;"	d	file:
MPN_SQR	mpn/powm.c	440;"	d	file:
MPN_SQR	mpn/powm.c	447;"	d	file:
MPN_SQR	mpn/powm.c	450;"	d	file:
MPN_SQR	mpn/sec_powm.c	333;"	d	file:
MPN_SQR	mpn/sec_powm.c	336;"	d	file:
MPN_SQR	mpn/sec_powm.c	343;"	d	file:
MPN_SQR	mpn/sec_powm.c	346;"	d	file:
MPN_SQR	mpz/n_pow_ui.c	93;"	d	file:
MPN_SQRLO_DIAGONAL	mpn/generic/sqrlo_basecase.c	66;"	d	file:
MPN_SQRLO_DIAGONAL	mpn/sqrlo_basecase.c	66;"	d	file:
MPN_SQRLO_DIAG_ADDLSH1	mpn/generic/sqrlo_basecase.c	80;"	d	file:
MPN_SQRLO_DIAG_ADDLSH1	mpn/generic/sqrlo_basecase.c	86;"	d	file:
MPN_SQRLO_DIAG_ADDLSH1	mpn/sqrlo_basecase.c	80;"	d	file:
MPN_SQRLO_DIAG_ADDLSH1	mpn/sqrlo_basecase.c	86;"	d	file:
MPN_SQR_DIAGONAL	mpn/generic/sec_powm.c	89;"	d	file:
MPN_SQR_DIAGONAL	mpn/generic/sec_powm.c	92;"	d	file:
MPN_SQR_DIAGONAL	mpn/generic/sqr_basecase.c	43;"	d	file:
MPN_SQR_DIAGONAL	mpn/generic/sqr_basecase.c	46;"	d	file:
MPN_SQR_DIAGONAL	mpn/generic/sqrlo_basecase.c	50;"	d	file:
MPN_SQR_DIAGONAL	mpn/generic/sqrlo_basecase.c	53;"	d	file:
MPN_SQR_DIAGONAL	mpn/sec_powm.c	89;"	d	file:
MPN_SQR_DIAGONAL	mpn/sec_powm.c	92;"	d	file:
MPN_SQR_DIAGONAL	mpn/sqr_basecase.c	43;"	d	file:
MPN_SQR_DIAGONAL	mpn/sqr_basecase.c	46;"	d	file:
MPN_SQR_DIAGONAL	mpn/sqrlo_basecase.c	50;"	d	file:
MPN_SQR_DIAGONAL	mpn/sqrlo_basecase.c	53;"	d	file:
MPN_SQR_DIAG_ADDLSH1	mpn/generic/sqr_basecase.c	60;"	d	file:
MPN_SQR_DIAG_ADDLSH1	mpn/generic/sqr_basecase.c	64;"	d	file:
MPN_SQR_DIAG_ADDLSH1	mpn/generic/sqr_basecase.c	72;"	d	file:
MPN_SQR_DIAG_ADDLSH1	mpn/sqr_basecase.c	60;"	d	file:
MPN_SQR_DIAG_ADDLSH1	mpn/sqr_basecase.c	64;"	d	file:
MPN_SQR_DIAG_ADDLSH1	mpn/sqr_basecase.c	72;"	d	file:
MPN_SRCPTR_SWAP	gmp-impl.h	661;"	d
MPN_SRCPTR_SWAP	mini-gmp/mini-gmp.c	222;"	d	file:
MPN_STRIP_LOW_ZEROS_NOT_ZERO	gmp-impl.h	1919;"	d
MPN_TOOM22_MUL_MINSIZE	gmp-impl.h	1278;"	d
MPN_TOOM2_SQR_MINSIZE	gmp-impl.h	1279;"	d
MPN_TOOM32_MUL_MINSIZE	gmp-impl.h	1293;"	d
MPN_TOOM33_MUL_MINSIZE	gmp-impl.h	1281;"	d
MPN_TOOM3_SQR_MINSIZE	gmp-impl.h	1282;"	d
MPN_TOOM42_MULMID_MINSIZE	gmp-impl.h	1300;"	d
MPN_TOOM42_MUL_MINSIZE	gmp-impl.h	1294;"	d
MPN_TOOM43_MUL_MINSIZE	gmp-impl.h	1295;"	d
MPN_TOOM44_MUL_MINSIZE	gmp-impl.h	1284;"	d
MPN_TOOM4_SQR_MINSIZE	gmp-impl.h	1285;"	d
MPN_TOOM53_MUL_MINSIZE	gmp-impl.h	1296;"	d
MPN_TOOM54_MUL_MINSIZE	gmp-impl.h	1297;"	d
MPN_TOOM63_MUL_MINSIZE	gmp-impl.h	1298;"	d
MPN_TOOM6H_MUL_MINSIZE	gmp-impl.h	1287;"	d
MPN_TOOM6_SQR_MINSIZE	gmp-impl.h	1288;"	d
MPN_TOOM8H_MUL_MINSIZE	gmp-impl.h	1290;"	d
MPN_TOOM8_SQR_MINSIZE	gmp-impl.h	1291;"	d
MPN_ZERO	gmp-impl.h	1872;"	d
MPN_ZERO_EXTEND	tune/speed.h	37;"	d
MPN_ZERO_fun	tests/devel/try.c	/^MPN_ZERO_fun (mp_ptr ptr, mp_size_t size)$/;"	f
MPQ_CHECK_FORMAT	gmp-impl.h	4560;"	d
MPQ_PTR_SWAP	gmp-impl.h	680;"	d
MPQ_SRCPTR_SWAP	gmp-impl.h	686;"	d
MPX_TRACE	demos/expr/expr.c	46;"	d	file:
MPZ_CHECK_FORMAT	gmp-impl.h	4553;"	d
MPZ_EQUAL_1_P	gmp-impl.h	1965;"	d
MPZ_FAKE_UI	gmp-impl.h	2949;"	d
MPZ_FAKE_UI	gmp-impl.h	2962;"	d
MPZ_FIB_SIZE_FLOAT	tests/mpz/t-fib_ui.c	45;"	d	file:
MPZ_NEWALLOC	gmp-impl.h	1961;"	d
MPZ_PTR_SWAP	gmp-impl.h	667;"	d
MPZ_PTR_SWAP	mini-gmp/mini-gmp.c	228;"	d	file:
MPZ_REALLOC	gmp-impl.h	1958;"	d
MPZ_REALLOC	mini-gmp/mini-gmp.c	1471;"	d	file:
MPZ_ROINIT_N	gmp.h	1127;"	d
MPZ_ROINIT_N	mini-gmp/mini-gmp.h	254;"	d
MPZ_SRCPTR_SWAP	gmp-impl.h	673;"	d
MPZ_SRCPTR_SWAP	mini-gmp/mini-gmp.c	234;"	d	file:
MPZ_SRCPTR_SWAP	mini-gmp/tests/t-cong.c	22;"	d	file:
MPZ_TMP_INIT	gmp-impl.h	1937;"	d
MP_BASES_BIG_BASE_10	mp_bases.h	9;"	d
MP_BASES_BIG_BASE_INVERTED_10	mp_bases.h	10;"	d
MP_BASES_CHARS_PER_LIMB_10	mp_bases.h	8;"	d
MP_BASES_NORMALIZATION_STEPS_10	mp_bases.h	11;"	d
MP_BASE_AS_DOUBLE	gmp-impl.h	3798;"	d
MP_BITCNT_T_SWAP	mini-gmp/mini-gmp.c	198;"	d	file:
MP_EXP_T_MAX	gmp-impl.h	584;"	d
MP_EXP_T_MIN	gmp-impl.h	585;"	d
MP_INT	gmp.h	/^typedef __mpz_struct MP_INT;    \/* gmp 1 source compatibility *\/$/;"	t
MP_LIMB_T_LOWBITMASK	tune/speed.h	45;"	d
MP_LIMB_T_MAX	gmp-impl.h	565;"	d
MP_LIMB_T_SWAP	gmp-impl.h	630;"	d
MP_LIMB_T_SWAP	mini-gmp/mini-gmp.c	186;"	d	file:
MP_PTR_SWAP	gmp-impl.h	643;"	d
MP_PTR_SWAP	mini-gmp/mini-gmp.c	204;"	d	file:
MP_RAT	gmp.h	/^typedef __mpq_struct MP_RAT;    \/* gmp 1 source compatibility *\/$/;"	t
MP_SIZE_T_MAX	gmp-impl.h	576;"	d
MP_SIZE_T_MAX	gmp-impl.h	579;"	d
MP_SIZE_T_MIN	gmp-impl.h	577;"	d
MP_SIZE_T_MIN	gmp-impl.h	580;"	d
MP_SIZE_T_SWAP	gmp-impl.h	636;"	d
MP_SIZE_T_SWAP	mini-gmp/mini-gmp.c	192;"	d	file:
MP_SRCPTR_SWAP	gmp-impl.h	649;"	d
MP_SRCPTR_SWAP	mini-gmp/mini-gmp.c	210;"	d	file:
MR_REPS	demos/factorize.c	39;"	d	file:
MUL	mpn/generic/matrix22_mul.c	41;"	d	file:
MUL	mpn/matrix22_mul.c	41;"	d	file:
MUL	tests/mpn/t-matrix22.c	82;"	d	file:
MULLO_BASECASE_THRESHOLD	gmp-impl.h	2138;"	d
MULLO_BASECASE_THRESHOLD	gmp-impl.h	4800;"	d
MULLO_BASECASE_THRESHOLD	gmp-impl.h	4801;"	d
MULLO_BASECASE_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	149;"	d
MULLO_BASECASE_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	171;"	d
MULLO_BASECASE_THRESHOLD	mpn/alpha/gmp-mparam.h	49;"	d
MULLO_BASECASE_THRESHOLD	mpn/arm/gmp-mparam.h	96;"	d
MULLO_BASECASE_THRESHOLD	mpn/arm/v6/gmp-mparam.h	146;"	d
MULLO_BASECASE_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	151;"	d
MULLO_BASECASE_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	152;"	d
MULLO_BASECASE_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	165;"	d
MULLO_BASECASE_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	167;"	d
MULLO_BASECASE_THRESHOLD	mpn/arm64/gmp-mparam.h	198;"	d
MULLO_BASECASE_THRESHOLD	mpn/ia64/gmp-mparam.h	162;"	d
MULLO_BASECASE_THRESHOLD	mpn/minithres/gmp-mparam.h	75;"	d
MULLO_BASECASE_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	136;"	d
MULLO_BASECASE_THRESHOLD	mpn/pa64/gmp-mparam.h	214;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	161;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc32/gmp-mparam.h	181;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	124;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	166;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	123;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	132;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	126;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	135;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	47;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	141;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	171;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	183;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	122;"	d
MULLO_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	203;"	d
MULLO_BASECASE_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	169;"	d
MULLO_BASECASE_THRESHOLD	mpn/s390_32/gmp-mparam.h	107;"	d
MULLO_BASECASE_THRESHOLD	mpn/s390_64/gmp-mparam.h	137;"	d
MULLO_BASECASE_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	192;"	d
MULLO_BASECASE_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	115;"	d
MULLO_BASECASE_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	166;"	d
MULLO_BASECASE_THRESHOLD	mpn/sparc64/gmp-mparam.h	107;"	d
MULLO_BASECASE_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	180;"	d
MULLO_BASECASE_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	116;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/atom/gmp-mparam.h	166;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	170;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	170;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	159;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/core2/gmp-mparam.h	162;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	172;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	186;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	165;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/geode/gmp-mparam.h	110;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/k10/gmp-mparam.h	173;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/k6/gmp-mparam.h	135;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/k7/gmp-mparam.h	212;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/k8/gmp-mparam.h	160;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/nano/gmp-mparam.h	129;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/p6/gmp-mparam.h	161;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	167;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	159;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	132;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	168;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	174;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	199;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	214;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	177;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	185;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	187;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	204;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	191;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	189;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/gmp-mparam.h	180;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	195;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	197;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	204;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	192;"	d
MULLO_BASECASE_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	188;"	d
MULLO_BASECASE_THRESHOLD_LIMIT	gmp-impl.h	2093;"	d
MULLO_BASECASE_THRESHOLD_LIMIT	gmp-impl.h	5019;"	d
MULLO_BASECASE_THRESHOLD_LIMIT	gmp-impl.h	5033;"	d
MULLO_DC_THRESHOLD	gmp-impl.h	2142;"	d
MULLO_DC_THRESHOLD	gmp-impl.h	4804;"	d
MULLO_DC_THRESHOLD	gmp-impl.h	4805;"	d
MULLO_DC_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	150;"	d
MULLO_DC_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	172;"	d
MULLO_DC_THRESHOLD	mpn/alpha/gmp-mparam.h	50;"	d
MULLO_DC_THRESHOLD	mpn/arm/gmp-mparam.h	97;"	d
MULLO_DC_THRESHOLD	mpn/arm/v6/gmp-mparam.h	147;"	d
MULLO_DC_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	152;"	d
MULLO_DC_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	153;"	d
MULLO_DC_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	166;"	d
MULLO_DC_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	168;"	d
MULLO_DC_THRESHOLD	mpn/arm64/gmp-mparam.h	199;"	d
MULLO_DC_THRESHOLD	mpn/ia64/gmp-mparam.h	163;"	d
MULLO_DC_THRESHOLD	mpn/minithres/gmp-mparam.h	76;"	d
MULLO_DC_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	137;"	d
MULLO_DC_THRESHOLD	mpn/pa64/gmp-mparam.h	215;"	d
MULLO_DC_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	162;"	d
MULLO_DC_THRESHOLD	mpn/powerpc32/gmp-mparam.h	182;"	d
MULLO_DC_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	125;"	d
MULLO_DC_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	167;"	d
MULLO_DC_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	124;"	d
MULLO_DC_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	133;"	d
MULLO_DC_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	127;"	d
MULLO_DC_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	136;"	d
MULLO_DC_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	48;"	d
MULLO_DC_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	142;"	d
MULLO_DC_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	172;"	d
MULLO_DC_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	184;"	d
MULLO_DC_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	123;"	d
MULLO_DC_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	204;"	d
MULLO_DC_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	170;"	d
MULLO_DC_THRESHOLD	mpn/s390_32/gmp-mparam.h	108;"	d
MULLO_DC_THRESHOLD	mpn/s390_64/gmp-mparam.h	138;"	d
MULLO_DC_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	193;"	d
MULLO_DC_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	116;"	d
MULLO_DC_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	167;"	d
MULLO_DC_THRESHOLD	mpn/sparc64/gmp-mparam.h	108;"	d
MULLO_DC_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	181;"	d
MULLO_DC_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	117;"	d
MULLO_DC_THRESHOLD	mpn/x86/atom/gmp-mparam.h	167;"	d
MULLO_DC_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	171;"	d
MULLO_DC_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	171;"	d
MULLO_DC_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	160;"	d
MULLO_DC_THRESHOLD	mpn/x86/core2/gmp-mparam.h	163;"	d
MULLO_DC_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	173;"	d
MULLO_DC_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	187;"	d
MULLO_DC_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	166;"	d
MULLO_DC_THRESHOLD	mpn/x86/geode/gmp-mparam.h	111;"	d
MULLO_DC_THRESHOLD	mpn/x86/k10/gmp-mparam.h	174;"	d
MULLO_DC_THRESHOLD	mpn/x86/k6/gmp-mparam.h	136;"	d
MULLO_DC_THRESHOLD	mpn/x86/k7/gmp-mparam.h	213;"	d
MULLO_DC_THRESHOLD	mpn/x86/k8/gmp-mparam.h	161;"	d
MULLO_DC_THRESHOLD	mpn/x86/nano/gmp-mparam.h	130;"	d
MULLO_DC_THRESHOLD	mpn/x86/p6/gmp-mparam.h	162;"	d
MULLO_DC_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	168;"	d
MULLO_DC_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	160;"	d
MULLO_DC_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	133;"	d
MULLO_DC_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	169;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	175;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	200;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	215;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	178;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	186;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	188;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	205;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	192;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	190;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/gmp-mparam.h	181;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	196;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	198;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	205;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	193;"	d
MULLO_DC_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	189;"	d
MULLO_MUL_N_THRESHOLD	gmp-impl.h	2146;"	d
MULLO_MUL_N_THRESHOLD	gmp-impl.h	4808;"	d
MULLO_MUL_N_THRESHOLD	gmp-impl.h	4809;"	d
MULLO_MUL_N_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	151;"	d
MULLO_MUL_N_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	173;"	d
MULLO_MUL_N_THRESHOLD	mpn/alpha/gmp-mparam.h	51;"	d
MULLO_MUL_N_THRESHOLD	mpn/arm/gmp-mparam.h	98;"	d
MULLO_MUL_N_THRESHOLD	mpn/arm/v6/gmp-mparam.h	148;"	d
MULLO_MUL_N_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	153;"	d
MULLO_MUL_N_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	154;"	d
MULLO_MUL_N_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	167;"	d
MULLO_MUL_N_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	169;"	d
MULLO_MUL_N_THRESHOLD	mpn/arm64/gmp-mparam.h	200;"	d
MULLO_MUL_N_THRESHOLD	mpn/ia64/gmp-mparam.h	164;"	d
MULLO_MUL_N_THRESHOLD	mpn/minithres/gmp-mparam.h	77;"	d
MULLO_MUL_N_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	138;"	d
MULLO_MUL_N_THRESHOLD	mpn/pa64/gmp-mparam.h	216;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	163;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc32/gmp-mparam.h	183;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	126;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	168;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	125;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	134;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	128;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	137;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	49;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	143;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	173;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	185;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	124;"	d
MULLO_MUL_N_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	205;"	d
MULLO_MUL_N_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	171;"	d
MULLO_MUL_N_THRESHOLD	mpn/s390_32/gmp-mparam.h	109;"	d
MULLO_MUL_N_THRESHOLD	mpn/s390_64/gmp-mparam.h	139;"	d
MULLO_MUL_N_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	194;"	d
MULLO_MUL_N_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	117;"	d
MULLO_MUL_N_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	168;"	d
MULLO_MUL_N_THRESHOLD	mpn/sparc64/gmp-mparam.h	109;"	d
MULLO_MUL_N_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	182;"	d
MULLO_MUL_N_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	118;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/atom/gmp-mparam.h	168;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	172;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	172;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	161;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/core2/gmp-mparam.h	164;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	174;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	188;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	167;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/geode/gmp-mparam.h	112;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/k10/gmp-mparam.h	175;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/k6/gmp-mparam.h	137;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/k7/gmp-mparam.h	214;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/k8/gmp-mparam.h	162;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/nano/gmp-mparam.h	131;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/p6/gmp-mparam.h	163;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	169;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	161;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	134;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	170;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	176;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	201;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	216;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	179;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	187;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	189;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	206;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	193;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	191;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/gmp-mparam.h	182;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	197;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	199;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	206;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	194;"	d
MULLO_MUL_N_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	190;"	d
MULLO_VARIANT	mpn/generic/mullo_basecase.c	42;"	d	file:
MULLO_VARIANT	mpn/mullo_basecase.c	42;"	d	file:
MULMID_TOOM42_THRESHOLD	gmp-impl.h	2134;"	d
MULMID_TOOM42_THRESHOLD	gmp-impl.h	4824;"	d
MULMID_TOOM42_THRESHOLD	gmp-impl.h	4825;"	d
MULMID_TOOM42_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	76;"	d
MULMID_TOOM42_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	78;"	d
MULMID_TOOM42_THRESHOLD	mpn/arm/v6/gmp-mparam.h	75;"	d
MULMID_TOOM42_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/arm64/gmp-mparam.h	75;"	d
MULMID_TOOM42_THRESHOLD	mpn/ia64/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/pa64/gmp-mparam.h	69;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc32/gmp-mparam.h	85;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	69;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	69;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	69;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	67;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	66;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	68;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	67;"	d
MULMID_TOOM42_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	75;"	d
MULMID_TOOM42_THRESHOLD	mpn/s390_32/gmp-mparam.h	69;"	d
MULMID_TOOM42_THRESHOLD	mpn/s390_64/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	76;"	d
MULMID_TOOM42_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	65;"	d
MULMID_TOOM42_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	76;"	d
MULMID_TOOM42_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	76;"	d
MULMID_TOOM42_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	71;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/atom/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/core2/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/k10/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/k7/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/k8/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/nano/gmp-mparam.h	67;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/p6/gmp-mparam.h	74;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	74;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	73;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	75;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	76;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	75;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	71;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	72;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	71;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/gmp-mparam.h	65;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	79;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	76;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	75;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	78;"	d
MULMID_TOOM42_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	gmp-impl.h	2218;"	d
MULMOD_BNM1_THRESHOLD	gmp-impl.h	4978;"	d
MULMOD_BNM1_THRESHOLD	gmp-impl.h	4979;"	d
MULMOD_BNM1_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	78;"	d
MULMOD_BNM1_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	80;"	d
MULMOD_BNM1_THRESHOLD	mpn/arm/gmp-mparam.h	69;"	d
MULMOD_BNM1_THRESHOLD	mpn/arm/v6/gmp-mparam.h	77;"	d
MULMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/arm64/gmp-mparam.h	77;"	d
MULMOD_BNM1_THRESHOLD	mpn/ia64/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/minithres/gmp-mparam.h	64;"	d
MULMOD_BNM1_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	68;"	d
MULMOD_BNM1_THRESHOLD	mpn/pa64/gmp-mparam.h	71;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	71;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc32/gmp-mparam.h	87;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	68;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	71;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	71;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	71;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	69;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	68;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	70;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	69;"	d
MULMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	77;"	d
MULMOD_BNM1_THRESHOLD	mpn/s390_32/gmp-mparam.h	71;"	d
MULMOD_BNM1_THRESHOLD	mpn/s390_64/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	78;"	d
MULMOD_BNM1_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	67;"	d
MULMOD_BNM1_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	78;"	d
MULMOD_BNM1_THRESHOLD	mpn/sparc64/gmp-mparam.h	68;"	d
MULMOD_BNM1_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	78;"	d
MULMOD_BNM1_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	73;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/atom/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/core2/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/geode/gmp-mparam.h	65;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/k10/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/k6/gmp-mparam.h	67;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/k7/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/k8/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/nano/gmp-mparam.h	69;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/p6/gmp-mparam.h	76;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	73;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	76;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	72;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	75;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	77;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	78;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	77;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	73;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	74;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	73;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/gmp-mparam.h	67;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	81;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	78;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	77;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	80;"	d
MULMOD_BNM1_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	77;"	d
MULT	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
MULTIFAC_WHEEL	tests/mpz/t-mfac_uiui.c	34;"	d	file:
MULTIFAC_WHEEL2	tests/mpz/t-mfac_uiui.c	35;"	d	file:
MULTIPLICAND_ABS	mpz/mul_i.h	40;"	d
MULTIPLICAND_ABS	mpz/mul_i.h	46;"	d
MULTIPLICAND_UNSIGNED	mpz/mul_i.h	39;"	d
MULTIPLICAND_UNSIGNED	mpz/mul_i.h	45;"	d
MULTIPLIER_COUNT	tests/devel/try.c	2198;"	d	file:
MULTIPLIER_ITERATION	tests/devel/try.c	2203;"	d	file:
MULTIPLIER_RANDOMS	tests/devel/try.c	198;"	d	file:
MUL_BASECASE_ALLOC	mpn/generic/mullo_n.c	192;"	d	file:
MUL_BASECASE_ALLOC	mpn/mullo_n.c	192;"	d	file:
MUL_BASECASE_MAX_UN	mpn/generic/mul.c	39;"	d	file:
MUL_BASECASE_MAX_UN	mpn/mul.c	39;"	d	file:
MUL_FFT_MODF_THRESHOLD	gmp-impl.h	2254;"	d
MUL_FFT_MODF_THRESHOLD	gmp-impl.h	4743;"	d
MUL_FFT_MODF_THRESHOLD	gmp-impl.h	4744;"	d
MUL_FFT_MODF_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	81;"	d
MUL_FFT_MODF_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	83;"	d
MUL_FFT_MODF_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	67;"	d
MUL_FFT_MODF_THRESHOLD	mpn/alpha/gmp-mparam.h	81;"	d
MUL_FFT_MODF_THRESHOLD	mpn/arm/gmp-mparam.h	72;"	d
MUL_FFT_MODF_THRESHOLD	mpn/arm/v6/gmp-mparam.h	80;"	d
MUL_FFT_MODF_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/arm64/gmp-mparam.h	80;"	d
MUL_FFT_MODF_THRESHOLD	mpn/cray/gmp-mparam.h	74;"	d
MUL_FFT_MODF_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	68;"	d
MUL_FFT_MODF_THRESHOLD	mpn/ia64/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/m68k/gmp-mparam.h	71;"	d
MUL_FFT_MODF_THRESHOLD	mpn/minithres/gmp-mparam.h	68;"	d
MUL_FFT_MODF_THRESHOLD	mpn/mips32/gmp-mparam.h	67;"	d
MUL_FFT_MODF_THRESHOLD	mpn/mips64/gmp-mparam.h	67;"	d
MUL_FFT_MODF_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	67;"	d
MUL_FFT_MODF_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	71;"	d
MUL_FFT_MODF_THRESHOLD	mpn/pa64/gmp-mparam.h	76;"	d
MUL_FFT_MODF_THRESHOLD	mpn/power/gmp-mparam.h	64;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	74;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc32/gmp-mparam.h	90;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	71;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	76;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	76;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	76;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	72;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	71;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	73;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	72;"	d
MUL_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	80;"	d
MUL_FFT_MODF_THRESHOLD	mpn/s390_32/gmp-mparam.h	74;"	d
MUL_FFT_MODF_THRESHOLD	mpn/s390_64/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	81;"	d
MUL_FFT_MODF_THRESHOLD	mpn/sparc32/gmp-mparam.h	62;"	d
MUL_FFT_MODF_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	70;"	d
MUL_FFT_MODF_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	68;"	d
MUL_FFT_MODF_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	68;"	d
MUL_FFT_MODF_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	81;"	d
MUL_FFT_MODF_THRESHOLD	mpn/sparc64/gmp-mparam.h	71;"	d
MUL_FFT_MODF_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	81;"	d
MUL_FFT_MODF_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	76;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/atom/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/core2/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/fat/gmp-mparam.h	66;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/geode/gmp-mparam.h	68;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/i486/gmp-mparam.h	64;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/k10/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/k6/gmp-mparam.h	70;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/k7/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/k8/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/nano/gmp-mparam.h	74;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/p6/gmp-mparam.h	81;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	76;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	79;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	71;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	75;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	78;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	80;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	81;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	80;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	76;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	77;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	76;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	67;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/gmp-mparam.h	72;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	84;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	81;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	80;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	83;"	d
MUL_FFT_MODF_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	80;"	d
MUL_FFT_TABLE	gmp-impl.h	2276;"	d
MUL_FFT_TABLE	gmp-impl.h	4747;"	d
MUL_FFT_TABLE	gmp-impl.h	4748;"	d
MUL_FFT_TABLE	mpn/alpha/ev6/nails/gmp-mparam.h	66;"	d
MUL_FFT_TABLE	mpn/alpha/gmp-mparam.h	80;"	d
MUL_FFT_TABLE	mpn/cray/gmp-mparam.h	73;"	d
MUL_FFT_TABLE	mpn/cray/ieee/gmp-mparam.h	67;"	d
MUL_FFT_TABLE	mpn/m68k/gmp-mparam.h	70;"	d
MUL_FFT_TABLE	mpn/minithres/gmp-mparam.h	67;"	d
MUL_FFT_TABLE	mpn/mips32/gmp-mparam.h	66;"	d
MUL_FFT_TABLE	mpn/mips64/gmp-mparam.h	66;"	d
MUL_FFT_TABLE	mpn/pa32/hppa1_1/gmp-mparam.h	66;"	d
MUL_FFT_TABLE	mpn/power/gmp-mparam.h	63;"	d
MUL_FFT_TABLE	mpn/powerpc64/mode64/gmp-mparam.h	76;"	d
MUL_FFT_TABLE	mpn/sparc32/gmp-mparam.h	61;"	d
MUL_FFT_TABLE	mpn/sparc32/v8/gmp-mparam.h	67;"	d
MUL_FFT_TABLE	mpn/sparc32/v8/supersparc/gmp-mparam.h	67;"	d
MUL_FFT_TABLE	mpn/x86/fat/gmp-mparam.h	65;"	d
MUL_FFT_TABLE	mpn/x86/i486/gmp-mparam.h	63;"	d
MUL_FFT_TABLE	mpn/x86/pentium/gmp-mparam.h	70;"	d
MUL_FFT_TABLE	mpn/x86_64/fat/gmp-mparam.h	66;"	d
MUL_FFT_TABLE3	gmp-impl.h	4750;"	d
MUL_FFT_TABLE3	gmp-impl.h	4751;"	d
MUL_FFT_TABLE3	mpn/alpha/ev5/gmp-mparam.h	82;"	d
MUL_FFT_TABLE3	mpn/alpha/ev6/gmp-mparam.h	84;"	d
MUL_FFT_TABLE3	mpn/arm/gmp-mparam.h	73;"	d
MUL_FFT_TABLE3	mpn/arm/v6/gmp-mparam.h	81;"	d
MUL_FFT_TABLE3	mpn/arm/v7a/cora15/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/arm/v7a/cora7/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/arm/v7a/cora8/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/arm/v7a/cora9/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/arm64/gmp-mparam.h	81;"	d
MUL_FFT_TABLE3	mpn/ia64/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/pa32/hppa2_0/gmp-mparam.h	72;"	d
MUL_FFT_TABLE3	mpn/pa64/gmp-mparam.h	77;"	d
MUL_FFT_TABLE3	mpn/powerpc32/750/gmp-mparam.h	75;"	d
MUL_FFT_TABLE3	mpn/powerpc32/gmp-mparam.h	91;"	d
MUL_FFT_TABLE3	mpn/powerpc32/p3/gmp-mparam.h	72;"	d
MUL_FFT_TABLE3	mpn/powerpc32/p4/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/powerpc32/p5/gmp-mparam.h	77;"	d
MUL_FFT_TABLE3	mpn/powerpc32/p6/gmp-mparam.h	77;"	d
MUL_FFT_TABLE3	mpn/powerpc32/p7/gmp-mparam.h	77;"	d
MUL_FFT_TABLE3	mpn/powerpc64/mode32/p4/gmp-mparam.h	73;"	d
MUL_FFT_TABLE3	mpn/powerpc64/mode64/p3/gmp-mparam.h	72;"	d
MUL_FFT_TABLE3	mpn/powerpc64/mode64/p4/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/powerpc64/mode64/p5/gmp-mparam.h	74;"	d
MUL_FFT_TABLE3	mpn/powerpc64/mode64/p6/gmp-mparam.h	73;"	d
MUL_FFT_TABLE3	mpn/powerpc64/mode64/p7/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/s390_32/esame/gmp-mparam.h	81;"	d
MUL_FFT_TABLE3	mpn/s390_32/gmp-mparam.h	75;"	d
MUL_FFT_TABLE3	mpn/s390_64/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/s390_64/z10/gmp-mparam.h	82;"	d
MUL_FFT_TABLE3	mpn/sparc32/ultrasparct1/gmp-mparam.h	71;"	d
MUL_FFT_TABLE3	mpn/sparc32/v9/gmp-mparam.h	82;"	d
MUL_FFT_TABLE3	mpn/sparc64/gmp-mparam.h	72;"	d
MUL_FFT_TABLE3	mpn/sparc64/ultrasparc34/gmp-mparam.h	82;"	d
MUL_FFT_TABLE3	mpn/sparc64/ultrasparct1/gmp-mparam.h	77;"	d
MUL_FFT_TABLE3	mpn/x86/atom/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86/bd1/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/x86/bd2/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86/bobcat/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86/core2/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86/coreihwl/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86/coreinhm/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86/coreisbr/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86/geode/gmp-mparam.h	69;"	d
MUL_FFT_TABLE3	mpn/x86/k10/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86/k6/gmp-mparam.h	71;"	d
MUL_FFT_TABLE3	mpn/x86/k7/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/x86/k8/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86/nano/gmp-mparam.h	75;"	d
MUL_FFT_TABLE3	mpn/x86/p6/gmp-mparam.h	82;"	d
MUL_FFT_TABLE3	mpn/x86/p6/mmx/gmp-mparam.h	77;"	d
MUL_FFT_TABLE3	mpn/x86/p6/sse2/gmp-mparam.h	80;"	d
MUL_FFT_TABLE3	mpn/x86/pentium/mmx/gmp-mparam.h	76;"	d
MUL_FFT_TABLE3	mpn/x86/pentium4/sse2/gmp-mparam.h	79;"	d
MUL_FFT_TABLE3	mpn/x86_64/atom/gmp-mparam.h	81;"	d
MUL_FFT_TABLE3	mpn/x86_64/bd1/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86_64/bd2/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86_64/bobcat/gmp-mparam.h	82;"	d
MUL_FFT_TABLE3	mpn/x86_64/core2/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86_64/coreibwl/gmp-mparam.h	81;"	d
MUL_FFT_TABLE3	mpn/x86_64/coreihwl/gmp-mparam.h	77;"	d
MUL_FFT_TABLE3	mpn/x86_64/coreinhm/gmp-mparam.h	78;"	d
MUL_FFT_TABLE3	mpn/x86_64/coreisbr/gmp-mparam.h	77;"	d
MUL_FFT_TABLE3	mpn/x86_64/gmp-mparam.h	73;"	d
MUL_FFT_TABLE3	mpn/x86_64/k10/gmp-mparam.h	85;"	d
MUL_FFT_TABLE3	mpn/x86_64/k8/gmp-mparam.h	82;"	d
MUL_FFT_TABLE3	mpn/x86_64/nano/gmp-mparam.h	81;"	d
MUL_FFT_TABLE3	mpn/x86_64/pentium4/gmp-mparam.h	84;"	d
MUL_FFT_TABLE3	mpn/x86_64/skylake/gmp-mparam.h	81;"	d
MUL_FFT_TABLE3_SIZE	mpn/alpha/ev5/gmp-mparam.h	114;"	d
MUL_FFT_TABLE3_SIZE	mpn/alpha/ev6/gmp-mparam.h	123;"	d
MUL_FFT_TABLE3_SIZE	mpn/arm/gmp-mparam.h	81;"	d
MUL_FFT_TABLE3_SIZE	mpn/arm/v6/gmp-mparam.h	110;"	d
MUL_FFT_TABLE3_SIZE	mpn/arm/v7a/cora15/gmp-mparam.h	111;"	d
MUL_FFT_TABLE3_SIZE	mpn/arm/v7a/cora7/gmp-mparam.h	111;"	d
MUL_FFT_TABLE3_SIZE	mpn/arm/v7a/cora8/gmp-mparam.h	118;"	d
MUL_FFT_TABLE3_SIZE	mpn/arm/v7a/cora9/gmp-mparam.h	120;"	d
MUL_FFT_TABLE3_SIZE	mpn/arm64/gmp-mparam.h	137;"	d
MUL_FFT_TABLE3_SIZE	mpn/ia64/gmp-mparam.h	116;"	d
MUL_FFT_TABLE3_SIZE	mpn/pa32/hppa2_0/gmp-mparam.h	100;"	d
MUL_FFT_TABLE3_SIZE	mpn/pa64/gmp-mparam.h	141;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc32/750/gmp-mparam.h	115;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc32/gmp-mparam.h	133;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc32/p3/gmp-mparam.h	94;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc32/p4/gmp-mparam.h	120;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc32/p5/gmp-mparam.h	96;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc32/p6/gmp-mparam.h	101;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc32/p7/gmp-mparam.h	98;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc64/mode32/p4/gmp-mparam.h	101;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p3/gmp-mparam.h	103;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p4/gmp-mparam.h	119;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p5/gmp-mparam.h	127;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p6/gmp-mparam.h	94;"	d
MUL_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p7/gmp-mparam.h	142;"	d
MUL_FFT_TABLE3_SIZE	mpn/s390_32/esame/gmp-mparam.h	120;"	d
MUL_FFT_TABLE3_SIZE	mpn/s390_32/gmp-mparam.h	88;"	d
MUL_FFT_TABLE3_SIZE	mpn/s390_64/gmp-mparam.h	105;"	d
MUL_FFT_TABLE3_SIZE	mpn/s390_64/z10/gmp-mparam.h	133;"	d
MUL_FFT_TABLE3_SIZE	mpn/sparc32/ultrasparct1/gmp-mparam.h	89;"	d
MUL_FFT_TABLE3_SIZE	mpn/sparc32/v9/gmp-mparam.h	119;"	d
MUL_FFT_TABLE3_SIZE	mpn/sparc64/gmp-mparam.h	86;"	d
MUL_FFT_TABLE3_SIZE	mpn/sparc64/ultrasparc34/gmp-mparam.h	126;"	d
MUL_FFT_TABLE3_SIZE	mpn/sparc64/ultrasparct1/gmp-mparam.h	92;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/atom/gmp-mparam.h	118;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/bd1/gmp-mparam.h	120;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/bd2/gmp-mparam.h	122;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/bobcat/gmp-mparam.h	114;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/core2/gmp-mparam.h	117;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/coreihwl/gmp-mparam.h	121;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/coreinhm/gmp-mparam.h	127;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/coreisbr/gmp-mparam.h	117;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/geode/gmp-mparam.h	86;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/k10/gmp-mparam.h	122;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/k6/gmp-mparam.h	99;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/k7/gmp-mparam.h	142;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/k8/gmp-mparam.h	115;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/nano/gmp-mparam.h	99;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/p6/gmp-mparam.h	116;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/p6/mmx/gmp-mparam.h	118;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/p6/sse2/gmp-mparam.h	114;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/pentium/mmx/gmp-mparam.h	100;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86/pentium4/sse2/gmp-mparam.h	120;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/atom/gmp-mparam.h	123;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/bd1/gmp-mparam.h	135;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/bd2/gmp-mparam.h	143;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/bobcat/gmp-mparam.h	126;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/core2/gmp-mparam.h	128;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/coreibwl/gmp-mparam.h	131;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/coreihwl/gmp-mparam.h	139;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/coreinhm/gmp-mparam.h	129;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/coreisbr/gmp-mparam.h	130;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/gmp-mparam.h	121;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/k10/gmp-mparam.h	136;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/k8/gmp-mparam.h	135;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/nano/gmp-mparam.h	138;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/pentium4/gmp-mparam.h	138;"	d
MUL_FFT_TABLE3_SIZE	mpn/x86_64/skylake/gmp-mparam.h	133;"	d
MUL_FFT_THRESHOLD	gmp-impl.h	2266;"	d
MUL_FFT_THRESHOLD	gmp-impl.h	4739;"	d
MUL_FFT_THRESHOLD	gmp-impl.h	4740;"	d
MUL_FFT_THRESHOLD	gmp-impl.h	622;"	d
MUL_FFT_THRESHOLD	gmp-impl.h	624;"	d
MUL_FFT_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	115;"	d
MUL_FFT_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	124;"	d
MUL_FFT_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	68;"	d
MUL_FFT_THRESHOLD	mpn/alpha/gmp-mparam.h	82;"	d
MUL_FFT_THRESHOLD	mpn/arm/gmp-mparam.h	82;"	d
MUL_FFT_THRESHOLD	mpn/arm/v6/gmp-mparam.h	111;"	d
MUL_FFT_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	112;"	d
MUL_FFT_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	112;"	d
MUL_FFT_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	119;"	d
MUL_FFT_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	121;"	d
MUL_FFT_THRESHOLD	mpn/arm64/gmp-mparam.h	138;"	d
MUL_FFT_THRESHOLD	mpn/cray/gmp-mparam.h	75;"	d
MUL_FFT_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	69;"	d
MUL_FFT_THRESHOLD	mpn/ia64/gmp-mparam.h	117;"	d
MUL_FFT_THRESHOLD	mpn/m68k/gmp-mparam.h	72;"	d
MUL_FFT_THRESHOLD	mpn/minithres/gmp-mparam.h	69;"	d
MUL_FFT_THRESHOLD	mpn/mips32/gmp-mparam.h	68;"	d
MUL_FFT_THRESHOLD	mpn/mips64/gmp-mparam.h	68;"	d
MUL_FFT_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	68;"	d
MUL_FFT_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	101;"	d
MUL_FFT_THRESHOLD	mpn/pa64/gmp-mparam.h	142;"	d
MUL_FFT_THRESHOLD	mpn/power/gmp-mparam.h	65;"	d
MUL_FFT_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	116;"	d
MUL_FFT_THRESHOLD	mpn/powerpc32/gmp-mparam.h	134;"	d
MUL_FFT_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	95;"	d
MUL_FFT_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	121;"	d
MUL_FFT_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	97;"	d
MUL_FFT_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	102;"	d
MUL_FFT_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	99;"	d
MUL_FFT_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	102;"	d
MUL_FFT_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	78;"	d
MUL_FFT_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	104;"	d
MUL_FFT_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	120;"	d
MUL_FFT_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	128;"	d
MUL_FFT_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	95;"	d
MUL_FFT_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	143;"	d
MUL_FFT_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	121;"	d
MUL_FFT_THRESHOLD	mpn/s390_32/gmp-mparam.h	89;"	d
MUL_FFT_THRESHOLD	mpn/s390_64/gmp-mparam.h	106;"	d
MUL_FFT_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	134;"	d
MUL_FFT_THRESHOLD	mpn/sparc32/gmp-mparam.h	63;"	d
MUL_FFT_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	90;"	d
MUL_FFT_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	69;"	d
MUL_FFT_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	69;"	d
MUL_FFT_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	120;"	d
MUL_FFT_THRESHOLD	mpn/sparc64/gmp-mparam.h	87;"	d
MUL_FFT_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	127;"	d
MUL_FFT_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	93;"	d
MUL_FFT_THRESHOLD	mpn/x86/atom/gmp-mparam.h	119;"	d
MUL_FFT_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	121;"	d
MUL_FFT_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	123;"	d
MUL_FFT_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	115;"	d
MUL_FFT_THRESHOLD	mpn/x86/core2/gmp-mparam.h	118;"	d
MUL_FFT_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	122;"	d
MUL_FFT_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	128;"	d
MUL_FFT_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	118;"	d
MUL_FFT_THRESHOLD	mpn/x86/fat/gmp-mparam.h	67;"	d
MUL_FFT_THRESHOLD	mpn/x86/geode/gmp-mparam.h	87;"	d
MUL_FFT_THRESHOLD	mpn/x86/i486/gmp-mparam.h	65;"	d
MUL_FFT_THRESHOLD	mpn/x86/k10/gmp-mparam.h	123;"	d
MUL_FFT_THRESHOLD	mpn/x86/k6/gmp-mparam.h	100;"	d
MUL_FFT_THRESHOLD	mpn/x86/k7/gmp-mparam.h	143;"	d
MUL_FFT_THRESHOLD	mpn/x86/k8/gmp-mparam.h	116;"	d
MUL_FFT_THRESHOLD	mpn/x86/nano/gmp-mparam.h	100;"	d
MUL_FFT_THRESHOLD	mpn/x86/p6/gmp-mparam.h	117;"	d
MUL_FFT_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	119;"	d
MUL_FFT_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	115;"	d
MUL_FFT_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	72;"	d
MUL_FFT_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	101;"	d
MUL_FFT_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	121;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	124;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	136;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	144;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	127;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	129;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	132;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	140;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	130;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	131;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	68;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/gmp-mparam.h	122;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	137;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	136;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	139;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	139;"	d
MUL_FFT_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	134;"	d
MUL_TOOM22_THRESHOLD	gmp-impl.h	2035;"	d
MUL_TOOM22_THRESHOLD	gmp-impl.h	4699;"	d
MUL_TOOM22_THRESHOLD	gmp-impl.h	4700;"	d
MUL_TOOM22_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	57;"	d
MUL_TOOM22_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	59;"	d
MUL_TOOM22_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	36;"	d
MUL_TOOM22_THRESHOLD	mpn/alpha/gmp-mparam.h	40;"	d
MUL_TOOM22_THRESHOLD	mpn/arm/gmp-mparam.h	51;"	d
MUL_TOOM22_THRESHOLD	mpn/arm/v6/gmp-mparam.h	56;"	d
MUL_TOOM22_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/arm64/gmp-mparam.h	56;"	d
MUL_TOOM22_THRESHOLD	mpn/cray/gmp-mparam.h	43;"	d
MUL_TOOM22_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	37;"	d
MUL_TOOM22_THRESHOLD	mpn/ia64/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/m68k/gmp-mparam.h	40;"	d
MUL_TOOM22_THRESHOLD	mpn/minithres/gmp-mparam.h	46;"	d
MUL_TOOM22_THRESHOLD	mpn/mips32/gmp-mparam.h	38;"	d
MUL_TOOM22_THRESHOLD	mpn/mips64/gmp-mparam.h	38;"	d
MUL_TOOM22_THRESHOLD	mpn/pa32/gmp-mparam.h	38;"	d
MUL_TOOM22_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	36;"	d
MUL_TOOM22_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	50;"	d
MUL_TOOM22_THRESHOLD	mpn/pa64/gmp-mparam.h	51;"	d
MUL_TOOM22_THRESHOLD	mpn/power/gmp-mparam.h	33;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc32/gmp-mparam.h	66;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	50;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	51;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	51;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	51;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	48;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	38;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	47;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	49;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	48;"	d
MUL_TOOM22_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	56;"	d
MUL_TOOM22_THRESHOLD	mpn/s390_32/gmp-mparam.h	51;"	d
MUL_TOOM22_THRESHOLD	mpn/s390_64/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	57;"	d
MUL_TOOM22_THRESHOLD	mpn/sparc32/gmp-mparam.h	33;"	d
MUL_TOOM22_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	46;"	d
MUL_TOOM22_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	37;"	d
MUL_TOOM22_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	37;"	d
MUL_TOOM22_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	57;"	d
MUL_TOOM22_THRESHOLD	mpn/sparc64/gmp-mparam.h	50;"	d
MUL_TOOM22_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	57;"	d
MUL_TOOM22_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	52;"	d
MUL_TOOM22_THRESHOLD	mpn/vax/gmp-mparam.h	34;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/atom/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/core2/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/fat/gmp-mparam.h	55;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/geode/gmp-mparam.h	47;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/i486/gmp-mparam.h	39;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/k10/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/k6/gmp-mparam.h	49;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/k7/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/k8/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/nano/gmp-mparam.h	49;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/p6/gmp-mparam.h	56;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	55;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	55;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	44;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	54;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	56;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	57;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	56;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	52;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	53;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	52;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	56;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/gmp-mparam.h	47;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	60;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	57;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	56;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	59;"	d
MUL_TOOM22_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	56;"	d
MUL_TOOM22_THRESHOLD_LIMIT	gmp-impl.h	2087;"	d
MUL_TOOM22_THRESHOLD_LIMIT	gmp-impl.h	5017;"	d
MUL_TOOM22_THRESHOLD_LIMIT	gmp-impl.h	5024;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	gmp-impl.h	2063;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	gmp-impl.h	4719;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	gmp-impl.h	4720;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	65;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/arm/gmp-mparam.h	57;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/arm/v6/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/arm64/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/ia64/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/minithres/gmp-mparam.h	52;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	56;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/pa64/gmp-mparam.h	57;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc32/gmp-mparam.h	72;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	56;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	57;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	57;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	57;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	54;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	53;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	55;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	54;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/s390_32/gmp-mparam.h	57;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/s390_64/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	52;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/sparc64/gmp-mparam.h	56;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	58;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/atom/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/core2/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/geode/gmp-mparam.h	53;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/k10/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/k6/gmp-mparam.h	55;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/k7/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/k8/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/nano/gmp-mparam.h	55;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/p6/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	58;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	58;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/gmp-mparam.h	53;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	66;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	65;"	d
MUL_TOOM32_TO_TOOM43_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	gmp-impl.h	2067;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	gmp-impl.h	4723;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	gmp-impl.h	4724;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	64;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	66;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/arm/gmp-mparam.h	58;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/arm/v6/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/arm64/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/ia64/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/minithres/gmp-mparam.h	53;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	57;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/pa64/gmp-mparam.h	58;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc32/gmp-mparam.h	73;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	57;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	58;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	58;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	58;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	55;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	54;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	56;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	55;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/s390_32/gmp-mparam.h	58;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/s390_64/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	64;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	53;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	64;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/sparc64/gmp-mparam.h	57;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	64;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/atom/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/core2/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/geode/gmp-mparam.h	54;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/k10/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/k6/gmp-mparam.h	56;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/k7/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/k8/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/nano/gmp-mparam.h	56;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/p6/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	62;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	61;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	64;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	60;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	59;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/gmp-mparam.h	54;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	67;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	64;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	63;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	66;"	d
MUL_TOOM32_TO_TOOM53_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	63;"	d
MUL_TOOM33_THRESHOLD	gmp-impl.h	2039;"	d
MUL_TOOM33_THRESHOLD	gmp-impl.h	4703;"	d
MUL_TOOM33_THRESHOLD	gmp-impl.h	4704;"	d
MUL_TOOM33_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	58;"	d
MUL_TOOM33_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	60;"	d
MUL_TOOM33_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	37;"	d
MUL_TOOM33_THRESHOLD	mpn/alpha/gmp-mparam.h	41;"	d
MUL_TOOM33_THRESHOLD	mpn/arm/gmp-mparam.h	52;"	d
MUL_TOOM33_THRESHOLD	mpn/arm/v6/gmp-mparam.h	57;"	d
MUL_TOOM33_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/arm64/gmp-mparam.h	57;"	d
MUL_TOOM33_THRESHOLD	mpn/cray/gmp-mparam.h	44;"	d
MUL_TOOM33_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	38;"	d
MUL_TOOM33_THRESHOLD	mpn/ia64/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/m68k/gmp-mparam.h	41;"	d
MUL_TOOM33_THRESHOLD	mpn/minithres/gmp-mparam.h	47;"	d
MUL_TOOM33_THRESHOLD	mpn/mips32/gmp-mparam.h	39;"	d
MUL_TOOM33_THRESHOLD	mpn/mips64/gmp-mparam.h	39;"	d
MUL_TOOM33_THRESHOLD	mpn/pa32/gmp-mparam.h	41;"	d
MUL_TOOM33_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	37;"	d
MUL_TOOM33_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	51;"	d
MUL_TOOM33_THRESHOLD	mpn/pa64/gmp-mparam.h	52;"	d
MUL_TOOM33_THRESHOLD	mpn/power/gmp-mparam.h	34;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc32/gmp-mparam.h	67;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	51;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	52;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	52;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	52;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	49;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	39;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	48;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	50;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	49;"	d
MUL_TOOM33_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	57;"	d
MUL_TOOM33_THRESHOLD	mpn/s390_32/gmp-mparam.h	52;"	d
MUL_TOOM33_THRESHOLD	mpn/s390_64/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	58;"	d
MUL_TOOM33_THRESHOLD	mpn/sparc32/gmp-mparam.h	34;"	d
MUL_TOOM33_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	47;"	d
MUL_TOOM33_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	38;"	d
MUL_TOOM33_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	38;"	d
MUL_TOOM33_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	58;"	d
MUL_TOOM33_THRESHOLD	mpn/sparc64/gmp-mparam.h	51;"	d
MUL_TOOM33_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	58;"	d
MUL_TOOM33_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	53;"	d
MUL_TOOM33_THRESHOLD	mpn/vax/gmp-mparam.h	35;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/atom/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/core2/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/fat/gmp-mparam.h	56;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/geode/gmp-mparam.h	48;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/i486/gmp-mparam.h	40;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/k10/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/k6/gmp-mparam.h	50;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/k7/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/k8/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/nano/gmp-mparam.h	50;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/p6/gmp-mparam.h	57;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	56;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	56;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	45;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	55;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	57;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	58;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	57;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	53;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	54;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	53;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	57;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/gmp-mparam.h	48;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	61;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	58;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	57;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	60;"	d
MUL_TOOM33_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	57;"	d
MUL_TOOM33_THRESHOLD_LIMIT	gmp-impl.h	2090;"	d
MUL_TOOM33_THRESHOLD_LIMIT	gmp-impl.h	5018;"	d
MUL_TOOM33_THRESHOLD_LIMIT	gmp-impl.h	5025;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	gmp-impl.h	2071;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	gmp-impl.h	4727;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	gmp-impl.h	4728;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	67;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/arm/gmp-mparam.h	59;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/arm/v6/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/arm64/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/ia64/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/minithres/gmp-mparam.h	54;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	58;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/pa64/gmp-mparam.h	59;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc32/gmp-mparam.h	74;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	58;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	59;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	59;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	59;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	56;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	55;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	57;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	56;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/s390_32/gmp-mparam.h	59;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/s390_64/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	54;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/sparc64/gmp-mparam.h	58;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	60;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/atom/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/core2/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/geode/gmp-mparam.h	55;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/k10/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/k6/gmp-mparam.h	57;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/k7/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/k8/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/nano/gmp-mparam.h	57;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/p6/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	60;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	60;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/gmp-mparam.h	55;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	68;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	67;"	d
MUL_TOOM42_TO_TOOM53_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	gmp-impl.h	2075;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	gmp-impl.h	4731;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	gmp-impl.h	4732;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	66;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	68;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/arm/gmp-mparam.h	60;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/arm/v6/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/arm64/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/ia64/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/minithres/gmp-mparam.h	55;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	59;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/pa64/gmp-mparam.h	60;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc32/gmp-mparam.h	75;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	59;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	60;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	60;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	60;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	57;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	56;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	58;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	57;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/s390_32/gmp-mparam.h	60;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/s390_64/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	66;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	55;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	66;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/sparc64/gmp-mparam.h	59;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	66;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/atom/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/core2/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/geode/gmp-mparam.h	56;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/k10/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/k6/gmp-mparam.h	58;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/k7/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/k8/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/nano/gmp-mparam.h	58;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/p6/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	64;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	63;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	66;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	62;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	61;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/gmp-mparam.h	56;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	69;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	66;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	65;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	68;"	d
MUL_TOOM42_TO_TOOM63_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	65;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	gmp-impl.h	2079;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	gmp-impl.h	4735;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	gmp-impl.h	4736;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	67;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	69;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/arm/v6/gmp-mparam.h	66;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/arm64/gmp-mparam.h	66;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/ia64/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/powerpc32/gmp-mparam.h	76;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	58;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	57;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	59;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	58;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	66;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/s390_64/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	67;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	56;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	67;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	67;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	62;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/atom/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/core2/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/k10/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/k7/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/k8/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	65;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	64;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	66;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	67;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	66;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	62;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	63;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	62;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	70;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	67;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	66;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	69;"	d
MUL_TOOM43_TO_TOOM54_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	66;"	d
MUL_TOOM44_THRESHOLD	gmp-impl.h	2043;"	d
MUL_TOOM44_THRESHOLD	gmp-impl.h	4707;"	d
MUL_TOOM44_THRESHOLD	gmp-impl.h	4708;"	d
MUL_TOOM44_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	59;"	d
MUL_TOOM44_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	61;"	d
MUL_TOOM44_THRESHOLD	mpn/alpha/gmp-mparam.h	42;"	d
MUL_TOOM44_THRESHOLD	mpn/arm/gmp-mparam.h	53;"	d
MUL_TOOM44_THRESHOLD	mpn/arm/v6/gmp-mparam.h	58;"	d
MUL_TOOM44_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/arm64/gmp-mparam.h	58;"	d
MUL_TOOM44_THRESHOLD	mpn/ia64/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/minithres/gmp-mparam.h	48;"	d
MUL_TOOM44_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	52;"	d
MUL_TOOM44_THRESHOLD	mpn/pa64/gmp-mparam.h	53;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc32/gmp-mparam.h	68;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	52;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	53;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	53;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	53;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	50;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	40;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	49;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	51;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	50;"	d
MUL_TOOM44_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	58;"	d
MUL_TOOM44_THRESHOLD	mpn/s390_32/gmp-mparam.h	53;"	d
MUL_TOOM44_THRESHOLD	mpn/s390_64/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	59;"	d
MUL_TOOM44_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	48;"	d
MUL_TOOM44_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	59;"	d
MUL_TOOM44_THRESHOLD	mpn/sparc64/gmp-mparam.h	52;"	d
MUL_TOOM44_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	59;"	d
MUL_TOOM44_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	54;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/atom/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/core2/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/geode/gmp-mparam.h	49;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/k10/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/k6/gmp-mparam.h	51;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/k7/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/k8/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/nano/gmp-mparam.h	51;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/p6/gmp-mparam.h	58;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	57;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	57;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	56;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	58;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	59;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	58;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	54;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	55;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	54;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/gmp-mparam.h	49;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	62;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	59;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	58;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	61;"	d
MUL_TOOM44_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	58;"	d
MUL_TOOM44_THRESHOLD_LIMIT	gmp-impl.h	5027;"	d
MUL_TOOM6H_MIN	gmp-impl.h	5082;"	d
MUL_TOOM6H_THRESHOLD	gmp-impl.h	2047;"	d
MUL_TOOM6H_THRESHOLD	gmp-impl.h	4711;"	d
MUL_TOOM6H_THRESHOLD	gmp-impl.h	4712;"	d
MUL_TOOM6H_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	60;"	d
MUL_TOOM6H_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	62;"	d
MUL_TOOM6H_THRESHOLD	mpn/arm/gmp-mparam.h	54;"	d
MUL_TOOM6H_THRESHOLD	mpn/arm/v6/gmp-mparam.h	59;"	d
MUL_TOOM6H_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/arm64/gmp-mparam.h	59;"	d
MUL_TOOM6H_THRESHOLD	mpn/ia64/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/minithres/gmp-mparam.h	49;"	d
MUL_TOOM6H_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	53;"	d
MUL_TOOM6H_THRESHOLD	mpn/pa64/gmp-mparam.h	54;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc32/gmp-mparam.h	69;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	53;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	54;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	54;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	54;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	51;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	50;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	52;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	51;"	d
MUL_TOOM6H_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	59;"	d
MUL_TOOM6H_THRESHOLD	mpn/s390_32/gmp-mparam.h	54;"	d
MUL_TOOM6H_THRESHOLD	mpn/s390_64/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	60;"	d
MUL_TOOM6H_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	49;"	d
MUL_TOOM6H_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	60;"	d
MUL_TOOM6H_THRESHOLD	mpn/sparc64/gmp-mparam.h	53;"	d
MUL_TOOM6H_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	60;"	d
MUL_TOOM6H_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	55;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/atom/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/core2/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/geode/gmp-mparam.h	50;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/k10/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/k6/gmp-mparam.h	52;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/k7/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/k8/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/nano/gmp-mparam.h	52;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/p6/gmp-mparam.h	59;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	58;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	58;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	57;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	59;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	60;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	59;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	55;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	56;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	55;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/gmp-mparam.h	50;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	63;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	60;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	59;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	62;"	d
MUL_TOOM6H_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	59;"	d
MUL_TOOM6H_THRESHOLD_LIMIT	gmp-impl.h	5029;"	d
MUL_TOOM8H_MIN	gmp-impl.h	5102;"	d
MUL_TOOM8H_THRESHOLD	gmp-impl.h	2055;"	d
MUL_TOOM8H_THRESHOLD	gmp-impl.h	4715;"	d
MUL_TOOM8H_THRESHOLD	gmp-impl.h	4716;"	d
MUL_TOOM8H_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	61;"	d
MUL_TOOM8H_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	63;"	d
MUL_TOOM8H_THRESHOLD	mpn/arm/gmp-mparam.h	55;"	d
MUL_TOOM8H_THRESHOLD	mpn/arm/v6/gmp-mparam.h	60;"	d
MUL_TOOM8H_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/arm64/gmp-mparam.h	60;"	d
MUL_TOOM8H_THRESHOLD	mpn/ia64/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/minithres/gmp-mparam.h	50;"	d
MUL_TOOM8H_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	54;"	d
MUL_TOOM8H_THRESHOLD	mpn/pa64/gmp-mparam.h	55;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc32/gmp-mparam.h	70;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	54;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	55;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	55;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	55;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	52;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	51;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	53;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	52;"	d
MUL_TOOM8H_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	60;"	d
MUL_TOOM8H_THRESHOLD	mpn/s390_32/gmp-mparam.h	55;"	d
MUL_TOOM8H_THRESHOLD	mpn/s390_64/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	61;"	d
MUL_TOOM8H_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	50;"	d
MUL_TOOM8H_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	61;"	d
MUL_TOOM8H_THRESHOLD	mpn/sparc64/gmp-mparam.h	54;"	d
MUL_TOOM8H_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	61;"	d
MUL_TOOM8H_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	56;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/atom/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/core2/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/geode/gmp-mparam.h	51;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/k10/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/k6/gmp-mparam.h	53;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/k7/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/k8/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/nano/gmp-mparam.h	53;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/p6/gmp-mparam.h	60;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	59;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	59;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	58;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	60;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	61;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	60;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	56;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	57;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	56;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/gmp-mparam.h	51;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	64;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	61;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	60;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	63;"	d
MUL_TOOM8H_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	60;"	d
MUL_TOOM8H_THRESHOLD_LIMIT	gmp-impl.h	5031;"	d
MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD	gmp-impl.h	2226;"	d
MUPI_DIVAPPR_Q_THRESHOLD	mpn/div_q.c	97;"	d	file:
MUPI_DIVAPPR_Q_THRESHOLD	mpn/generic/div_q.c	97;"	d	file:
MUPI_DIV_QR_THRESHOLD	gmp-impl.h	2206;"	d
MUPI_DIV_QR_THRESHOLD	gmp-impl.h	4856;"	d
MUPI_DIV_QR_THRESHOLD	gmp-impl.h	4857;"	d
MUPI_DIV_QR_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	167;"	d
MUPI_DIV_QR_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	189;"	d
MUPI_DIV_QR_THRESHOLD	mpn/arm/gmp-mparam.h	114;"	d
MUPI_DIV_QR_THRESHOLD	mpn/arm/v6/gmp-mparam.h	168;"	d
MUPI_DIV_QR_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	173;"	d
MUPI_DIV_QR_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	174;"	d
MUPI_DIV_QR_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	187;"	d
MUPI_DIV_QR_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	189;"	d
MUPI_DIV_QR_THRESHOLD	mpn/arm64/gmp-mparam.h	219;"	d
MUPI_DIV_QR_THRESHOLD	mpn/ia64/gmp-mparam.h	184;"	d
MUPI_DIV_QR_THRESHOLD	mpn/minithres/gmp-mparam.h	97;"	d
MUPI_DIV_QR_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	154;"	d
MUPI_DIV_QR_THRESHOLD	mpn/pa64/gmp-mparam.h	232;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	179;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc32/gmp-mparam.h	202;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	142;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	184;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	141;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	150;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	144;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	153;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	159;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	192;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	201;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	140;"	d
MUPI_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	225;"	d
MUPI_DIV_QR_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	187;"	d
MUPI_DIV_QR_THRESHOLD	mpn/s390_32/gmp-mparam.h	125;"	d
MUPI_DIV_QR_THRESHOLD	mpn/s390_64/gmp-mparam.h	155;"	d
MUPI_DIV_QR_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	213;"	d
MUPI_DIV_QR_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	133;"	d
MUPI_DIV_QR_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	184;"	d
MUPI_DIV_QR_THRESHOLD	mpn/sparc64/gmp-mparam.h	126;"	d
MUPI_DIV_QR_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	202;"	d
MUPI_DIV_QR_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	134;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/atom/gmp-mparam.h	187;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	188;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	191;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	177;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/core2/gmp-mparam.h	180;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	190;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	204;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	183;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/geode/gmp-mparam.h	128;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/k10/gmp-mparam.h	194;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/k6/gmp-mparam.h	153;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/k7/gmp-mparam.h	233;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/k8/gmp-mparam.h	178;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/nano/gmp-mparam.h	147;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/p6/gmp-mparam.h	179;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	185;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	180;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	150;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	186;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	196;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	221;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	236;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	199;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	207;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	209;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	226;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	213;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	211;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/gmp-mparam.h	199;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	217;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	216;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	223;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	211;"	d
MUPI_DIV_QR_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	210;"	d
MUPI_DIV_Q_THRESHOLD	mpn/div_q.c	95;"	d	file:
MUPI_DIV_Q_THRESHOLD	mpn/generic/div_q.c	95;"	d	file:
MU_BDIV_QR_THRESHOLD	gmp-impl.h	2214;"	d
MU_BDIV_QR_THRESHOLD	gmp-impl.h	4860;"	d
MU_BDIV_QR_THRESHOLD	gmp-impl.h	4861;"	d
MU_BDIV_QR_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	168;"	d
MU_BDIV_QR_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	190;"	d
MU_BDIV_QR_THRESHOLD	mpn/arm/gmp-mparam.h	115;"	d
MU_BDIV_QR_THRESHOLD	mpn/arm/v6/gmp-mparam.h	169;"	d
MU_BDIV_QR_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	174;"	d
MU_BDIV_QR_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	175;"	d
MU_BDIV_QR_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	188;"	d
MU_BDIV_QR_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	190;"	d
MU_BDIV_QR_THRESHOLD	mpn/arm64/gmp-mparam.h	220;"	d
MU_BDIV_QR_THRESHOLD	mpn/ia64/gmp-mparam.h	185;"	d
MU_BDIV_QR_THRESHOLD	mpn/minithres/gmp-mparam.h	98;"	d
MU_BDIV_QR_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	155;"	d
MU_BDIV_QR_THRESHOLD	mpn/pa64/gmp-mparam.h	233;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	180;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc32/gmp-mparam.h	203;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	143;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	185;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	142;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	151;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	145;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	154;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	160;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	193;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	202;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	141;"	d
MU_BDIV_QR_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	226;"	d
MU_BDIV_QR_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	188;"	d
MU_BDIV_QR_THRESHOLD	mpn/s390_32/gmp-mparam.h	126;"	d
MU_BDIV_QR_THRESHOLD	mpn/s390_64/gmp-mparam.h	156;"	d
MU_BDIV_QR_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	214;"	d
MU_BDIV_QR_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	134;"	d
MU_BDIV_QR_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	185;"	d
MU_BDIV_QR_THRESHOLD	mpn/sparc64/gmp-mparam.h	127;"	d
MU_BDIV_QR_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	203;"	d
MU_BDIV_QR_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	135;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/atom/gmp-mparam.h	188;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	189;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	192;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	178;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/core2/gmp-mparam.h	181;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	191;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	205;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	184;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/geode/gmp-mparam.h	129;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/k10/gmp-mparam.h	195;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/k6/gmp-mparam.h	154;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/k7/gmp-mparam.h	234;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/k8/gmp-mparam.h	179;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/nano/gmp-mparam.h	148;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/p6/gmp-mparam.h	180;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	186;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	181;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	151;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	187;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	197;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	222;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	237;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	200;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	208;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	210;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	227;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	214;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	212;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/gmp-mparam.h	200;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	218;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	217;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	224;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	212;"	d
MU_BDIV_QR_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	211;"	d
MU_BDIV_Q_THRESHOLD	gmp-impl.h	2210;"	d
MU_BDIV_Q_THRESHOLD	gmp-impl.h	4864;"	d
MU_BDIV_Q_THRESHOLD	gmp-impl.h	4865;"	d
MU_BDIV_Q_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	169;"	d
MU_BDIV_Q_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	191;"	d
MU_BDIV_Q_THRESHOLD	mpn/arm/gmp-mparam.h	116;"	d
MU_BDIV_Q_THRESHOLD	mpn/arm/v6/gmp-mparam.h	170;"	d
MU_BDIV_Q_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	175;"	d
MU_BDIV_Q_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	176;"	d
MU_BDIV_Q_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	189;"	d
MU_BDIV_Q_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	191;"	d
MU_BDIV_Q_THRESHOLD	mpn/arm64/gmp-mparam.h	221;"	d
MU_BDIV_Q_THRESHOLD	mpn/ia64/gmp-mparam.h	186;"	d
MU_BDIV_Q_THRESHOLD	mpn/minithres/gmp-mparam.h	99;"	d
MU_BDIV_Q_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	156;"	d
MU_BDIV_Q_THRESHOLD	mpn/pa64/gmp-mparam.h	234;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	181;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc32/gmp-mparam.h	204;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	144;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	186;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	143;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	152;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	146;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	155;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	161;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	194;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	203;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	142;"	d
MU_BDIV_Q_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	227;"	d
MU_BDIV_Q_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	189;"	d
MU_BDIV_Q_THRESHOLD	mpn/s390_32/gmp-mparam.h	127;"	d
MU_BDIV_Q_THRESHOLD	mpn/s390_64/gmp-mparam.h	157;"	d
MU_BDIV_Q_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	215;"	d
MU_BDIV_Q_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	135;"	d
MU_BDIV_Q_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	186;"	d
MU_BDIV_Q_THRESHOLD	mpn/sparc64/gmp-mparam.h	128;"	d
MU_BDIV_Q_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	204;"	d
MU_BDIV_Q_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	136;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/atom/gmp-mparam.h	189;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	190;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	193;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	179;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/core2/gmp-mparam.h	182;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	192;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	206;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	185;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/geode/gmp-mparam.h	130;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/k10/gmp-mparam.h	196;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/k6/gmp-mparam.h	155;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/k7/gmp-mparam.h	235;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/k8/gmp-mparam.h	180;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/nano/gmp-mparam.h	149;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/p6/gmp-mparam.h	181;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	187;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	182;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	152;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	188;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	198;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	223;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	238;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	201;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	209;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	211;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	228;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	215;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	213;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/gmp-mparam.h	201;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	219;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	218;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	225;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	213;"	d
MU_BDIV_Q_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	212;"	d
MU_DIVAPPR_Q_THRESHOLD	gmp-impl.h	2198;"	d
MU_DIVAPPR_Q_THRESHOLD	gmp-impl.h	4852;"	d
MU_DIVAPPR_Q_THRESHOLD	gmp-impl.h	4853;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	166;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	188;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/arm/gmp-mparam.h	113;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/arm/v6/gmp-mparam.h	167;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	172;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	173;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	186;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	188;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/arm64/gmp-mparam.h	218;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/ia64/gmp-mparam.h	183;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/minithres/gmp-mparam.h	96;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	153;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/pa64/gmp-mparam.h	231;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	178;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/gmp-mparam.h	201;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	141;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	183;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	140;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	149;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	143;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	152;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	158;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	191;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	200;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	139;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	224;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	186;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/s390_32/gmp-mparam.h	124;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/s390_64/gmp-mparam.h	154;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	212;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	132;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	183;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/sparc64/gmp-mparam.h	125;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	201;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	133;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/atom/gmp-mparam.h	186;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	187;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	190;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	176;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/core2/gmp-mparam.h	179;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	189;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	203;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	182;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/geode/gmp-mparam.h	127;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/k10/gmp-mparam.h	193;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/k6/gmp-mparam.h	152;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/k7/gmp-mparam.h	232;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/k8/gmp-mparam.h	177;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/nano/gmp-mparam.h	146;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/p6/gmp-mparam.h	178;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	184;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	179;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	149;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	185;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	195;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	220;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	235;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	198;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	206;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	208;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	225;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	212;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	210;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/gmp-mparam.h	198;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	216;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	215;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	222;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	210;"	d
MU_DIVAPPR_Q_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	209;"	d
MU_DIV_QR_SKEW_THRESHOLD	mpn/generic/mu_div_qr.c	84;"	d	file:
MU_DIV_QR_SKEW_THRESHOLD	mpn/generic/mu_div_qr.c	88;"	d	file:
MU_DIV_QR_SKEW_THRESHOLD	mpn/generic/mu_div_qr.c	89;"	d	file:
MU_DIV_QR_SKEW_THRESHOLD	mpn/mu_div_qr.c	84;"	d	file:
MU_DIV_QR_SKEW_THRESHOLD	mpn/mu_div_qr.c	88;"	d	file:
MU_DIV_QR_SKEW_THRESHOLD	mpn/mu_div_qr.c	89;"	d	file:
MU_DIV_QR_THRESHOLD	gmp-impl.h	2202;"	d
MU_DIV_QR_THRESHOLD	gmp-impl.h	4848;"	d
MU_DIV_QR_THRESHOLD	gmp-impl.h	4849;"	d
MU_DIV_QR_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	165;"	d
MU_DIV_QR_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	187;"	d
MU_DIV_QR_THRESHOLD	mpn/arm/gmp-mparam.h	112;"	d
MU_DIV_QR_THRESHOLD	mpn/arm/v6/gmp-mparam.h	166;"	d
MU_DIV_QR_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	171;"	d
MU_DIV_QR_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	172;"	d
MU_DIV_QR_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	185;"	d
MU_DIV_QR_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	187;"	d
MU_DIV_QR_THRESHOLD	mpn/arm64/gmp-mparam.h	217;"	d
MU_DIV_QR_THRESHOLD	mpn/ia64/gmp-mparam.h	182;"	d
MU_DIV_QR_THRESHOLD	mpn/minithres/gmp-mparam.h	95;"	d
MU_DIV_QR_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	152;"	d
MU_DIV_QR_THRESHOLD	mpn/pa64/gmp-mparam.h	230;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	177;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc32/gmp-mparam.h	200;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	140;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	182;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	139;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	148;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	142;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	151;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	157;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	190;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	199;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	138;"	d
MU_DIV_QR_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	223;"	d
MU_DIV_QR_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	185;"	d
MU_DIV_QR_THRESHOLD	mpn/s390_32/gmp-mparam.h	123;"	d
MU_DIV_QR_THRESHOLD	mpn/s390_64/gmp-mparam.h	153;"	d
MU_DIV_QR_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	211;"	d
MU_DIV_QR_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	131;"	d
MU_DIV_QR_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	182;"	d
MU_DIV_QR_THRESHOLD	mpn/sparc64/gmp-mparam.h	124;"	d
MU_DIV_QR_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	200;"	d
MU_DIV_QR_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	132;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/atom/gmp-mparam.h	185;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	186;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	189;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	175;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/core2/gmp-mparam.h	178;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	188;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	202;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	181;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/geode/gmp-mparam.h	126;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/k10/gmp-mparam.h	192;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/k6/gmp-mparam.h	151;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/k7/gmp-mparam.h	231;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/k8/gmp-mparam.h	176;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/nano/gmp-mparam.h	145;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/p6/gmp-mparam.h	177;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	183;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	178;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	148;"	d
MU_DIV_QR_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	184;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	194;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	219;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	234;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	197;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	205;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	207;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	224;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	211;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	209;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/gmp-mparam.h	197;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	215;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	214;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	221;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	209;"	d
MU_DIV_QR_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	208;"	d
MU_DIV_Q_THRESHOLD	mpn/div_q.c	94;"	d	file:
MU_DIV_Q_THRESHOLD	mpn/generic/div_q.c	94;"	d	file:
M_2POW32	tune/time.c	233;"	d	file:
M_2POW64	tune/time.c	234;"	d	file:
M_2POWU	tune/time.c	231;"	d	file:
M_PI	demos/qcn.c	48;"	d	file:
Mersenne_Twister_Generator	rand/randmts.c	/^static const gmp_randfnptr_t Mersenne_Twister_Generator = {$/;"	v	file:
Mersenne_Twister_Generator_Noseed	rand/randmt.c	/^static const gmp_randfnptr_t Mersenne_Twister_Generator_Noseed = {$/;"	v	file:
Mytie	demos/perl/test.pl	/^package Mytie;$/;"	p
N	rand/randmt.h	36;"	d
NE	demos/calc/calc.c	/^     NE = 281,$/;"	e	enum:yytokentype	file:
NE	demos/calc/calc.c	298;"	d	file:
NE	demos/calc/calc.h	/^     NE = 281,$/;"	e	enum:yytokentype
NE	demos/calc/calc.h	103;"	d
NEG	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
NEG_CAST	gmp-impl.h	534;"	d
NEG_MOD	gmp-impl.h	3302;"	d
NEXTPRIME	demos/calc/calc.c	/^     NEXTPRIME = 271,$/;"	e	enum:yytokentype	file:
NEXTPRIME	demos/calc/calc.c	288;"	d	file:
NEXTPRIME	demos/calc/calc.h	/^     NEXTPRIME = 271,$/;"	e	enum:yytokentype
NEXTPRIME	demos/calc/calc.h	93;"	d
NEXTPRIME	demos/pexpr.c	/^	   LOG, LOG2, FERMAT, MERSENNE, FIBONACCI, RANDOM, NEXTPRIME, BINOM,$/;"	e	enum:op_t	file:
NEXT_RANDOM	rand/randmt.c	210;"	d	file:
NMAX_DEFAULT	tune/tuneup.c	769;"	d	file:
NOP	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
NOT	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
NO_ASM	config.h	516;"	d
NO_CALC_H	demos/calc/calc.c	116;"	d	file:
NPOWS	mpn/binvert.c	47;"	d	file:
NPOWS	mpn/binvert.c	50;"	d	file:
NPOWS	mpn/generic/binvert.c	47;"	d	file:
NPOWS	mpn/generic/binvert.c	50;"	d	file:
NPOWS	mpn/generic/invertappr.c	52;"	d	file:
NPOWS	mpn/generic/invertappr.c	56;"	d	file:
NPOWS	mpn/invertappr.c	52;"	d	file:
NPOWS	mpn/invertappr.c	56;"	d	file:
NRP	tests/mpz/t-perfpow.c	105;"	d	file:
NTH_ROOT_NUMB_MASK_TABLE	fac_table.h	25;"	d
NTOH_LIMB_FETCH	mpz/inp_raw.c	40;"	d	file:
NTOH_LIMB_FETCH	mpz/inp_raw.c	44;"	d	file:
NTOH_LIMB_FETCH	mpz/inp_raw.c	48;"	d	file:
NUM	gmp-impl.h	549;"	d
NUMBER	demos/calc/calc.c	/^     NUMBER = 275,$/;"	e	enum:yytokentype	file:
NUMBER	demos/calc/calc.c	292;"	d	file:
NUMBER	demos/calc/calc.h	/^     NUMBER = 275,$/;"	e	enum:yytokentype
NUMBER	demos/calc/calc.h	97;"	d
NUMBER_OF_PRIMES	mpz/nextprime.c	47;"	d	file:
NUM_DESTS	tests/devel/try.c	243;"	d	file:
NUM_LIMBS	tests/mpz/bit.c	171;"	d	file:
NUM_SOURCES	tests/devel/try.c	242;"	d	file:
N_QLIMBS	mpq/get_d.c	114;"	d	file:
OBJS	Makefile	/^OBJS=assert.o compat.o errno.o extract-dbl.o invalid.o memory.o mp_bpl.o mp_clz_tab.o mp_dv_tab.o mp_minv_tab.o mp_get_fns.o mp_set_fns.o version.o nextprime.o primesieve.o tal-reent.o mpf\/init.o mpf\/init2.o mpf\/inits.o mpf\/set.o mpf\/set_ui.o mpf\/set_si.o mpf\/set_str.o mpf\/set_d.o mpf\/set_z.o mpf\/iset.o mpf\/iset_ui.o mpf\/iset_si.o mpf\/iset_str.o mpf\/iset_d.o mpf\/clear.o mpf\/clears.o mpf\/get_str.o mpf\/dump.o mpf\/size.o mpf\/eq.o mpf\/reldiff.o mpf\/sqrt.o mpf\/random2.o mpf\/inp_str.o mpf\/out_str.o mpf\/add.o mpf\/add_ui.o mpf\/sub.o mpf\/sub_ui.o mpf\/ui_sub.o mpf\/mul.o mpf\/mul_ui.o mpf\/div.o mpf\/div_ui.o mpf\/cmp_z.o mpf\/cmp.o mpf\/cmp_d.o mpf\/cmp_ui.o mpf\/cmp_si.o mpf\/mul_2exp.o mpf\/div_2exp.o mpf\/abs.o mpf\/neg.o mpf\/set_q.o mpf\/get_d.o mpf\/get_d_2exp.o mpf\/set_dfl_prec.o mpf\/set_prc.o mpf\/set_prc_raw.o mpf\/get_dfl_prec.o mpf\/get_prc.o mpf\/ui_div.o mpf\/sqrt_ui.o mpf\/ceilfloor.o mpf\/trunc.o mpf\/pow_ui.o mpf\/urandomb.o mpf\/swap.o mpf\/fits_sint.o mpf\/fits_slong.o mpf\/fits_sshort.o mpf\/fits_uint.o mpf\/fits_ulong.o mpf\/fits_ushort.o mpf\/get_si.o mpf\/get_ui.o mpf\/int_p.o  mpz\/aorsmul.o mpz\/aorsmul_i.o mpz\/and.o mpz\/array_init.o mpz\/bin_ui.o mpz\/bin_uiui.o mpz\/cdiv_q.o mpz\/cdiv_q_ui.o mpz\/cdiv_qr.o mpz\/cdiv_qr_ui.o mpz\/cdiv_r.o mpz\/cdiv_r_ui.o mpz\/cdiv_ui.o mpz\/cfdiv_q_2exp.o mpz\/cfdiv_r_2exp.o  mpz\/cmpabs.o mpz\/cmpabs_d.o mpz\/cmpabs_ui.o mpz\/com.o mpz\/combit.o mpz\/cong.o mpz\/cong_2exp.o mpz\/cong_ui.o mpz\/divexact.o mpz\/divegcd.o mpz\/dive_ui.o mpz\/divis.o mpz\/divis_ui.o mpz\/divis_2exp.o mpz\/export.o mpz\/mfac_uiui.o mpz\/2fac_ui.o mpz\/fac_ui.o mpz\/oddfac_1.o mpz\/prodlimbs.o mpz\/fdiv_q_ui.o mpz\/fdiv_qr.o mpz\/fdiv_qr_ui.o mpz\/fdiv_r.o mpz\/fdiv_r_ui.o mpz\/fdiv_q.o mpz\/fdiv_ui.o mpz\/fib_ui.o mpz\/fib2_ui.o  mpz\/gcd.o mpz\/gcd_ui.o mpz\/gcdext.o mpz\/getlimbn.o mpz\/hamdist.o mpz\/import.o  mpz\/inp_raw.o mpz\/invert.o mpz\/ior.o  mpz\/jacobi.o mpz\/kronsz.o mpz\/kronuz.o mpz\/kronzs.o mpz\/kronzu.o mpz\/lcm.o mpz\/lcm_ui.o mpz\/limbs_finish.o mpz\/limbs_modify.o mpz\/limbs_read.o mpz\/limbs_write.o mpz\/lucnum_ui.o mpz\/lucnum2_ui.o mpz\/millerrabin.o mpz\/mod.o mpz\/mul_si.o  mpz\/n_pow_ui.o  mpz\/out_raw.o  mpz\/perfpow.o mpz\/perfsqr.o mpz\/popcount.o  mpz\/powm.o mpz\/powm_sec.o mpz\/powm_ui.o mpz\/primorial_ui.o mpz\/pprime_p.o mpz\/random.o  mpz\/realloc.o mpz\/realloc2.o mpz\/remove.o mpz\/roinit_n.o mpz\/root.o mpz\/rootrem.o mpz\/rrandomb.o mpz\/scan0.o mpz\/scan1.o  mpz\/set_f.o  mpz\/setbit.o  mpz\/sizeinbase.o  mpz\/sqrtrem.o  mpz\/tdiv_ui.o mpz\/tdiv_q.o mpz\/tdiv_q_2exp.o mpz\/tdiv_q_ui.o mpz\/tdiv_qr.o mpz\/tdiv_qr_ui.o mpz\/tdiv_r.o mpz\/tdiv_r_2exp.o mpz\/tdiv_r_ui.o mpz\/tstbit.o mpz\/ui_pow_ui.o  mpz\/urandomm.o mpz\/xor.o  mpq\/aors.o mpq\/canonicalize.o mpq\/get_num.o  mpq\/inv.o mpq\/md_2exp.o  mpq\/set_den.o mpq\/set_num.o  mpq\/equal.o  mpn\/fib_table.o mpn\/mp_bases.o  mpn\/add_1.o mpn\/add_n.o  mpn\/sub_1.o mpn\/sub_n.o mpn\/cnd_add_n.o mpn\/cnd_sub_n.o mpn\/cnd_swap.o  mpn\/mul_1.o mpn\/addmul_1.o mpn\/submul_1.o mpn\/add_err1_n.o mpn\/add_err2_n.o mpn\/add_err3_n.o mpn\/sub_err1_n.o mpn\/sub_err2_n.o mpn\/sub_err3_n.o mpn\/lshift.o mpn\/rshift.o mpn\/dive_1.o mpn\/diveby3.o  mpn\/divrem.o mpn\/divrem_1.o mpn\/divrem_2.o  mpn\/mod_1.o mpn\/mod_34lsub1.o mpn\/mode1o.o mpn\/pre_divrem_1.o mpn\/pre_mod_1.o  mpn\/mod_1_1.o mpn\/mod_1_2.o mpn\/mod_1_3.o mpn\/mod_1_4.o mpn\/lshiftc.o  mpn\/mul_fft.o mpn\/mul_n.o mpn\/sqr.o mpn\/mul_basecase.o mpn\/sqr_basecase.o mpn\/nussbaumer_mul.o mpn\/mulmid_basecase.o mpn\/toom42_mulmid.o mpn\/mulmid_n.o mpn\/mulmid.o  mpn\/pow_1.o mpn\/zero_p.o  mpn\/gcd_1.o  mpn\/gcdext_1.o  mpn\/gcd_subdiv_step.o mpn\/gcdext_lehmer.o mpn\/div_q.o  mpn\/jacbase.o mpn\/jacobi_2.o mpn\/matrix22_mul.o mpn\/matrix22_mul1_inverse_vector.o mpn\/hgcd_matrix.o mpn\/hgcd2.o mpn\/hgcd_step.o mpn\/hgcd_reduce.o mpn\/hgcd.o mpn\/hgcd_appr.o mpn\/hgcd2_jacobi.o mpn\/hgcd_jacobi.o mpn\/mullo_n.o mpn\/mullo_basecase.o mpn\/sqrlo.o mpn\/sqrlo_basecase.o mpn\/toom22_mul.o mpn\/toom32_mul.o mpn\/toom42_mul.o mpn\/toom52_mul.o mpn\/toom62_mul.o mpn\/toom33_mul.o mpn\/toom43_mul.o mpn\/toom53_mul.o mpn\/toom54_mul.o mpn\/toom63_mul.o mpn\/toom44_mul.o mpn\/toom6h_mul.o mpn\/toom6_sqr.o mpn\/toom8h_mul.o mpn\/toom8_sqr.o mpn\/toom_couple_handling.o mpn\/toom2_sqr.o mpn\/toom3_sqr.o mpn\/toom4_sqr.o mpn\/toom_eval_dgr3_pm1.o mpn\/toom_eval_dgr3_pm2.o mpn\/toom_eval_pm1.o mpn\/toom_eval_pm2.o mpn\/toom_eval_pm2exp.o mpn\/toom_eval_pm2rexp.o mpn\/toom_interpolate_5pts.o mpn\/toom_interpolate_6pts.o mpn\/toom_interpolate_7pts.o mpn\/toom_interpolate_8pts.o mpn\/toom_interpolate_12pts.o mpn\/toom_interpolate_16pts.o mpn\/invertappr.o  mpn\/binvert.o mpn\/mulmod_bnm1.o mpn\/sqrmod_bnm1.o mpn\/div_qr_1.o mpn\/div_qr_1n_pi1.o mpn\/div_qr_2.o mpn\/div_qr_2n_pi1.o mpn\/div_qr_2u_pi1.o mpn\/sbpi1_div_q.o mpn\/sbpi1_div_qr.o mpn\/sbpi1_divappr_q.o mpn\/dcpi1_div_q.o mpn\/dcpi1_div_qr.o mpn\/dcpi1_divappr_q.o mpn\/mu_div_qr.o mpn\/mu_divappr_q.o mpn\/mu_div_q.o mpn\/bdiv_q_1.o mpn\/sbpi1_bdiv_q.o mpn\/sbpi1_bdiv_qr.o mpn\/dcpi1_bdiv_q.o mpn\/dcpi1_bdiv_qr.o mpn\/mu_bdiv_q.o mpn\/mu_bdiv_qr.o mpn\/bdiv_q.o mpn\/bdiv_qr.o mpn\/broot.o mpn\/brootinv.o mpn\/bsqrt.o mpn\/bsqrtinv.o  mpn\/bdiv_dbm1c.o mpn\/redc_1.o mpn\/redc_2.o mpn\/redc_n.o  mpn\/powlo.o mpn\/sec_powm.o mpn\/sec_mul.o mpn\/sec_sqr.o mpn\/sec_div_qr.o mpn\/sec_div_r.o mpn\/sec_pi1_div_qr.o mpn\/sec_pi1_div_r.o mpn\/sec_add_1.o mpn\/sec_sub_1.o mpn\/sec_invert.o mpn\/trialdiv.o  mpn\/and_n.o mpn\/andn_n.o mpn\/nand_n.o mpn\/ior_n.o mpn\/iorn_n.o mpn\/nior_n.o mpn\/xor_n.o mpn\/xnor_n.o mpn\/copyi.o mpn\/copyd.o mpn\/zero.o mpn\/sec_tabselect.o mpn\/comb_tables.o mpn\/add_n_sub_n.o printf\/asprintf.o printf\/asprntffuns.o printf\/doprnt.o printf\/doprntf.o printf\/doprnti.o printf\/fprintf.o printf\/obprintf.o printf\/obvprintf.o printf\/obprntffuns.o printf\/printf.o printf\/printffuns.o printf\/snprintf.o printf\/snprntffuns.o printf\/sprintf.o printf\/sprintffuns.o printf\/vasprintf.o printf\/vfprintf.o printf\/vprintf.o printf\/vsnprintf.o printf\/vsprintf.o printf\/repl-vsnprintf.o scanf\/doscan.o scanf\/fscanf.o scanf\/fscanffuns.o scanf\/scanf.o scanf\/sscanf.o scanf\/sscanffuns.o scanf\/vfscanf.o scanf\/vscanf.o scanf\/vsscanf.o rand\/rand.o rand\/randclr.o rand\/randdef.o rand\/randiset.o rand\/randlc2s.o rand\/randlc2x.o rand\/randmt.o rand\/randmts.o rand\/rands.o rand\/randsd.o rand\/randsdui.o rand\/randbui.o rand\/randmui.o$/;"	m
OBJS	mpn/Makefile	/^OBJS=fib_table.o mp_bases.o add.o add_1.o add_n.o sub.o sub_1.o sub_n.o cnd_add_n.o cnd_sub_n.o cnd_swap.o neg.o com.o mul_1.o addmul_1.o submul_1.o add_err1_n.o add_err2_n.o add_err3_n.o sub_err1_n.o sub_err2_n.o sub_err3_n.o lshift.o rshift.o dive_1.o diveby3.o divis.o divrem.o divrem_1.o divrem_2.o fib2_ui.o mod_1.o mod_34lsub1.o mode1o.o pre_divrem_1.o pre_mod_1.o dump.o mod_1_1.o mod_1_2.o mod_1_3.o mod_1_4.o lshiftc.o mul.o mul_fft.o mul_n.o sqr.o mul_basecase.o sqr_basecase.o nussbaumer_mul.o mulmid_basecase.o toom42_mulmid.o mulmid_n.o mulmid.o random.o random2.o pow_1.o rootrem.o sqrtrem.o sizeinbase.o get_str.o set_str.o scan0.o scan1.o popcount.o hamdist.o cmp.o zero_p.o perfsqr.o perfpow.o gcd_1.o gcd.o gcdext_1.o gcdext.o gcd_subdiv_step.o gcdext_lehmer.o div_q.o tdiv_qr.o jacbase.o jacobi_2.o jacobi.o get_d.o matrix22_mul.o matrix22_mul1_inverse_vector.o hgcd_matrix.o hgcd2.o hgcd_step.o hgcd_reduce.o hgcd.o hgcd_appr.o hgcd2_jacobi.o hgcd_jacobi.o mullo_n.o mullo_basecase.o sqrlo.o sqrlo_basecase.o toom22_mul.o toom32_mul.o toom42_mul.o toom52_mul.o toom62_mul.o toom33_mul.o toom43_mul.o toom53_mul.o toom54_mul.o toom63_mul.o toom44_mul.o toom6h_mul.o toom6_sqr.o toom8h_mul.o toom8_sqr.o toom_couple_handling.o toom2_sqr.o toom3_sqr.o toom4_sqr.o toom_eval_dgr3_pm1.o toom_eval_dgr3_pm2.o toom_eval_pm1.o toom_eval_pm2.o toom_eval_pm2exp.o toom_eval_pm2rexp.o toom_interpolate_5pts.o toom_interpolate_6pts.o toom_interpolate_7pts.o toom_interpolate_8pts.o toom_interpolate_12pts.o toom_interpolate_16pts.o invertappr.o invert.o binvert.o mulmod_bnm1.o sqrmod_bnm1.o div_qr_1.o div_qr_1n_pi1.o div_qr_2.o div_qr_2n_pi1.o div_qr_2u_pi1.o sbpi1_div_q.o sbpi1_div_qr.o sbpi1_divappr_q.o dcpi1_div_q.o dcpi1_div_qr.o dcpi1_divappr_q.o mu_div_qr.o mu_divappr_q.o mu_div_q.o bdiv_q_1.o sbpi1_bdiv_q.o sbpi1_bdiv_qr.o dcpi1_bdiv_q.o dcpi1_bdiv_qr.o mu_bdiv_q.o mu_bdiv_qr.o bdiv_q.o bdiv_qr.o broot.o brootinv.o bsqrt.o bsqrtinv.o divexact.o bdiv_dbm1c.o redc_1.o redc_2.o redc_n.o powm.o powlo.o sec_powm.o sec_mul.o sec_sqr.o sec_div_qr.o sec_div_r.o sec_pi1_div_qr.o sec_pi1_div_r.o sec_add_1.o sec_sub_1.o sec_invert.o trialdiv.o remove.o and_n.o andn_n.o nand_n.o ior_n.o iorn_n.o nior_n.o xor_n.o xnor_n.o copyi.o copyd.o zero.o sec_tabselect.o comb_tables.o add_n_sub_n.o$/;"	m
ODD_CENTRAL_BINOMIAL_OFFSET	fac_table.h	37;"	d
ODD_CENTRAL_BINOMIAL_TABLE_LIMIT	fac_table.h	43;"	d
ODD_DOUBLEFACTORIAL_TABLE_LIMIT	fac_table.h	22;"	d
ODD_DOUBLEFACTORIAL_TABLE_MAX	fac_table.h	21;"	d
ODD_FACTORIAL_EXTTABLE_LIMIT	fac_table.h	17;"	d
ODD_FACTORIAL_TABLE_LIMIT	fac_table.h	13;"	d
ODD_FACTORIAL_TABLE_MAX	fac_table.h	12;"	d
ONE_LIMB_FACTORIAL_TABLE	fac_table.h	7;"	d
ONE_LIMB_ODD_CENTRAL_BINOMIAL_INVERSE_TABLE	fac_table.h	46;"	d
ONE_LIMB_ODD_CENTRAL_BINOMIAL_TABLE	fac_table.h	42;"	d
ONE_LIMB_ODD_DOUBLEFACTORIAL_TABLE	fac_table.h	20;"	d
ONE_LIMB_ODD_FACTORIAL_EXTTABLE	fac_table.h	16;"	d
ONE_LIMB_ODD_FACTORIAL_INVERSES_TABLE	fac_table.h	30;"	d
ONE_LIMB_ODD_FACTORIAL_TABLE	fac_table.h	11;"	d
OPERATION_add	mpz/add.c	32;"	d	file:
OPERATION_add_ui	mpz/add_ui.c	32;"	d	file:
OPERATION_divrem_1	tune/divrem1div.c	31;"	d	file:
OPERATION_divrem_1	tune/divrem1inv.c	31;"	d	file:
OPERATION_mod_1	tune/mod_1_div.c	31;"	d	file:
OPERATION_mod_1	tune/mod_1_inv.c	31;"	d	file:
OPERATION_mod_1_1_cps	mpn/x86/fat/mod_1_1.c	35;"	d	file:
OPERATION_mod_1_2_cps	mpn/x86/fat/mod_1_2.c	35;"	d	file:
OPERATION_mod_1_4_cps	mpn/x86/fat/mod_1_4.c	35;"	d	file:
OPERATION_mul_si	mpz/mul_si.c	33;"	d	file:
OPERATION_mul_ui	mpz/mul_ui.c	33;"	d	file:
OPERATION_sub	mpz/sub.c	32;"	d	file:
OPERATION_sub_ui	mpz/sub_ui.c	32;"	d	file:
OPS	tests/devel/anymul_1.c	81;"	d	file:
OPS	tests/devel/aors_n.c	98;"	d	file:
OPS	tests/devel/copy.c	74;"	d	file:
OPS	tests/devel/divmod_1.c	59;"	d	file:
OPS	tests/devel/divrem.c	56;"	d	file:
OPS	tests/devel/logops_n.c	107;"	d	file:
OPS	tests/devel/shift.c	75;"	d	file:
OP_ADD	mini-gmp/tests/hex-random.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_SQR,$/;"	e	enum:hex_random_op
OP_AND	mini-gmp/tests/hex-random.h	/^    OP_GCD, OP_LCM, OP_POWM, OP_AND, OP_IOR, OP_XOR,$/;"	e	enum:hex_random_op
OP_CDIV	mini-gmp/tests/hex-random.h	/^    OP_CDIV, OP_FDIV, OP_TDIV,$/;"	e	enum:hex_random_op
OP_CDIV_Q_2	mini-gmp/tests/hex-random.h	/^    OP_CDIV_Q_2, OP_CDIV_R_2,$/;"	e	enum:hex_random_op
OP_CDIV_R_2	mini-gmp/tests/hex-random.h	/^    OP_CDIV_Q_2, OP_CDIV_R_2,$/;"	e	enum:hex_random_op
OP_CLRBIT	mini-gmp/tests/hex-random.h	/^    OP_SETBIT, OP_CLRBIT, OP_COMBIT,$/;"	e	enum:hex_random_op
OP_COMBIT	mini-gmp/tests/hex-random.h	/^    OP_SETBIT, OP_CLRBIT, OP_COMBIT,$/;"	e	enum:hex_random_op
OP_FDIV	mini-gmp/tests/hex-random.h	/^    OP_CDIV, OP_FDIV, OP_TDIV,$/;"	e	enum:hex_random_op
OP_FDIV_Q_2	mini-gmp/tests/hex-random.h	/^    OP_FDIV_Q_2, OP_FDIV_R_2,$/;"	e	enum:hex_random_op
OP_FDIV_R_2	mini-gmp/tests/hex-random.h	/^    OP_FDIV_Q_2, OP_FDIV_R_2,$/;"	e	enum:hex_random_op
OP_GCD	mini-gmp/tests/hex-random.h	/^    OP_GCD, OP_LCM, OP_POWM, OP_AND, OP_IOR, OP_XOR,$/;"	e	enum:hex_random_op
OP_IOR	mini-gmp/tests/hex-random.h	/^    OP_GCD, OP_LCM, OP_POWM, OP_AND, OP_IOR, OP_XOR,$/;"	e	enum:hex_random_op
OP_LCM	mini-gmp/tests/hex-random.h	/^    OP_GCD, OP_LCM, OP_POWM, OP_AND, OP_IOR, OP_XOR,$/;"	e	enum:hex_random_op
OP_MUL	mini-gmp/tests/hex-random.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_SQR,$/;"	e	enum:hex_random_op
OP_N	mpn/generic/sec_aors_1.c	39;"	d	file:
OP_N	mpn/generic/sec_aors_1.c	44;"	d	file:
OP_N	mpn/sec_add_1.c	39;"	d	file:
OP_N	mpn/sec_add_1.c	44;"	d	file:
OP_N	mpn/sec_sub_1.c	39;"	d	file:
OP_N	mpn/sec_sub_1.c	44;"	d	file:
OP_POWM	mini-gmp/tests/hex-random.h	/^    OP_GCD, OP_LCM, OP_POWM, OP_AND, OP_IOR, OP_XOR,$/;"	e	enum:hex_random_op
OP_SCAN0	mini-gmp/tests/hex-random.h	/^    OP_SCAN0, OP_SCAN1,$/;"	e	enum:hex_random_op
OP_SCAN1	mini-gmp/tests/hex-random.h	/^    OP_SCAN0, OP_SCAN1,$/;"	e	enum:hex_random_op
OP_SETBIT	mini-gmp/tests/hex-random.h	/^    OP_SETBIT, OP_CLRBIT, OP_COMBIT,$/;"	e	enum:hex_random_op
OP_SQR	mini-gmp/tests/hex-random.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_SQR,$/;"	e	enum:hex_random_op
OP_SUB	mini-gmp/tests/hex-random.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_SQR,$/;"	e	enum:hex_random_op
OP_TDIV	mini-gmp/tests/hex-random.h	/^    OP_CDIV, OP_FDIV, OP_TDIV,$/;"	e	enum:hex_random_op
OP_TDIV_Q_2	mini-gmp/tests/hex-random.h	/^    OP_TDIV_Q_2,  OP_TDIV_R_2,$/;"	e	enum:hex_random_op
OP_TDIV_R_2	mini-gmp/tests/hex-random.h	/^    OP_TDIV_Q_2,  OP_TDIV_R_2,$/;"	e	enum:hex_random_op
OP_XOR	mini-gmp/tests/hex-random.h	/^    OP_GCD, OP_LCM, OP_POWM, OP_AND, OP_IOR, OP_XOR,$/;"	e	enum:hex_random_op
OVERLAPS	tests/devel/try.c	196;"	d	file:
OVERLAP_COUNT	tests/devel/try.c	2237;"	d	file:
OVERLAP_HIGH_TO_LOW	tests/devel/try.c	370;"	d	file:
OVERLAP_ITERATION	tests/devel/try.c	2247;"	d	file:
OVERLAP_LOW_TO_HIGH	tests/devel/try.c	369;"	d	file:
OVERLAP_NONE	tests/devel/try.c	368;"	d	file:
OVERLAP_NOT_DST2	tests/devel/try.c	373;"	d	file:
OVERLAP_NOT_SRC2	tests/devel/try.c	372;"	d	file:
OVERLAP_NOT_SRCS	tests/devel/try.c	371;"	d	file:
P	demos/factorize.c	27;"	d	file:
P	demos/factorize.c	29;"	d	file:
P	mpn/generic/trialdiv.c	76;"	d	file:
P	mpn/generic/trialdiv.c	79;"	d	file:
P	mpn/trialdiv.c	76;"	d	file:
P	mpn/trialdiv.c	79;"	d	file:
P	tal-reent.c	61;"	d	file:
P	tests/rand/statlib.c	/^P (mpf_t p, mpf_t x)$/;"	f	file:
PACKAGE	config.h	519;"	d
PACKAGE_BUGREPORT	config.h	522;"	d
PACKAGE_NAME	config.h	525;"	d
PACKAGE_STRING	config.h	528;"	d
PACKAGE_TARNAME	config.h	531;"	d
PACKAGE_URL	config.h	534;"	d
PACKAGE_VERSION	config.h	537;"	d
PAGESIZE_LIMBS	tests/devel/try.c	213;"	d	file:
PARTS0	mpn/generic/mod_34lsub1.c	86;"	d	file:
PARTS0	mpn/mod_34lsub1.c	86;"	d	file:
PARTS1	mpn/generic/mod_34lsub1.c	87;"	d	file:
PARTS1	mpn/mod_34lsub1.c	87;"	d	file:
PARTS2	mpn/generic/mod_34lsub1.c	88;"	d	file:
PARTS2	mpn/mod_34lsub1.c	88;"	d	file:
PART_SIZE	mpn/add_n_sub_n.c	42;"	d	file:
PART_SIZE	mpn/generic/add_n_sub_n.c	42;"	d	file:
PATTERN1	tests/memory.c	28;"	d	file:
PATTERN1	tests/memory.c	31;"	d	file:
PATTERN2	tests/memory.c	29;"	d	file:
PATTERN2	tests/memory.c	32;"	d	file:
PBITS	tests/mpz/t-jac.c	880;"	d	file:
PBITS	tests/mpz/t-jac.c	981;"	d	file:
PERFSQR_MOD_1	mpn/generic/perfsqr.c	144;"	d	file:
PERFSQR_MOD_1	mpn/perfsqr.c	144;"	d	file:
PERFSQR_MOD_1	tests/mpn/t-perfsqr.c	81;"	d	file:
PERFSQR_MOD_2	mpn/generic/perfsqr.c	160;"	d	file:
PERFSQR_MOD_2	mpn/perfsqr.c	160;"	d	file:
PERFSQR_MOD_2	tests/mpn/t-perfsqr.c	82;"	d	file:
PERFSQR_MOD_34	mpn/generic/perfsqr.c	107;"	d	file:
PERFSQR_MOD_34	mpn/perfsqr.c	107;"	d	file:
PERFSQR_MOD_34	tests/mpn/t-perfsqr.c	79;"	d	file:
PERFSQR_MOD_IDX	mpn/generic/perfsqr.c	132;"	d	file:
PERFSQR_MOD_IDX	mpn/perfsqr.c	132;"	d	file:
PERFSQR_MOD_MASK	mpn/generic/perfsqr.c	102;"	d	file:
PERFSQR_MOD_MASK	mpn/perfsqr.c	102;"	d	file:
PERFSQR_MOD_MASK	tests/mpn/t-perfsqr.c	30;"	d	file:
PERFSQR_MOD_PP	mpn/generic/perfsqr.c	118;"	d	file:
PERFSQR_MOD_PP	mpn/perfsqr.c	118;"	d	file:
PERFSQR_MOD_PP	tests/mpn/t-perfsqr.c	80;"	d	file:
PLUS	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
POPCNT	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
POPHAM	mpn/generic/popham.c	37;"	d	file:
POPHAM	mpn/generic/popham.c	42;"	d	file:
POPHAM	mpn/hamdist.c	37;"	d	file:
POPHAM	mpn/hamdist.c	42;"	d	file:
POPHAM	mpn/popcount.c	37;"	d	file:
POPHAM	mpn/popcount.c	42;"	d	file:
POW	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
POW2_P	gen-bases.c	42;"	d	file:
POW2_P	gmp-impl.h	555;"	d
POWM	demos/calc/calc.c	/^     POWM = 272,$/;"	e	enum:yytokentype	file:
POWM	demos/calc/calc.c	289;"	d	file:
POWM	demos/calc/calc.h	/^     POWM = 272,$/;"	e	enum:yytokentype
POWM	demos/calc/calc.h	94;"	d
POWM_SEC_TABLE	mpn/alpha/ev5/gmp-mparam.h	171;"	d
POWM_SEC_TABLE	mpn/alpha/ev6/gmp-mparam.h	193;"	d
POWM_SEC_TABLE	mpn/arm/v6/gmp-mparam.h	172;"	d
POWM_SEC_TABLE	mpn/arm/v7a/cora15/gmp-mparam.h	177;"	d
POWM_SEC_TABLE	mpn/arm/v7a/cora7/gmp-mparam.h	178;"	d
POWM_SEC_TABLE	mpn/arm/v7a/cora8/gmp-mparam.h	191;"	d
POWM_SEC_TABLE	mpn/arm/v7a/cora9/gmp-mparam.h	193;"	d
POWM_SEC_TABLE	mpn/arm64/gmp-mparam.h	223;"	d
POWM_SEC_TABLE	mpn/generic/sec_powm.c	175;"	d	file:
POWM_SEC_TABLE	mpn/generic/sec_powm.c	177;"	d	file:
POWM_SEC_TABLE	mpn/ia64/gmp-mparam.h	188;"	d
POWM_SEC_TABLE	mpn/pa64/gmp-mparam.h	74;"	d
POWM_SEC_TABLE	mpn/powerpc32/gmp-mparam.h	206;"	d
POWM_SEC_TABLE	mpn/powerpc32/p4/gmp-mparam.h	188;"	d
POWM_SEC_TABLE	mpn/powerpc32/p5/gmp-mparam.h	74;"	d
POWM_SEC_TABLE	mpn/powerpc32/p6/gmp-mparam.h	74;"	d
POWM_SEC_TABLE	mpn/powerpc32/p7/gmp-mparam.h	74;"	d
POWM_SEC_TABLE	mpn/powerpc64/mode32/p4/gmp-mparam.h	157;"	d
POWM_SEC_TABLE	mpn/powerpc64/mode64/p3/gmp-mparam.h	163;"	d
POWM_SEC_TABLE	mpn/powerpc64/mode64/p4/gmp-mparam.h	196;"	d
POWM_SEC_TABLE	mpn/powerpc64/mode64/p6/gmp-mparam.h	144;"	d
POWM_SEC_TABLE	mpn/powerpc64/mode64/p7/gmp-mparam.h	229;"	d
POWM_SEC_TABLE	mpn/s390_32/esame/gmp-mparam.h	191;"	d
POWM_SEC_TABLE	mpn/s390_64/gmp-mparam.h	159;"	d
POWM_SEC_TABLE	mpn/s390_64/z10/gmp-mparam.h	217;"	d
POWM_SEC_TABLE	mpn/sec_powm.c	175;"	d	file:
POWM_SEC_TABLE	mpn/sec_powm.c	177;"	d	file:
POWM_SEC_TABLE	mpn/sparc32/ultrasparct1/gmp-mparam.h	137;"	d
POWM_SEC_TABLE	mpn/sparc32/v9/gmp-mparam.h	188;"	d
POWM_SEC_TABLE	mpn/sparc64/ultrasparc34/gmp-mparam.h	206;"	d
POWM_SEC_TABLE	mpn/sparc64/ultrasparct1/gmp-mparam.h	138;"	d
POWM_SEC_TABLE	mpn/x86/atom/gmp-mparam.h	191;"	d
POWM_SEC_TABLE	mpn/x86/bd1/gmp-mparam.h	192;"	d
POWM_SEC_TABLE	mpn/x86/bd2/gmp-mparam.h	195;"	d
POWM_SEC_TABLE	mpn/x86/bobcat/gmp-mparam.h	181;"	d
POWM_SEC_TABLE	mpn/x86/core2/gmp-mparam.h	184;"	d
POWM_SEC_TABLE	mpn/x86/coreihwl/gmp-mparam.h	194;"	d
POWM_SEC_TABLE	mpn/x86/coreinhm/gmp-mparam.h	208;"	d
POWM_SEC_TABLE	mpn/x86/coreisbr/gmp-mparam.h	187;"	d
POWM_SEC_TABLE	mpn/x86/k10/gmp-mparam.h	198;"	d
POWM_SEC_TABLE	mpn/x86/k7/gmp-mparam.h	237;"	d
POWM_SEC_TABLE	mpn/x86/k8/gmp-mparam.h	182;"	d
POWM_SEC_TABLE	mpn/x86/nano/gmp-mparam.h	72;"	d
POWM_SEC_TABLE	mpn/x86/p6/gmp-mparam.h	79;"	d
POWM_SEC_TABLE	mpn/x86/p6/sse2/gmp-mparam.h	184;"	d
POWM_SEC_TABLE	mpn/x86/pentium4/sse2/gmp-mparam.h	190;"	d
POWM_SEC_TABLE	mpn/x86_64/atom/gmp-mparam.h	200;"	d
POWM_SEC_TABLE	mpn/x86_64/bd1/gmp-mparam.h	225;"	d
POWM_SEC_TABLE	mpn/x86_64/bd2/gmp-mparam.h	240;"	d
POWM_SEC_TABLE	mpn/x86_64/bobcat/gmp-mparam.h	203;"	d
POWM_SEC_TABLE	mpn/x86_64/core2/gmp-mparam.h	211;"	d
POWM_SEC_TABLE	mpn/x86_64/coreibwl/gmp-mparam.h	213;"	d
POWM_SEC_TABLE	mpn/x86_64/coreihwl/gmp-mparam.h	230;"	d
POWM_SEC_TABLE	mpn/x86_64/coreinhm/gmp-mparam.h	217;"	d
POWM_SEC_TABLE	mpn/x86_64/coreisbr/gmp-mparam.h	215;"	d
POWM_SEC_TABLE	mpn/x86_64/gmp-mparam.h	70;"	d
POWM_SEC_TABLE	mpn/x86_64/k10/gmp-mparam.h	221;"	d
POWM_SEC_TABLE	mpn/x86_64/k8/gmp-mparam.h	220;"	d
POWM_SEC_TABLE	mpn/x86_64/nano/gmp-mparam.h	227;"	d
POWM_SEC_TABLE	mpn/x86_64/pentium4/gmp-mparam.h	215;"	d
POWM_SEC_TABLE	mpn/x86_64/skylake/gmp-mparam.h	214;"	d
POWM_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	45;"	d
POWM_THRESHOLD	mpn/alpha/gmp-mparam.h	55;"	d
POWM_THRESHOLD	mpn/cray/gmp-mparam.h	52;"	d
POWM_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	46;"	d
POWM_THRESHOLD	mpn/m68k/gmp-mparam.h	49;"	d
POWM_THRESHOLD	mpn/mips32/gmp-mparam.h	47;"	d
POWM_THRESHOLD	mpn/mips64/gmp-mparam.h	47;"	d
POWM_THRESHOLD	mpn/pa32/gmp-mparam.h	56;"	d
POWM_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	45;"	d
POWM_THRESHOLD	mpn/power/gmp-mparam.h	42;"	d
POWM_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	53;"	d
POWM_THRESHOLD	mpn/sparc32/gmp-mparam.h	42;"	d
POWM_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	46;"	d
POWM_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	46;"	d
POWM_THRESHOLD	mpn/x86/i486/gmp-mparam.h	48;"	d
POWM_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	53;"	d
POWM_THRESHOLD	tune/powm_mod.c	35;"	d	file:
POWM_THRESHOLD	tune/powm_mod.c	36;"	d	file:
POWM_THRESHOLD	tune/powm_redc.c	36;"	d	file:
POWM_THRESHOLD	tune/powm_redc.c	37;"	d	file:
PP	gmp-impl.h	3895;"	d
PP	gmp-impl.h	3899;"	d
PP	gmp-impl.h	3903;"	d
PP	gmp-impl.h	3907;"	d
PP	gmp-impl.h	3911;"	d
PP	gmp-impl.h	3916;"	d
PPOWER	tests/mpz/t-jac.c	881;"	d	file:
PPOWER	tests/mpz/t-jac.c	982;"	d	file:
PP_FIRST_OMITTED	gmp-impl.h	3896;"	d
PP_FIRST_OMITTED	gmp-impl.h	3900;"	d
PP_FIRST_OMITTED	gmp-impl.h	3904;"	d
PP_FIRST_OMITTED	gmp-impl.h	3908;"	d
PP_FIRST_OMITTED	gmp-impl.h	3913;"	d
PP_FIRST_OMITTED	gmp-impl.h	3918;"	d
PP_FIRST_OMITTED	gmp-impl.h	3921;"	d
PP_INVERTED	gmp-impl.h	3912;"	d
PP_INVERTED	gmp-impl.h	3917;"	d
PREC	gmp-impl.h	547;"	d
PRECBITS	tests/mpf/t-set.c	52;"	d	file:
PRECEDENCE_TEST_REDUCE	demos/expr/expr.c	464;"	d	file:
PREINV_MOD_1_TO_MOD_1_THRESHOLD	gmp-impl.h	3178;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	gmp-impl.h	4968;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	gmp-impl.h	4969;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	48;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	50;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/arm/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v6/gmp-mparam.h	47;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/arm64/gmp-mparam.h	47;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/ia64/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/minithres/gmp-mparam.h	41;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/pa64/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	48;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/gmp-mparam.h	57;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	42;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	41;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	43;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	42;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	47;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/s390_32/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/s390_64/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	48;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	40;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	48;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/sparc64/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	48;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	46;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/atom/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/core2/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/geode/gmp-mparam.h	42;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/k10/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/k6/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/k7/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/k8/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/nano/gmp-mparam.h	43;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/p6/gmp-mparam.h	50;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	50;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	49;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	49;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	48;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	49;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	48;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	45;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	44;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/gmp-mparam.h	41;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	52;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	49;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	48;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	51;"	d
PREINV_MOD_1_TO_MOD_1_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	48;"	d
PRIMES_PTAB_ENTRIES	demos/factorize.c	31;"	d	file:
PRIME_A_COUNT	tests/mpz/t-jac.c	778;"	d	file:
PRIME_A_COUNT	tests/mpz/t-jac.c	842;"	d	file:
PRIME_B_COUNT	tests/mpz/t-jac.c	779;"	d	file:
PRIME_B_COUNT	tests/mpz/t-jac.c	843;"	d	file:
PRIME_MAX_B_SIZE	tests/mpz/t-jac.c	780;"	d	file:
PRIME_MAX_B_SIZE	tests/mpz/t-jac.c	844;"	d	file:
PRIME_MAX_EXP	tests/mpz/t-jac.c	777;"	d	file:
PRIME_MAX_EXP	tests/mpz/t-jac.c	841;"	d	file:
PRIME_MAX_SIZE	tests/mpz/t-jac.c	776;"	d	file:
PRIME_MAX_SIZE	tests/mpz/t-jac.c	840;"	d	file:
PRIME_N	tests/mpz/t-jac.c	775;"	d	file:
PRIME_N	tests/mpz/t-jac.c	839;"	d	file:
PRINTED_COMPILER	tune/tuneup.c	2830;"	d	file:
PRINTED_COMPILER	tune/tuneup.c	2834;"	d	file:
PRINTED_COMPILER	tune/tuneup.c	2842;"	d	file:
PRINTED_COMPILER	tune/tuneup.c	2846;"	d	file:
PRINT_WIDTH	tune/tuneup.c	468;"	d	file:
PROCESS_TWOS_ANY	mpn/generic/jacbase.c	102;"	d	file:
PROCESS_TWOS_ANY	mpn/generic/jacbase.c	49;"	d	file:
PROCESS_TWOS_ANY	mpn/generic/jacbase.c	74;"	d	file:
PROCESS_TWOS_ANY	mpn/jacbase.c	102;"	d	file:
PROCESS_TWOS_ANY	mpn/jacbase.c	49;"	d	file:
PROCESS_TWOS_ANY	mpn/jacbase.c	74;"	d	file:
PROCESS_TWOS_EVEN	mpn/generic/jacbase.c	56;"	d	file:
PROCESS_TWOS_EVEN	mpn/generic/jacbase.c	62;"	d	file:
PROCESS_TWOS_EVEN	mpn/generic/jacbase.c	83;"	d	file:
PROCESS_TWOS_EVEN	mpn/jacbase.c	56;"	d	file:
PROCESS_TWOS_EVEN	mpn/jacbase.c	62;"	d	file:
PROCESS_TWOS_EVEN	mpn/jacbase.c	83;"	d	file:
PROT_NONE	tests/devel/try.c	160;"	d	file:
PROT_READ	tests/devel/try.c	165;"	d	file:
PROT_WRITE	tests/devel/try.c	168;"	d	file:
PTAB_LINES	mpn/generic/trialdiv.c	90;"	d	file:
PTAB_LINES	mpn/trialdiv.c	90;"	d	file:
PTR	bootstrap.c	35;"	d	file:
PTR	gmp-impl.h	545;"	d
PTRLIMB	tests/memory.c	36;"	d	file:
PTRLIMB	tests/memory.c	38;"	d	file:
P_TABLE_SIZE	mpn/gcd.c	58;"	d	file:
P_TABLE_SIZE	mpn/generic/gcd.c	58;"	d	file:
Pks	tests/rand/stat.c	/^Pks (mpf_t p, mpf_t x)$/;"	f	file:
Prec	mpn/generic/sqrtrem.c	169;"	d	file:
Prec	mpn/sqrtrem.c	169;"	d	file:
Pzf	tests/rand/statlib.c	/^Pzf (mpf_t p, unsigned long int s, void *x)$/;"	f	file:
Q	mpn/generic/sec_div.c	42;"	d	file:
Q	mpn/generic/sec_div.c	48;"	d	file:
Q	mpn/generic/sec_pi1_div.c	68;"	d	file:
Q	mpn/generic/sec_pi1_div.c	74;"	d	file:
Q	mpn/sec_div_qr.c	42;"	d	file:
Q	mpn/sec_div_qr.c	48;"	d	file:
Q	mpn/sec_div_r.c	42;"	d	file:
Q	mpn/sec_div_r.c	48;"	d	file:
Q	mpn/sec_pi1_div_qr.c	68;"	d	file:
Q	mpn/sec_pi1_div_qr.c	74;"	d	file:
Q	mpn/sec_pi1_div_r.c	68;"	d	file:
Q	mpn/sec_pi1_div_r.c	74;"	d	file:
QUIT	demos/calc/calc.c	/^     QUIT = 263,$/;"	e	enum:yytokentype	file:
QUIT	demos/calc/calc.c	280;"	d	file:
QUIT	demos/calc/calc.h	/^     QUIT = 263,$/;"	e	enum:yytokentype
QUIT	demos/calc/calc.h	85;"	d
RANDFUNC	tests/mpn/t-bdiv.c	195;"	d	file:
RANDFUNC	tests/mpn/t-div.c	188;"	d	file:
RANDOM	demos/pexpr.c	/^	   LOG, LOG2, FERMAT, MERSENNE, FIBONACCI, RANDOM, NEXTPRIME, BINOM,$/;"	e	enum:op_t	file:
RANDS	gmp-impl.h	1240;"	d
RANDS_CLEAR	gmp-impl.h	1247;"	d
RAND_A	tests/refmpn.c	2420;"	d	file:
RAND_A	tests/refmpn.c	2423;"	d	file:
RANLIB	Makefile	/^RANLIB=ranlib$/;"	m
RANLIB	mpn/Makefile	/^RANLIB=ranlib$/;"	m
RCSID	tests/rand/findlc.c	27;"	d	file:
READY_WITH_mpn_sqr_basecase	mpn/generic/sqr_basecase.c	145;"	d	file:
READY_WITH_mpn_sqr_basecase	mpn/generic/sqr_basecase.c	282;"	d	file:
READY_WITH_mpn_sqr_basecase	mpn/generic/sqr_basecase.c	84;"	d	file:
READY_WITH_mpn_sqr_basecase	mpn/sqr_basecase.c	145;"	d	file:
READY_WITH_mpn_sqr_basecase	mpn/sqr_basecase.c	282;"	d	file:
READY_WITH_mpn_sqr_basecase	mpn/sqr_basecase.c	84;"	d	file:
REALLOC	demos/expr/expr.c	74;"	d	file:
REALLOCATE_FUNC_LIMBS	demos/expr/expr.c	56;"	d	file:
REALLOCATE_FUNC_TYPE	demos/expr/expr.c	53;"	d	file:
RECURSIVE_PROD_THRESHOLD	mpz/prodlimbs.c	47;"	d	file:
REDC_1_TO_REDC_2_THRESHOLD	gmp-impl.h	2232;"	d
REDC_1_TO_REDC_2_THRESHOLD	gmp-impl.h	4884;"	d
REDC_1_TO_REDC_2_THRESHOLD	gmp-impl.h	4885;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/arm/v6/gmp-mparam.h	163;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	168;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	169;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	182;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	184;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/ia64/gmp-mparam.h	179;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	220;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/sparc64/gmp-mparam.h	121;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	197;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	191;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	216;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	231;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	194;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	202;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	204;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	221;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	208;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	206;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/gmp-mparam.h	194;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	212;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	211;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	218;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	206;"	d
REDC_1_TO_REDC_2_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	205;"	d
REDC_1_TO_REDC_N_THRESHOLD	gmp-impl.h	2241;"	d
REDC_1_TO_REDC_N_THRESHOLD	gmp-impl.h	4892;"	d
REDC_1_TO_REDC_N_THRESHOLD	gmp-impl.h	4893;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	163;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	185;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/arm/gmp-mparam.h	110;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/arm64/gmp-mparam.h	215;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/minithres/gmp-mparam.h	93;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	150;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/pa64/gmp-mparam.h	228;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	175;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc32/gmp-mparam.h	198;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	138;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	180;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	137;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	146;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	140;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	149;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	155;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	188;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	197;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	136;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	183;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/s390_32/gmp-mparam.h	121;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/s390_64/gmp-mparam.h	151;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	209;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	129;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	180;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	130;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/atom/gmp-mparam.h	183;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	184;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	187;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	173;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/core2/gmp-mparam.h	176;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	186;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	200;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	179;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/geode/gmp-mparam.h	124;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/k10/gmp-mparam.h	190;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/k6/gmp-mparam.h	149;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/k7/gmp-mparam.h	229;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/k8/gmp-mparam.h	174;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/nano/gmp-mparam.h	143;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/p6/gmp-mparam.h	175;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	181;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	176;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	146;"	d
REDC_1_TO_REDC_N_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	182;"	d
REDC_2_TO_REDC_N_THRESHOLD	gmp-impl.h	2235;"	d
REDC_2_TO_REDC_N_THRESHOLD	gmp-impl.h	4888;"	d
REDC_2_TO_REDC_N_THRESHOLD	gmp-impl.h	4889;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/arm/v6/gmp-mparam.h	164;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	169;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	170;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	183;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	185;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/ia64/gmp-mparam.h	180;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	221;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/sparc64/gmp-mparam.h	122;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	198;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	192;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	217;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	232;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	195;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	203;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	205;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	222;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	209;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	207;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/gmp-mparam.h	195;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	213;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	212;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	219;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	207;"	d
REDC_2_TO_REDC_N_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	206;"	d
REDZONE_BYTES	tests/devel/try.c	216;"	d	file:
REDZONE_LIMBS	tests/devel/try.c	217;"	d	file:
REFCALL	tests/devel/tst-addsub.c	32;"	d	file:
REFCALL	tests/devel/tst-addsub.c	37;"	d	file:
REFERENCE	tests/devel/try.c	737;"	d	file:
REFMPN_TSTBIT	tests/refmpn.c	264;"	d	file:
REGPARM_2_1	gmp-impl.h	762;"	d
REGPARM_2_1	gmp-impl.h	766;"	d
REGPARM_3_1	gmp-impl.h	763;"	d
REGPARM_3_1	gmp-impl.h	767;"	d
REGPARM_ATTR	gmp-impl.h	764;"	d
REGPARM_ATTR	gmp-impl.h	768;"	d
REJECT	demos/calc/calclex.c	387;"	d	file:
REM	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	e	enum:op_t	file:
RETADDR	tests/amd64check.c	48;"	d	file:
RETADDR	tests/arm32check.c	66;"	d	file:
RETADDR	tests/x86check.c	47;"	d	file:
RETSIGTYPE	config.h	540;"	d
RETTYPE	mpn/generic/sec_div.c	43;"	d	file:
RETTYPE	mpn/generic/sec_div.c	49;"	d	file:
RETTYPE	mpn/generic/sec_pi1_div.c	69;"	d	file:
RETTYPE	mpn/generic/sec_pi1_div.c	75;"	d	file:
RETTYPE	mpn/sec_div_qr.c	43;"	d	file:
RETTYPE	mpn/sec_div_qr.c	49;"	d	file:
RETTYPE	mpn/sec_div_r.c	43;"	d	file:
RETTYPE	mpn/sec_div_r.c	49;"	d	file:
RETTYPE	mpn/sec_pi1_div_qr.c	69;"	d	file:
RETTYPE	mpn/sec_pi1_div_qr.c	75;"	d	file:
RETTYPE	mpn/sec_pi1_div_r.c	69;"	d	file:
RETTYPE	mpn/sec_pi1_div_r.c	75;"	d	file:
RETURN_CMP	mpz/cmp_d.c	41;"	d	file:
RETURN_CMP	mpz/cmpabs_d.c	41;"	d	file:
RETURN_NONZERO	mpz/cmp_d.c	49;"	d	file:
RETURN_NONZERO	mpz/cmpabs_d.c	49;"	d	file:
RFLAGS	tests/amd64check.c	50;"	d	file:
RNG_FNPTR	gmp-impl.h	1208;"	d
RNG_STATE	gmp-impl.h	1212;"	d
ROOT	demos/calc/calc.c	/^     ROOT = 273,$/;"	e	enum:yytokentype	file:
ROOT	demos/calc/calc.c	290;"	d	file:
ROOT	demos/calc/calc.h	/^     ROOT = 273,$/;"	e	enum:yytokentype
ROOT	demos/calc/calc.h	95;"	d
ROOT	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
ROUND_UP_MULTIPLE	gmp-impl.h	357;"	d
RSHIFT	demos/calc/calc.c	/^     RSHIFT = 283,$/;"	e	enum:yytokentype	file:
RSHIFT	demos/calc/calc.c	300;"	d	file:
RSHIFT	demos/calc/calc.h	/^     RSHIFT = 283,$/;"	e	enum:yytokentype
RSHIFT	demos/calc/calc.h	105;"	d
RSHIFT	tune/speed-ext.c	121;"	d	file:
RTC_POWER	tune/time.c	325;"	d	file:
RTC_POWER_PC	tune/time.c	326;"	d	file:
RUN_MODULUS	tests/refmpn.c	2469;"	d	file:
S	demos/primes.c	204;"	d	file:
SANITY_CHECK	mpn/div_qr_2.c	49;"	d	file:
SANITY_CHECK	mpn/generic/div_qr_2.c	49;"	d	file:
SAVE	tests/amd64check.c	47;"	d	file:
SAVE	tests/x86check.c	46;"	d	file:
SAVE_CALLEE_SAVES	tests/arm32check.c	65;"	d	file:
SEED	tests/rand/t-rand.c	25;"	d	file:
SEED_LIMIT	primesieve.c	103;"	d	file:
SEED_LIMIT	primesieve.c	107;"	d	file:
SEED_LIMIT	primesieve.c	111;"	d	file:
SEED_LIMIT	primesieve.c	114;"	d	file:
SEED_LIMIT	primesieve.c	290;"	d	file:
SEED_LIMIT	primesieve.c	99;"	d	file:
SET1	tests/mpz/t-cmp.c	75;"	d	file:
SET2	tests/mpz/t-cmp.c	78;"	d	file:
SET4	tests/mpq/t-equal.c	63;"	d	file:
SET4	tests/mpz/t-cmp.c	81;"	d	file:
SET4Z	tests/mpq/t-equal.c	60;"	d	file:
SETUP	tests/mpn/t-aors_1.c	32;"	d	file:
SETUP_INPLACE	tests/mpn/t-aors_1.c	38;"	d	file:
SET_STR_DC_THRESHOLD	gmp-impl.h	2322;"	d
SET_STR_DC_THRESHOLD	gmp-impl.h	4994;"	d
SET_STR_DC_THRESHOLD	gmp-impl.h	4995;"	d
SET_STR_DC_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	183;"	d
SET_STR_DC_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	205;"	d
SET_STR_DC_THRESHOLD	mpn/alpha/gmp-mparam.h	77;"	d
SET_STR_DC_THRESHOLD	mpn/arm/gmp-mparam.h	126;"	d
SET_STR_DC_THRESHOLD	mpn/arm/v6/gmp-mparam.h	176;"	d
SET_STR_DC_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	181;"	d
SET_STR_DC_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	182;"	d
SET_STR_DC_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	195;"	d
SET_STR_DC_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	197;"	d
SET_STR_DC_THRESHOLD	mpn/arm64/gmp-mparam.h	227;"	d
SET_STR_DC_THRESHOLD	mpn/ia64/gmp-mparam.h	192;"	d
SET_STR_DC_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	166;"	d
SET_STR_DC_THRESHOLD	mpn/pa64/gmp-mparam.h	246;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	191;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc32/gmp-mparam.h	210;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	154;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	200;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	155;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	164;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	158;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	169;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	73;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	175;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	200;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	215;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	156;"	d
SET_STR_DC_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	233;"	d
SET_STR_DC_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	203;"	d
SET_STR_DC_THRESHOLD	mpn/s390_32/gmp-mparam.h	137;"	d
SET_STR_DC_THRESHOLD	mpn/s390_64/gmp-mparam.h	171;"	d
SET_STR_DC_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	221;"	d
SET_STR_DC_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	149;"	d
SET_STR_DC_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	200;"	d
SET_STR_DC_THRESHOLD	mpn/sparc64/gmp-mparam.h	138;"	d
SET_STR_DC_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	210;"	d
SET_STR_DC_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	150;"	d
SET_STR_DC_THRESHOLD	mpn/x86/atom/gmp-mparam.h	195;"	d
SET_STR_DC_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	204;"	d
SET_STR_DC_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	207;"	d
SET_STR_DC_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	193;"	d
SET_STR_DC_THRESHOLD	mpn/x86/core2/gmp-mparam.h	196;"	d
SET_STR_DC_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	206;"	d
SET_STR_DC_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	220;"	d
SET_STR_DC_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	199;"	d
SET_STR_DC_THRESHOLD	mpn/x86/geode/gmp-mparam.h	140;"	d
SET_STR_DC_THRESHOLD	mpn/x86/k10/gmp-mparam.h	210;"	d
SET_STR_DC_THRESHOLD	mpn/x86/k6/gmp-mparam.h	165;"	d
SET_STR_DC_THRESHOLD	mpn/x86/k7/gmp-mparam.h	241;"	d
SET_STR_DC_THRESHOLD	mpn/x86/k8/gmp-mparam.h	194;"	d
SET_STR_DC_THRESHOLD	mpn/x86/nano/gmp-mparam.h	161;"	d
SET_STR_DC_THRESHOLD	mpn/x86/p6/gmp-mparam.h	193;"	d
SET_STR_DC_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	197;"	d
SET_STR_DC_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	188;"	d
SET_STR_DC_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	162;"	d
SET_STR_DC_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	202;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	204;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	229;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	244;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	207;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	215;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	217;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	234;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	221;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	219;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/gmp-mparam.h	213;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	225;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	232;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	239;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	227;"	d
SET_STR_DC_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	218;"	d
SET_STR_DC_THRESHOLD	tune/set_strb.c	43;"	d	file:
SET_STR_DC_THRESHOLD	tune/set_strb.c	44;"	d	file:
SET_STR_DC_THRESHOLD	tune/set_strs.c	39;"	d	file:
SET_STR_DC_THRESHOLD	tune/set_strs.c	40;"	d	file:
SET_STR_PRECOMPUTE_THRESHOLD	gmp-impl.h	2326;"	d
SET_STR_PRECOMPUTE_THRESHOLD	gmp-impl.h	4998;"	d
SET_STR_PRECOMPUTE_THRESHOLD	gmp-impl.h	4999;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	184;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	206;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/alpha/gmp-mparam.h	78;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/gmp-mparam.h	127;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v6/gmp-mparam.h	177;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	182;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	183;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	196;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	198;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/arm64/gmp-mparam.h	228;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/ia64/gmp-mparam.h	193;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/minithres/gmp-mparam.h	110;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	167;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/pa64/gmp-mparam.h	247;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	192;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/gmp-mparam.h	211;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	155;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	201;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	156;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	165;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	159;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	170;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	74;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	176;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	201;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	216;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	157;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	234;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	204;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/s390_32/gmp-mparam.h	138;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/s390_64/gmp-mparam.h	172;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	222;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	150;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	201;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc64/gmp-mparam.h	139;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	211;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	151;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/atom/gmp-mparam.h	196;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	205;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	208;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	194;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/core2/gmp-mparam.h	197;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	207;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	221;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	200;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/geode/gmp-mparam.h	141;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/k10/gmp-mparam.h	211;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/k6/gmp-mparam.h	166;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/k7/gmp-mparam.h	242;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/k8/gmp-mparam.h	195;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/nano/gmp-mparam.h	162;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/p6/gmp-mparam.h	194;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	198;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	189;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	163;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	203;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	205;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	230;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	245;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	208;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	216;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	218;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	235;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	222;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	220;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/gmp-mparam.h	214;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	226;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	233;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	240;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	228;"	d
SET_STR_PRECOMPUTE_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	219;"	d
SET_STR_PRECOMPUTE_THRESHOLD	tune/set_strb.c	45;"	d	file:
SET_STR_PRECOMPUTE_THRESHOLD	tune/set_strb.c	46;"	d	file:
SET_STR_PRECOMPUTE_THRESHOLD	tune/set_strs.c	41;"	d	file:
SET_STR_PRECOMPUTE_THRESHOLD	tune/set_strs.c	42;"	d	file:
SET_STR_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	64;"	d
SET_STR_THRESHOLD	mpn/cray/gmp-mparam.h	71;"	d
SET_STR_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	65;"	d
SET_STR_THRESHOLD	mpn/m68k/gmp-mparam.h	68;"	d
SET_STR_THRESHOLD	mpn/minithres/gmp-mparam.h	109;"	d
SET_STR_THRESHOLD	mpn/mips32/gmp-mparam.h	64;"	d
SET_STR_THRESHOLD	mpn/mips64/gmp-mparam.h	64;"	d
SET_STR_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	64;"	d
SET_STR_THRESHOLD	mpn/power/gmp-mparam.h	61;"	d
SET_STR_THRESHOLD	mpn/sparc32/gmp-mparam.h	59;"	d
SET_STR_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	65;"	d
SET_STR_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	65;"	d
SET_STR_THRESHOLD	mpn/vax/gmp-mparam.h	60;"	d
SET_STR_THRESHOLD	mpn/x86/i486/gmp-mparam.h	61;"	d
SET_STR_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	68;"	d
SGN	mini-gmp/tests/t-cmp_d.c	28;"	d	file:
SGN	tests/mpf/t-cmp_d.c	29;"	d	file:
SGN	tests/mpf/t-cmp_si.c	26;"	d	file:
SGN	tests/mpq/t-cmp.c	27;"	d	file:
SGN	tests/mpq/t-cmp_si.c	29;"	d	file:
SGN	tests/mpq/t-cmp_ui.c	27;"	d	file:
SGN	tests/mpq/t-cmp_z.c	27;"	d	file:
SGN	tests/mpz/t-cmp_d.c	33;"	d	file:
SGN	tests/mpz/t-cmp_si.c	26;"	d	file:
SHIFTHIGH	tests/refmpn.c	1086;"	d	file:
SHIFTLOW	tests/refmpn.c	1087;"	d	file:
SHIFT_ITERATION	tests/devel/try.c	3309;"	d	file:
SHIFT_LIMIT	tests/devel/try.c	3306;"	d	file:
SHLD_SLOW	mpn/x86_64/atom/gmp-mparam.h	35;"	d
SHLD_SLOW	mpn/x86_64/nano/gmp-mparam.h	35;"	d
SHRD_SLOW	mpn/x86_64/atom/gmp-mparam.h	36;"	d
SHRD_SLOW	mpn/x86_64/nano/gmp-mparam.h	36;"	d
SHRT_HIGHBIT	gmp-impl.h	589;"	d
SH_COUNT_A_PRIME	mpz/bin_uiui.c	550;"	d	file:
SH_COUNT_A_PRIME	mpz/bin_uiui.c	652;"	d	file:
SH_SWING_A_PRIME	mpz/oddfac_1.c	166;"	d	file:
SH_SWING_A_PRIME	mpz/oddfac_1.c	254;"	d	file:
SIEVESIZE	gmp-impl.h	2015;"	d
SIEVE_LIMIT	demos/primes.c	178;"	d	file:
SIEVE_SEED	primesieve.c	102;"	d	file:
SIEVE_SEED	primesieve.c	106;"	d	file:
SIEVE_SEED	primesieve.c	110;"	d	file:
SIEVE_SEED	primesieve.c	113;"	d	file:
SIEVE_SEED	primesieve.c	291;"	d	file:
SIEVE_SEED	primesieve.c	98;"	d	file:
SIGNAL	demos/pexpr.c	191;"	d	file:
SIGSTKSZ	demos/pexpr.c	63;"	d	file:
SIZ	bootstrap.c	36;"	d	file:
SIZ	gmp-impl.h	543;"	d
SIZE	tests/devel/anymul_1.c	84;"	d	file:
SIZE	tests/devel/aors_n.c	101;"	d	file:
SIZE	tests/devel/copy.c	77;"	d	file:
SIZE	tests/devel/divmod_1.c	62;"	d	file:
SIZE	tests/devel/divrem.c	59;"	d	file:
SIZE	tests/devel/logops_n.c	110;"	d	file:
SIZE	tests/devel/shift.c	78;"	d	file:
SIZE	tests/devel/tst-addsub.c	41;"	d	file:
SIZE	tests/mpf/reuse.c	46;"	d	file:
SIZE	tests/mpf/t-add.c	28;"	d	file:
SIZE	tests/mpf/t-conv.c	29;"	d	file:
SIZE	tests/mpf/t-dm2exp.c	28;"	d	file:
SIZE	tests/mpf/t-muldiv.c	28;"	d	file:
SIZE	tests/mpf/t-sqrt.c	28;"	d	file:
SIZE	tests/mpf/t-sub.c	28;"	d	file:
SIZE	tests/mpn/t-iord_u.c	33;"	d	file:
SIZE	tests/mpn/t-scan.c	29;"	d	file:
SIZE	tests/mpq/reuse.c	46;"	d	file:
SIZE	tests/mpq/t-cmp.c	47;"	d	file:
SIZE	tests/mpq/t-cmp_ui.c	47;"	d	file:
SIZE	tests/mpq/t-cmp_z.c	44;"	d	file:
SIZE	tests/mpq/t-get_d.c	29;"	d	file:
SIZE	tests/mpq/t-get_d.c	35;"	d	file:
SIZE	tests/mpq/t-get_d.c	36;"	d	file:
SIZE	tests/mpz/bit.c	28;"	d	file:
SIZE2_FIRST	tests/devel/try.c	3278;"	d	file:
SIZE2_ITERATION	tests/devel/try.c	3294;"	d	file:
SIZE2_LAST	tests/devel/try.c	3287;"	d	file:
SIZEM	tests/mpz/t-powm.c	31;"	d	file:
SIZEOF_MP_LIMB_T	config.h	543;"	d
SIZEOF_UNSIGNED	config.h	546;"	d
SIZEOF_UNSIGNED_LONG	config.h	549;"	d
SIZEOF_UNSIGNED_SHORT	config.h	552;"	d
SIZEOF_VOID_P	config.h	555;"	d
SIZE_1	tests/devel/try.c	309;"	d	file:
SIZE_2	tests/devel/try.c	310;"	d	file:
SIZE_3	tests/devel/try.c	311;"	d	file:
SIZE_4	tests/devel/try.c	312;"	d	file:
SIZE_6	tests/devel/try.c	313;"	d	file:
SIZE_ALLOW_ZERO	tests/devel/try.c	308;"	d	file:
SIZE_CEIL_HALF	tests/devel/try.c	322;"	d	file:
SIZE_DIFF	tests/devel/try.c	318;"	d	file:
SIZE_DIFF_PLUS_1	tests/devel/try.c	319;"	d	file:
SIZE_DIFF_PLUS_3	tests/devel/try.c	320;"	d	file:
SIZE_FRACTION	tests/devel/try.c	314;"	d	file:
SIZE_GET_STR	tests/devel/try.c	323;"	d	file:
SIZE_ITERATION	tests/devel/try.c	3270;"	d	file:
SIZE_LOG	tests/mpn/t-bdiv.c	114;"	d	file:
SIZE_LOG	tests/mpn/t-div.c	118;"	d	file:
SIZE_LOG	tests/mpn/t-invert.c	32;"	d	file:
SIZE_LOG	tests/mpn/t-mullo.c	30;"	d	file:
SIZE_LOG	tests/mpn/t-mulmid.c	30;"	d	file:
SIZE_LOG	tests/mpn/t-mulmod_bnm1.c	32;"	d	file:
SIZE_LOG	tests/mpn/t-sizeinbase.c	30;"	d	file:
SIZE_LOG	tests/mpn/t-sqrlo.c	30;"	d	file:
SIZE_LOG	tests/mpn/t-sqrmod_bnm1.c	32;"	d	file:
SIZE_LOG	tests/mpn/t-toom6h.c	4;"	d	file:
SIZE_LOG	tests/mpn/t-toom8h.c	4;"	d	file:
SIZE_LOG	tests/mpn/toom-shared.h	34;"	d
SIZE_ODD	tests/devel/try.c	325;"	d	file:
SIZE_PLUS_1	tests/devel/try.c	316;"	d	file:
SIZE_PLUS_MSIZE_SUB_1	tests/devel/try.c	324;"	d	file:
SIZE_RETVAL	tests/devel/try.c	321;"	d	file:
SIZE_SIZE2	tests/devel/try.c	315;"	d	file:
SIZE_SUM	tests/devel/try.c	317;"	d	file:
SIZE_TO_DIVISOR	tune/speed.c	596;"	d	file:
SIZE_T_MAX	tune/set_strb.c	40;"	d	file:
SIZE_YES	tests/devel/try.c	307;"	d	file:
SItype	gmp-impl.h	/^typedef		 int SItype	__attribute__ ((mode (SI)));$/;"	t
SItype	gmp-impl.h	/^typedef		 long SItype;$/;"	t
SL1	mpn/m88k/mul_1.s	/^SL1:	mul	 r8,r9,r5	; low word of product$/;"	l
SLL	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
SLoop	mpn/m88k/mul_1.s	/^SLoop:	ld	 r9,r3[r4]	;$/;"	l
SMALL	mpn/generic/perfpow.c	37;"	d	file:
SMALL	mpn/perfpow.c	37;"	d	file:
SMALLEST_OMITTED_PRIME	trialdivtab.h	1012;"	d
SMUL_TIME	longlong.h	1388;"	d
SMUL_TIME	longlong.h	1394;"	d
SMUL_TIME	longlong.h	1511;"	d
SOME_THRESHOLD	mpz/bin_uiui.c	81;"	d	file:
SP	demos/expr/expr.c	83;"	d	file:
SPEED_BLOCK_SIZE	tune/speed.h	93;"	d
SPEED_EXTRA_PROTOS	tune/speed-ext.c	70;"	d	file:
SPEED_EXTRA_ROUTINES	tune/speed-ext.c	75;"	d	file:
SPEED_MACRO_UMUL_PPMM_A	tune/common.c	2123;"	d	file:
SPEED_MACRO_UMUL_PPMM_B	tune/common.c	2141;"	d	file:
SPEED_MACRO_UMUL_PPMM_C	tune/common.c	2153;"	d	file:
SPEED_RESTRICT_COND	tune/speed.h	605;"	d
SPEED_ROUTINE_ALLOC_FREE	tune/common.c	1908;"	d	file:
SPEED_ROUTINE_COUNT_LEADING_ZEROS	tune/speed.h	3520;"	d
SPEED_ROUTINE_COUNT_LEADING_ZEROS_C	tune/speed.h	3518;"	d
SPEED_ROUTINE_COUNT_TRAILING_ZEROS	tune/speed.h	3525;"	d
SPEED_ROUTINE_COUNT_TRAILING_ZEROS_C	tune/speed.h	3523;"	d
SPEED_ROUTINE_COUNT_ZEROS_A	tune/speed.h	3471;"	d
SPEED_ROUTINE_COUNT_ZEROS_B	tune/speed.h	3497;"	d
SPEED_ROUTINE_COUNT_ZEROS_C	tune/speed.h	3511;"	d
SPEED_ROUTINE_INVERT_LIMB_CALL	tune/speed.h	3529;"	d
SPEED_ROUTINE_MEAN	tune/speed-ext.c	189;"	d	file:
SPEED_ROUTINE_MODLIMB_INVERT	tune/speed.h	3261;"	d
SPEED_ROUTINE_MPN_ADDSUB_CALL	tune/speed.h	2640;"	d
SPEED_ROUTINE_MPN_ADDSUB_N	tune/speed.h	2684;"	d
SPEED_ROUTINE_MPN_ADDSUB_NC	tune/speed.h	2688;"	d
SPEED_ROUTINE_MPN_ADDSUB_N_CALL	tune/speed.h	840;"	d
SPEED_ROUTINE_MPN_BACK_TO_BACK	tune/speed.h	3559;"	d
SPEED_ROUTINE_MPN_BDIV_DBM1C	tune/speed.h	959;"	d
SPEED_ROUTINE_MPN_BDIV_Q_1	tune/speed.h	939;"	d
SPEED_ROUTINE_MPN_BINARY_ERR1_N	tune/speed.h	829;"	d
SPEED_ROUTINE_MPN_BINARY_ERR2_N	tune/speed.h	832;"	d
SPEED_ROUTINE_MPN_BINARY_ERR3_N	tune/speed.h	835;"	d
SPEED_ROUTINE_MPN_BINARY_ERR_N_CALL	tune/speed.h	775;"	d
SPEED_ROUTINE_MPN_BINARY_N	tune/speed.h	891;"	d
SPEED_ROUTINE_MPN_BINARY_NC	tune/speed.h	894;"	d
SPEED_ROUTINE_MPN_BINARY_N_CALL	tune/speed.h	727;"	d
SPEED_ROUTINE_MPN_BINVERT	tune/speed.h	2253;"	d
SPEED_ROUTINE_MPN_BROOT	tune/speed.h	2112;"	d
SPEED_ROUTINE_MPN_BROOTINV	tune/speed.h	2120;"	d
SPEED_ROUTINE_MPN_COPY	tune/speed.h	634;"	d
SPEED_ROUTINE_MPN_COPYC	tune/speed.h	669;"	d
SPEED_ROUTINE_MPN_COPY_BYTES	tune/speed.h	698;"	d
SPEED_ROUTINE_MPN_COPY_CALL	tune/speed.h	608;"	d
SPEED_ROUTINE_MPN_DC_DIVREM_CALL	tune/speed.h	1686;"	d
SPEED_ROUTINE_MPN_DIVEXACT_1	tune/speed.h	936;"	d
SPEED_ROUTINE_MPN_DIVREM_1	tune/speed.h	962;"	d
SPEED_ROUTINE_MPN_DIVREM_1C	tune/speed.h	965;"	d
SPEED_ROUTINE_MPN_DIVREM_1CF	tune/speed.h	971;"	d
SPEED_ROUTINE_MPN_DIVREM_1F	tune/speed.h	968;"	d
SPEED_ROUTINE_MPN_DIVREM_2	tune/speed.h	3118;"	d
SPEED_ROUTINE_MPN_DIV_QR_1	tune/speed.h	3155;"	d
SPEED_ROUTINE_MPN_DIV_QR_1N_PI1	tune/speed.h	3187;"	d
SPEED_ROUTINE_MPN_DIV_QR_2	tune/speed.h	3220;"	d
SPEED_ROUTINE_MPN_FIB2_UI	tune/speed.h	2543;"	d
SPEED_ROUTINE_MPN_GCD	tune/speed.h	2971;"	d
SPEED_ROUTINE_MPN_GCDEXT	tune/speed.h	2974;"	d
SPEED_ROUTINE_MPN_GCDEXT_ONE	tune/speed.h	2980;"	d
SPEED_ROUTINE_MPN_GCD_1	tune/speed.h	2776;"	d
SPEED_ROUTINE_MPN_GCD_1N	tune/speed.h	2694;"	d
SPEED_ROUTINE_MPN_GCD_1_CALL	tune/speed.h	2726;"	d
SPEED_ROUTINE_MPN_GCD_CALL	tune/speed.h	2897;"	d
SPEED_ROUTINE_MPN_GCD_FINDA	tune/speed.h	3427;"	d
SPEED_ROUTINE_MPN_GET_STR	tune/speed.h	3330;"	d
SPEED_ROUTINE_MPN_HAMDIST	tune/speed.h	2470;"	d
SPEED_ROUTINE_MPN_HGCD_CALL	tune/speed.h	2791;"	d
SPEED_ROUTINE_MPN_HGCD_REDUCE_CALL	tune/speed.h	2841;"	d
SPEED_ROUTINE_MPN_INVERT	tune/speed.h	2148;"	d
SPEED_ROUTINE_MPN_INVERTAPPR	tune/speed.h	2183;"	d
SPEED_ROUTINE_MPN_JACBASE	tune/speed.h	2779;"	d
SPEED_ROUTINE_MPN_MODEXACT_1C_ODD	tune/speed.h	1615;"	d
SPEED_ROUTINE_MPN_MODEXACT_1_ODD	tune/speed.h	1612;"	d
SPEED_ROUTINE_MPN_MOD_1	tune/speed.h	1606;"	d
SPEED_ROUTINE_MPN_MOD_1C	tune/speed.h	1609;"	d
SPEED_ROUTINE_MPN_MOD_1_1	tune/speed.h	1642;"	d
SPEED_ROUTINE_MPN_MOD_1_N	tune/speed.h	1662;"	d
SPEED_ROUTINE_MPN_MOD_34LSUB1	tune/speed.h	1618;"	d
SPEED_ROUTINE_MPN_MOD_CALL	tune/speed.h	1588;"	d
SPEED_ROUTINE_MPN_MUL	tune/speed.h	1052;"	d
SPEED_ROUTINE_MPN_MULLO_BASECASE	tune/speed.h	1148;"	d
SPEED_ROUTINE_MPN_MULLO_N	tune/speed.h	1145;"	d
SPEED_ROUTINE_MPN_MULLO_N_CALL	tune/speed.h	1117;"	d
SPEED_ROUTINE_MPN_MULMID	tune/speed.h	1179;"	d
SPEED_ROUTINE_MPN_MULMID_N	tune/speed.h	1212;"	d
SPEED_ROUTINE_MPN_MULMOD_BNM1_CALL	tune/speed.h	1278;"	d
SPEED_ROUTINE_MPN_MULMOD_BNM1_ROUNDED	tune/speed.h	1310;"	d
SPEED_ROUTINE_MPN_MUL_FFT_CALL	tune/common.c	1444;"	d	file:
SPEED_ROUTINE_MPN_MUL_N	tune/speed.h	1114;"	d
SPEED_ROUTINE_MPN_MUL_N_CALL	tune/speed.h	1086;"	d
SPEED_ROUTINE_MPN_MUL_N_TSPACE	tune/speed.h	1344;"	d
SPEED_ROUTINE_MPN_MUPI_DIV_QR	tune/speed.h	1899;"	d
SPEED_ROUTINE_MPN_MU_BDIV_Q	tune/speed.h	2033;"	d
SPEED_ROUTINE_MPN_MU_BDIV_QR	tune/speed.h	2069;"	d
SPEED_ROUTINE_MPN_MU_DIV_Q	tune/speed.h	1811;"	d
SPEED_ROUTINE_MPN_MU_DIV_QR	tune/speed.h	1851;"	d
SPEED_ROUTINE_MPN_NI_INVERTAPPR	tune/speed.h	2218;"	d
SPEED_ROUTINE_MPN_PI1_BDIV_Q	tune/speed.h	1995;"	d
SPEED_ROUTINE_MPN_PI1_BDIV_QR	tune/speed.h	1953;"	d
SPEED_ROUTINE_MPN_PI1_BDIV_Q_1	tune/speed.h	955;"	d
SPEED_ROUTINE_MPN_PI1_BDIV_Q_1_CALL	tune/speed.h	942;"	d
SPEED_ROUTINE_MPN_PI1_DIV	tune/speed.h	1762;"	d
SPEED_ROUTINE_MPN_POPCOUNT	tune/speed.h	2452;"	d
SPEED_ROUTINE_MPN_PREINV_DIVREM_1	tune/speed.h	989;"	d
SPEED_ROUTINE_MPN_PREINV_DIVREM_1F	tune/speed.h	994;"	d
SPEED_ROUTINE_MPN_PREINV_DIVREM_1_CALL	tune/speed.h	975;"	d
SPEED_ROUTINE_MPN_PREINV_MOD_1	tune/speed.h	1621;"	d
SPEED_ROUTINE_MPN_SEC_INVERT	tune/speed.h	2288;"	d
SPEED_ROUTINE_MPN_SET_STR_CALL	tune/speed.h	3378;"	d
SPEED_ROUTINE_MPN_SQR	tune/speed.h	1501;"	d
SPEED_ROUTINE_MPN_SQRLO	tune/speed.h	1151;"	d
SPEED_ROUTINE_MPN_SQRTROOT_CALL	tune/speed.h	3298;"	d
SPEED_ROUTINE_MPN_SQR_CALL	tune/speed.h	1474;"	d
SPEED_ROUTINE_MPN_SQR_DIAG_ADDLSH1_CALL	tune/speed.h	1504;"	d
SPEED_ROUTINE_MPN_SQR_TSPACE	tune/speed.h	1533;"	d
SPEED_ROUTINE_MPN_TABSELECT	tune/speed.h	637;"	d
SPEED_ROUTINE_MPN_TOOM22_MUL_N	tune/speed.h	1374;"	d
SPEED_ROUTINE_MPN_TOOM2_SQR	tune/speed.h	1562;"	d
SPEED_ROUTINE_MPN_TOOM32_FOR_TOOM43_MUL	tune/speed.h	1428;"	d
SPEED_ROUTINE_MPN_TOOM32_FOR_TOOM53_MUL	tune/speed.h	1439;"	d
SPEED_ROUTINE_MPN_TOOM32_MUL	tune/speed.h	1404;"	d
SPEED_ROUTINE_MPN_TOOM33_MUL_N	tune/speed.h	1380;"	d
SPEED_ROUTINE_MPN_TOOM3_SQR	tune/speed.h	1567;"	d
SPEED_ROUTINE_MPN_TOOM42_FOR_TOOM53_MUL	tune/speed.h	1450;"	d
SPEED_ROUTINE_MPN_TOOM42_MUL	tune/speed.h	1410;"	d
SPEED_ROUTINE_MPN_TOOM42_MULMID	tune/speed.h	1244;"	d
SPEED_ROUTINE_MPN_TOOM43_FOR_TOOM32_MUL	tune/speed.h	1433;"	d
SPEED_ROUTINE_MPN_TOOM43_FOR_TOOM54_MUL	tune/speed.h	1461;"	d
SPEED_ROUTINE_MPN_TOOM43_MUL	tune/speed.h	1416;"	d
SPEED_ROUTINE_MPN_TOOM44_MUL_N	tune/speed.h	1386;"	d
SPEED_ROUTINE_MPN_TOOM4_SQR	tune/speed.h	1573;"	d
SPEED_ROUTINE_MPN_TOOM53_FOR_TOOM32_MUL	tune/speed.h	1444;"	d
SPEED_ROUTINE_MPN_TOOM53_FOR_TOOM42_MUL	tune/speed.h	1455;"	d
SPEED_ROUTINE_MPN_TOOM54_FOR_TOOM43_MUL	tune/speed.h	1466;"	d
SPEED_ROUTINE_MPN_TOOM63_MUL	tune/speed.h	1422;"	d
SPEED_ROUTINE_MPN_TOOM6H_MUL_N	tune/speed.h	1392;"	d
SPEED_ROUTINE_MPN_TOOM6_SQR	tune/speed.h	1578;"	d
SPEED_ROUTINE_MPN_TOOM8H_MUL_N	tune/speed.h	1398;"	d
SPEED_ROUTINE_MPN_TOOM8_SQR	tune/speed.h	1583;"	d
SPEED_ROUTINE_MPN_UNARY_1	tune/speed.h	926;"	d
SPEED_ROUTINE_MPN_UNARY_1C	tune/speed.h	929;"	d
SPEED_ROUTINE_MPN_UNARY_1_CALL	tune/speed.h	899;"	d
SPEED_ROUTINE_MPN_UNARY_1_INPLACE	tune/speed.h	933;"	d
SPEED_ROUTINE_MPN_UNARY_2	tune/speed.h	1035;"	d
SPEED_ROUTINE_MPN_UNARY_3	tune/speed.h	1037;"	d
SPEED_ROUTINE_MPN_UNARY_4	tune/speed.h	1039;"	d
SPEED_ROUTINE_MPN_UNARY_5	tune/speed.h	1041;"	d
SPEED_ROUTINE_MPN_UNARY_6	tune/speed.h	1043;"	d
SPEED_ROUTINE_MPN_UNARY_7	tune/speed.h	1045;"	d
SPEED_ROUTINE_MPN_UNARY_8	tune/speed.h	1047;"	d
SPEED_ROUTINE_MPN_UNARY_N	tune/speed.h	1002;"	d
SPEED_ROUTINE_MPN_ZERO	tune/speed.h	3596;"	d
SPEED_ROUTINE_MPN_ZERO_CALL	tune/speed.h	3571;"	d
SPEED_ROUTINE_MPZ_2_UI	tune/speed.h	2516;"	d
SPEED_ROUTINE_MPZ_FAC_UI	tune/speed.h	2511;"	d
SPEED_ROUTINE_MPZ_FIB2_UI	tune/speed.h	2539;"	d
SPEED_ROUTINE_MPZ_FIB_UI	tune/speed.h	2512;"	d
SPEED_ROUTINE_MPZ_JACOBI	tune/speed.h	3058;"	d
SPEED_ROUTINE_MPZ_LUCNUM2_UI	tune/speed.h	2540;"	d
SPEED_ROUTINE_MPZ_LUCNUM_UI	tune/speed.h	2513;"	d
SPEED_ROUTINE_MPZ_MOD	tune/speed.h	1733;"	d
SPEED_ROUTINE_MPZ_POWM	tune/speed.h	2574;"	d
SPEED_ROUTINE_MPZ_POWM_UI	tune/speed.h	2603;"	d
SPEED_ROUTINE_MPZ_UI	tune/speed.h	2490;"	d
SPEED_ROUTINE_REDC_1	tune/speed.h	2325;"	d
SPEED_ROUTINE_REDC_2	tune/speed.h	2367;"	d
SPEED_ROUTINE_REDC_N	tune/speed.h	2409;"	d
SPEED_ROUTINE_UDIV_QRNND_A	tune/common.c	2292;"	d	file:
SPEED_ROUTINE_UDIV_QRNND_B	tune/common.c	2322;"	d	file:
SPEED_TMP_ALLOC_ADJUST_MASK	tune/speed.h	69;"	d
SPEED_TMP_ALLOC_LIMBS	tune/speed.h	73;"	d
SPINNER_WANTED_INIT	tests/spinner.c	76;"	d	file:
SQRLO_BASECASE_ALLOC	mpn/generic/sqrlo_basecase.c	95;"	d	file:
SQRLO_BASECASE_ALLOC	mpn/sqrlo_basecase.c	95;"	d	file:
SQRLO_BASECASE_THRESHOLD	gmp-impl.h	2150;"	d
SQRLO_BASECASE_THRESHOLD	gmp-impl.h	4812;"	d
SQRLO_BASECASE_THRESHOLD	gmp-impl.h	4813;"	d
SQRLO_BASECASE_THRESHOLD	mpn/arm/v6/gmp-mparam.h	149;"	d
SQRLO_BASECASE_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	154;"	d
SQRLO_BASECASE_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	155;"	d
SQRLO_BASECASE_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	168;"	d
SQRLO_BASECASE_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	170;"	d
SQRLO_BASECASE_THRESHOLD	mpn/arm64/gmp-mparam.h	201;"	d
SQRLO_BASECASE_THRESHOLD	mpn/ia64/gmp-mparam.h	165;"	d
SQRLO_BASECASE_THRESHOLD	mpn/minithres/gmp-mparam.h	78;"	d
SQRLO_BASECASE_THRESHOLD	mpn/powerpc32/gmp-mparam.h	184;"	d
SQRLO_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	174;"	d
SQRLO_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	206;"	d
SQRLO_BASECASE_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	195;"	d
SQRLO_BASECASE_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	183;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86/atom/gmp-mparam.h	169;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	173;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86/k10/gmp-mparam.h	176;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86/k7/gmp-mparam.h	215;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	162;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	177;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	202;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	217;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	180;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	188;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	190;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	207;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	194;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	192;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	198;"	d
SQRLO_BASECASE_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	191;"	d
SQRLO_BASECASE_THRESHOLD_LIMIT	gmp-impl.h	2096;"	d
SQRLO_BASECASE_THRESHOLD_LIMIT	gmp-impl.h	5020;"	d
SQRLO_BASECASE_THRESHOLD_LIMIT	gmp-impl.h	5034;"	d
SQRLO_DC_THRESHOLD	gmp-impl.h	2154;"	d
SQRLO_DC_THRESHOLD	gmp-impl.h	4816;"	d
SQRLO_DC_THRESHOLD	gmp-impl.h	4817;"	d
SQRLO_DC_THRESHOLD	mpn/arm/v6/gmp-mparam.h	150;"	d
SQRLO_DC_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	155;"	d
SQRLO_DC_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	156;"	d
SQRLO_DC_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	169;"	d
SQRLO_DC_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	171;"	d
SQRLO_DC_THRESHOLD	mpn/arm64/gmp-mparam.h	202;"	d
SQRLO_DC_THRESHOLD	mpn/ia64/gmp-mparam.h	166;"	d
SQRLO_DC_THRESHOLD	mpn/minithres/gmp-mparam.h	79;"	d
SQRLO_DC_THRESHOLD	mpn/powerpc32/gmp-mparam.h	185;"	d
SQRLO_DC_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	175;"	d
SQRLO_DC_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	207;"	d
SQRLO_DC_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	196;"	d
SQRLO_DC_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	184;"	d
SQRLO_DC_THRESHOLD	mpn/x86/atom/gmp-mparam.h	170;"	d
SQRLO_DC_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	174;"	d
SQRLO_DC_THRESHOLD	mpn/x86/k10/gmp-mparam.h	177;"	d
SQRLO_DC_THRESHOLD	mpn/x86/k7/gmp-mparam.h	216;"	d
SQRLO_DC_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	163;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	178;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	203;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	218;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	181;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	189;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	191;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	208;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	195;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	193;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	199;"	d
SQRLO_DC_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	192;"	d
SQRLO_DC_THRESHOLD_LIMIT	gmp-impl.h	2099;"	d
SQRLO_DC_THRESHOLD_LIMIT	gmp-impl.h	5021;"	d
SQRLO_DC_THRESHOLD_LIMIT	gmp-impl.h	5035;"	d
SQRLO_SHORTCUT_MULTIPLICATIONS	mpn/generic/sqrlo_basecase.c	43;"	d	file:
SQRLO_SHORTCUT_MULTIPLICATIONS	mpn/generic/sqrlo_basecase.c	45;"	d	file:
SQRLO_SHORTCUT_MULTIPLICATIONS	mpn/sqrlo_basecase.c	43;"	d	file:
SQRLO_SHORTCUT_MULTIPLICATIONS	mpn/sqrlo_basecase.c	45;"	d	file:
SQRLO_SPECIAL_CASES	mpn/generic/sqrlo_basecase.c	100;"	d	file:
SQRLO_SPECIAL_CASES	mpn/generic/sqrlo_basecase.c	181;"	d	file:
SQRLO_SPECIAL_CASES	mpn/sqrlo_basecase.c	100;"	d	file:
SQRLO_SPECIAL_CASES	mpn/sqrlo_basecase.c	181;"	d	file:
SQRLO_SQR_THRESHOLD	gmp-impl.h	2158;"	d
SQRLO_SQR_THRESHOLD	gmp-impl.h	4820;"	d
SQRLO_SQR_THRESHOLD	gmp-impl.h	4821;"	d
SQRLO_SQR_THRESHOLD	mpn/arm/v6/gmp-mparam.h	151;"	d
SQRLO_SQR_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	156;"	d
SQRLO_SQR_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	157;"	d
SQRLO_SQR_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	170;"	d
SQRLO_SQR_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	172;"	d
SQRLO_SQR_THRESHOLD	mpn/arm64/gmp-mparam.h	203;"	d
SQRLO_SQR_THRESHOLD	mpn/ia64/gmp-mparam.h	167;"	d
SQRLO_SQR_THRESHOLD	mpn/minithres/gmp-mparam.h	80;"	d
SQRLO_SQR_THRESHOLD	mpn/powerpc32/gmp-mparam.h	186;"	d
SQRLO_SQR_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	176;"	d
SQRLO_SQR_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	208;"	d
SQRLO_SQR_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	197;"	d
SQRLO_SQR_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	185;"	d
SQRLO_SQR_THRESHOLD	mpn/x86/atom/gmp-mparam.h	171;"	d
SQRLO_SQR_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	175;"	d
SQRLO_SQR_THRESHOLD	mpn/x86/k10/gmp-mparam.h	178;"	d
SQRLO_SQR_THRESHOLD	mpn/x86/k7/gmp-mparam.h	217;"	d
SQRLO_SQR_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	164;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	179;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	204;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	219;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	182;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	190;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	192;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	209;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	196;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	194;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	200;"	d
SQRLO_SQR_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	193;"	d
SQRMOD_BNM1_THRESHOLD	gmp-impl.h	2222;"	d
SQRMOD_BNM1_THRESHOLD	gmp-impl.h	4982;"	d
SQRMOD_BNM1_THRESHOLD	gmp-impl.h	4983;"	d
SQRMOD_BNM1_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	79;"	d
SQRMOD_BNM1_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	81;"	d
SQRMOD_BNM1_THRESHOLD	mpn/arm/gmp-mparam.h	70;"	d
SQRMOD_BNM1_THRESHOLD	mpn/arm/v6/gmp-mparam.h	78;"	d
SQRMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/arm64/gmp-mparam.h	78;"	d
SQRMOD_BNM1_THRESHOLD	mpn/ia64/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/minithres/gmp-mparam.h	65;"	d
SQRMOD_BNM1_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	69;"	d
SQRMOD_BNM1_THRESHOLD	mpn/pa64/gmp-mparam.h	72;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	72;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc32/gmp-mparam.h	88;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	69;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	72;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	72;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	72;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	70;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	69;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	71;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	70;"	d
SQRMOD_BNM1_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	78;"	d
SQRMOD_BNM1_THRESHOLD	mpn/s390_32/gmp-mparam.h	72;"	d
SQRMOD_BNM1_THRESHOLD	mpn/s390_64/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	79;"	d
SQRMOD_BNM1_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	68;"	d
SQRMOD_BNM1_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	79;"	d
SQRMOD_BNM1_THRESHOLD	mpn/sparc64/gmp-mparam.h	69;"	d
SQRMOD_BNM1_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	79;"	d
SQRMOD_BNM1_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	74;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/atom/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/core2/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/geode/gmp-mparam.h	66;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/k10/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/k6/gmp-mparam.h	68;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/k7/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/k8/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/nano/gmp-mparam.h	70;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/p6/gmp-mparam.h	77;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	74;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	77;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	73;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	76;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	78;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	79;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	78;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	74;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	75;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	74;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/gmp-mparam.h	68;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	82;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	79;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	78;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	81;"	d
SQRMOD_BNM1_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	78;"	d
SQRT	demos/calc/calc.c	/^     SQRT = 274,$/;"	e	enum:yytokentype	file:
SQRT	demos/calc/calc.c	291;"	d	file:
SQRT	demos/calc/calc.h	/^     SQRT = 274,$/;"	e	enum:yytokentype
SQRT	demos/calc/calc.h	96;"	d
SQRT	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
SQRT_OF_NEGATIVE	gmp-impl.h	3885;"	d
SQR_BASECASE_ALLOC	mpn/generic/sqrlo.c	186;"	d	file:
SQR_BASECASE_ALLOC	mpn/sqrlo.c	186;"	d	file:
SQR_BASECASE_LIM	mpn/generic/sec_powm.c	108;"	d	file:
SQR_BASECASE_LIM	mpn/generic/sec_powm.c	117;"	d	file:
SQR_BASECASE_LIM	mpn/generic/sec_powm.c	125;"	d	file:
SQR_BASECASE_LIM	mpn/generic/sec_sqr.c	38;"	d	file:
SQR_BASECASE_LIM	mpn/generic/sec_sqr.c	47;"	d	file:
SQR_BASECASE_LIM	mpn/generic/sec_sqr.c	55;"	d	file:
SQR_BASECASE_LIM	mpn/sec_powm.c	108;"	d	file:
SQR_BASECASE_LIM	mpn/sec_powm.c	117;"	d	file:
SQR_BASECASE_LIM	mpn/sec_powm.c	125;"	d	file:
SQR_BASECASE_LIM	mpn/sec_sqr.c	38;"	d	file:
SQR_BASECASE_LIM	mpn/sec_sqr.c	47;"	d	file:
SQR_BASECASE_LIM	mpn/sec_sqr.c	55;"	d	file:
SQR_BASECASE_THRESHOLD	gmp-impl.h	2113;"	d
SQR_BASECASE_THRESHOLD	gmp-impl.h	4756;"	d
SQR_BASECASE_THRESHOLD	gmp-impl.h	4757;"	d
SQR_BASECASE_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	69;"	d
SQR_BASECASE_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	71;"	d
SQR_BASECASE_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	39;"	d
SQR_BASECASE_THRESHOLD	mpn/alpha/gmp-mparam.h	44;"	d
SQR_BASECASE_THRESHOLD	mpn/arm/gmp-mparam.h	62;"	d
SQR_BASECASE_THRESHOLD	mpn/arm/v6/gmp-mparam.h	68;"	d
SQR_BASECASE_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/arm64/gmp-mparam.h	68;"	d
SQR_BASECASE_THRESHOLD	mpn/cray/gmp-mparam.h	46;"	d
SQR_BASECASE_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	40;"	d
SQR_BASECASE_THRESHOLD	mpn/ia64/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/m68k/gmp-mparam.h	43;"	d
SQR_BASECASE_THRESHOLD	mpn/minithres/gmp-mparam.h	57;"	d
SQR_BASECASE_THRESHOLD	mpn/mips32/gmp-mparam.h	41;"	d
SQR_BASECASE_THRESHOLD	mpn/mips64/gmp-mparam.h	41;"	d
SQR_BASECASE_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	39;"	d
SQR_BASECASE_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	61;"	d
SQR_BASECASE_THRESHOLD	mpn/pa64/gmp-mparam.h	62;"	d
SQR_BASECASE_THRESHOLD	mpn/power/gmp-mparam.h	36;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	64;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc32/gmp-mparam.h	78;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	61;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	62;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	62;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	62;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	60;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	42;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	59;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	61;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	60;"	d
SQR_BASECASE_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	68;"	d
SQR_BASECASE_THRESHOLD	mpn/s390_32/gmp-mparam.h	62;"	d
SQR_BASECASE_THRESHOLD	mpn/s390_64/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	69;"	d
SQR_BASECASE_THRESHOLD	mpn/sparc32/gmp-mparam.h	36;"	d
SQR_BASECASE_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	58;"	d
SQR_BASECASE_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	40;"	d
SQR_BASECASE_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	40;"	d
SQR_BASECASE_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	69;"	d
SQR_BASECASE_THRESHOLD	mpn/sparc64/gmp-mparam.h	61;"	d
SQR_BASECASE_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	69;"	d
SQR_BASECASE_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	64;"	d
SQR_BASECASE_THRESHOLD	mpn/vax/gmp-mparam.h	37;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/atom/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/core2/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/fat/gmp-mparam.h	51;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/geode/gmp-mparam.h	58;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/i486/gmp-mparam.h	42;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/k10/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/k6/gmp-mparam.h	60;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/k7/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/k8/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/nano/gmp-mparam.h	60;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/p6/gmp-mparam.h	67;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	67;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	47;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	66;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	68;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	69;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	68;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	64;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	65;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	64;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	52;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/gmp-mparam.h	58;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	72;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	69;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	68;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	71;"	d
SQR_BASECASE_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	68;"	d
SQR_FFT_MODF_THRESHOLD	gmp-impl.h	2257;"	d
SQR_FFT_MODF_THRESHOLD	gmp-impl.h	4790;"	d
SQR_FFT_MODF_THRESHOLD	gmp-impl.h	4791;"	d
SQR_FFT_MODF_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	117;"	d
SQR_FFT_MODF_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	126;"	d
SQR_FFT_MODF_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	71;"	d
SQR_FFT_MODF_THRESHOLD	mpn/alpha/gmp-mparam.h	85;"	d
SQR_FFT_MODF_THRESHOLD	mpn/arm/gmp-mparam.h	84;"	d
SQR_FFT_MODF_THRESHOLD	mpn/arm/v6/gmp-mparam.h	113;"	d
SQR_FFT_MODF_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	114;"	d
SQR_FFT_MODF_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	114;"	d
SQR_FFT_MODF_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	121;"	d
SQR_FFT_MODF_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	123;"	d
SQR_FFT_MODF_THRESHOLD	mpn/arm64/gmp-mparam.h	140;"	d
SQR_FFT_MODF_THRESHOLD	mpn/cray/gmp-mparam.h	78;"	d
SQR_FFT_MODF_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	72;"	d
SQR_FFT_MODF_THRESHOLD	mpn/ia64/gmp-mparam.h	119;"	d
SQR_FFT_MODF_THRESHOLD	mpn/m68k/gmp-mparam.h	75;"	d
SQR_FFT_MODF_THRESHOLD	mpn/minithres/gmp-mparam.h	72;"	d
SQR_FFT_MODF_THRESHOLD	mpn/mips32/gmp-mparam.h	71;"	d
SQR_FFT_MODF_THRESHOLD	mpn/mips64/gmp-mparam.h	71;"	d
SQR_FFT_MODF_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	71;"	d
SQR_FFT_MODF_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	103;"	d
SQR_FFT_MODF_THRESHOLD	mpn/pa64/gmp-mparam.h	144;"	d
SQR_FFT_MODF_THRESHOLD	mpn/power/gmp-mparam.h	68;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	118;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc32/gmp-mparam.h	136;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	97;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	123;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	99;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	104;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	101;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	104;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	81;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	106;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	122;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	130;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	97;"	d
SQR_FFT_MODF_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	145;"	d
SQR_FFT_MODF_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	123;"	d
SQR_FFT_MODF_THRESHOLD	mpn/s390_32/gmp-mparam.h	91;"	d
SQR_FFT_MODF_THRESHOLD	mpn/s390_64/gmp-mparam.h	108;"	d
SQR_FFT_MODF_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	136;"	d
SQR_FFT_MODF_THRESHOLD	mpn/sparc32/gmp-mparam.h	66;"	d
SQR_FFT_MODF_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	92;"	d
SQR_FFT_MODF_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	72;"	d
SQR_FFT_MODF_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	72;"	d
SQR_FFT_MODF_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	122;"	d
SQR_FFT_MODF_THRESHOLD	mpn/sparc64/gmp-mparam.h	89;"	d
SQR_FFT_MODF_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	129;"	d
SQR_FFT_MODF_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	96;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/atom/gmp-mparam.h	121;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	123;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	125;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	117;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/core2/gmp-mparam.h	120;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	124;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	130;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	120;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/fat/gmp-mparam.h	70;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/geode/gmp-mparam.h	89;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/i486/gmp-mparam.h	68;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/k10/gmp-mparam.h	125;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/k6/gmp-mparam.h	102;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/k7/gmp-mparam.h	145;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/k8/gmp-mparam.h	118;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/nano/gmp-mparam.h	102;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/p6/gmp-mparam.h	119;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	121;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	117;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	75;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	103;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	123;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	126;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	138;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	146;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	129;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	131;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	134;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	142;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	132;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	133;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	71;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/gmp-mparam.h	124;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	139;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	138;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	141;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	141;"	d
SQR_FFT_MODF_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	136;"	d
SQR_FFT_TABLE	gmp-impl.h	2286;"	d
SQR_FFT_TABLE	gmp-impl.h	4794;"	d
SQR_FFT_TABLE	gmp-impl.h	4795;"	d
SQR_FFT_TABLE	mpn/alpha/ev6/nails/gmp-mparam.h	70;"	d
SQR_FFT_TABLE	mpn/alpha/gmp-mparam.h	84;"	d
SQR_FFT_TABLE	mpn/cray/gmp-mparam.h	77;"	d
SQR_FFT_TABLE	mpn/cray/ieee/gmp-mparam.h	71;"	d
SQR_FFT_TABLE	mpn/m68k/gmp-mparam.h	74;"	d
SQR_FFT_TABLE	mpn/minithres/gmp-mparam.h	71;"	d
SQR_FFT_TABLE	mpn/mips32/gmp-mparam.h	70;"	d
SQR_FFT_TABLE	mpn/mips64/gmp-mparam.h	70;"	d
SQR_FFT_TABLE	mpn/pa32/hppa1_1/gmp-mparam.h	70;"	d
SQR_FFT_TABLE	mpn/power/gmp-mparam.h	67;"	d
SQR_FFT_TABLE	mpn/powerpc64/mode64/gmp-mparam.h	80;"	d
SQR_FFT_TABLE	mpn/sparc32/gmp-mparam.h	65;"	d
SQR_FFT_TABLE	mpn/sparc32/v8/gmp-mparam.h	71;"	d
SQR_FFT_TABLE	mpn/sparc32/v8/supersparc/gmp-mparam.h	71;"	d
SQR_FFT_TABLE	mpn/x86/fat/gmp-mparam.h	69;"	d
SQR_FFT_TABLE	mpn/x86/i486/gmp-mparam.h	67;"	d
SQR_FFT_TABLE	mpn/x86/pentium/gmp-mparam.h	74;"	d
SQR_FFT_TABLE	mpn/x86_64/fat/gmp-mparam.h	70;"	d
SQR_FFT_TABLE3	gmp-impl.h	4797;"	d
SQR_FFT_TABLE3	gmp-impl.h	4798;"	d
SQR_FFT_TABLE3	mpn/alpha/ev5/gmp-mparam.h	118;"	d
SQR_FFT_TABLE3	mpn/alpha/ev6/gmp-mparam.h	127;"	d
SQR_FFT_TABLE3	mpn/arm/gmp-mparam.h	85;"	d
SQR_FFT_TABLE3	mpn/arm/v6/gmp-mparam.h	114;"	d
SQR_FFT_TABLE3	mpn/arm/v7a/cora15/gmp-mparam.h	115;"	d
SQR_FFT_TABLE3	mpn/arm/v7a/cora7/gmp-mparam.h	115;"	d
SQR_FFT_TABLE3	mpn/arm/v7a/cora8/gmp-mparam.h	122;"	d
SQR_FFT_TABLE3	mpn/arm/v7a/cora9/gmp-mparam.h	124;"	d
SQR_FFT_TABLE3	mpn/arm64/gmp-mparam.h	141;"	d
SQR_FFT_TABLE3	mpn/ia64/gmp-mparam.h	120;"	d
SQR_FFT_TABLE3	mpn/pa32/hppa2_0/gmp-mparam.h	104;"	d
SQR_FFT_TABLE3	mpn/pa64/gmp-mparam.h	145;"	d
SQR_FFT_TABLE3	mpn/powerpc32/750/gmp-mparam.h	119;"	d
SQR_FFT_TABLE3	mpn/powerpc32/gmp-mparam.h	137;"	d
SQR_FFT_TABLE3	mpn/powerpc32/p3/gmp-mparam.h	98;"	d
SQR_FFT_TABLE3	mpn/powerpc32/p4/gmp-mparam.h	124;"	d
SQR_FFT_TABLE3	mpn/powerpc32/p5/gmp-mparam.h	100;"	d
SQR_FFT_TABLE3	mpn/powerpc32/p6/gmp-mparam.h	105;"	d
SQR_FFT_TABLE3	mpn/powerpc32/p7/gmp-mparam.h	102;"	d
SQR_FFT_TABLE3	mpn/powerpc64/mode32/p4/gmp-mparam.h	105;"	d
SQR_FFT_TABLE3	mpn/powerpc64/mode64/p3/gmp-mparam.h	107;"	d
SQR_FFT_TABLE3	mpn/powerpc64/mode64/p4/gmp-mparam.h	123;"	d
SQR_FFT_TABLE3	mpn/powerpc64/mode64/p5/gmp-mparam.h	131;"	d
SQR_FFT_TABLE3	mpn/powerpc64/mode64/p6/gmp-mparam.h	98;"	d
SQR_FFT_TABLE3	mpn/powerpc64/mode64/p7/gmp-mparam.h	146;"	d
SQR_FFT_TABLE3	mpn/s390_32/esame/gmp-mparam.h	124;"	d
SQR_FFT_TABLE3	mpn/s390_32/gmp-mparam.h	92;"	d
SQR_FFT_TABLE3	mpn/s390_64/gmp-mparam.h	109;"	d
SQR_FFT_TABLE3	mpn/s390_64/z10/gmp-mparam.h	137;"	d
SQR_FFT_TABLE3	mpn/sparc32/ultrasparct1/gmp-mparam.h	93;"	d
SQR_FFT_TABLE3	mpn/sparc32/v9/gmp-mparam.h	123;"	d
SQR_FFT_TABLE3	mpn/sparc64/gmp-mparam.h	90;"	d
SQR_FFT_TABLE3	mpn/sparc64/ultrasparc34/gmp-mparam.h	130;"	d
SQR_FFT_TABLE3	mpn/sparc64/ultrasparct1/gmp-mparam.h	97;"	d
SQR_FFT_TABLE3	mpn/x86/atom/gmp-mparam.h	122;"	d
SQR_FFT_TABLE3	mpn/x86/bd1/gmp-mparam.h	124;"	d
SQR_FFT_TABLE3	mpn/x86/bd2/gmp-mparam.h	126;"	d
SQR_FFT_TABLE3	mpn/x86/bobcat/gmp-mparam.h	118;"	d
SQR_FFT_TABLE3	mpn/x86/core2/gmp-mparam.h	121;"	d
SQR_FFT_TABLE3	mpn/x86/coreihwl/gmp-mparam.h	125;"	d
SQR_FFT_TABLE3	mpn/x86/coreinhm/gmp-mparam.h	131;"	d
SQR_FFT_TABLE3	mpn/x86/coreisbr/gmp-mparam.h	121;"	d
SQR_FFT_TABLE3	mpn/x86/geode/gmp-mparam.h	90;"	d
SQR_FFT_TABLE3	mpn/x86/k10/gmp-mparam.h	126;"	d
SQR_FFT_TABLE3	mpn/x86/k6/gmp-mparam.h	103;"	d
SQR_FFT_TABLE3	mpn/x86/k7/gmp-mparam.h	146;"	d
SQR_FFT_TABLE3	mpn/x86/k8/gmp-mparam.h	119;"	d
SQR_FFT_TABLE3	mpn/x86/nano/gmp-mparam.h	103;"	d
SQR_FFT_TABLE3	mpn/x86/p6/gmp-mparam.h	120;"	d
SQR_FFT_TABLE3	mpn/x86/p6/mmx/gmp-mparam.h	122;"	d
SQR_FFT_TABLE3	mpn/x86/p6/sse2/gmp-mparam.h	118;"	d
SQR_FFT_TABLE3	mpn/x86/pentium/mmx/gmp-mparam.h	104;"	d
SQR_FFT_TABLE3	mpn/x86/pentium4/sse2/gmp-mparam.h	124;"	d
SQR_FFT_TABLE3	mpn/x86_64/atom/gmp-mparam.h	127;"	d
SQR_FFT_TABLE3	mpn/x86_64/bd1/gmp-mparam.h	139;"	d
SQR_FFT_TABLE3	mpn/x86_64/bd2/gmp-mparam.h	147;"	d
SQR_FFT_TABLE3	mpn/x86_64/bobcat/gmp-mparam.h	130;"	d
SQR_FFT_TABLE3	mpn/x86_64/core2/gmp-mparam.h	132;"	d
SQR_FFT_TABLE3	mpn/x86_64/coreibwl/gmp-mparam.h	135;"	d
SQR_FFT_TABLE3	mpn/x86_64/coreihwl/gmp-mparam.h	143;"	d
SQR_FFT_TABLE3	mpn/x86_64/coreinhm/gmp-mparam.h	133;"	d
SQR_FFT_TABLE3	mpn/x86_64/coreisbr/gmp-mparam.h	134;"	d
SQR_FFT_TABLE3	mpn/x86_64/gmp-mparam.h	125;"	d
SQR_FFT_TABLE3	mpn/x86_64/k10/gmp-mparam.h	140;"	d
SQR_FFT_TABLE3	mpn/x86_64/k8/gmp-mparam.h	139;"	d
SQR_FFT_TABLE3	mpn/x86_64/nano/gmp-mparam.h	142;"	d
SQR_FFT_TABLE3	mpn/x86_64/pentium4/gmp-mparam.h	142;"	d
SQR_FFT_TABLE3	mpn/x86_64/skylake/gmp-mparam.h	137;"	d
SQR_FFT_TABLE3_SIZE	mpn/alpha/ev5/gmp-mparam.h	146;"	d
SQR_FFT_TABLE3_SIZE	mpn/alpha/ev6/gmp-mparam.h	168;"	d
SQR_FFT_TABLE3_SIZE	mpn/arm/gmp-mparam.h	93;"	d
SQR_FFT_TABLE3_SIZE	mpn/arm/v6/gmp-mparam.h	143;"	d
SQR_FFT_TABLE3_SIZE	mpn/arm/v7a/cora15/gmp-mparam.h	148;"	d
SQR_FFT_TABLE3_SIZE	mpn/arm/v7a/cora7/gmp-mparam.h	149;"	d
SQR_FFT_TABLE3_SIZE	mpn/arm/v7a/cora8/gmp-mparam.h	162;"	d
SQR_FFT_TABLE3_SIZE	mpn/arm/v7a/cora9/gmp-mparam.h	164;"	d
SQR_FFT_TABLE3_SIZE	mpn/arm64/gmp-mparam.h	195;"	d
SQR_FFT_TABLE3_SIZE	mpn/ia64/gmp-mparam.h	159;"	d
SQR_FFT_TABLE3_SIZE	mpn/pa32/hppa2_0/gmp-mparam.h	133;"	d
SQR_FFT_TABLE3_SIZE	mpn/pa64/gmp-mparam.h	211;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc32/750/gmp-mparam.h	158;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc32/gmp-mparam.h	178;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc32/p3/gmp-mparam.h	121;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc32/p4/gmp-mparam.h	163;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc32/p5/gmp-mparam.h	120;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc32/p6/gmp-mparam.h	129;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc32/p7/gmp-mparam.h	123;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc64/mode32/p4/gmp-mparam.h	132;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p3/gmp-mparam.h	138;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p4/gmp-mparam.h	168;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p5/gmp-mparam.h	180;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p6/gmp-mparam.h	119;"	d
SQR_FFT_TABLE3_SIZE	mpn/powerpc64/mode64/p7/gmp-mparam.h	200;"	d
SQR_FFT_TABLE3_SIZE	mpn/s390_32/esame/gmp-mparam.h	166;"	d
SQR_FFT_TABLE3_SIZE	mpn/s390_32/gmp-mparam.h	104;"	d
SQR_FFT_TABLE3_SIZE	mpn/s390_64/gmp-mparam.h	134;"	d
SQR_FFT_TABLE3_SIZE	mpn/s390_64/z10/gmp-mparam.h	189;"	d
SQR_FFT_TABLE3_SIZE	mpn/sparc32/ultrasparct1/gmp-mparam.h	112;"	d
SQR_FFT_TABLE3_SIZE	mpn/sparc32/v9/gmp-mparam.h	163;"	d
SQR_FFT_TABLE3_SIZE	mpn/sparc64/gmp-mparam.h	104;"	d
SQR_FFT_TABLE3_SIZE	mpn/sparc64/ultrasparc34/gmp-mparam.h	177;"	d
SQR_FFT_TABLE3_SIZE	mpn/sparc64/ultrasparct1/gmp-mparam.h	113;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/atom/gmp-mparam.h	163;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/bd1/gmp-mparam.h	167;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/bd2/gmp-mparam.h	167;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/bobcat/gmp-mparam.h	156;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/core2/gmp-mparam.h	159;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/coreihwl/gmp-mparam.h	169;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/coreinhm/gmp-mparam.h	183;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/coreisbr/gmp-mparam.h	162;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/geode/gmp-mparam.h	107;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/k10/gmp-mparam.h	170;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/k6/gmp-mparam.h	132;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/k7/gmp-mparam.h	209;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/k8/gmp-mparam.h	157;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/nano/gmp-mparam.h	126;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/p6/gmp-mparam.h	158;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/p6/mmx/gmp-mparam.h	164;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/p6/sse2/gmp-mparam.h	156;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/pentium/mmx/gmp-mparam.h	129;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86/pentium4/sse2/gmp-mparam.h	165;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/atom/gmp-mparam.h	171;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/bd1/gmp-mparam.h	196;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/bd2/gmp-mparam.h	211;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/bobcat/gmp-mparam.h	174;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/core2/gmp-mparam.h	182;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/coreibwl/gmp-mparam.h	184;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/coreihwl/gmp-mparam.h	201;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/coreinhm/gmp-mparam.h	188;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/coreisbr/gmp-mparam.h	186;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/gmp-mparam.h	177;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/k10/gmp-mparam.h	192;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/k8/gmp-mparam.h	194;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/nano/gmp-mparam.h	201;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/pentium4/gmp-mparam.h	189;"	d
SQR_FFT_TABLE3_SIZE	mpn/x86_64/skylake/gmp-mparam.h	185;"	d
SQR_FFT_THRESHOLD	gmp-impl.h	2269;"	d
SQR_FFT_THRESHOLD	gmp-impl.h	4786;"	d
SQR_FFT_THRESHOLD	gmp-impl.h	4787;"	d
SQR_FFT_THRESHOLD	gmp-impl.h	623;"	d
SQR_FFT_THRESHOLD	gmp-impl.h	625;"	d
SQR_FFT_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	147;"	d
SQR_FFT_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	169;"	d
SQR_FFT_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	72;"	d
SQR_FFT_THRESHOLD	mpn/alpha/gmp-mparam.h	86;"	d
SQR_FFT_THRESHOLD	mpn/arm/gmp-mparam.h	94;"	d
SQR_FFT_THRESHOLD	mpn/arm/v6/gmp-mparam.h	144;"	d
SQR_FFT_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	149;"	d
SQR_FFT_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	150;"	d
SQR_FFT_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	163;"	d
SQR_FFT_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	165;"	d
SQR_FFT_THRESHOLD	mpn/arm64/gmp-mparam.h	196;"	d
SQR_FFT_THRESHOLD	mpn/cray/gmp-mparam.h	79;"	d
SQR_FFT_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	73;"	d
SQR_FFT_THRESHOLD	mpn/ia64/gmp-mparam.h	160;"	d
SQR_FFT_THRESHOLD	mpn/m68k/gmp-mparam.h	76;"	d
SQR_FFT_THRESHOLD	mpn/minithres/gmp-mparam.h	73;"	d
SQR_FFT_THRESHOLD	mpn/mips32/gmp-mparam.h	72;"	d
SQR_FFT_THRESHOLD	mpn/mips64/gmp-mparam.h	72;"	d
SQR_FFT_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	72;"	d
SQR_FFT_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	134;"	d
SQR_FFT_THRESHOLD	mpn/pa64/gmp-mparam.h	212;"	d
SQR_FFT_THRESHOLD	mpn/power/gmp-mparam.h	69;"	d
SQR_FFT_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	159;"	d
SQR_FFT_THRESHOLD	mpn/powerpc32/gmp-mparam.h	179;"	d
SQR_FFT_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	122;"	d
SQR_FFT_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	164;"	d
SQR_FFT_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	121;"	d
SQR_FFT_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	130;"	d
SQR_FFT_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	124;"	d
SQR_FFT_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	133;"	d
SQR_FFT_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	82;"	d
SQR_FFT_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	139;"	d
SQR_FFT_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	169;"	d
SQR_FFT_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	181;"	d
SQR_FFT_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	120;"	d
SQR_FFT_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	201;"	d
SQR_FFT_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	167;"	d
SQR_FFT_THRESHOLD	mpn/s390_32/gmp-mparam.h	105;"	d
SQR_FFT_THRESHOLD	mpn/s390_64/gmp-mparam.h	135;"	d
SQR_FFT_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	190;"	d
SQR_FFT_THRESHOLD	mpn/sparc32/gmp-mparam.h	67;"	d
SQR_FFT_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	113;"	d
SQR_FFT_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	73;"	d
SQR_FFT_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	73;"	d
SQR_FFT_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	164;"	d
SQR_FFT_THRESHOLD	mpn/sparc64/gmp-mparam.h	105;"	d
SQR_FFT_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	178;"	d
SQR_FFT_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	114;"	d
SQR_FFT_THRESHOLD	mpn/x86/atom/gmp-mparam.h	164;"	d
SQR_FFT_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	168;"	d
SQR_FFT_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	168;"	d
SQR_FFT_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	157;"	d
SQR_FFT_THRESHOLD	mpn/x86/core2/gmp-mparam.h	160;"	d
SQR_FFT_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	170;"	d
SQR_FFT_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	184;"	d
SQR_FFT_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	163;"	d
SQR_FFT_THRESHOLD	mpn/x86/fat/gmp-mparam.h	71;"	d
SQR_FFT_THRESHOLD	mpn/x86/geode/gmp-mparam.h	108;"	d
SQR_FFT_THRESHOLD	mpn/x86/i486/gmp-mparam.h	69;"	d
SQR_FFT_THRESHOLD	mpn/x86/k10/gmp-mparam.h	171;"	d
SQR_FFT_THRESHOLD	mpn/x86/k6/gmp-mparam.h	133;"	d
SQR_FFT_THRESHOLD	mpn/x86/k7/gmp-mparam.h	210;"	d
SQR_FFT_THRESHOLD	mpn/x86/k8/gmp-mparam.h	158;"	d
SQR_FFT_THRESHOLD	mpn/x86/nano/gmp-mparam.h	127;"	d
SQR_FFT_THRESHOLD	mpn/x86/p6/gmp-mparam.h	159;"	d
SQR_FFT_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	165;"	d
SQR_FFT_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	157;"	d
SQR_FFT_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	76;"	d
SQR_FFT_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	130;"	d
SQR_FFT_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	166;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	172;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	197;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	212;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	175;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	183;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	185;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	202;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	189;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	187;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	72;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/gmp-mparam.h	178;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	193;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	195;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	202;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	190;"	d
SQR_FFT_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	186;"	d
SQR_TOOM2_MAX_GENERIC	gmp-impl.h	5023;"	d
SQR_TOOM2_THRESHOLD	gmp-impl.h	2117;"	d
SQR_TOOM2_THRESHOLD	gmp-impl.h	4762;"	d
SQR_TOOM2_THRESHOLD	gmp-impl.h	4763;"	d
SQR_TOOM2_THRESHOLD	gmp-impl.h	4765;"	d
SQR_TOOM2_THRESHOLD	gmp-impl.h	4766;"	d
SQR_TOOM2_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	70;"	d
SQR_TOOM2_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	72;"	d
SQR_TOOM2_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	40;"	d
SQR_TOOM2_THRESHOLD	mpn/alpha/gmp-mparam.h	45;"	d
SQR_TOOM2_THRESHOLD	mpn/arm/gmp-mparam.h	63;"	d
SQR_TOOM2_THRESHOLD	mpn/arm/v6/gmp-mparam.h	69;"	d
SQR_TOOM2_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/arm64/gmp-mparam.h	69;"	d
SQR_TOOM2_THRESHOLD	mpn/cray/gmp-mparam.h	47;"	d
SQR_TOOM2_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	41;"	d
SQR_TOOM2_THRESHOLD	mpn/ia64/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/m68k/gmp-mparam.h	44;"	d
SQR_TOOM2_THRESHOLD	mpn/minithres/gmp-mparam.h	58;"	d
SQR_TOOM2_THRESHOLD	mpn/mips32/gmp-mparam.h	42;"	d
SQR_TOOM2_THRESHOLD	mpn/mips64/gmp-mparam.h	42;"	d
SQR_TOOM2_THRESHOLD	mpn/pa32/gmp-mparam.h	45;"	d
SQR_TOOM2_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	40;"	d
SQR_TOOM2_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	62;"	d
SQR_TOOM2_THRESHOLD	mpn/pa64/gmp-mparam.h	63;"	d
SQR_TOOM2_THRESHOLD	mpn/power/gmp-mparam.h	37;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	65;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc32/gmp-mparam.h	79;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	62;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	63;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	63;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	63;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	61;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	43;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	60;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	62;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	61;"	d
SQR_TOOM2_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	69;"	d
SQR_TOOM2_THRESHOLD	mpn/s390_32/gmp-mparam.h	63;"	d
SQR_TOOM2_THRESHOLD	mpn/s390_64/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	70;"	d
SQR_TOOM2_THRESHOLD	mpn/sparc32/gmp-mparam.h	37;"	d
SQR_TOOM2_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	59;"	d
SQR_TOOM2_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	41;"	d
SQR_TOOM2_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	41;"	d
SQR_TOOM2_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	70;"	d
SQR_TOOM2_THRESHOLD	mpn/sparc64/gmp-mparam.h	62;"	d
SQR_TOOM2_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	70;"	d
SQR_TOOM2_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	65;"	d
SQR_TOOM2_THRESHOLD	mpn/vax/gmp-mparam.h	38;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/atom/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/core2/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/fat/gmp-mparam.h	57;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/geode/gmp-mparam.h	59;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/i486/gmp-mparam.h	43;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/k10/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/k6/gmp-mparam.h	61;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/k7/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/k8/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/nano/gmp-mparam.h	61;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/p6/gmp-mparam.h	68;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	68;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	48;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	67;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	69;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	70;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	69;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	65;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	66;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	65;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	58;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/gmp-mparam.h	59;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	73;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	70;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	69;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	72;"	d
SQR_TOOM2_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	69;"	d
SQR_TOOM3_THRESHOLD	gmp-impl.h	2121;"	d
SQR_TOOM3_THRESHOLD	gmp-impl.h	4770;"	d
SQR_TOOM3_THRESHOLD	gmp-impl.h	4771;"	d
SQR_TOOM3_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	71;"	d
SQR_TOOM3_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	73;"	d
SQR_TOOM3_THRESHOLD	mpn/alpha/ev6/nails/gmp-mparam.h	41;"	d
SQR_TOOM3_THRESHOLD	mpn/alpha/gmp-mparam.h	46;"	d
SQR_TOOM3_THRESHOLD	mpn/arm/gmp-mparam.h	64;"	d
SQR_TOOM3_THRESHOLD	mpn/arm/v6/gmp-mparam.h	70;"	d
SQR_TOOM3_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/arm64/gmp-mparam.h	70;"	d
SQR_TOOM3_THRESHOLD	mpn/cray/gmp-mparam.h	48;"	d
SQR_TOOM3_THRESHOLD	mpn/cray/ieee/gmp-mparam.h	42;"	d
SQR_TOOM3_THRESHOLD	mpn/ia64/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/m68k/gmp-mparam.h	45;"	d
SQR_TOOM3_THRESHOLD	mpn/minithres/gmp-mparam.h	59;"	d
SQR_TOOM3_THRESHOLD	mpn/mips32/gmp-mparam.h	43;"	d
SQR_TOOM3_THRESHOLD	mpn/mips64/gmp-mparam.h	43;"	d
SQR_TOOM3_THRESHOLD	mpn/pa32/gmp-mparam.h	48;"	d
SQR_TOOM3_THRESHOLD	mpn/pa32/hppa1_1/gmp-mparam.h	41;"	d
SQR_TOOM3_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	63;"	d
SQR_TOOM3_THRESHOLD	mpn/pa64/gmp-mparam.h	64;"	d
SQR_TOOM3_THRESHOLD	mpn/power/gmp-mparam.h	38;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	66;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc32/gmp-mparam.h	80;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	63;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	64;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	64;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	64;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	62;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	44;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	61;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	63;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	62;"	d
SQR_TOOM3_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	70;"	d
SQR_TOOM3_THRESHOLD	mpn/s390_32/gmp-mparam.h	64;"	d
SQR_TOOM3_THRESHOLD	mpn/s390_64/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	71;"	d
SQR_TOOM3_THRESHOLD	mpn/sparc32/gmp-mparam.h	38;"	d
SQR_TOOM3_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	60;"	d
SQR_TOOM3_THRESHOLD	mpn/sparc32/v8/gmp-mparam.h	42;"	d
SQR_TOOM3_THRESHOLD	mpn/sparc32/v8/supersparc/gmp-mparam.h	42;"	d
SQR_TOOM3_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	71;"	d
SQR_TOOM3_THRESHOLD	mpn/sparc64/gmp-mparam.h	63;"	d
SQR_TOOM3_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	71;"	d
SQR_TOOM3_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	66;"	d
SQR_TOOM3_THRESHOLD	mpn/vax/gmp-mparam.h	39;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/atom/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/core2/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/fat/gmp-mparam.h	58;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/geode/gmp-mparam.h	60;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/i486/gmp-mparam.h	44;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/k10/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/k6/gmp-mparam.h	62;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/k7/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/k8/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/nano/gmp-mparam.h	62;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/p6/gmp-mparam.h	69;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	69;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/pentium/gmp-mparam.h	49;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	68;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	70;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	71;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	70;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	66;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	67;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	66;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/fat/gmp-mparam.h	59;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/gmp-mparam.h	60;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	74;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	71;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	70;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	73;"	d
SQR_TOOM3_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	70;"	d
SQR_TOOM3_THRESHOLD_LIMIT	gmp-impl.h	2130;"	d
SQR_TOOM3_THRESHOLD_LIMIT	gmp-impl.h	5022;"	d
SQR_TOOM3_THRESHOLD_LIMIT	gmp-impl.h	5026;"	d
SQR_TOOM4_THRESHOLD	gmp-impl.h	2125;"	d
SQR_TOOM4_THRESHOLD	gmp-impl.h	4774;"	d
SQR_TOOM4_THRESHOLD	gmp-impl.h	4775;"	d
SQR_TOOM4_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	72;"	d
SQR_TOOM4_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	74;"	d
SQR_TOOM4_THRESHOLD	mpn/alpha/gmp-mparam.h	47;"	d
SQR_TOOM4_THRESHOLD	mpn/arm/gmp-mparam.h	65;"	d
SQR_TOOM4_THRESHOLD	mpn/arm/v6/gmp-mparam.h	71;"	d
SQR_TOOM4_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/arm64/gmp-mparam.h	71;"	d
SQR_TOOM4_THRESHOLD	mpn/ia64/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/minithres/gmp-mparam.h	60;"	d
SQR_TOOM4_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	64;"	d
SQR_TOOM4_THRESHOLD	mpn/pa64/gmp-mparam.h	65;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	67;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc32/gmp-mparam.h	81;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	64;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	65;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	65;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	65;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	63;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc64/mode64/gmp-mparam.h	45;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	62;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	64;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	63;"	d
SQR_TOOM4_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	71;"	d
SQR_TOOM4_THRESHOLD	mpn/s390_32/gmp-mparam.h	65;"	d
SQR_TOOM4_THRESHOLD	mpn/s390_64/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	72;"	d
SQR_TOOM4_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	61;"	d
SQR_TOOM4_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	72;"	d
SQR_TOOM4_THRESHOLD	mpn/sparc64/gmp-mparam.h	64;"	d
SQR_TOOM4_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	72;"	d
SQR_TOOM4_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	67;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/atom/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/core2/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/geode/gmp-mparam.h	61;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/k10/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/k6/gmp-mparam.h	63;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/k7/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/k8/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/nano/gmp-mparam.h	63;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/p6/gmp-mparam.h	70;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	70;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	69;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	71;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	72;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	71;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	67;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	68;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	67;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/gmp-mparam.h	61;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	75;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	72;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	71;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	74;"	d
SQR_TOOM4_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	71;"	d
SQR_TOOM4_THRESHOLD_LIMIT	gmp-impl.h	5028;"	d
SQR_TOOM6H_THRESHOLD	mpn/minithres/gmp-mparam.h	61;"	d
SQR_TOOM6_MAX	mpn/generic/toom6_sqr.c	57;"	d	file:
SQR_TOOM6_MAX	mpn/generic/toom6_sqr.c	59;"	d	file:
SQR_TOOM6_MAX	mpn/toom6_sqr.c	57;"	d	file:
SQR_TOOM6_MAX	mpn/toom6_sqr.c	59;"	d	file:
SQR_TOOM6_THRESHOLD	gmp-impl.h	2051;"	d
SQR_TOOM6_THRESHOLD	gmp-impl.h	4778;"	d
SQR_TOOM6_THRESHOLD	gmp-impl.h	4779;"	d
SQR_TOOM6_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	73;"	d
SQR_TOOM6_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	75;"	d
SQR_TOOM6_THRESHOLD	mpn/arm/gmp-mparam.h	66;"	d
SQR_TOOM6_THRESHOLD	mpn/arm/v6/gmp-mparam.h	72;"	d
SQR_TOOM6_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/arm64/gmp-mparam.h	72;"	d
SQR_TOOM6_THRESHOLD	mpn/generic/toom8_sqr.c	58;"	d	file:
SQR_TOOM6_THRESHOLD	mpn/ia64/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	65;"	d
SQR_TOOM6_THRESHOLD	mpn/pa64/gmp-mparam.h	66;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	68;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc32/gmp-mparam.h	82;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	65;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	66;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	66;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	66;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	64;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	63;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	65;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	64;"	d
SQR_TOOM6_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	72;"	d
SQR_TOOM6_THRESHOLD	mpn/s390_32/gmp-mparam.h	66;"	d
SQR_TOOM6_THRESHOLD	mpn/s390_64/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	73;"	d
SQR_TOOM6_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	62;"	d
SQR_TOOM6_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	73;"	d
SQR_TOOM6_THRESHOLD	mpn/sparc64/gmp-mparam.h	65;"	d
SQR_TOOM6_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	73;"	d
SQR_TOOM6_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	68;"	d
SQR_TOOM6_THRESHOLD	mpn/toom8_sqr.c	58;"	d	file:
SQR_TOOM6_THRESHOLD	mpn/x86/atom/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/core2/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/geode/gmp-mparam.h	62;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/k10/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/k6/gmp-mparam.h	64;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/k7/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/k8/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/nano/gmp-mparam.h	64;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/p6/gmp-mparam.h	71;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	71;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	70;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	72;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	73;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	72;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	68;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	69;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	68;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/gmp-mparam.h	62;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	76;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	73;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	72;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	75;"	d
SQR_TOOM6_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	72;"	d
SQR_TOOM6_THRESHOLD_LIMIT	gmp-impl.h	5030;"	d
SQR_TOOM8H_THRESHOLD	mpn/minithres/gmp-mparam.h	62;"	d
SQR_TOOM8_MAX	mpn/generic/toom8_sqr.c	72;"	d	file:
SQR_TOOM8_MAX	mpn/toom8_sqr.c	72;"	d	file:
SQR_TOOM8_THRESHOLD	gmp-impl.h	2059;"	d
SQR_TOOM8_THRESHOLD	gmp-impl.h	4782;"	d
SQR_TOOM8_THRESHOLD	gmp-impl.h	4783;"	d
SQR_TOOM8_THRESHOLD	mpn/alpha/ev5/gmp-mparam.h	74;"	d
SQR_TOOM8_THRESHOLD	mpn/alpha/ev6/gmp-mparam.h	76;"	d
SQR_TOOM8_THRESHOLD	mpn/arm/gmp-mparam.h	67;"	d
SQR_TOOM8_THRESHOLD	mpn/arm/v6/gmp-mparam.h	73;"	d
SQR_TOOM8_THRESHOLD	mpn/arm/v7a/cora15/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/arm/v7a/cora7/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/arm/v7a/cora8/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/arm/v7a/cora9/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/arm64/gmp-mparam.h	73;"	d
SQR_TOOM8_THRESHOLD	mpn/generic/toom8_sqr.c	54;"	d	file:
SQR_TOOM8_THRESHOLD	mpn/ia64/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/pa32/hppa2_0/gmp-mparam.h	66;"	d
SQR_TOOM8_THRESHOLD	mpn/pa64/gmp-mparam.h	67;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc32/750/gmp-mparam.h	69;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc32/gmp-mparam.h	83;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc32/p3/gmp-mparam.h	66;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc32/p4/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc32/p5/gmp-mparam.h	67;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc32/p6/gmp-mparam.h	67;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc32/p7/gmp-mparam.h	67;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc64/mode32/p4/gmp-mparam.h	65;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc64/mode64/p3/gmp-mparam.h	64;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc64/mode64/p4/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc64/mode64/p5/gmp-mparam.h	66;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc64/mode64/p6/gmp-mparam.h	65;"	d
SQR_TOOM8_THRESHOLD	mpn/powerpc64/mode64/p7/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/s390_32/esame/gmp-mparam.h	73;"	d
SQR_TOOM8_THRESHOLD	mpn/s390_32/gmp-mparam.h	67;"	d
SQR_TOOM8_THRESHOLD	mpn/s390_64/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/s390_64/z10/gmp-mparam.h	74;"	d
SQR_TOOM8_THRESHOLD	mpn/sparc32/ultrasparct1/gmp-mparam.h	63;"	d
SQR_TOOM8_THRESHOLD	mpn/sparc32/v9/gmp-mparam.h	74;"	d
SQR_TOOM8_THRESHOLD	mpn/sparc64/gmp-mparam.h	66;"	d
SQR_TOOM8_THRESHOLD	mpn/sparc64/ultrasparc34/gmp-mparam.h	74;"	d
SQR_TOOM8_THRESHOLD	mpn/sparc64/ultrasparct1/gmp-mparam.h	69;"	d
SQR_TOOM8_THRESHOLD	mpn/toom8_sqr.c	54;"	d	file:
SQR_TOOM8_THRESHOLD	mpn/x86/atom/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/bd1/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/bd2/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/bobcat/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/core2/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/coreihwl/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/coreinhm/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/coreisbr/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/geode/gmp-mparam.h	63;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/k10/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/k6/gmp-mparam.h	65;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/k7/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/k8/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/nano/gmp-mparam.h	65;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/p6/gmp-mparam.h	72;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/p6/mmx/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/p6/sse2/gmp-mparam.h	72;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/pentium/mmx/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86/pentium4/sse2/gmp-mparam.h	71;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/atom/gmp-mparam.h	73;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/bd1/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/bd2/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/bobcat/gmp-mparam.h	74;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/core2/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/coreibwl/gmp-mparam.h	73;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/coreihwl/gmp-mparam.h	69;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/coreinhm/gmp-mparam.h	70;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/coreisbr/gmp-mparam.h	69;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/gmp-mparam.h	63;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/k10/gmp-mparam.h	77;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/k8/gmp-mparam.h	74;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/nano/gmp-mparam.h	73;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/pentium4/gmp-mparam.h	76;"	d
SQR_TOOM8_THRESHOLD	mpn/x86_64/skylake/gmp-mparam.h	73;"	d
SQR_TOOM8_THRESHOLD_LIMIT	gmp-impl.h	5032;"	d
SRA	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
SRCS	Makefile	/^SRCS=`find .\/ -name "*.c" -print`$/;"	m
SRCS	mpn/Makefile	/^SRCS=`find .\/ -name "*.c" -print`$/;"	m
SRC_SIZE	tests/devel/try.c	289;"	d	file:
SS	tests/t-constants.c	70;"	d	file:
SS	tests/t-constants.c	72;"	d	file:
STAT	mpn/generic/mu_div_qr.c	68;"	d	file:
STAT	mpn/generic/mu_div_qr.c	69;"	d	file:
STAT	mpn/generic/mu_div_qr.c	71;"	d	file:
STAT	mpn/generic/mu_divappr_q.c	64;"	d	file:
STAT	mpn/generic/mu_divappr_q.c	65;"	d	file:
STAT	mpn/generic/mu_divappr_q.c	67;"	d	file:
STAT	mpn/mu_div_qr.c	68;"	d	file:
STAT	mpn/mu_div_qr.c	69;"	d	file:
STAT	mpn/mu_div_qr.c	71;"	d	file:
STAT	mpn/mu_divappr_q.c	64;"	d	file:
STAT	mpn/mu_divappr_q.c	65;"	d	file:
STAT	mpn/mu_divappr_q.c	67;"	d	file:
STCK	tune/time.c	267;"	d	file:
STCK	tune/time.c	275;"	d	file:
STCK_PERIOD	tune/time.c	277;"	d	file:
STDC_HEADERS	config.h	561;"	d
STOP_SINCE_AFTER	tune/tuneup.c	668;"	d	file:
STOP_SINCE_POSITIVE	tune/tuneup.c	631;"	d	file:
STORE	demos/perl/test.pl	/^sub STORE {$/;"	s
STORE	scanf/doscan.c	207;"	d	file:
STRICT_MPF_NORMALIZATION	mpf/cmp.c	82;"	d	file:
SUB	tests/devel/tst-addsub.c	25;"	d	file:
SUBC_LIMB	gmp-impl.h	2622;"	d
SUBC_LIMB	gmp-impl.h	2631;"	d
SWAP_RP_TP	mpz/n_pow_ui.c	154;"	d	file:
SWING_A_PRIME	mpz/oddfac_1.c	153;"	d	file:
SWING_A_PRIME	mpz/oddfac_1.c	253;"	d	file:
SZ	tests/mpf/t-eq.c	27;"	d	file:
S_ALLOC_STEP	scanf/doscan.c	219;"	d	file:
TABLE_2N_MINUS_POPC_2N	fac_table.h	35;"	d
TABLE_LIMIT_2N_MINUS_POPC_2N	fac_table.h	36;"	d
TABLE_NAME	mpn/x86/pentium/popcount.asm	/^TABLE_NAME:$/;"	l
TARGET	Makefile	/^TARGET=libgmp.a$/;"	m
TARGET	mpn/Makefile	/^TARGET=libmpn.a$/;"	m
TARGET_REGISTER_STARVED	gmp-impl.h	2973;"	d
TARGET_REGISTER_STARVED	gmp-impl.h	2975;"	d
TEMPFILE	tests/misc/t-scanf.c	57;"	d	file:
TESTCALL	tests/devel/tst-addsub.c	33;"	d	file:
TESTCALL	tests/devel/tst-addsub.c	38;"	d	file:
TESTS	mini-gmp/tests/Makefile	/^TESTS = $(CHECK_PROGRAMS)$/;"	m
TESTS_REPS	tests/tests.h	407;"	d
TIESCALAR	demos/perl/test.pl	/^sub TIESCALAR {$/;"	s
TIME	demos/pexpr.c	67;"	d	file:
TIME	tune/tune-gcd-p.c	119;"	d	file:
TIMEBASESTRUCT_SECS	tune/time.c	416;"	d	file:
TIMES	tests/devel/anymul_1.c	87;"	d	file:
TIMES	tests/devel/aors_n.c	104;"	d	file:
TIMES	tests/devel/copy.c	80;"	d	file:
TIMES	tests/devel/divmod_1.c	65;"	d	file:
TIMES	tests/devel/divrem.c	62;"	d	file:
TIMES	tests/devel/logops_n.c	113;"	d	file:
TIMES	tests/devel/shift.c	81;"	d	file:
TIME_WITH_SYS_TIME	config.h	564;"	d
TIMING	demos/pexpr.c	/^	   TIMING};$/;"	e	enum:op_t	file:
TMP_ALLOC	gmp-impl.h	378;"	d
TMP_ALLOC	gmp-impl.h	395;"	d
TMP_ALLOC	gmp-impl.h	415;"	d
TMP_ALLOC	gmp-impl.h	469;"	d
TMP_ALLOC_ALIGNED	tune/speed.h	51;"	d
TMP_ALLOC_LIMBS	gmp-impl.h	486;"	d
TMP_ALLOC_LIMBS_2	gmp-impl.h	498;"	d
TMP_ALLOC_LIMBS_3	gmp-impl.h	511;"	d
TMP_ALLOC_LIMBS_ALIGNED	tune/speed.h	53;"	d
TMP_ALLOC_MP_PTRS	gmp-impl.h	489;"	d
TMP_ALLOC_TYPE	gmp-impl.h	483;"	d
TMP_BALLOC	gmp-impl.h	376;"	d
TMP_BALLOC	gmp-impl.h	394;"	d
TMP_BALLOC	gmp-impl.h	414;"	d
TMP_BALLOC	gmp-impl.h	468;"	d
TMP_BALLOC_LIMBS	gmp-impl.h	488;"	d
TMP_BALLOC_MP_PTRS	gmp-impl.h	491;"	d
TMP_BALLOC_TYPE	gmp-impl.h	485;"	d
TMP_DECL	gmp-impl.h	372;"	d
TMP_DECL	gmp-impl.h	390;"	d
TMP_DECL	gmp-impl.h	410;"	d
TMP_DECL	gmp-impl.h	443;"	d
TMP_DECL_NAME	gmp-impl.h	452;"	d
TMP_FREE	gmp-impl.h	381;"	d
TMP_FREE	gmp-impl.h	397;"	d
TMP_FREE	gmp-impl.h	418;"	d
TMP_FREE	gmp-impl.h	447;"	d
TMP_FREE_NAME	gmp-impl.h	473;"	d
TMP_MARK	gmp-impl.h	374;"	d
TMP_MARK	gmp-impl.h	392;"	d
TMP_MARK	gmp-impl.h	412;"	d
TMP_MARK	gmp-impl.h	445;"	d
TMP_MARK_NAME	gmp-impl.h	459;"	d
TMP_SALLOC	gmp-impl.h	375;"	d
TMP_SALLOC	gmp-impl.h	393;"	d
TMP_SALLOC	gmp-impl.h	413;"	d
TMP_SALLOC	gmp-impl.h	467;"	d
TMP_SALLOC_LIMBS	gmp-impl.h	487;"	d
TMP_SALLOC_MP_PTRS	gmp-impl.h	490;"	d
TMP_SALLOC_TYPE	gmp-impl.h	484;"	d
TMP_SDECL	gmp-impl.h	371;"	d
TMP_SDECL	gmp-impl.h	389;"	d
TMP_SDECL	gmp-impl.h	409;"	d
TMP_SDECL	gmp-impl.h	442;"	d
TMP_SFREE	gmp-impl.h	380;"	d
TMP_SFREE	gmp-impl.h	396;"	d
TMP_SFREE	gmp-impl.h	417;"	d
TMP_SFREE	gmp-impl.h	446;"	d
TMP_SMARK	gmp-impl.h	373;"	d
TMP_SMARK	gmp-impl.h	391;"	d
TMP_SMARK	gmp-impl.h	411;"	d
TMP_SMARK	gmp-impl.h	444;"	d
TOKEN_EOF	demos/expr/expr.c	126;"	d	file:
TOKEN_FUNCTION	demos/expr/expr.c	129;"	d	file:
TOKEN_NAME	demos/expr/expr.c	131;"	d	file:
TOKEN_OPERATOR	demos/expr/expr.c	128;"	d	file:
TOKEN_VALUE	demos/expr/expr.c	127;"	d	file:
TOLERANCE	tune/common.c	137;"	d	file:
TOOM22_MUL_N_REC	mpn/generic/toom22_mul.c	62;"	d	file:
TOOM22_MUL_N_REC	mpn/toom22_mul.c	62;"	d	file:
TOOM22_MUL_REC	mpn/generic/toom22_mul.c	77;"	d	file:
TOOM22_MUL_REC	mpn/toom22_mul.c	77;"	d	file:
TOOM2_SQR_REC	mpn/generic/toom2_sqr.c	59;"	d	file:
TOOM2_SQR_REC	mpn/toom2_sqr.c	59;"	d	file:
TOOM32_MUL_N_REC	mpn/generic/toom32_mul.c	60;"	d	file:
TOOM32_MUL_N_REC	mpn/toom32_mul.c	60;"	d	file:
TOOM33_MUL_N_REC	mpn/generic/toom33_mul.c	75;"	d	file:
TOOM33_MUL_N_REC	mpn/toom33_mul.c	75;"	d	file:
TOOM33_OK	mpn/generic/mul.c	75;"	d	file:
TOOM33_OK	mpn/mul.c	75;"	d	file:
TOOM3_SQR_REC	mpn/generic/toom3_sqr.c	65;"	d	file:
TOOM3_SQR_REC	mpn/toom3_sqr.c	65;"	d	file:
TOOM3_THRESHOLD	tests/refmpn.c	1854;"	d	file:
TOOM42_MUL_N_REC	mpn/generic/toom42_mul.c	61;"	d	file:
TOOM42_MUL_N_REC	mpn/toom42_mul.c	61;"	d	file:
TOOM44_MUL_N_REC	mpn/generic/toom44_mul.c	72;"	d	file:
TOOM44_MUL_N_REC	mpn/toom44_mul.c	72;"	d	file:
TOOM44_OK	mpn/generic/mul.c	76;"	d	file:
TOOM44_OK	mpn/mul.c	76;"	d	file:
TOOM4_SQR_REC	mpn/generic/toom4_sqr.c	69;"	d	file:
TOOM4_SQR_REC	mpn/toom4_sqr.c	69;"	d	file:
TOOM4_THRESHOLD	tests/refmpn.c	1855;"	d	file:
TOOM6H_MUL_N_REC	mpn/generic/toom6h_mul.c	258;"	d	file:
TOOM6H_MUL_N_REC	mpn/generic/toom6h_mul.c	62;"	d	file:
TOOM6H_MUL_N_REC	mpn/toom6h_mul.c	258;"	d	file:
TOOM6H_MUL_N_REC	mpn/toom6h_mul.c	62;"	d	file:
TOOM6H_MUL_REC	mpn/generic/toom6h_mul.c	259;"	d	file:
TOOM6H_MUL_REC	mpn/generic/toom6h_mul.c	91;"	d	file:
TOOM6H_MUL_REC	mpn/toom6h_mul.c	259;"	d	file:
TOOM6H_MUL_REC	mpn/toom6h_mul.c	91;"	d	file:
TOOM6_SQR_REC	mpn/generic/toom6_sqr.c	175;"	d	file:
TOOM6_SQR_REC	mpn/generic/toom6_sqr.c	80;"	d	file:
TOOM6_SQR_REC	mpn/toom6_sqr.c	175;"	d	file:
TOOM6_SQR_REC	mpn/toom6_sqr.c	80;"	d	file:
TOOM6_THRESHOLD	tests/refmpn.c	1856;"	d	file:
TOOM8H_MUL_N_REC	mpn/generic/toom8h_mul.c	300;"	d	file:
TOOM8H_MUL_N_REC	mpn/generic/toom8h_mul.c	74;"	d	file:
TOOM8H_MUL_N_REC	mpn/toom8h_mul.c	300;"	d	file:
TOOM8H_MUL_N_REC	mpn/toom8h_mul.c	74;"	d	file:
TOOM8H_MUL_REC	mpn/generic/toom8h_mul.c	102;"	d	file:
TOOM8H_MUL_REC	mpn/generic/toom8h_mul.c	301;"	d	file:
TOOM8H_MUL_REC	mpn/toom8h_mul.c	102;"	d	file:
TOOM8H_MUL_REC	mpn/toom8h_mul.c	301;"	d	file:
TOOM8_SQR_REC	mpn/generic/toom8_sqr.c	219;"	d	file:
TOOM8_SQR_REC	mpn/generic/toom8_sqr.c	96;"	d	file:
TOOM8_SQR_REC	mpn/toom8_sqr.c	219;"	d	file:
TOOM8_SQR_REC	mpn/toom8_sqr.c	96;"	d	file:
TOOM_54_MUL_N_REC	mpn/generic/toom54_mul.c	51;"	d	file:
TOOM_54_MUL_N_REC	mpn/toom54_mul.c	51;"	d	file:
TOOM_54_MUL_REC	mpn/generic/toom54_mul.c	55;"	d	file:
TOOM_54_MUL_REC	mpn/toom54_mul.c	55;"	d	file:
TOOM_63_MUL_N_REC	mpn/generic/toom63_mul.c	88;"	d	file:
TOOM_63_MUL_N_REC	mpn/toom63_mul.c	88;"	d	file:
TOOM_63_MUL_REC	mpn/generic/toom63_mul.c	92;"	d	file:
TOOM_63_MUL_REC	mpn/toom63_mul.c	92;"	d	file:
TRACE	demos/calc/calcread.c	33;"	d	file:
TRACE	demos/expr/expr.c	45;"	d	file:
TRACE	demos/expr/exprf.c	38;"	d	file:
TRACE	demos/expr/exprfa.c	45;"	d	file:
TRACE	demos/expr/exprq.c	38;"	d	file:
TRACE	demos/expr/exprz.c	39;"	d	file:
TRACE	mpn/fib2_ui.c	40;"	d	file:
TRACE	mpn/generic/fib2_ui.c	40;"	d	file:
TRACE	mpn/generic/mul_fft.c	62;"	d	file:
TRACE	mpn/generic/mul_fft.c	63;"	d	file:
TRACE	mpn/generic/mul_fft.c	66;"	d	file:
TRACE	mpn/generic/perfsqr.c	42;"	d	file:
TRACE	mpn/generic/sqrtrem.c	51;"	d	file:
TRACE	mpn/mul_fft.c	62;"	d	file:
TRACE	mpn/mul_fft.c	63;"	d	file:
TRACE	mpn/mul_fft.c	66;"	d	file:
TRACE	mpn/perfsqr.c	42;"	d	file:
TRACE	mpn/sqrtrem.c	51;"	d	file:
TRACE	mpn/x86/fat/fat.c	43;"	d	file:
TRACE	mpn/x86_64/fat/fat.c	46;"	d	file:
TRACE	mpz/fib_ui.c	38;"	d	file:
TRACE	mpz/lucnum_ui.c	37;"	d	file:
TRACE	mpz/n_pow_ui.c	41;"	d	file:
TRACE	printf/doprnt.c	71;"	d	file:
TRACE	printf/doprntf.c	47;"	d	file:
TRACE	scanf/doscan.c	71;"	d	file:
TRACE	tests/refmpz.c	32;"	d	file:
TRACE_CONTROL	demos/expr/expr.c	311;"	d	file:
TRAP_FUN	tests/devel/try.c	237;"	d	file:
TRAP_NOWHERE	tests/devel/try.c	235;"	d	file:
TRAP_REF	tests/devel/try.c	236;"	d	file:
TRAP_SETUPS	tests/devel/try.c	238;"	d	file:
TRUE	tests/rand/t-mt.c	26;"	d	file:
TRUE	tests/rand/t-urndmm.c	26;"	d	file:
TRY	tests/devel/try.c	1727;"	d	file:
TRY_FUNFUN	tests/devel/try.c	1728;"	d	file:
TUNE_GCD_P	tune/tune-gcd-p.c	33;"	d	file:
TUNE_PROGRAM_BUILD	tune/div_qr_1_tune.c	31;"	d	file:
TUNE_PROGRAM_BUILD	tune/set_strp.c	31;"	d	file:
TUNE_PROGRAM_BUILD	tune/tuneup.c	111;"	d	file:
TUNE_REDC_2_MAX	tune/tuneup.c	1781;"	d	file:
TUNE_SQR_TOOM2_MAX	config.h	567;"	d
TUNE_SQR_TOOM2_MAX	tune/tuneup.c	157;"	d	file:
TWOBITS	tests/mpn/t-scan.c	73;"	d	file:
TYPE_ADD	tests/devel/try.c	/^  TYPE_ADD = 1, TYPE_ADD_N, TYPE_ADD_NC, TYPE_SUB, TYPE_SUB_N, TYPE_SUB_NC,$/;"	e	enum:__anon38	file:
TYPE_ADDCND_N	tests/devel/try.c	/^  TYPE_ADDCND_N, TYPE_SUBCND_N,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH1_N	tests/devel/try.c	/^  TYPE_ADDLSH1_N, TYPE_ADDLSH2_N, TYPE_ADDLSH_N,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH1_NC	tests/devel/try.c	/^  TYPE_ADDLSH1_NC, TYPE_ADDLSH2_NC, TYPE_ADDLSH_NC,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH1_N_IP1	tests/devel/try.c	/^  TYPE_ADDLSH1_N_IP1, TYPE_ADDLSH2_N_IP1, TYPE_ADDLSH_N_IP1,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH1_N_IP2	tests/devel/try.c	/^  TYPE_ADDLSH1_N_IP2, TYPE_ADDLSH2_N_IP2, TYPE_ADDLSH_N_IP2,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH2_N	tests/devel/try.c	/^  TYPE_ADDLSH1_N, TYPE_ADDLSH2_N, TYPE_ADDLSH_N,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH2_NC	tests/devel/try.c	/^  TYPE_ADDLSH1_NC, TYPE_ADDLSH2_NC, TYPE_ADDLSH_NC,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH2_N_IP1	tests/devel/try.c	/^  TYPE_ADDLSH1_N_IP1, TYPE_ADDLSH2_N_IP1, TYPE_ADDLSH_N_IP1,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH2_N_IP2	tests/devel/try.c	/^  TYPE_ADDLSH1_N_IP2, TYPE_ADDLSH2_N_IP2, TYPE_ADDLSH_N_IP2,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH_N	tests/devel/try.c	/^  TYPE_ADDLSH1_N, TYPE_ADDLSH2_N, TYPE_ADDLSH_N,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH_NC	tests/devel/try.c	/^  TYPE_ADDLSH1_NC, TYPE_ADDLSH2_NC, TYPE_ADDLSH_NC,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH_N_IP1	tests/devel/try.c	/^  TYPE_ADDLSH1_N_IP1, TYPE_ADDLSH2_N_IP1, TYPE_ADDLSH_N_IP1,$/;"	e	enum:__anon38	file:
TYPE_ADDLSH_N_IP2	tests/devel/try.c	/^  TYPE_ADDLSH1_N_IP2, TYPE_ADDLSH2_N_IP2, TYPE_ADDLSH_N_IP2,$/;"	e	enum:__anon38	file:
TYPE_ADDMUL_1	tests/devel/try.c	/^  TYPE_ADDMUL_1, TYPE_ADDMUL_1C, TYPE_SUBMUL_1, TYPE_SUBMUL_1C,$/;"	e	enum:__anon38	file:
TYPE_ADDMUL_1C	tests/devel/try.c	/^  TYPE_ADDMUL_1, TYPE_ADDMUL_1C, TYPE_SUBMUL_1, TYPE_SUBMUL_1C,$/;"	e	enum:__anon38	file:
TYPE_ADDMUL_2	tests/devel/try.c	/^  TYPE_ADDMUL_2, TYPE_ADDMUL_3, TYPE_ADDMUL_4, TYPE_ADDMUL_5, TYPE_ADDMUL_6,$/;"	e	enum:__anon38	file:
TYPE_ADDMUL_3	tests/devel/try.c	/^  TYPE_ADDMUL_2, TYPE_ADDMUL_3, TYPE_ADDMUL_4, TYPE_ADDMUL_5, TYPE_ADDMUL_6,$/;"	e	enum:__anon38	file:
TYPE_ADDMUL_4	tests/devel/try.c	/^  TYPE_ADDMUL_2, TYPE_ADDMUL_3, TYPE_ADDMUL_4, TYPE_ADDMUL_5, TYPE_ADDMUL_6,$/;"	e	enum:__anon38	file:
TYPE_ADDMUL_5	tests/devel/try.c	/^  TYPE_ADDMUL_2, TYPE_ADDMUL_3, TYPE_ADDMUL_4, TYPE_ADDMUL_5, TYPE_ADDMUL_6,$/;"	e	enum:__anon38	file:
TYPE_ADDMUL_6	tests/devel/try.c	/^  TYPE_ADDMUL_2, TYPE_ADDMUL_3, TYPE_ADDMUL_4, TYPE_ADDMUL_5, TYPE_ADDMUL_6,$/;"	e	enum:__anon38	file:
TYPE_ADDMUL_7	tests/devel/try.c	/^  TYPE_ADDMUL_7, TYPE_ADDMUL_8,$/;"	e	enum:__anon38	file:
TYPE_ADDMUL_8	tests/devel/try.c	/^  TYPE_ADDMUL_7, TYPE_ADDMUL_8,$/;"	e	enum:__anon38	file:
TYPE_ADDSUB_N	tests/devel/try.c	/^  TYPE_ADDSUB_N, TYPE_ADDSUB_NC,$/;"	e	enum:__anon38	file:
TYPE_ADDSUB_NC	tests/devel/try.c	/^  TYPE_ADDSUB_N, TYPE_ADDSUB_NC,$/;"	e	enum:__anon38	file:
TYPE_ADD_ERR1_N	tests/devel/try.c	/^  TYPE_ADD_ERR1_N, TYPE_ADD_ERR2_N, TYPE_ADD_ERR3_N,$/;"	e	enum:__anon38	file:
TYPE_ADD_ERR2_N	tests/devel/try.c	/^  TYPE_ADD_ERR1_N, TYPE_ADD_ERR2_N, TYPE_ADD_ERR3_N,$/;"	e	enum:__anon38	file:
TYPE_ADD_ERR3_N	tests/devel/try.c	/^  TYPE_ADD_ERR1_N, TYPE_ADD_ERR2_N, TYPE_ADD_ERR3_N,$/;"	e	enum:__anon38	file:
TYPE_ADD_N	tests/devel/try.c	/^  TYPE_ADD = 1, TYPE_ADD_N, TYPE_ADD_NC, TYPE_SUB, TYPE_SUB_N, TYPE_SUB_NC,$/;"	e	enum:__anon38	file:
TYPE_ADD_NC	tests/devel/try.c	/^  TYPE_ADD = 1, TYPE_ADD_N, TYPE_ADD_NC, TYPE_SUB, TYPE_SUB_N, TYPE_SUB_NC,$/;"	e	enum:__anon38	file:
TYPE_ANDN_N	tests/devel/try.c	/^  TYPE_AND_N, TYPE_NAND_N, TYPE_ANDN_N, TYPE_IOR_N, TYPE_IORN_N, TYPE_NIOR_N,$/;"	e	enum:__anon38	file:
TYPE_AND_N	tests/devel/try.c	/^  TYPE_AND_N, TYPE_NAND_N, TYPE_ANDN_N, TYPE_IOR_N, TYPE_IORN_N, TYPE_NIOR_N,$/;"	e	enum:__anon38	file:
TYPE_BDIV_Q_1	tests/devel/try.c	/^  TYPE_DIVEXACT_1, TYPE_BDIV_Q_1, TYPE_DIVEXACT_BY3, TYPE_DIVEXACT_BY3C,$/;"	e	enum:__anon38	file:
TYPE_BINVERT	tests/devel/try.c	/^  TYPE_INVERT, TYPE_BINVERT,$/;"	e	enum:__anon38	file:
TYPE_COM	tests/devel/try.c	/^  TYPE_COPY, TYPE_COPYI, TYPE_COPYD, TYPE_COM,$/;"	e	enum:__anon38	file:
TYPE_COPY	tests/devel/try.c	/^  TYPE_COPY, TYPE_COPYI, TYPE_COPYD, TYPE_COM,$/;"	e	enum:__anon38	file:
TYPE_COPYD	tests/devel/try.c	/^  TYPE_COPY, TYPE_COPYI, TYPE_COPYD, TYPE_COM,$/;"	e	enum:__anon38	file:
TYPE_COPYI	tests/devel/try.c	/^  TYPE_COPY, TYPE_COPYI, TYPE_COPYD, TYPE_COM,$/;"	e	enum:__anon38	file:
TYPE_DIVEXACT_1	tests/devel/try.c	/^  TYPE_DIVEXACT_1, TYPE_BDIV_Q_1, TYPE_DIVEXACT_BY3, TYPE_DIVEXACT_BY3C,$/;"	e	enum:__anon38	file:
TYPE_DIVEXACT_BY3	tests/devel/try.c	/^  TYPE_DIVEXACT_1, TYPE_BDIV_Q_1, TYPE_DIVEXACT_BY3, TYPE_DIVEXACT_BY3C,$/;"	e	enum:__anon38	file:
TYPE_DIVEXACT_BY3C	tests/devel/try.c	/^  TYPE_DIVEXACT_1, TYPE_BDIV_Q_1, TYPE_DIVEXACT_BY3, TYPE_DIVEXACT_BY3C,$/;"	e	enum:__anon38	file:
TYPE_DIVMOD_1	tests/devel/try.c	/^  TYPE_MOD_1, TYPE_MOD_1C, TYPE_DIVMOD_1, TYPE_DIVMOD_1C, TYPE_DIVREM_1,$/;"	e	enum:__anon38	file:
TYPE_DIVMOD_1C	tests/devel/try.c	/^  TYPE_MOD_1, TYPE_MOD_1C, TYPE_DIVMOD_1, TYPE_DIVMOD_1C, TYPE_DIVREM_1,$/;"	e	enum:__anon38	file:
TYPE_DIVREM_1	tests/devel/try.c	/^  TYPE_MOD_1, TYPE_MOD_1C, TYPE_DIVMOD_1, TYPE_DIVMOD_1C, TYPE_DIVREM_1,$/;"	e	enum:__anon38	file:
TYPE_DIVREM_1C	tests/devel/try.c	/^  TYPE_DIVREM_1C, TYPE_PREINV_DIVREM_1, TYPE_DIVREM_2, TYPE_PREINV_MOD_1,$/;"	e	enum:__anon38	file:
TYPE_DIVREM_2	tests/devel/try.c	/^  TYPE_DIVREM_1C, TYPE_PREINV_DIVREM_1, TYPE_DIVREM_2, TYPE_PREINV_MOD_1,$/;"	e	enum:__anon38	file:
TYPE_DIV_QR_1N_PI1	tests/devel/try.c	/^  TYPE_DIV_QR_1N_PI1,$/;"	e	enum:__anon38	file:
TYPE_EXTRA	tests/devel/try.c	/^  TYPE_EXTRA$/;"	e	enum:__anon38	file:
TYPE_GCD	tests/devel/try.c	/^  TYPE_GCD, TYPE_GCD_1, TYPE_GCD_FINDA, TYPE_MPZ_JACOBI, TYPE_MPZ_KRONECKER,$/;"	e	enum:__anon38	file:
TYPE_GCD_1	tests/devel/try.c	/^  TYPE_GCD, TYPE_GCD_1, TYPE_GCD_FINDA, TYPE_MPZ_JACOBI, TYPE_MPZ_KRONECKER,$/;"	e	enum:__anon38	file:
TYPE_GCD_FINDA	tests/devel/try.c	/^  TYPE_GCD, TYPE_GCD_1, TYPE_GCD_FINDA, TYPE_MPZ_JACOBI, TYPE_MPZ_KRONECKER,$/;"	e	enum:__anon38	file:
TYPE_GET_STR	tests/devel/try.c	/^  TYPE_SQRTREM, TYPE_SQRT, TYPE_ZERO, TYPE_GET_STR, TYPE_POPCOUNT, TYPE_HAMDIST,$/;"	e	enum:__anon38	file:
TYPE_HAMDIST	tests/devel/try.c	/^  TYPE_SQRTREM, TYPE_SQRT, TYPE_ZERO, TYPE_GET_STR, TYPE_POPCOUNT, TYPE_HAMDIST,$/;"	e	enum:__anon38	file:
TYPE_INVERT	tests/devel/try.c	/^  TYPE_INVERT, TYPE_BINVERT,$/;"	e	enum:__anon38	file:
TYPE_IORN_N	tests/devel/try.c	/^  TYPE_AND_N, TYPE_NAND_N, TYPE_ANDN_N, TYPE_IOR_N, TYPE_IORN_N, TYPE_NIOR_N,$/;"	e	enum:__anon38	file:
TYPE_IOR_N	tests/devel/try.c	/^  TYPE_AND_N, TYPE_NAND_N, TYPE_ANDN_N, TYPE_IOR_N, TYPE_IORN_N, TYPE_NIOR_N,$/;"	e	enum:__anon38	file:
TYPE_LSHIFT	tests/devel/try.c	/^  TYPE_RSHIFT, TYPE_LSHIFT, TYPE_LSHIFTC,$/;"	e	enum:__anon38	file:
TYPE_LSHIFTC	tests/devel/try.c	/^  TYPE_RSHIFT, TYPE_LSHIFT, TYPE_LSHIFTC,$/;"	e	enum:__anon38	file:
TYPE_MODEXACT_1C_ODD	tests/devel/try.c	/^  TYPE_MODEXACT_1_ODD, TYPE_MODEXACT_1C_ODD,$/;"	e	enum:__anon38	file:
TYPE_MODEXACT_1_ODD	tests/devel/try.c	/^  TYPE_MODEXACT_1_ODD, TYPE_MODEXACT_1C_ODD,$/;"	e	enum:__anon38	file:
TYPE_MOD_1	tests/devel/try.c	/^  TYPE_MOD_1, TYPE_MOD_1C, TYPE_DIVMOD_1, TYPE_DIVMOD_1C, TYPE_DIVREM_1,$/;"	e	enum:__anon38	file:
TYPE_MOD_1C	tests/devel/try.c	/^  TYPE_MOD_1, TYPE_MOD_1C, TYPE_DIVMOD_1, TYPE_DIVMOD_1C, TYPE_DIVREM_1,$/;"	e	enum:__anon38	file:
TYPE_MOD_34LSUB1	tests/devel/try.c	/^  TYPE_MOD_34LSUB1, TYPE_UDIV_QRNND, TYPE_UDIV_QRNND_R,$/;"	e	enum:__anon38	file:
TYPE_MPZ_JACOBI	tests/devel/try.c	/^  TYPE_GCD, TYPE_GCD_1, TYPE_GCD_FINDA, TYPE_MPZ_JACOBI, TYPE_MPZ_KRONECKER,$/;"	e	enum:__anon38	file:
TYPE_MPZ_KRONECKER	tests/devel/try.c	/^  TYPE_GCD, TYPE_GCD_1, TYPE_GCD_FINDA, TYPE_MPZ_JACOBI, TYPE_MPZ_KRONECKER,$/;"	e	enum:__anon38	file:
TYPE_MPZ_KRONECKER_SI	tests/devel/try.c	/^  TYPE_MPZ_KRONECKER_UI, TYPE_MPZ_KRONECKER_SI, TYPE_MPZ_UI_KRONECKER,$/;"	e	enum:__anon38	file:
TYPE_MPZ_KRONECKER_UI	tests/devel/try.c	/^  TYPE_MPZ_KRONECKER_UI, TYPE_MPZ_KRONECKER_SI, TYPE_MPZ_UI_KRONECKER,$/;"	e	enum:__anon38	file:
TYPE_MPZ_LEGENDRE	tests/devel/try.c	/^  TYPE_MPZ_SI_KRONECKER, TYPE_MPZ_LEGENDRE,$/;"	e	enum:__anon38	file:
TYPE_MPZ_SI_KRONECKER	tests/devel/try.c	/^  TYPE_MPZ_SI_KRONECKER, TYPE_MPZ_LEGENDRE,$/;"	e	enum:__anon38	file:
TYPE_MPZ_UI_KRONECKER	tests/devel/try.c	/^  TYPE_MPZ_KRONECKER_UI, TYPE_MPZ_KRONECKER_SI, TYPE_MPZ_UI_KRONECKER,$/;"	e	enum:__anon38	file:
TYPE_MULLO_N	tests/devel/try.c	/^  TYPE_MULLO_N, TYPE_SQRLO, TYPE_MULMID_MN, TYPE_MULMID_N,$/;"	e	enum:__anon38	file:
TYPE_MULMID_MN	tests/devel/try.c	/^  TYPE_MULLO_N, TYPE_SQRLO, TYPE_MULMID_MN, TYPE_MULMID_N,$/;"	e	enum:__anon38	file:
TYPE_MULMID_N	tests/devel/try.c	/^  TYPE_MULLO_N, TYPE_SQRLO, TYPE_MULMID_MN, TYPE_MULMID_N,$/;"	e	enum:__anon38	file:
TYPE_MUL_1	tests/devel/try.c	/^  TYPE_MUL_1, TYPE_MUL_1C,$/;"	e	enum:__anon38	file:
TYPE_MUL_1C	tests/devel/try.c	/^  TYPE_MUL_1, TYPE_MUL_1C,$/;"	e	enum:__anon38	file:
TYPE_MUL_2	tests/devel/try.c	/^  TYPE_MUL_2, TYPE_MUL_3, TYPE_MUL_4, TYPE_MUL_5, TYPE_MUL_6,$/;"	e	enum:__anon38	file:
TYPE_MUL_3	tests/devel/try.c	/^  TYPE_MUL_2, TYPE_MUL_3, TYPE_MUL_4, TYPE_MUL_5, TYPE_MUL_6,$/;"	e	enum:__anon38	file:
TYPE_MUL_4	tests/devel/try.c	/^  TYPE_MUL_2, TYPE_MUL_3, TYPE_MUL_4, TYPE_MUL_5, TYPE_MUL_6,$/;"	e	enum:__anon38	file:
TYPE_MUL_5	tests/devel/try.c	/^  TYPE_MUL_2, TYPE_MUL_3, TYPE_MUL_4, TYPE_MUL_5, TYPE_MUL_6,$/;"	e	enum:__anon38	file:
TYPE_MUL_6	tests/devel/try.c	/^  TYPE_MUL_2, TYPE_MUL_3, TYPE_MUL_4, TYPE_MUL_5, TYPE_MUL_6,$/;"	e	enum:__anon38	file:
TYPE_MUL_MN	tests/devel/try.c	/^  TYPE_MUL_MN, TYPE_MUL_N, TYPE_SQR, TYPE_UMUL_PPMM, TYPE_UMUL_PPMM_R,$/;"	e	enum:__anon38	file:
TYPE_MUL_N	tests/devel/try.c	/^  TYPE_MUL_MN, TYPE_MUL_N, TYPE_SQR, TYPE_UMUL_PPMM, TYPE_UMUL_PPMM_R,$/;"	e	enum:__anon38	file:
TYPE_NAND_N	tests/devel/try.c	/^  TYPE_AND_N, TYPE_NAND_N, TYPE_ANDN_N, TYPE_IOR_N, TYPE_IORN_N, TYPE_NIOR_N,$/;"	e	enum:__anon38	file:
TYPE_NIOR_N	tests/devel/try.c	/^  TYPE_AND_N, TYPE_NAND_N, TYPE_ANDN_N, TYPE_IOR_N, TYPE_IORN_N, TYPE_NIOR_N,$/;"	e	enum:__anon38	file:
TYPE_POPCOUNT	tests/devel/try.c	/^  TYPE_SQRTREM, TYPE_SQRT, TYPE_ZERO, TYPE_GET_STR, TYPE_POPCOUNT, TYPE_HAMDIST,$/;"	e	enum:__anon38	file:
TYPE_PREINV_DIVREM_1	tests/devel/try.c	/^  TYPE_DIVREM_1C, TYPE_PREINV_DIVREM_1, TYPE_DIVREM_2, TYPE_PREINV_MOD_1,$/;"	e	enum:__anon38	file:
TYPE_PREINV_MOD_1	tests/devel/try.c	/^  TYPE_DIVREM_1C, TYPE_PREINV_DIVREM_1, TYPE_DIVREM_2, TYPE_PREINV_MOD_1,$/;"	e	enum:__anon38	file:
TYPE_RSBLSH1_N	tests/devel/try.c	/^  TYPE_RSBLSH1_N, TYPE_RSBLSH2_N, TYPE_RSBLSH_N,$/;"	e	enum:__anon38	file:
TYPE_RSBLSH1_NC	tests/devel/try.c	/^  TYPE_RSBLSH1_NC, TYPE_RSBLSH2_NC, TYPE_RSBLSH_NC,$/;"	e	enum:__anon38	file:
TYPE_RSBLSH2_N	tests/devel/try.c	/^  TYPE_RSBLSH1_N, TYPE_RSBLSH2_N, TYPE_RSBLSH_N,$/;"	e	enum:__anon38	file:
TYPE_RSBLSH2_NC	tests/devel/try.c	/^  TYPE_RSBLSH1_NC, TYPE_RSBLSH2_NC, TYPE_RSBLSH_NC,$/;"	e	enum:__anon38	file:
TYPE_RSBLSH_N	tests/devel/try.c	/^  TYPE_RSBLSH1_N, TYPE_RSBLSH2_N, TYPE_RSBLSH_N,$/;"	e	enum:__anon38	file:
TYPE_RSBLSH_NC	tests/devel/try.c	/^  TYPE_RSBLSH1_NC, TYPE_RSBLSH2_NC, TYPE_RSBLSH_NC,$/;"	e	enum:__anon38	file:
TYPE_RSH1ADD_N	tests/devel/try.c	/^  TYPE_RSH1ADD_N, TYPE_RSH1SUB_N,$/;"	e	enum:__anon38	file:
TYPE_RSH1SUB_N	tests/devel/try.c	/^  TYPE_RSH1ADD_N, TYPE_RSH1SUB_N,$/;"	e	enum:__anon38	file:
TYPE_RSHIFT	tests/devel/try.c	/^  TYPE_RSHIFT, TYPE_LSHIFT, TYPE_LSHIFTC,$/;"	e	enum:__anon38	file:
TYPE_SBPI1_DIV_QR	tests/devel/try.c	/^  TYPE_SBPI1_DIV_QR, TYPE_TDIV_QR,$/;"	e	enum:__anon38	file:
TYPE_SQR	tests/devel/try.c	/^  TYPE_MUL_MN, TYPE_MUL_N, TYPE_SQR, TYPE_UMUL_PPMM, TYPE_UMUL_PPMM_R,$/;"	e	enum:__anon38	file:
TYPE_SQRLO	tests/devel/try.c	/^  TYPE_MULLO_N, TYPE_SQRLO, TYPE_MULMID_MN, TYPE_MULMID_N,$/;"	e	enum:__anon38	file:
TYPE_SQRT	tests/devel/try.c	/^  TYPE_SQRTREM, TYPE_SQRT, TYPE_ZERO, TYPE_GET_STR, TYPE_POPCOUNT, TYPE_HAMDIST,$/;"	e	enum:__anon38	file:
TYPE_SQRTREM	tests/devel/try.c	/^  TYPE_SQRTREM, TYPE_SQRT, TYPE_ZERO, TYPE_GET_STR, TYPE_POPCOUNT, TYPE_HAMDIST,$/;"	e	enum:__anon38	file:
TYPE_SUB	tests/devel/try.c	/^  TYPE_ADD = 1, TYPE_ADD_N, TYPE_ADD_NC, TYPE_SUB, TYPE_SUB_N, TYPE_SUB_NC,$/;"	e	enum:__anon38	file:
TYPE_SUBCND_N	tests/devel/try.c	/^  TYPE_ADDCND_N, TYPE_SUBCND_N,$/;"	e	enum:__anon38	file:
TYPE_SUBLSH1_N	tests/devel/try.c	/^  TYPE_SUBLSH1_N, TYPE_SUBLSH2_N, TYPE_SUBLSH_N,$/;"	e	enum:__anon38	file:
TYPE_SUBLSH1_NC	tests/devel/try.c	/^  TYPE_SUBLSH1_NC, TYPE_SUBLSH2_NC, TYPE_SUBLSH_NC,$/;"	e	enum:__anon38	file:
TYPE_SUBLSH1_N_IP1	tests/devel/try.c	/^  TYPE_SUBLSH1_N_IP1, TYPE_SUBLSH2_N_IP1, TYPE_SUBLSH_N_IP1,$/;"	e	enum:__anon38	file:
TYPE_SUBLSH2_N	tests/devel/try.c	/^  TYPE_SUBLSH1_N, TYPE_SUBLSH2_N, TYPE_SUBLSH_N,$/;"	e	enum:__anon38	file:
TYPE_SUBLSH2_NC	tests/devel/try.c	/^  TYPE_SUBLSH1_NC, TYPE_SUBLSH2_NC, TYPE_SUBLSH_NC,$/;"	e	enum:__anon38	file:
TYPE_SUBLSH2_N_IP1	tests/devel/try.c	/^  TYPE_SUBLSH1_N_IP1, TYPE_SUBLSH2_N_IP1, TYPE_SUBLSH_N_IP1,$/;"	e	enum:__anon38	file:
TYPE_SUBLSH_N	tests/devel/try.c	/^  TYPE_SUBLSH1_N, TYPE_SUBLSH2_N, TYPE_SUBLSH_N,$/;"	e	enum:__anon38	file:
TYPE_SUBLSH_NC	tests/devel/try.c	/^  TYPE_SUBLSH1_NC, TYPE_SUBLSH2_NC, TYPE_SUBLSH_NC,$/;"	e	enum:__anon38	file:
TYPE_SUBLSH_N_IP1	tests/devel/try.c	/^  TYPE_SUBLSH1_N_IP1, TYPE_SUBLSH2_N_IP1, TYPE_SUBLSH_N_IP1,$/;"	e	enum:__anon38	file:
TYPE_SUBMUL_1	tests/devel/try.c	/^  TYPE_ADDMUL_1, TYPE_ADDMUL_1C, TYPE_SUBMUL_1, TYPE_SUBMUL_1C,$/;"	e	enum:__anon38	file:
TYPE_SUBMUL_1C	tests/devel/try.c	/^  TYPE_ADDMUL_1, TYPE_ADDMUL_1C, TYPE_SUBMUL_1, TYPE_SUBMUL_1C,$/;"	e	enum:__anon38	file:
TYPE_SUB_ERR1_N	tests/devel/try.c	/^  TYPE_SUB_ERR1_N, TYPE_SUB_ERR2_N, TYPE_SUB_ERR3_N,$/;"	e	enum:__anon38	file:
TYPE_SUB_ERR2_N	tests/devel/try.c	/^  TYPE_SUB_ERR1_N, TYPE_SUB_ERR2_N, TYPE_SUB_ERR3_N,$/;"	e	enum:__anon38	file:
TYPE_SUB_ERR3_N	tests/devel/try.c	/^  TYPE_SUB_ERR1_N, TYPE_SUB_ERR2_N, TYPE_SUB_ERR3_N,$/;"	e	enum:__anon38	file:
TYPE_SUB_N	tests/devel/try.c	/^  TYPE_ADD = 1, TYPE_ADD_N, TYPE_ADD_NC, TYPE_SUB, TYPE_SUB_N, TYPE_SUB_NC,$/;"	e	enum:__anon38	file:
TYPE_SUB_NC	tests/devel/try.c	/^  TYPE_ADD = 1, TYPE_ADD_N, TYPE_ADD_NC, TYPE_SUB, TYPE_SUB_N, TYPE_SUB_NC,$/;"	e	enum:__anon38	file:
TYPE_TDIV_QR	tests/devel/try.c	/^  TYPE_SBPI1_DIV_QR, TYPE_TDIV_QR,$/;"	e	enum:__anon38	file:
TYPE_UDIV_QRNND	tests/devel/try.c	/^  TYPE_MOD_34LSUB1, TYPE_UDIV_QRNND, TYPE_UDIV_QRNND_R,$/;"	e	enum:__anon38	file:
TYPE_UDIV_QRNND_R	tests/devel/try.c	/^  TYPE_MOD_34LSUB1, TYPE_UDIV_QRNND, TYPE_UDIV_QRNND_R,$/;"	e	enum:__anon38	file:
TYPE_UMUL_PPMM	tests/devel/try.c	/^  TYPE_MUL_MN, TYPE_MUL_N, TYPE_SQR, TYPE_UMUL_PPMM, TYPE_UMUL_PPMM_R,$/;"	e	enum:__anon38	file:
TYPE_UMUL_PPMM_R	tests/devel/try.c	/^  TYPE_MUL_MN, TYPE_MUL_N, TYPE_SQR, TYPE_UMUL_PPMM, TYPE_UMUL_PPMM_R,$/;"	e	enum:__anon38	file:
TYPE_XNOR_N	tests/devel/try.c	/^  TYPE_XOR_N, TYPE_XNOR_N,$/;"	e	enum:__anon38	file:
TYPE_XOR_N	tests/devel/try.c	/^  TYPE_XOR_N, TYPE_XNOR_N,$/;"	e	enum:__anon38	file:
TYPE_ZERO	tests/devel/try.c	/^  TYPE_SQRTREM, TYPE_SQRT, TYPE_ZERO, TYPE_GET_STR, TYPE_POPCOUNT, TYPE_HAMDIST,$/;"	e	enum:__anon38	file:
T_RAND_COUNT	tests/devel/try.c	2256;"	d	file:
T_RAND_ITERATION	tests/devel/try.c	2300;"	d	file:
U2	mpf/sqrt_ui.c	68;"	d	file:
UDIV_NEEDS_NORMALIZATION	longlong.h	2122;"	d
UDIV_NEEDS_NORMALIZATION	longlong.h	2202;"	d
UDIV_NEEDS_NORMALIZATION	longlong.h	224;"	d
UDIV_NEEDS_NORMALIZATION	longlong.h	287;"	d
UDIV_NEEDS_NORMALIZATION	longlong.h	373;"	d
UDIV_NEEDS_NORMALIZATION	longlong.h	531;"	d
UDIV_PREINV_ALWAYS	longlong.h	2208;"	d
UDIV_PREINV_ALWAYS	longlong.h	223;"	d
UDIV_PREINV_ALWAYS	longlong.h	286;"	d
UDIV_PREINV_ALWAYS	longlong.h	372;"	d
UDIV_PREINV_ALWAYS	longlong.h	530;"	d
UDIV_PREINV_ALWAYS	tune/tuneup.c	264;"	d	file:
UDIV_TIME	longlong.h	1004;"	d
UDIV_TIME	longlong.h	1127;"	d
UDIV_TIME	longlong.h	1162;"	d
UDIV_TIME	longlong.h	1216;"	d
UDIV_TIME	longlong.h	1219;"	d
UDIV_TIME	longlong.h	1242;"	d
UDIV_TIME	longlong.h	1268;"	d
UDIV_TIME	longlong.h	1389;"	d
UDIV_TIME	longlong.h	1397;"	d
UDIV_TIME	longlong.h	1512;"	d
UDIV_TIME	longlong.h	1574;"	d
UDIV_TIME	longlong.h	1644;"	d
UDIV_TIME	longlong.h	1656;"	d
UDIV_TIME	longlong.h	1708;"	d
UDIV_TIME	longlong.h	1773;"	d
UDIV_TIME	longlong.h	2217;"	d
UDIV_TIME	longlong.h	225;"	d
UDIV_TIME	longlong.h	288;"	d
UDIV_TIME	longlong.h	375;"	d
UDIV_TIME	longlong.h	516;"	d
UDIV_TIME	longlong.h	532;"	d
UDIV_TIME	longlong.h	654;"	d
UDIV_TIME	longlong.h	657;"	d
UDItype	gmp-impl.h	/^typedef unsigned int UDItype	__attribute__ ((mode (DI)));$/;"	t
UDItype	gmp-impl.h	/^typedef unsigned long int UDItype;$/;"	t
UDItype	gmp-impl.h	/^typedef unsigned long long int UDItype;$/;"	t
UHWtype	gmp-impl.h	/^typedef unsigned int UHWtype;$/;"	t
UINT_HIGHBIT	gmp-impl.h	571;"	d
ULONG_HIGHBIT	gmp-impl.h	570;"	d
ULONG_PARITY	gmp-impl.h	3335;"	d
ULONG_PARITY	gmp-impl.h	3345;"	d
ULONG_PARITY	gmp-impl.h	3355;"	d
ULONG_PARITY	gmp-impl.h	3373;"	d
ULONG_PARITY	gmp-impl.h	3387;"	d
UMINUS	demos/calc/calc.c	/^     UMINUS = 285$/;"	e	enum:yytokentype	file:
UMINUS	demos/calc/calc.c	302;"	d	file:
UMINUS	demos/calc/calc.h	/^     UMINUS = 285$/;"	e	enum:yytokentype
UMINUS	demos/calc/calc.h	107;"	d
UMUL_TIME	longlong.h	1001;"	d
UMUL_TIME	longlong.h	1122;"	d
UMUL_TIME	longlong.h	1161;"	d
UMUL_TIME	longlong.h	1215;"	d
UMUL_TIME	longlong.h	1218;"	d
UMUL_TIME	longlong.h	1241;"	d
UMUL_TIME	longlong.h	1267;"	d
UMUL_TIME	longlong.h	1381;"	d
UMUL_TIME	longlong.h	1391;"	d
UMUL_TIME	longlong.h	1504;"	d
UMUL_TIME	longlong.h	1573;"	d
UMUL_TIME	longlong.h	1593;"	d
UMUL_TIME	longlong.h	1641;"	d
UMUL_TIME	longlong.h	1665;"	d
UMUL_TIME	longlong.h	1762;"	d
UMUL_TIME	longlong.h	207;"	d
UMUL_TIME	longlong.h	2213;"	d
UMUL_TIME	longlong.h	332;"	d
UMUL_TIME	longlong.h	508;"	d
UMUL_TIME	longlong.h	521;"	d
UMUL_TIME	longlong.h	653;"	d
UMUL_TIME	longlong.h	656;"	d
UNIT_CYCLES	tune/speed.c	109;"	d	file:
UNIT_CYCLESPERLIMB	tune/speed.c	110;"	d	file:
UNIT_SECONDS	tune/speed.c	108;"	d	file:
UNLIKELY	gmp-impl.h	531;"	d
UQItype	gmp-impl.h	/^typedef unsigned char UQItype;$/;"	t
UQItype	gmp-impl.h	/^typedef unsigned int UQItype	__attribute__ ((mode (QI)));$/;"	t
USE_DIVAPPR_Q	mpn/generic/sqrtrem.c	50;"	d	file:
USE_DIVAPPR_Q	mpn/sqrtrem.c	50;"	d	file:
USE_LEADING_REGPARM	gmp-impl.h	755;"	d
USE_LEADING_REGPARM	gmp-impl.h	757;"	d
USE_PREINV_DIVREM_1	gmp-impl.h	3166;"	d
USE_PREINV_DIVREM_1	gmp-impl.h	611;"	d
USE_PREINV_DIVREM_1	gmp-impl.h	618;"	d
USE_PREINV_DIVREM_1	mpn/alpha/ev5/gmp-mparam.h	49;"	d
USE_PREINV_DIVREM_1	mpn/alpha/ev6/gmp-mparam.h	51;"	d
USE_PREINV_DIVREM_1	mpn/alpha/ev6/nails/gmp-mparam.h	56;"	d
USE_PREINV_DIVREM_1	mpn/alpha/gmp-mparam.h	70;"	d
USE_PREINV_DIVREM_1	mpn/arm/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/arm/v6/gmp-mparam.h	48;"	d
USE_PREINV_DIVREM_1	mpn/arm/v7a/cora15/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/arm/v7a/cora7/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/arm/v7a/cora8/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/arm/v7a/cora9/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/arm64/gmp-mparam.h	48;"	d
USE_PREINV_DIVREM_1	mpn/cray/gmp-mparam.h	63;"	d
USE_PREINV_DIVREM_1	mpn/cray/ieee/gmp-mparam.h	57;"	d
USE_PREINV_DIVREM_1	mpn/ia64/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/m68k/gmp-mparam.h	60;"	d
USE_PREINV_DIVREM_1	mpn/minithres/gmp-mparam.h	42;"	d
USE_PREINV_DIVREM_1	mpn/mips32/gmp-mparam.h	56;"	d
USE_PREINV_DIVREM_1	mpn/mips64/gmp-mparam.h	56;"	d
USE_PREINV_DIVREM_1	mpn/pa32/hppa1_1/gmp-mparam.h	56;"	d
USE_PREINV_DIVREM_1	mpn/pa32/hppa2_0/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/pa64/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/power/gmp-mparam.h	53;"	d
USE_PREINV_DIVREM_1	mpn/powerpc32/750/gmp-mparam.h	49;"	d
USE_PREINV_DIVREM_1	mpn/powerpc32/gmp-mparam.h	58;"	d
USE_PREINV_DIVREM_1	mpn/powerpc32/p3/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/powerpc32/p4/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/powerpc32/p5/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/powerpc32/p6/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/powerpc32/p7/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/powerpc64/mode32/p4/gmp-mparam.h	43;"	d
USE_PREINV_DIVREM_1	mpn/powerpc64/mode64/gmp-mparam.h	66;"	d
USE_PREINV_DIVREM_1	mpn/powerpc64/mode64/p3/gmp-mparam.h	42;"	d
USE_PREINV_DIVREM_1	mpn/powerpc64/mode64/p4/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/powerpc64/mode64/p5/gmp-mparam.h	44;"	d
USE_PREINV_DIVREM_1	mpn/powerpc64/mode64/p6/gmp-mparam.h	43;"	d
USE_PREINV_DIVREM_1	mpn/powerpc64/mode64/p7/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/s390_32/esame/gmp-mparam.h	48;"	d
USE_PREINV_DIVREM_1	mpn/s390_32/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/s390_64/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/s390_64/z10/gmp-mparam.h	49;"	d
USE_PREINV_DIVREM_1	mpn/sparc32/gmp-mparam.h	51;"	d
USE_PREINV_DIVREM_1	mpn/sparc32/ultrasparct1/gmp-mparam.h	41;"	d
USE_PREINV_DIVREM_1	mpn/sparc32/v8/gmp-mparam.h	57;"	d
USE_PREINV_DIVREM_1	mpn/sparc32/v8/supersparc/gmp-mparam.h	57;"	d
USE_PREINV_DIVREM_1	mpn/sparc32/v9/gmp-mparam.h	49;"	d
USE_PREINV_DIVREM_1	mpn/sparc64/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/sparc64/ultrasparc34/gmp-mparam.h	49;"	d
USE_PREINV_DIVREM_1	mpn/sparc64/ultrasparct1/gmp-mparam.h	47;"	d
USE_PREINV_DIVREM_1	mpn/x86/atom/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/bd1/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/x86/bd2/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/bobcat/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/core2/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/coreihwl/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/coreinhm/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/coreisbr/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/fat/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/geode/gmp-mparam.h	43;"	d
USE_PREINV_DIVREM_1	mpn/x86/i486/gmp-mparam.h	53;"	d
USE_PREINV_DIVREM_1	mpn/x86/k10/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/k6/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/k7/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/x86/k8/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86/nano/gmp-mparam.h	44;"	d
USE_PREINV_DIVREM_1	mpn/x86/p6/gmp-mparam.h	51;"	d
USE_PREINV_DIVREM_1	mpn/x86/p6/mmx/gmp-mparam.h	51;"	d
USE_PREINV_DIVREM_1	mpn/x86/p6/sse2/gmp-mparam.h	50;"	d
USE_PREINV_DIVREM_1	mpn/x86/pentium/gmp-mparam.h	60;"	d
USE_PREINV_DIVREM_1	mpn/x86/pentium/mmx/gmp-mparam.h	50;"	d
USE_PREINV_DIVREM_1	mpn/x86/pentium4/sse2/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/atom/gmp-mparam.h	49;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/bd1/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/bd2/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/bobcat/gmp-mparam.h	50;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/core2/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/coreibwl/gmp-mparam.h	49;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/coreihwl/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/coreinhm/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/coreisbr/gmp-mparam.h	45;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/fat/gmp-mparam.h	46;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/gmp-mparam.h	42;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/k10/gmp-mparam.h	53;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/k8/gmp-mparam.h	50;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/nano/gmp-mparam.h	49;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/pentium4/gmp-mparam.h	52;"	d
USE_PREINV_DIVREM_1	mpn/x86_64/skylake/gmp-mparam.h	49;"	d
USE_PREINV_DIVREM_1	tune/pre_divrem_1.c	36;"	d	file:
USE_PREINV_DIVREM_1	tune/pre_divrem_1.c	37;"	d	file:
USE_PREINV_MOD_1	mpn/alpha/ev6/nails/gmp-mparam.h	57;"	d
USE_PREINV_MOD_1	mpn/alpha/gmp-mparam.h	71;"	d
USE_PREINV_MOD_1	mpn/cray/gmp-mparam.h	64;"	d
USE_PREINV_MOD_1	mpn/cray/ieee/gmp-mparam.h	58;"	d
USE_PREINV_MOD_1	mpn/m68k/gmp-mparam.h	61;"	d
USE_PREINV_MOD_1	mpn/mips32/gmp-mparam.h	57;"	d
USE_PREINV_MOD_1	mpn/mips64/gmp-mparam.h	57;"	d
USE_PREINV_MOD_1	mpn/pa32/hppa1_1/gmp-mparam.h	57;"	d
USE_PREINV_MOD_1	mpn/power/gmp-mparam.h	54;"	d
USE_PREINV_MOD_1	mpn/powerpc64/mode64/gmp-mparam.h	67;"	d
USE_PREINV_MOD_1	mpn/sparc32/gmp-mparam.h	52;"	d
USE_PREINV_MOD_1	mpn/sparc32/v8/gmp-mparam.h	58;"	d
USE_PREINV_MOD_1	mpn/sparc32/v8/supersparc/gmp-mparam.h	58;"	d
USE_PREINV_MOD_1	mpn/x86/i486/gmp-mparam.h	54;"	d
USE_PREINV_MOD_1	mpn/x86/pentium/gmp-mparam.h	61;"	d
USE_ZEROTAB	mpn/gcd_1.c	39;"	d	file:
USE_ZEROTAB	mpn/gcdext_1.c	44;"	d	file:
USE_ZEROTAB	mpn/generic/gcd_1.c	39;"	d	file:
USE_ZEROTAB	mpn/generic/gcdext_1.c	44;"	d	file:
USHRT_HIGHBIT	gmp-impl.h	572;"	d
USItype	gmp-impl.h	/^typedef unsigned int USItype	__attribute__ ((mode (SI)));$/;"	t
USItype	gmp-impl.h	/^typedef unsigned long USItype;$/;"	t
UWtype	gmp-impl.h	/^typedef mp_limb_t UWtype;$/;"	t
VAL	tests/amd64check.c	49;"	d	file:
VAL	tests/x86check.c	48;"	d	file:
VALIDATE	tests/devel/try.c	740;"	d	file:
VALUE_EBP	tests/x86check.c	70;"	d	file:
VALUE_EBX	tests/x86check.c	67;"	d	file:
VALUE_EDI	tests/x86check.c	69;"	d	file:
VALUE_ESI	tests/x86check.c	68;"	d	file:
VARIABLE	demos/calc/calc.c	/^     VARIABLE = 276,$/;"	e	enum:yytokentype	file:
VARIABLE	demos/calc/calc.c	293;"	d	file:
VARIABLE	demos/calc/calc.h	/^     VARIABLE = 276,$/;"	e	enum:yytokentype
VARIABLE	demos/calc/calc.h	98;"	d
VARIATION	mpz/aors.h	38;"	d
VARIATION	mpz/aors.h	42;"	d
VARIATION_CMP	mpz/aors_ui.h	40;"	d
VARIATION_CMP	mpz/aors_ui.h	48;"	d
VARIATION_NEG	mpz/aors_ui.h	41;"	d
VARIATION_NEG	mpz/aors_ui.h	49;"	d
VARIATION_UNNEG	mpz/aors_ui.h	42;"	d
VARIATION_UNNEG	mpz/aors_ui.h	50;"	d
VERIFY	tests/mpn/t-aors_1.c	44;"	d	file:
VERSION	config.h	570;"	d
W	tests/mpf/t-sub.c	110;"	d	file:
WANT	tests/amd64check.c	45;"	d	file:
WANT	tests/x86check.c	44;"	d	file:
WANT_ASSERT	tests/devel/try.c	108;"	d	file:
WANT_ASSERT	tests/refmpn.c	29;"	d	file:
WANT_ASSERT	tests/refmpz.c	21;"	d	file:
WANT_CALLEE_SAVES	tests/arm32check.c	64;"	d	file:
WANT_FFT	config.h	582;"	d
WANT_GCDEXT_ONE_STEP	tune/gcdextod.c	37;"	d	file:
WANT_GCDEXT_ONE_STEP	tune/gcdextos.c	37;"	d	file:
WANT_REDC_2	mpn/generic/powm.c	107;"	d	file:
WANT_REDC_2	mpn/generic/sec_powm.c	80;"	d	file:
WANT_REDC_2	mpn/powm.c	107;"	d	file:
WANT_REDC_2	mpn/sec_powm.c	80;"	d	file:
WANT_REDC_2	tune/tuneup.c	1783;"	d	file:
WANT_REDC_GLOBAL	tune/powm_redc.c	38;"	d	file:
WANT_TMP_ALLOCA	config.h	599;"	d
WANT_TMP_DEBUG	gmp-impl.h	169;"	d
WANT_dtab	mpn/generic/trialdiv.c	75;"	d	file:
WANT_dtab	mpn/generic/trialdiv.c	78;"	d	file:
WANT_dtab	mpn/trialdiv.c	75;"	d	file:
WANT_dtab	mpn/trialdiv.c	78;"	d	file:
WANT_ptab	mpn/generic/trialdiv.c	85;"	d	file:
WANT_ptab	mpn/generic/trialdiv.c	87;"	d	file:
WANT_ptab	mpn/trialdiv.c	85;"	d	file:
WANT_ptab	mpn/trialdiv.c	87;"	d	file:
WARM_UP	rand/randmt.h	33;"	d
WHACK_SCHOENHAGE	tests/mpz/t-gcd.c	42;"	d	file:
WHOLEWORD	demos/expr/expr.c	140;"	d	file:
WORDS_BIGENDIAN	config.h	608;"	d
WRONG	tests/cxx/t-istream.cc	71;"	d	file:
W_TYPE_SIZE	gmp-impl.h	3721;"	d
X	gmpxx.h	/^    typedef typename __gmp_resolve_expr<T, V>::value_type X;$/;"	t	struct:std::common_type
X	mp_dv_tab.c	46;"	d	file:
XOR	demos/pexpr.c	/^	   AND, IOR, XOR, SLL, SRA, POPCNT, HAMDIST, GCD, LCM, SQRT, ROOT, FAC,$/;"	e	enum:op_t	file:
YYABORT	demos/calc/calc.c	924;"	d	file:
YYACCEPT	demos/calc/calc.c	923;"	d	file:
YYBACKUP	demos/calc/calc.c	945;"	d	file:
YYBISON	demos/calc/calc.c	44;"	d	file:
YYBISON_VERSION	demos/calc/calc.c	47;"	d	file:
YYCASE_	demos/calc/calc.c	1349;"	d	file:
YYCASE_	demos/calc/calc.c	1359;"	d	file:
YYCOPY	demos/calc/calc.c	556;"	d	file:
YYCOPY	demos/calc/calc.c	559;"	d	file:
YYCOPY_NEEDED	demos/calc/calc.c	531;"	d	file:
YYDEBUG	demos/calc/calc.c	232;"	d	file:
YYDEBUG	demos/calc/calc.h	37;"	d
YYDPRINTF	demos/calc/calc.c	1135;"	d	file:
YYDPRINTF	demos/calc/calc.c	988;"	d	file:
YYEMPTY	demos/calc/calc.c	920;"	d	file:
YYEOF	demos/calc/calc.c	921;"	d	file:
YYERRCODE	demos/calc/calc.c	964;"	d	file:
YYERROR	demos/calc/calc.c	925;"	d	file:
YYERROR_VERBOSE	demos/calc/calc.c	220;"	d	file:
YYERROR_VERBOSE	demos/calc/calc.c	221;"	d	file:
YYERROR_VERBOSE	demos/calc/calc.c	223;"	d	file:
YYFAIL	demos/calc/calc.c	935;"	d	file:
YYFINAL	demos/calc/calc.c	572;"	d	file:
YYFPRINTF	demos/calc/calc.c	985;"	d	file:
YYFREE	demos/calc/calc.c	501;"	d	file:
YYID	demos/calc/calc.c	/^YYID (int yyi)$/;"	f	file:
YYID	demos/calc/calc.c	424;"	d	file:
YYINITDEPTH	demos/calc/calc.c	1144;"	d	file:
YYLAST	demos/calc/calc.c	574;"	d	file:
YYLEX	demos/calc/calc.c	975;"	d	file:
YYLEX	demos/calc/calc.c	977;"	d	file:
YYMALLOC	demos/calc/calc.c	494;"	d	file:
YYMAXDEPTH	demos/calc/calc.c	1155;"	d	file:
YYMAXUTOK	demos/calc/calc.c	587;"	d	file:
YYNNTS	demos/calc/calc.c	579;"	d	file:
YYNRULES	demos/calc/calc.c	581;"	d	file:
YYNSTATES	demos/calc/calc.c	583;"	d	file:
YYNTOKENS	demos/calc/calc.c	577;"	d	file:
YYPACT_NINF	demos/calc/calc.c	747;"	d	file:
YYPOPSTACK	demos/calc/calc.c	1512;"	d	file:
YYPULL	demos/calc/calc.c	59;"	d	file:
YYPURE	demos/calc/calc.c	53;"	d	file:
YYPUSH	demos/calc/calc.c	56;"	d	file:
YYRECOVERING	demos/calc/calc.c	943;"	d	file:
YYSIZE_MAXIMUM	demos/calc/calc.c	392;"	d	file:
YYSIZE_T	demos/calc/calc.c	380;"	d	file:
YYSIZE_T	demos/calc/calc.c	382;"	d	file:
YYSIZE_T	demos/calc/calc.c	386;"	d	file:
YYSIZE_T	demos/calc/calc.c	388;"	d	file:
YYSKELETON_NAME	demos/calc/calc.c	50;"	d	file:
YYSTACK_ALLOC	demos/calc/calc.c	447;"	d	file:
YYSTACK_ALLOC	demos/calc/calc.c	451;"	d	file:
YYSTACK_ALLOC	demos/calc/calc.c	456;"	d	file:
YYSTACK_ALLOC	demos/calc/calc.c	480;"	d	file:
YYSTACK_ALLOC_MAXIMUM	demos/calc/calc.c	477;"	d	file:
YYSTACK_ALLOC_MAXIMUM	demos/calc/calc.c	483;"	d	file:
YYSTACK_BYTES	demos/calc/calc.c	527;"	d	file:
YYSTACK_FREE	demos/calc/calc.c	471;"	d	file:
YYSTACK_FREE	demos/calc/calc.c	481;"	d	file:
YYSTACK_GAP_MAXIMUM	demos/calc/calc.c	523;"	d	file:
YYSTACK_RELOCATE	demos/calc/calc.c	538;"	d	file:
YYSTATE	demos/calc/calclex.c	94;"	d	file:
YYSTYPE	demos/calc/calc.c	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	demos/calc/calc.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	demos/calc/calc.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	demos/calc/calc.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE_IS_DECLARED	demos/calc/calc.c	321;"	d	file:
YYSTYPE_IS_DECLARED	demos/calc/calc.h	126;"	d
YYSTYPE_IS_TRIVIAL	demos/calc/calc.c	319;"	d	file:
YYSTYPE_IS_TRIVIAL	demos/calc/calc.h	124;"	d
YYTABLE_NINF	demos/calc/calc.c	773;"	d	file:
YYTERROR	demos/calc/calc.c	963;"	d	file:
YYTOKENTYPE	demos/calc/calc.c	240;"	d	file:
YYTOKENTYPE	demos/calc/calc.h	45;"	d
YYTRANSLATE	demos/calc/calc.c	589;"	d	file:
YYUNDEFTOK	demos/calc/calc.c	586;"	d	file:
YYUSE	demos/calc/calc.c	416;"	d	file:
YYUSE	demos/calc/calc.c	418;"	d	file:
YY_	demos/calc/calc.c	398;"	d	file:
YY_	demos/calc/calc.c	402;"	d	file:
YY_AT_BOL	demos/calc/calclex.c	270;"	d	file:
YY_BREAK	demos/calc/calclex.c	586;"	d	file:
YY_BUFFER_EOF_PENDING	demos/calc/calclex.c	206;"	d	file:
YY_BUFFER_NEW	demos/calc/calclex.c	194;"	d	file:
YY_BUFFER_NORMAL	demos/calc/calclex.c	195;"	d	file:
YY_BUFFER_STATE	demos/calc/calclex.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	demos/calc/calclex.c	105;"	d	file:
YY_CHAR	demos/calc/calclex.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	demos/calc/calclex.c	215;"	d	file:
YY_DECL	demos/calc/calclex.c	574;"	d	file:
YY_DO_BEFORE_ACTION	demos/calc/calclex.c	286;"	d	file:
YY_END_OF_BUFFER	demos/calc/calclex.c	294;"	d	file:
YY_END_OF_BUFFER_CHAR	demos/calc/calclex.c	102;"	d	file:
YY_EXIT_FAILURE	demos/calc/calclex.c	1596;"	d	file:
YY_FATAL_ERROR	demos/calc/calclex.c	567;"	d	file:
YY_FLEX_MAJOR_VERSION	demos/calc/calclex.c	16;"	d	file:
YY_FLEX_MINOR_VERSION	demos/calc/calclex.c	17;"	d	file:
YY_FLUSH_BUFFER	demos/calc/calclex.c	244;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	demos/calc/calc.c	1434;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	demos/calc/calc.c	1435;"	d	file:
YY_INITIAL_VALUE	demos/calc/calc.c	1438;"	d	file:
YY_INPUT	demos/calc/calclex.c	419;"	d	file:
YY_INPUT	demos/calc/calclex.c	534;"	d	file:
YY_LOCATION_PRINT	demos/calc/calc.c	969;"	d	file:
YY_MORE_ADJ	demos/calc/calclex.c	389;"	d	file:
YY_NEW_FILE	demos/calc/calclex.c	100;"	d	file:
YY_NO_POP_STATE	demos/calc/calclex.c	497;"	d	file:
YY_NO_PUSH_STATE	demos/calc/calclex.c	496;"	d	file:
YY_NO_TOP_STATE	demos/calc/calclex.c	498;"	d	file:
YY_NULL	demos/calc/calc.c	212;"	d	file:
YY_NULL	demos/calc/calc.c	214;"	d	file:
YY_NULL	demos/calc/calclex.c	74;"	d	file:
YY_NUM_RULES	demos/calc/calclex.c	293;"	d	file:
YY_PROTO	demos/calc/calclex.c	68;"	d	file:
YY_PROTO	demos/calc/calclex.c	70;"	d	file:
YY_READ_BUF_SIZE	demos/calc/calclex.c	518;"	d	file:
YY_REDUCE_PRINT	demos/calc/calc.c	1125;"	d	file:
YY_REDUCE_PRINT	demos/calc/calc.c	1138;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	demos/calc/calclex.c	390;"	d	file:
YY_RULE_SETUP	demos/calc/calclex.c	589;"	d	file:
YY_SC_TO_UI	demos/calc/calclex.c	81;"	d	file:
YY_STACK_PRINT	demos/calc/calc.c	1087;"	d	file:
YY_STACK_PRINT	demos/calc/calc.c	1137;"	d	file:
YY_START	demos/calc/calclex.c	93;"	d	file:
YY_START_STACK_INCR	demos/calc/calclex.c	562;"	d	file:
YY_STATE_EOF	demos/calc/calclex.c	97;"	d	file:
YY_SYMBOL_PRINT	demos/calc/calc.c	1136;"	d	file:
YY_SYMBOL_PRINT	demos/calc/calc.c	994;"	d	file:
YY_USER_ACTION	demos/calc/calclex.c	581;"	d	file:
YY_USE_CONST	demos/calc/calclex.c	39;"	d	file:
YY_USE_CONST	demos/calc/calclex.c	46;"	d	file:
YY_USE_CONST	demos/calc/calclex.c	56;"	d	file:
YY_USE_PROTOS	demos/calc/calclex.c	36;"	d	file:
YY_USE_PROTOS	demos/calc/calclex.c	45;"	d	file:
YY_USE_PROTOS	demos/calc/calclex.c	57;"	d	file:
YY_YY_CALC_H_INCLUDED	demos/calc/calc.c	229;"	d	file:
YY_YY_CALC_H_INCLUDED	demos/calc/calc.h	34;"	d
Zdisp	mpn/x86/t-zdisp.sh	/^	Zdisp()$/;"	f
_2D3	tests/rand/statlib.c	192;"	d	file:
_GMP_H_HAVE_FILE	gmp.h	268;"	d
_GMP_H_HAVE_OBSTACK	gmp.h	276;"	d
_GMP_H_HAVE_VA_LIST	gmp.h	289;"	d
_GMP_IEEE_FLOATS	extract-dbl.c	35;"	d	file:
_GMP_IEEE_FLOATS	extract-dbl.c	39;"	d	file:
_GMP_IEEE_FLOATS	gmp-impl.h	3736;"	d
_GMP_IEEE_FLOATS	gmp-impl.h	3751;"	d
_GMP_IEEE_FLOATS	gmp-impl.h	3766;"	d
_GMP_IEEE_FLOATS	mpn/generic/get_d.c	40;"	d	file:
_GMP_IEEE_FLOATS	mpn/get_d.c	40;"	d	file:
_GMP_IEEE_FLOATS	tests/mpn/t-get_d.c	33;"	d	file:
_GNU_SOURCE	mpf/out_str.c	33;"	d	file:
_GNU_SOURCE	mpf/set_str.c	41;"	d	file:
_GNU_SOURCE	printf/doprnt.c	35;"	d	file:
_GNU_SOURCE	printf/obprntffuns.c	40;"	d	file:
_GNU_SOURCE	printf/repl-vsnprintf.c	41;"	d	file:
_GNU_SOURCE	scanf/doscan.c	35;"	d	file:
_GNU_SOURCE	tests/misc/t-locale.c	20;"	d	file:
_Restrict	config.h	636;"	d
_SC_PAGESIZE	tests/devel/try.c	174;"	d	file:
__AND_CLOBBER_CC	longlong.h	385;"	d
__AND_CLOBBER_CC	longlong.h	388;"	d
__BITS4	longlong.h	56;"	d
__CLOBBER_CC	longlong.h	384;"	d
__CLOBBER_CC	longlong.h	387;"	d
__EXPR_H__	demos/expr/expr.h	33;"	d
__GMPF_BITS_TO_PREC	gmp-impl.h	4317;"	d
__GMPF_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2999;"	d
__GMPF_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3419;"	d
__GMPF_DEFINE_COMPOUND_OPERATOR_UI	gmpxx.h	3019;"	d
__GMPF_DEFINE_COMPOUND_OPERATOR_UI	gmpxx.h	3424;"	d
__GMPF_DEFINE_INCREMENT_OPERATOR	gmpxx.h	3045;"	d
__GMPF_DEFINE_INCREMENT_OPERATOR	gmpxx.h	3429;"	d
__GMPF_PREC_TO_BITS	gmp-impl.h	4319;"	d
__GMPND_DEFINE_BINARY_FUNCTION	gmpxx.h	2844;"	d
__GMPND_DEFINE_BINARY_FUNCTION	gmpxx.h	3391;"	d
__GMPND_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	2916;"	d
__GMPND_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	3402;"	d
__GMPND_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2970;"	d
__GMPND_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3413;"	d
__GMPNLD_DEFINE_BINARY_FUNCTION	gmpxx.h	2847;"	d
__GMPNLD_DEFINE_BINARY_FUNCTION	gmpxx.h	3392;"	d
__GMPNLD_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	2919;"	d
__GMPNLD_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	3403;"	d
__GMPNLD_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2973;"	d
__GMPNLD_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3414;"	d
__GMPNN_DEFINE_BINARY_FUNCTION	gmpxx.h	2818;"	d
__GMPNN_DEFINE_BINARY_FUNCTION	gmpxx.h	3388;"	d
__GMPNN_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	2891;"	d
__GMPNN_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	3399;"	d
__GMPNN_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2952;"	d
__GMPNN_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3410;"	d
__GMPNS_DEFINE_BINARY_FUNCTION	gmpxx.h	2838;"	d
__GMPNS_DEFINE_BINARY_FUNCTION	gmpxx.h	3389;"	d
__GMPNS_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	2908;"	d
__GMPNS_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	3400;"	d
__GMPNS_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2962;"	d
__GMPNS_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3411;"	d
__GMPNU_DEFINE_BINARY_FUNCTION	gmpxx.h	2841;"	d
__GMPNU_DEFINE_BINARY_FUNCTION	gmpxx.h	3390;"	d
__GMPNU_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	2912;"	d
__GMPNU_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	3401;"	d
__GMPNU_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2966;"	d
__GMPNU_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3412;"	d
__GMPN_ADD	gmp.h	1947;"	d
__GMPN_ADDCB	gmp.h	2057;"	d
__GMPN_ADD_1	gmp.h	2060;"	d
__GMPN_AORS	gmp.h	1913;"	d
__GMPN_AORS_1	gmp.h	1980;"	d
__GMPN_AORS_1	gmp.h	2019;"	d
__GMPN_CMP	gmp.h	2069;"	d
__GMPN_COPY	gmp.h	2123;"	d
__GMPN_COPY_INCR_fun	tests/devel/try.c	/^__GMPN_COPY_INCR_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
__GMPN_COPY_REST	gmp.h	2093;"	d
__GMPN_COPY_REST	gmp.h	2105;"	d
__GMPN_COPY_fun	tests/devel/try.c	/^__GMPN_COPY_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
__GMPN_DECLARE_COMPOUND_OPERATOR	gmpxx.h	1378;"	d
__GMPN_DECLARE_COMPOUND_OPERATOR	gmpxx.h	3375;"	d
__GMPN_DEFINE_BINARY_FUNCTION	gmpxx.h	2850;"	d
__GMPN_DEFINE_BINARY_FUNCTION	gmpxx.h	3393;"	d
__GMPN_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	2922;"	d
__GMPN_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	3404;"	d
__GMPN_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2976;"	d
__GMPN_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3415;"	d
__GMPN_SUB	gmp.h	1950;"	d
__GMPN_SUBCB	gmp.h	2058;"	d
__GMPN_SUB_1	gmp.h	2062;"	d
__GMPP_DECLARE_COMPOUND_OPERATOR	gmpxx.h	1374;"	d
__GMPP_DECLARE_COMPOUND_OPERATOR	gmpxx.h	3374;"	d
__GMPP_DEFINE_BINARY_FUNCTION	gmpxx.h	2806;"	d
__GMPP_DEFINE_BINARY_FUNCTION	gmpxx.h	3387;"	d
__GMPP_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	2880;"	d
__GMPP_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	3398;"	d
__GMPP_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2942;"	d
__GMPP_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3409;"	d
__GMPQ_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2996;"	d
__GMPQ_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3418;"	d
__GMPQ_DEFINE_COMPOUND_OPERATOR_UI	gmpxx.h	3016;"	d
__GMPQ_DEFINE_COMPOUND_OPERATOR_UI	gmpxx.h	3423;"	d
__GMPQ_DEFINE_INCREMENT_OPERATOR	gmpxx.h	3042;"	d
__GMPQ_DEFINE_INCREMENT_OPERATOR	gmpxx.h	3428;"	d
__GMPQ_DEN_DBL_LIMBS	gmpxx.h	81;"	d
__GMPQ_NUM_DBL_LIMBS	gmpxx.h	80;"	d
__GMPSTAT_H__	tests/rand/gmpstat.h	24;"	d
__GMPXX_BITS_TO_LIMBS	gmpxx.h	78;"	d
__GMPXX_CONSTANT	gmpxx.h	3432;"	d
__GMPXX_CONSTANT	gmpxx.h	49;"	d
__GMPXX_CONSTANT	gmpxx.h	51;"	d
__GMPXX_CONSTANT_TRUE	gmpxx.h	3431;"	d
__GMPXX_CONSTANT_TRUE	gmpxx.h	53;"	d
__GMPXX_DECLARE_COMMON_TYPE	gmpxx.h	1319;"	d
__GMPXX_DECLARE_COMMON_TYPE	gmpxx.h	1342;"	d
__GMPXX_DEFINE_ARITHMETIC_ASSIGNMENTS	gmpxx.h	1414;"	d
__GMPXX_DEFINE_ARITHMETIC_ASSIGNMENTS	gmpxx.h	3380;"	d
__GMPXX_DEFINE_ARITHMETIC_CONSTRUCTORS	gmpxx.h	1402;"	d
__GMPXX_DEFINE_ARITHMETIC_CONSTRUCTORS	gmpxx.h	3379;"	d
__GMPXX_NOEXCEPT	gmpxx.h	65;"	d
__GMPXX_NOEXCEPT	gmpxx.h	68;"	d
__GMPXX_TMPQ_D	gmpxx.h	142;"	d
__GMPXX_TMPQ_SI	gmpxx.h	134;"	d
__GMPXX_TMPQ_UI	gmpxx.h	126;"	d
__GMPXX_TMPZ_D	gmpxx.h	119;"	d
__GMPXX_TMPZ_SI	gmpxx.h	114;"	d
__GMPXX_TMPZ_UI	gmpxx.h	109;"	d
__GMPXX_USE_CXX11	gmpxx.h	58;"	d
__GMPXX_USE_CXX11	gmpxx.h	60;"	d
__GMPZQ_DEFINE_EXPR	gmpxx.h	2588;"	d
__GMPZQ_DEFINE_EXPR	gmpxx.h	3382;"	d
__GMPZ_DBL_LIMBS	gmpxx.h	79;"	d
__GMPZ_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2993;"	d
__GMPZ_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3407;"	d
__GMPZ_DEFINE_COMPOUND_OPERATOR_UI	gmpxx.h	3013;"	d
__GMPZ_DEFINE_COMPOUND_OPERATOR_UI	gmpxx.h	3422;"	d
__GMPZ_DEFINE_INCREMENT_OPERATOR	gmpxx.h	3039;"	d
__GMPZ_DEFINE_INCREMENT_OPERATOR	gmpxx.h	3427;"	d
__GMPZ_FITS_UTYPE_P	gmp.h	1717;"	d
__GMPZ_FITS_UTYPE_P	gmp.h	1722;"	d
__GMPZ_ULI_LIMBS	gmpxx.h	73;"	d
__GMPZ_ULI_LIMBS	gmpxx.h	75;"	d
__GMP_ABS	gmp.h	442;"	d
__GMP_ALLOCATE_FUNC_LIMBS	gmp-impl.h	706;"	d
__GMP_ALLOCATE_FUNC_TYPE	gmp-impl.h	704;"	d
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC \/* signed *\/ long int mpz_get_si (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int _mpz_cmp_si (mpz_srcptr, signed long int) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int _mpz_cmp_ui (mpz_srcptr, unsigned long int) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_cmp (mpf_srcptr, mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_cmp_si (mpf_srcptr, signed long int) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_cmp_ui (mpf_srcptr, unsigned long int) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_cmp_z (mpf_srcptr, mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_fits_sint_p (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_fits_slong_p (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_fits_sshort_p (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_fits_uint_p (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_fits_ulong_p (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_fits_ushort_p (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpf_integer_p (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpn_cmp (mp_srcptr, mp_srcptr, mp_size_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpn_zero_p (mp_srcptr, mp_size_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpq_equal (mpq_srcptr, mpq_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_cmp (mpz_srcptr, mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_cmpabs (mpz_srcptr, mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_cmpabs_ui (mpz_srcptr, unsigned long int) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_congruent_2exp_p (mpz_srcptr, mpz_srcptr, mp_bitcnt_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_divisible_2exp_p (mpz_srcptr, mp_bitcnt_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_fits_sint_p (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_fits_slong_p (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_fits_sshort_p (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_fits_uint_p (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_fits_ulong_p (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_fits_ushort_p (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC int mpz_tstbit (mpz_srcptr, mp_bitcnt_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC long mpf_get_si (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC mp_bitcnt_t mpf_get_default_prec (void) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC mp_bitcnt_t mpf_get_prec (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC mp_bitcnt_t mpn_hamdist (mp_srcptr, mp_srcptr, mp_size_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC mp_bitcnt_t mpn_popcount (mp_srcptr, mp_size_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC mp_bitcnt_t mpz_hamdist (mpz_srcptr, mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC mp_bitcnt_t mpz_popcount (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC mp_bitcnt_t mpz_scan0 (mpz_srcptr, mp_bitcnt_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC mp_bitcnt_t mpz_scan1 (mpz_srcptr, mp_bitcnt_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC mp_limb_t mpz_getlimbn (mpz_srcptr, mp_size_t) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC size_t mpf_size (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC size_t mpz_size (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC size_t mpz_sizeinbase (mpz_srcptr, int) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC unsigned long int mpz_get_ui (mpz_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	/^__GMP_DECLSPEC unsigned long mpf_get_ui (mpf_srcptr) __GMP_NOTHROW __GMP_ATTRIBUTE_PURE;$/;"	v
__GMP_ATTRIBUTE_PURE	gmp.h	306;"	d
__GMP_ATTRIBUTE_PURE	gmp.h	308;"	d
__GMP_CAST	gmp.h	320;"	d
__GMP_CAST	gmp.h	322;"	d
__GMP_CC	gmp.h	2319;"	d
__GMP_CFLAGS	gmp.h	2320;"	d
__GMP_CRAY_Pragma	gmp.h	456;"	d
__GMP_CRAY_Pragma	gmp.h	458;"	d
__GMP_DECLARE_COMPOUND_OPERATOR	gmpxx.h	1391;"	d
__GMP_DECLARE_COMPOUND_OPERATOR	gmpxx.h	3376;"	d
__GMP_DECLARE_COMPOUND_OPERATOR_UI	gmpxx.h	1395;"	d
__GMP_DECLARE_COMPOUND_OPERATOR_UI	gmpxx.h	3377;"	d
__GMP_DECLARE_INCREMENT_OPERATOR	gmpxx.h	1398;"	d
__GMP_DECLARE_INCREMENT_OPERATOR	gmpxx.h	3378;"	d
__GMP_DECLSPEC	gmp.h	122;"	d
__GMP_DECLSPEC	gmp.h	125;"	d
__GMP_DECLSPEC	gmp.h	129;"	d
__GMP_DECLSPEC_EXPORT	gmp.h	103;"	d
__GMP_DECLSPEC_EXPORT	gmp.h	107;"	d
__GMP_DECLSPEC_EXPORT	gmp.h	111;"	d
__GMP_DECLSPEC_EXPORT	gmp.h	115;"	d
__GMP_DECLSPEC_IMPORT	gmp.h	104;"	d
__GMP_DECLSPEC_IMPORT	gmp.h	108;"	d
__GMP_DECLSPEC_IMPORT	gmp.h	112;"	d
__GMP_DECLSPEC_IMPORT	gmp.h	116;"	d
__GMP_DECLSPEC_XX	gmp.h	235;"	d
__GMP_DECLSPEC_XX	gmp.h	238;"	d
__GMP_DECLSPEC_XX	gmp.h	242;"	d
__GMP_DEFINE_BINARY_FUNCTION	gmpxx.h	2863;"	d
__GMP_DEFINE_BINARY_FUNCTION	gmpxx.h	3394;"	d
__GMP_DEFINE_BINARY_FUNCTION_UI	gmpxx.h	2868;"	d
__GMP_DEFINE_BINARY_FUNCTION_UI	gmpxx.h	3396;"	d
__GMP_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	2935;"	d
__GMP_DEFINE_BINARY_TYPE_FUNCTION	gmpxx.h	3405;"	d
__GMP_DEFINE_COMPOUND_OPERATOR	gmpxx.h	2989;"	d
__GMP_DEFINE_COMPOUND_OPERATOR	gmpxx.h	3416;"	d
__GMP_DEFINE_COMPOUND_OPERATOR_UI	gmpxx.h	3004;"	d
__GMP_DEFINE_COMPOUND_OPERATOR_UI	gmpxx.h	3421;"	d
__GMP_DEFINE_INCREMENT_OPERATOR	gmpxx.h	3024;"	d
__GMP_DEFINE_INCREMENT_OPERATOR	gmpxx.h	3426;"	d
__GMP_DEFINE_UNARY_FUNCTION	gmpxx.h	2785;"	d
__GMP_DEFINE_UNARY_FUNCTION	gmpxx.h	3384;"	d
__GMP_DEFINE_UNARY_TYPE_FUNCTION	gmpxx.h	2794;"	d
__GMP_DEFINE_UNARY_TYPE_FUNCTION	gmpxx.h	3385;"	d
__GMP_EXTERN_INLINE	gmp.h	362;"	d
__GMP_EXTERN_INLINE	gmp.h	364;"	d
__GMP_EXTERN_INLINE	gmp.h	378;"	d
__GMP_EXTERN_INLINE	gmp.h	391;"	d
__GMP_EXTERN_INLINE	gmp.h	397;"	d
__GMP_EXTERN_INLINE	gmp.h	403;"	d
__GMP_EXTERN_INLINE	gmp.h	409;"	d
__GMP_EXTERN_INLINE	gmp.h	417;"	d
__GMP_EXTERN_INLINE	gmp.h	427;"	d
__GMP_FORCE_mpn_add	mpn/add.c	31;"	d	file:
__GMP_FORCE_mpn_add	mpn/generic/add.c	31;"	d	file:
__GMP_FORCE_mpn_add_1	mpn/add_1.c	31;"	d	file:
__GMP_FORCE_mpn_add_1	mpn/generic/add_1.c	31;"	d	file:
__GMP_FORCE_mpn_cmp	mpn/cmp.c	31;"	d	file:
__GMP_FORCE_mpn_cmp	mpn/generic/cmp.c	31;"	d	file:
__GMP_FORCE_mpn_neg	mpn/generic/neg.c	31;"	d	file:
__GMP_FORCE_mpn_neg	mpn/neg.c	31;"	d	file:
__GMP_FORCE_mpn_sub	mpn/generic/sub.c	31;"	d	file:
__GMP_FORCE_mpn_sub	mpn/sub.c	31;"	d	file:
__GMP_FORCE_mpn_sub_1	mpn/generic/sub_1.c	31;"	d	file:
__GMP_FORCE_mpn_sub_1	mpn/sub_1.c	31;"	d	file:
__GMP_FORCE_mpn_zero_p	mpn/generic/zero_p.c	31;"	d	file:
__GMP_FORCE_mpn_zero_p	mpn/zero_p.c	31;"	d	file:
__GMP_FORCE_mpq_abs	mpq/abs.c	31;"	d	file:
__GMP_FORCE_mpq_neg	mpq/neg.c	31;"	d	file:
__GMP_FORCE_mpz_abs	mpz/abs.c	31;"	d	file:
__GMP_FORCE_mpz_fits_uint_p	mpz/fits_uint.c	31;"	d	file:
__GMP_FORCE_mpz_fits_ulong_p	mpz/fits_ulong.c	31;"	d	file:
__GMP_FORCE_mpz_fits_ushort_p	mpz/fits_ushort.c	31;"	d	file:
__GMP_FORCE_mpz_get_ui	mpz/get_ui.c	31;"	d	file:
__GMP_FORCE_mpz_getlimbn	mpz/getlimbn.c	31;"	d	file:
__GMP_FORCE_mpz_neg	mpz/neg.c	31;"	d	file:
__GMP_FORCE_mpz_perfect_square_p	mpz/perfsqr.c	32;"	d	file:
__GMP_FORCE_mpz_popcount	mpz/popcount.c	32;"	d	file:
__GMP_FORCE_mpz_set_q	mpz/set_q.c	32;"	d	file:
__GMP_FORCE_mpz_size	mpz/size.c	32;"	d	file:
__GMP_FREE_FUNC_LIMBS	gmp-impl.h	715;"	d
__GMP_FREE_FUNC_TYPE	gmp-impl.h	714;"	d
__GMP_GNUC_PREREQ	gmp.h	294;"	d
__GMP_GNUC_PREREQ	gmp.h	297;"	d
__GMP_HAVE_HOST_CPU_FAMILY_power	gmp.h	41;"	d
__GMP_HAVE_HOST_CPU_FAMILY_powerpc	gmp.h	42;"	d
__GMP_H__	gmp.h	2328;"	d
__GMP_IMPL_H__	gmp-impl.h	44;"	d
__GMP_INLINE_PROTOTYPES	gmp.h	366;"	d
__GMP_INLINE_PROTOTYPES	gmp.h	435;"	d
__GMP_INLINE_PROTOTYPES	gmp.h	438;"	d
__GMP_LIBGMP_DLL	gmp.h	61;"	d
__GMP_LIKELY	gmp.h	448;"	d
__GMP_LIKELY	gmp.h	451;"	d
__GMP_MAX	gmp.h	443;"	d
__GMP_MP_SIZE_T_INT	gmp.h	170;"	d
__GMP_MP_SIZE_T_INT	gmp.h	174;"	d
__GMP_NOTHROW	gmp.h	344;"	d
__GMP_NOTHROW	gmp.h	346;"	d
__GMP_NO_ATTRIBUTE_CONST_PURE	tune/common.c	31;"	d	file:
__GMP_PLUSPLUS__	gmpxx.h	32;"	d
__GMP_REALLOCATE_FUNC_LIMBS	gmp-impl.h	711;"	d
__GMP_REALLOCATE_FUNC_MAYBE	gmp-impl.h	717;"	d
__GMP_REALLOCATE_FUNC_MAYBE_TYPE	gmp-impl.h	723;"	d
__GMP_REALLOCATE_FUNC_TYPE	gmp-impl.h	708;"	d
__GMP_UNLIKELY	gmp.h	449;"	d
__GMP_UNLIKELY	gmp.h	452;"	d
__GMP_q	gmp-impl.h	3368;"	d
__GMP_q	gmp-impl.h	3371;"	d
__GMP_qm	gmp-impl.h	3367;"	d
__GMP_qm	gmp-impl.h	3370;"	d
__GNU_MP_RELEASE	gmp.h	2326;"	d
__GNU_MP_VERSION	gmp.h	2323;"	d
__GNU_MP_VERSION_MINOR	gmp.h	2324;"	d
__GNU_MP_VERSION_PATCHLEVEL	gmp.h	2325;"	d
__GNU_MP__	gmp.h	53;"	d
__MINI_GMP_H__	mini-gmp/mini-gmp.h	39;"	d
__MPN	gmp.h	247;"	d
__MPN	longlong.h	64;"	d
__SPEED_H__	tune/speed.h	32;"	d
__TESTS_H__	tests/tests.h	22;"	d
__TMP_ALIGN	gmp-impl.h	349;"	d
___gmpn_add_n	mpn/m88k/add_n.s	/^___gmpn_add_n:$/;"	l
___gmpn_addmul_1	mpn/m88k/mc88110/addmul_1.s	/^___gmpn_addmul_1:$/;"	l
___gmpn_mul_1	mpn/m88k/mc88110/mul_1.s	/^___gmpn_mul_1:$/;"	l
___gmpn_mul_1	mpn/m88k/mul_1.s	/^___gmpn_mul_1:$/;"	l
___gmpn_sub_n	mpn/m88k/sub_n.s	/^___gmpn_sub_n:$/;"	l
__attribute__	demos/calc/calc.c	410;"	d	file:
__builtin_constant_p	gmp-impl.h	733;"	d
__clz_tab	gmp-impl.h	1049;"	d
__clz_tab	mp_clz_tab.c	/^unsigned char __clz_tab[129] =$/;"	v
__cplusplus	demos/calc/calclex.c	25;"	d	file:
__cyg_profile_func_enter	tests/mpn/t-instrument.c	/^__cyg_profile_func_enter (void *this_fn, void *call_site)$/;"	f
__cyg_profile_func_exit	tests/mpn/t-instrument.c	/^__cyg_profile_func_exit  (void *this_fn, void *call_site)$/;"	f
__dead2	demos/calc/calclex.c	12;"	d	file:
__get_mp	gmpxx.h	/^  __get_mp() const { return val.__get_mp(); }$/;"	f	class:__gmp_temp
__get_mp	gmpxx.h	/^  mpf_ptr __get_mp() { return mp; }$/;"	f	class:__gmp_expr
__get_mp	gmpxx.h	/^  mpf_srcptr __get_mp() const { return mp; }$/;"	f	class:__gmp_expr
__get_mp	gmpxx.h	/^  mpf_srcptr __get_mp() const { return val.__get_mp(); }$/;"	f	class:__gmp_temp
__get_mp	gmpxx.h	/^  mpq_ptr __get_mp() { return mp; }$/;"	f	class:__gmp_expr
__get_mp	gmpxx.h	/^  mpq_srcptr __get_mp() const { return mp; }$/;"	f	class:__gmp_expr
__get_mp	gmpxx.h	/^  mpz_ptr __get_mp() { return mp; }$/;"	f	class:__gmp_expr
__get_mp	gmpxx.h	/^  mpz_srcptr __get_mp() const { return mp; }$/;"	f	class:__gmp_expr
__gmp_0	mp_bpl.c	/^const int __gmp_0 = 0;$/;"	v
__gmp_abs_function	gmpxx.h	/^struct __gmp_abs_function$/;"	s
__gmp_alloc_cstring	gmpxx.h	/^  __gmp_alloc_cstring(char *s) { str = s; }$/;"	f	struct:__gmp_alloc_cstring
__gmp_alloc_cstring	gmpxx.h	/^struct __gmp_alloc_cstring$/;"	s
__gmp_allocate_func	memory.c	/^void * (*__gmp_allocate_func) (size_t) = __gmp_default_allocate;$/;"	v
__gmp_allocate_func_aligned	tests/misc.c	/^__gmp_allocate_func_aligned (size_t bytes, size_t align)$/;"	f
__gmp_allocate_or_reallocate	tests/misc.c	/^__gmp_allocate_or_reallocate (void *ptr, size_t oldsize, size_t newsize)$/;"	f
__gmp_allocate_strdup	tests/misc.c	/^__gmp_allocate_strdup (const char *s)$/;"	f
__gmp_asprintf_final	printf/asprntffuns.c	/^__gmp_asprintf_final (struct gmp_asprintf_t *d)$/;"	f
__gmp_asprintf_funs	printf/vasprintf.c	/^const struct doprnt_funs_t  __gmp_asprintf_funs = {$/;"	v	typeref:struct:doprnt_funs_t
__gmp_asprintf_funs_noformat	cxx/osfuns.cc	/^const struct doprnt_funs_t  __gmp_asprintf_funs_noformat = {$/;"	v	typeref:struct:doprnt_funs_t
__gmp_asprintf_memory	printf/asprntffuns.c	/^__gmp_asprintf_memory (struct gmp_asprintf_t *d, const char *str, size_t len)$/;"	f
__gmp_asprintf_reps	printf/asprntffuns.c	/^__gmp_asprintf_reps (struct gmp_asprintf_t *d, int c, int reps)$/;"	f
__gmp_assert_fail	assert.c	/^__gmp_assert_fail (const char *filename, int linenum,$/;"	f
__gmp_assert_header	assert.c	/^__gmp_assert_header (const char *filename, int linenum)$/;"	f
__gmp_binary_and	gmpxx.h	/^struct __gmp_binary_and$/;"	s
__gmp_binary_divides	gmpxx.h	/^struct __gmp_binary_divides$/;"	s
__gmp_binary_equal	gmpxx.h	/^struct __gmp_binary_equal$/;"	s
__gmp_binary_expr	gmpxx.h	/^  __gmp_binary_expr(const T &v1, const U &v2) : val1(v1), val2(v2) { }$/;"	f	struct:__gmp_binary_expr
__gmp_binary_expr	gmpxx.h	/^struct __gmp_binary_expr$/;"	s
__gmp_binary_greater	gmpxx.h	/^struct __gmp_binary_greater$/;"	s
__gmp_binary_ior	gmpxx.h	/^struct __gmp_binary_ior$/;"	s
__gmp_binary_less	gmpxx.h	/^struct __gmp_binary_less$/;"	s
__gmp_binary_lshift	gmpxx.h	/^struct __gmp_binary_lshift$/;"	s
__gmp_binary_minus	gmpxx.h	/^struct __gmp_binary_minus$/;"	s
__gmp_binary_modulus	gmpxx.h	/^struct __gmp_binary_modulus$/;"	s
__gmp_binary_multiplies	gmpxx.h	/^struct __gmp_binary_multiplies$/;"	s
__gmp_binary_plus	gmpxx.h	/^struct __gmp_binary_plus$/;"	s
__gmp_binary_rshift	gmpxx.h	/^struct __gmp_binary_rshift$/;"	s
__gmp_binary_xor	gmpxx.h	/^struct __gmp_binary_xor$/;"	s
__gmp_ceil_function	gmpxx.h	/^struct __gmp_ceil_function$/;"	s
__gmp_cmp_function	gmpxx.h	/^struct __gmp_cmp_function$/;"	s
__gmp_default_allocate	memory.c	/^__gmp_default_allocate (size_t size)$/;"	f
__gmp_default_fp_limb_precision	mpf/set_dfl_prec.c	/^mp_size_t __gmp_default_fp_limb_precision = __GMPF_BITS_TO_PREC (53);$/;"	v
__gmp_default_free	memory.c	/^__gmp_default_free (void *blk_ptr, size_t blk_size)$/;"	f
__gmp_default_reallocate	memory.c	/^__gmp_default_reallocate (void *oldptr, size_t old_size, size_t new_size)$/;"	f
__gmp_digit_value_tab	mp_dv_tab.c	/^const unsigned char __gmp_digit_value_tab[] =$/;"	v
__gmp_divide_by_zero	errno.c	/^__gmp_divide_by_zero (void)$/;"	f
__gmp_doprnt	printf/doprnt.c	/^__gmp_doprnt (const struct doprnt_funs_t *funs, void *data,$/;"	f
__gmp_doprnt_integer	printf/doprnti.c	/^__gmp_doprnt_integer (const struct doprnt_funs_t *funs,$/;"	f
__gmp_doprnt_integer_ostream	cxx/osdoprnti.cc	/^__gmp_doprnt_integer_ostream (ostream &o, struct doprnt_params_t *p,$/;"	f
__gmp_doprnt_mpf	gmp-impl.h	4526;"	d
__gmp_doprnt_mpf	printf/doprntf.c	/^__gmp_doprnt_mpf (const struct doprnt_funs_t *funs,$/;"	f
__gmp_doprnt_params_from_ios	cxx/osfuns.cc	/^__gmp_doprnt_params_from_ios (struct doprnt_params_t *p, ios &o)$/;"	f
__gmp_doscan	scanf/doscan.c	/^__gmp_doscan (const struct gmp_doscan_funs_t *funs, void *data,$/;"	f
__gmp_exception	errno.c	/^__gmp_exception (int error_bit)$/;"	f
__gmp_expr	gmpxx.h	/^  __gmp_expr() { mpf_init(mp); }$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr() { mpq_init(mp); }$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr() { mpz_init(mp); }$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(__gmp_expr &&f)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(__gmp_expr &&q)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(__gmp_expr &&z)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const __gmp_expr &f)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const __gmp_expr &f, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const __gmp_expr &q)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const __gmp_expr &z) { mpz_init_set(mp, z.mp); }$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const __gmp_expr<T, U> &expr)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const __gmp_expr<T, U> &expr, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const __gmp_expr<mpq_t, T> &expr)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const __gmp_expr<mpz_t, T> &expr)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const char *s, mp_bitcnt_t prec, int base = 0)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const mpz_class &num, const mpz_class &den)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const std::string &s, mp_bitcnt_t prec, int base = 0)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(const val1_type &val1, const val2_type &val2)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(double d, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(float f, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(gmp_randstate_t s, const mpz_class &z) : state(s), range(z) { }$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(gmp_randstate_t s, mp_bitcnt_t l) : state(s), bits(l) { }$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(mpf_srcptr f, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(signed char c, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(signed int i, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(signed long int l, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(signed short int s, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(unsigned char c, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(unsigned int i, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(unsigned long int l, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  __gmp_expr(unsigned short int s, mp_bitcnt_t prec)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  explicit __gmp_expr(const __gmp_expr<T, U> &expr)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  explicit __gmp_expr(const char *s)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  explicit __gmp_expr(const char *s, int base = 0)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  explicit __gmp_expr(const std::string &s)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  explicit __gmp_expr(const std::string &s, int base = 0)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  explicit __gmp_expr(const val_type &val) : expr(val) { }$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  explicit __gmp_expr(mpf_srcptr f)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  explicit __gmp_expr(mpq_srcptr q)$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^  explicit __gmp_expr(mpz_srcptr z) { mpz_init_set(mp, z); }$/;"	f	class:__gmp_expr
__gmp_expr	gmpxx.h	/^class __gmp_expr$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<T, __gmp_binary_expr<U, __gmp_expr<T, T>, Op> >$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<T, __gmp_binary_expr<U, __gmp_expr<T, V>, Op> >$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<T, __gmp_binary_expr<__gmp_expr<T, T>, U, Op> >$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<T, __gmp_binary_expr<__gmp_expr<T, U>, V, Op> >$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<T, __gmp_unary_expr<U, Op> >$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, T>, Op> >$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<T, __gmp_unary_expr<__gmp_expr<T, U>, Op> >$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<mpf_t, __gmp_urandomb_value>$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<mpf_t, mpf_t>$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<mpq_t, mpq_t>$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<mpz_t, __gmp_urandomb_value>$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<mpz_t, __gmp_urandomm_value>$/;"	c
__gmp_expr	gmpxx.h	/^class __gmp_expr<mpz_t, mpz_t>$/;"	c
__gmp_extract_double	extract-dbl.c	/^__gmp_extract_double (mp_ptr rp, double d)$/;"	f
__gmp_fac2cnt_table	mpn/comb_tables.c	/^const unsigned char __gmp_fac2cnt_table[] = { TABLE_2N_MINUS_POPC_2N };$/;"	v
__gmp_fac2cnt_table	mpn/generic/comb_tables.c	/^const unsigned char __gmp_fac2cnt_table[] = { TABLE_2N_MINUS_POPC_2N };$/;"	v
__gmp_fib_table	mpn/fib_table.c	/^__gmp_fib_table[FIB_TABLE_LIMIT+2] = {$/;"	v
__gmp_floor_function	gmpxx.h	/^struct __gmp_floor_function$/;"	s
__gmp_fprintf_funs	printf/printffuns.c	/^const struct doprnt_funs_t  __gmp_fprintf_funs = {$/;"	v	typeref:struct:doprnt_funs_t
__gmp_free_func	memory.c	/^void   (*__gmp_free_func) (void *, size_t) = __gmp_default_free;$/;"	v
__gmp_freefunc_t	gmpxx.h	/^  typedef void (*__gmp_freefunc_t) (void *, size_t);$/;"	t
__gmp_fscanf_funs	scanf/fscanffuns.c	/^const struct gmp_doscan_funs_t  __gmp_fscanf_funs = {$/;"	v	typeref:struct:gmp_doscan_funs_t
__gmp_gcd_function	gmpxx.h	/^struct __gmp_gcd_function$/;"	s
__gmp_hypot_function	gmpxx.h	/^struct __gmp_hypot_function$/;"	s
__gmp_invalid_operation	invalid.c	/^__gmp_invalid_operation (void)$/;"	f
__gmp_istream_set_base	cxx/isfuns.cc	/^__gmp_istream_set_base (istream &i, char &c, bool &zero, bool &showbase)$/;"	f
__gmp_istream_set_digits	cxx/isfuns.cc	/^__gmp_istream_set_digits (string &s, istream &i, char &c, bool &ok, int base)$/;"	f
__gmp_junk	mp_bpl.c	/^int __gmp_junk;$/;"	v
__gmp_lcm_function	gmpxx.h	/^struct __gmp_lcm_function$/;"	s
__gmp_limbroots_table	mpn/comb_tables.c	/^const mp_limb_t __gmp_limbroots_table[] = { NTH_ROOT_NUMB_MASK_TABLE };$/;"	v
__gmp_limbroots_table	mpn/generic/comb_tables.c	/^const mp_limb_t __gmp_limbroots_table[] = { NTH_ROOT_NUMB_MASK_TABLE };$/;"	v
__gmp_mt_recalc_buffer	rand/randmt.c	/^__gmp_mt_recalc_buffer (gmp_uint_least32_t mt[])$/;"	f
__gmp_obstack_printf_funs	printf/obprntffuns.c	/^const struct doprnt_funs_t  __gmp_obstack_printf_funs = {$/;"	v	typeref:struct:doprnt_funs_t
__gmp_odd2fac_table	mpn/comb_tables.c	/^const mp_limb_t __gmp_odd2fac_table[] = { ONE_LIMB_ODD_DOUBLEFACTORIAL_TABLE };$/;"	v
__gmp_odd2fac_table	mpn/generic/comb_tables.c	/^const mp_limb_t __gmp_odd2fac_table[] = { ONE_LIMB_ODD_DOUBLEFACTORIAL_TABLE };$/;"	v
__gmp_oddfac_table	mpn/comb_tables.c	/^const mp_limb_t __gmp_oddfac_table[] = { ONE_LIMB_ODD_FACTORIAL_TABLE, ONE_LIMB_ODD_FACTORIAL_EXTTABLE };$/;"	v
__gmp_oddfac_table	mpn/generic/comb_tables.c	/^const mp_limb_t __gmp_oddfac_table[] = { ONE_LIMB_ODD_FACTORIAL_TABLE, ONE_LIMB_ODD_FACTORIAL_EXTTABLE };$/;"	v
__gmp_rand_function	gmpxx.h	/^struct __gmp_rand_function$/;"	s
__gmp_rand_lc_scheme	rand/randlc2s.c	/^static const struct __gmp_rand_lc_scheme_struct __gmp_rand_lc_scheme[] =$/;"	v	typeref:struct:__gmp_rand_lc_scheme_struct	file:
__gmp_rand_lc_scheme_struct	rand/randlc2s.c	/^struct __gmp_rand_lc_scheme_struct$/;"	s	file:
__gmp_randclear_mt	rand/randmt.c	/^__gmp_randclear_mt (gmp_randstate_t rstate)$/;"	f
__gmp_randget_mt	rand/randmt.c	/^__gmp_randget_mt (gmp_randstate_t rstate, mp_ptr dest, unsigned long int nbits)$/;"	f
__gmp_randinit_default_t	gmpxx.h	/^  typedef void __gmp_randinit_default_t (gmp_randstate_t);$/;"	t
__gmp_randinit_lc_2exp_size_t	gmpxx.h	/^  typedef int __gmp_randinit_lc_2exp_size_t (gmp_randstate_t, mp_bitcnt_t);$/;"	t
__gmp_randinit_lc_2exp_t	gmpxx.h	/^  typedef void __gmp_randinit_lc_2exp_t (gmp_randstate_t, mpz_srcptr, unsigned long int, mp_bitcnt_t);$/;"	t
__gmp_randinit_mt_noseed	rand/randmt.c	/^__gmp_randinit_mt_noseed (gmp_randstate_ptr dst)$/;"	f
__gmp_randiset_mt	rand/randmt.c	/^__gmp_randiset_mt (gmp_randstate_ptr dst, gmp_randstate_srcptr src)$/;"	f
__gmp_rands	rand/rands.c	/^gmp_randstate_t  __gmp_rands;$/;"	v
__gmp_rands_initialized	rand/rands.c	/^char             __gmp_rands_initialized = 0;$/;"	v
__gmp_randstate_struct	gmp.h	/^} __gmp_randstate_struct;$/;"	t	typeref:struct:__anon8
__gmp_reallocate_func	memory.c	/^void * (*__gmp_reallocate_func) (void *, size_t, size_t) = __gmp_default_reallocate;$/;"	v
__gmp_replacement_vsnprintf	printf/repl-vsnprintf.c	/^__gmp_replacement_vsnprintf (char *buf, size_t buf_size,$/;"	f
__gmp_resolve_expr	gmpxx.h	/^struct __gmp_resolve_expr<mpf_t, mpq_t>$/;"	s
__gmp_resolve_expr	gmpxx.h	/^struct __gmp_resolve_expr<mpf_t, mpz_t>$/;"	s
__gmp_resolve_expr	gmpxx.h	/^struct __gmp_resolve_expr<mpf_t>$/;"	s
__gmp_resolve_expr	gmpxx.h	/^struct __gmp_resolve_expr<mpq_t, mpf_t>$/;"	s
__gmp_resolve_expr	gmpxx.h	/^struct __gmp_resolve_expr<mpq_t, mpz_t>$/;"	s
__gmp_resolve_expr	gmpxx.h	/^struct __gmp_resolve_expr<mpq_t>$/;"	s
__gmp_resolve_expr	gmpxx.h	/^struct __gmp_resolve_expr<mpz_t, mpf_t>$/;"	s
__gmp_resolve_expr	gmpxx.h	/^struct __gmp_resolve_expr<mpz_t, mpq_t>$/;"	s
__gmp_resolve_expr	gmpxx.h	/^struct __gmp_resolve_expr<mpz_t>$/;"	s
__gmp_resolve_ref	gmpxx.h	/^struct __gmp_resolve_ref$/;"	s
__gmp_resolve_ref	gmpxx.h	/^struct __gmp_resolve_ref<__gmp_expr<T, U> >$/;"	s
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpf_ptr f, const __gmp_expr<mpf_t, T> &expr)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpf_ptr f, const __gmp_expr<mpq_t, T> &expr)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpf_ptr f, const __gmp_expr<mpz_t, T> &expr)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpf_ptr f, const mpf_class &g)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpq_ptr q, const __gmp_expr<mpf_t, T> &expr)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpq_ptr q, const __gmp_expr<mpq_t, T> &expr)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpq_ptr q, const __gmp_expr<mpz_t, T> &expr)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpq_ptr q, const mpq_class &r)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpq_ptr q, const mpz_class &z)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpz_ptr z, const __gmp_expr<mpf_t, T> &expr)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpz_ptr z, const __gmp_expr<mpq_t, T> &expr)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpz_ptr z, const __gmp_expr<mpz_t, T> &expr)$/;"	f
__gmp_set_expr	gmpxx.h	/^inline void __gmp_set_expr(mpz_ptr z, const mpz_class &w)$/;"	f
__gmp_sgn_function	gmpxx.h	/^struct __gmp_sgn_function$/;"	s
__gmp_snprintf_funs	printf/snprntffuns.c	/^const struct doprnt_funs_t  __gmp_snprintf_funs = {$/;"	v	typeref:struct:doprnt_funs_t
__gmp_sprintf_funs	printf/sprintffuns.c	/^const struct doprnt_funs_t  __gmp_sprintf_funs = {$/;"	v	typeref:struct:doprnt_funs_t
__gmp_sqrt_function	gmpxx.h	/^struct __gmp_sqrt_function$/;"	s
__gmp_sqrt_of_negative	errno.c	/^__gmp_sqrt_of_negative (void)$/;"	f
__gmp_sscanf_funs	scanf/sscanffuns.c	/^const struct gmp_doscan_funs_t  __gmp_sscanf_funs = {$/;"	v	typeref:struct:gmp_doscan_funs_t
__gmp_temp	gmpxx.h	/^  __gmp_temp(U const& u, V) : val (u) {}$/;"	f	class:__gmp_temp
__gmp_temp	gmpxx.h	/^  __gmp_temp(U const& u, mpf_ptr res) : val (u, mpf_get_prec(res)) {}$/;"	f	class:__gmp_temp
__gmp_temp	gmpxx.h	/^class __gmp_temp <mpf_t>$/;"	c
__gmp_temp	gmpxx.h	/^class __gmp_temp$/;"	c
__gmp_tmp_alloc	tal-notreent.c	/^__gmp_tmp_alloc (unsigned long size)$/;"	f
__gmp_tmp_debug_alloc	tal-debug.c	/^__gmp_tmp_debug_alloc (const char *file, int line, int dummy,$/;"	f
__gmp_tmp_debug_free	tal-debug.c	/^__gmp_tmp_debug_free (const char *file, int line, int dummy,$/;"	f
__gmp_tmp_debug_mark	tal-debug.c	/^__gmp_tmp_debug_mark (const char *file, int line,$/;"	f
__gmp_tmp_free	tal-notreent.c	/^__gmp_tmp_free (struct tmp_marker *mark)$/;"	f
__gmp_tmp_mark	tal-notreent.c	/^__gmp_tmp_mark (struct tmp_marker *mark)$/;"	f
__gmp_tmp_reentrant_alloc	tal-reent.c	/^__gmp_tmp_reentrant_alloc (struct tmp_reentrant_t **markp, size_t size)$/;"	f
__gmp_tmp_reentrant_free	tal-reent.c	/^__gmp_tmp_reentrant_free (struct tmp_reentrant_t *mark)$/;"	f
__gmp_trunc_function	gmpxx.h	/^struct __gmp_trunc_function$/;"	s
__gmp_unary_com	gmpxx.h	/^struct __gmp_unary_com$/;"	s
__gmp_unary_decrement	gmpxx.h	/^struct __gmp_unary_decrement$/;"	s
__gmp_unary_expr	gmpxx.h	/^  __gmp_unary_expr(const T &v) : val(v) { }$/;"	f	struct:__gmp_unary_expr
__gmp_unary_expr	gmpxx.h	/^struct __gmp_unary_expr$/;"	s
__gmp_unary_increment	gmpxx.h	/^struct __gmp_unary_increment$/;"	s
__gmp_unary_minus	gmpxx.h	/^struct __gmp_unary_minus$/;"	s
__gmp_unary_plus	gmpxx.h	/^struct __gmp_unary_plus$/;"	s
__gmp_urandomb_value	gmpxx.h	/^class __gmp_urandomb_value { };$/;"	c
__gmp_urandomm_value	gmpxx.h	/^class __gmp_urandomm_value { };$/;"	c
__gmpn_bc_set_str	tune/set_strb.c	32;"	d	file:
__gmpn_bc_set_str	tune/set_strs.c	32;"	d	file:
__gmpn_cpuid	mpn/x86/fat/fat.c	56;"	d	file:
__gmpn_cpuid	mpn/x86_64/fat/fat.c	58;"	d	file:
__gmpn_cpuid_available	mpn/x86/fat/fat.c	57;"	d	file:
__gmpn_cpuvec	mpn/x86/fat/fat.c	/^struct cpuvec_t __gmpn_cpuvec = {$/;"	v	typeref:struct:cpuvec_t
__gmpn_cpuvec	mpn/x86_64/fat/fat.c	/^struct cpuvec_t __gmpn_cpuvec = {$/;"	v	typeref:struct:cpuvec_t
__gmpn_cpuvec	tests/mpn/t-fat.c	/^struct cpuvec_t __gmpn_cpuvec;$/;"	v	typeref:struct:cpuvec_t
__gmpn_cpuvec_init	mpn/x86/fat/fat.c	/^__gmpn_cpuvec_init (void)$/;"	f
__gmpn_cpuvec_init	mpn/x86_64/fat/fat.c	/^__gmpn_cpuvec_init (void)$/;"	f
__gmpn_cpuvec_initialized	mpn/x86/fat/fat.c	/^int __gmpn_cpuvec_initialized = 0;$/;"	v
__gmpn_cpuvec_initialized	mpn/x86_64/fat/fat.c	/^int __gmpn_cpuvec_initialized = 0;$/;"	v
__gmpn_dc_set_str	tune/set_strb.c	33;"	d	file:
__gmpn_dc_set_str	tune/set_strs.c	33;"	d	file:
__gmpn_div_qr_1n_pi1	tune/div_qr_1_tune.c	40;"	d	file:
__gmpn_divrem_1	tune/divrem1div.c	40;"	d	file:
__gmpn_divrem_1	tune/divrem1inv.c	40;"	d	file:
__gmpn_divrem_2	tune/divrem2div.c	39;"	d	file:
__gmpn_divrem_2	tune/divrem2inv.c	39;"	d	file:
__gmpn_gcdext	tune/gcdext_double.c	37;"	d	file:
__gmpn_gcdext	tune/gcdext_single.c	37;"	d	file:
__gmpn_gcdext	tune/gcdextod.c	38;"	d	file:
__gmpn_gcdext	tune/gcdextos.c	38;"	d	file:
__gmpn_hgcd	tune/hgcd_lehmer.c	37;"	d	file:
__gmpn_hgcd_appr	tune/hgcd_appr_lehmer.c	37;"	d	file:
__gmpn_hgcd_appr_itch	tune/hgcd_appr_lehmer.c	38;"	d	file:
__gmpn_hgcd_itch	tune/hgcd_lehmer.c	38;"	d	file:
__gmpn_hgcd_reduce	tune/hgcd_reduce_1.c	37;"	d	file:
__gmpn_hgcd_reduce	tune/hgcd_reduce_2.c	37;"	d	file:
__gmpn_hgcd_reduce_itch	tune/hgcd_reduce_1.c	38;"	d	file:
__gmpn_hgcd_reduce_itch	tune/hgcd_reduce_2.c	38;"	d	file:
__gmpn_jacobi_base	tune/jacbase1.c	36;"	d	file:
__gmpn_jacobi_base	tune/jacbase2.c	36;"	d	file:
__gmpn_jacobi_base	tune/jacbase3.c	36;"	d	file:
__gmpn_jacobi_base	tune/jacbase4.c	36;"	d	file:
__gmpn_mod_1	tune/mod_1_div.c	44;"	d	file:
__gmpn_mod_1	tune/mod_1_inv.c	44;"	d	file:
__gmpn_set_str	tune/set_strb.c	31;"	d	file:
__gmpn_set_str	tune/set_strs.c	31;"	d	file:
__gmpn_set_str_compute_powtab	tune/set_strb.c	34;"	d	file:
__gmpn_set_str_compute_powtab	tune/set_strs.c	34;"	d	file:
__gmpxx_abs_ui	gmpxx.h	/^inline unsigned long __gmpxx_abs_ui (signed long l)$/;"	f
__gmpz_legendre	compat.c	/^__gmpz_legendre (mpz_srcptr a, mpz_srcptr b)$/;"	f
__gmpz_operator_in_nowhite	cxx/ismpznw.cc	/^__gmpz_operator_in_nowhite (istream &i, mpz_ptr z, char c)$/;"	f
__gmpz_powm	tune/powm_mod.c	37;"	d	file:
__gmpz_powm	tune/powm_redc.c	39;"	d	file:
__ll_B	longlong.h	57;"	d
__ll_highpart	longlong.h	59;"	d
__ll_lowpart	longlong.h	58;"	d
__longlong_h_C	longlong.h	1916;"	d
__longlong_h_C	longlong.h	1918;"	d
__mpf_struct	gmp.h	/^} __mpf_struct;$/;"	t	typeref:struct:__anon6
__mpq_struct	gmp.h	/^} __mpq_struct;$/;"	t	typeref:struct:__anon5
__mpz_set_si_safe	gmpxx.h	/^inline void __mpz_set_si_safe(mpz_ptr p, long l)$/;"	f
__mpz_set_ui_safe	gmpxx.h	/^inline void __mpz_set_ui_safe(mpz_ptr p, unsigned long l)$/;"	f
__mpz_struct	demos/pexpr.c	/^typedef MP_INT __mpz_struct;$/;"	t	file:
__mpz_struct	gmp.h	/^} __mpz_struct;$/;"	t	typeref:struct:__anon4
__mpz_struct	mini-gmp/mini-gmp.h	/^} __mpz_struct;$/;"	t	typeref:struct:__anon19
__restrict__	config.h	637;"	d
__udiv_qrnnd_c	longlong.h	2067;"	d
__umulsidi3	longlong.h	1066;"	d
__umulsidi3	longlong.h	1285;"	d
__umulsidi3	longlong.h	1908;"	d
__umulsidi3	longlong.h	581;"	d
__unused	demos/calc/calclex.c	11;"	d	file:
_cn	rand/randlc2x.c	/^  mp_size_t      _cn;$/;"	m	struct:__anon27	file:
_cp	rand/randlc2x.c	/^  mp_limb_t      _cp[LIMBS_PER_ULONG];$/;"	m	struct:__anon27	file:
_gmp_rand	gmp-impl.h	1215;"	d
_mp_a	rand/randlc2x.c	/^  mpz_t          _mp_a;$/;"	m	struct:__anon27	file:
_mp_alg	gmp.h	/^  gmp_randalg_t _mp_alg;  \/* Currently unused. *\/$/;"	m	struct:__anon8
_mp_algdata	gmp.h	/^  } _mp_algdata;$/;"	m	struct:__anon8	typeref:union:__anon8::__anon9
_mp_alloc	gmp.h	/^  int _mp_alloc;		\/* Number of *limbs* allocated and pointed$/;"	m	struct:__anon4
_mp_alloc	mini-gmp/mini-gmp.h	/^  int _mp_alloc;		\/* Number of *limbs* allocated and pointed$/;"	m	struct:__anon19
_mp_d	gmp.h	/^  mp_limb_t *_mp_d;		\/* Pointer to the limbs.  *\/$/;"	m	struct:__anon4
_mp_d	gmp.h	/^  mp_limb_t *_mp_d;		\/* Pointer to the limbs.  *\/$/;"	m	struct:__anon6
_mp_d	mini-gmp/mini-gmp.h	/^  mp_limb_t *_mp_d;		\/* Pointer to the limbs.  *\/$/;"	m	struct:__anon19
_mp_den	gmp.h	/^  __mpz_struct _mp_den;$/;"	m	struct:__anon5
_mp_exp	gmp.h	/^  mp_exp_t _mp_exp;		\/* Exponent, in the base of `mp_limb_t'.  *\/$/;"	m	struct:__anon6
_mp_lc	gmp.h	/^    void *_mp_lc;         \/* Pointer to function pointers structure.  *\/$/;"	m	union:__anon8::__anon9
_mp_m2exp	rand/randlc2x.c	/^  unsigned long  _mp_m2exp;$/;"	m	struct:__anon27	file:
_mp_num	gmp.h	/^  __mpz_struct _mp_num;$/;"	m	struct:__anon5
_mp_prec	gmp.h	/^  int _mp_prec;			\/* Max precision, in number of `mp_limb_t's.$/;"	m	struct:__anon6
_mp_seed	gmp.h	/^  mpz_t _mp_seed;	  \/* _mp_d member points to state of the generator. *\/$/;"	m	struct:__anon8
_mp_seed	rand/randlc2x.c	/^  mpz_t          _mp_seed;$/;"	m	struct:__anon27	file:
_mp_size	gmp.h	/^  int _mp_size;			\/* abs(_mp_size) is the number of limbs the$/;"	m	struct:__anon4
_mp_size	gmp.h	/^  int _mp_size;			\/* abs(_mp_size) is the number of limbs the$/;"	m	struct:__anon6
_mp_size	mini-gmp/mini-gmp.h	/^  int _mp_size;			\/* abs(_mp_size) is the number of limbs the$/;"	m	struct:__anon19
_mpf	gmpxx.h	/^inline mpf_class operator"" _mpf(const char* s)$/;"	f
_mpf_expr_standard_table	demos/expr/exprf.c	/^static const struct mpexpr_operator_t  _mpf_expr_standard_table[] = {$/;"	v	typeref:struct:mpexpr_operator_t	file:
_mpq	gmpxx.h	/^inline mpq_class operator"" _mpq(const char* s)$/;"	f
_mpq_cmp_si	gmp.h	1151;"	d
_mpq_cmp_si	mpq/cmp_si.c	/^_mpq_cmp_si (mpq_srcptr q, long n, unsigned long d)$/;"	f
_mpq_cmp_ui	gmp.h	1154;"	d
_mpq_cmp_ui	mpq/cmp_ui.c	/^_mpq_cmp_ui (mpq_srcptr op1, unsigned long int num2, unsigned long int den2)$/;"	f
_mpq_expr_standard_table	demos/expr/exprq.c	/^static const struct mpexpr_operator_t  _mpq_expr_standard_table[] = {$/;"	v	typeref:struct:mpexpr_operator_t	file:
_mpz	gmpxx.h	/^inline mpz_class operator"" _mpz(const char* s)$/;"	f
_mpz_cmp_si	gmp.h	690;"	d
_mpz_cmp_ui	gmp.h	693;"	d
_mpz_expr_standard_table	demos/expr/exprz.c	/^static const struct mpexpr_operator_t  _mpz_expr_standard_table[] = {$/;"	v	typeref:struct:mpexpr_operator_t	file:
_mpz_newalloc	gmp-impl.h	/^_mpz_newalloc (mpz_ptr z, mp_size_t n)$/;"	f
_mpz_newalloc	gmp-impl.h	1955;"	d
_mpz_realloc	gmp.h	615;"	d
_mpz_realloc	mpz/realloc.c	/^_mpz_realloc (mpz_ptr m, mp_size_t new_alloc)$/;"	f
a	gen-jacobitab.c	/^  unsigned char a;$/;"	m	struct:__anon3	file:
a	mpn/generic/jacobi.c	/^  unsigned char a;$/;"	m	struct:__anon25	file:
a	mpn/jacobi.c	/^  unsigned char a;$/;"	m	struct:__anon24	file:
a	tests/mpn/t-hgcd.c	/^struct value { int res; const char *a; const char *b; };$/;"	m	struct:value	file:
a	tests/rand/findlc.c	/^static mpz_t a;$/;"	v	file:
a0	mpn/generic/mulmod_bnm1.c	148;"	d	file:
a0	mpn/generic/mulmod_bnm1.c	328;"	d	file:
a0	mpn/generic/sqrmod_bnm1.c	137;"	d	file:
a0	mpn/generic/sqrmod_bnm1.c	288;"	d	file:
a0	mpn/generic/toom22_mul.c	101;"	d	file:
a0	mpn/generic/toom2_sqr.c	78;"	d	file:
a0	mpn/generic/toom32_mul.c	77;"	d	file:
a0	mpn/generic/toom33_mul.c	101;"	d	file:
a0	mpn/generic/toom3_sqr.c	88;"	d	file:
a0	mpn/generic/toom42_mul.c	81;"	d	file:
a0	mpn/generic/toom43_mul.c	227;"	d	file:
a0	mpn/generic/toom43_mul.c	70;"	d	file:
a0	mpn/generic/toom44_mul.c	120;"	d	file:
a0	mpn/generic/toom4_sqr.c	92;"	d	file:
a0	mpn/generic/toom52_mul.c	249;"	d	file:
a0	mpn/generic/toom52_mul.c	73;"	d	file:
a0	mpn/generic/toom53_mul.c	77;"	d	file:
a0	mpn/generic/toom62_mul.c	77;"	d	file:
a0	mpn/mulmod_bnm1.c	148;"	d	file:
a0	mpn/mulmod_bnm1.c	328;"	d	file:
a0	mpn/sqrmod_bnm1.c	137;"	d	file:
a0	mpn/sqrmod_bnm1.c	288;"	d	file:
a0	mpn/toom22_mul.c	101;"	d	file:
a0	mpn/toom2_sqr.c	78;"	d	file:
a0	mpn/toom32_mul.c	77;"	d	file:
a0	mpn/toom33_mul.c	101;"	d	file:
a0	mpn/toom3_sqr.c	88;"	d	file:
a0	mpn/toom42_mul.c	81;"	d	file:
a0	mpn/toom43_mul.c	227;"	d	file:
a0	mpn/toom43_mul.c	70;"	d	file:
a0	mpn/toom44_mul.c	120;"	d	file:
a0	mpn/toom4_sqr.c	92;"	d	file:
a0	mpn/toom52_mul.c	249;"	d	file:
a0	mpn/toom52_mul.c	73;"	d	file:
a0	mpn/toom53_mul.c	77;"	d	file:
a0	mpn/toom62_mul.c	77;"	d	file:
a0a2	mpn/generic/toom43_mul.c	109;"	d	file:
a0a2	mpn/generic/toom43_mul.c	223;"	d	file:
a0a2	mpn/generic/toom52_mul.c	112;"	d	file:
a0a2	mpn/generic/toom52_mul.c	246;"	d	file:
a0a2	mpn/toom43_mul.c	109;"	d	file:
a0a2	mpn/toom43_mul.c	223;"	d	file:
a0a2	mpn/toom52_mul.c	112;"	d	file:
a0a2	mpn/toom52_mul.c	246;"	d	file:
a1	mpn/generic/mulmod_bnm1.c	149;"	d	file:
a1	mpn/generic/mulmod_bnm1.c	329;"	d	file:
a1	mpn/generic/sqrmod_bnm1.c	138;"	d	file:
a1	mpn/generic/sqrmod_bnm1.c	289;"	d	file:
a1	mpn/generic/toom22_mul.c	102;"	d	file:
a1	mpn/generic/toom2_sqr.c	79;"	d	file:
a1	mpn/generic/toom32_mul.c	78;"	d	file:
a1	mpn/generic/toom33_mul.c	102;"	d	file:
a1	mpn/generic/toom3_sqr.c	89;"	d	file:
a1	mpn/generic/toom42_mul.c	82;"	d	file:
a1	mpn/generic/toom43_mul.c	228;"	d	file:
a1	mpn/generic/toom43_mul.c	71;"	d	file:
a1	mpn/generic/toom44_mul.c	121;"	d	file:
a1	mpn/generic/toom4_sqr.c	93;"	d	file:
a1	mpn/generic/toom52_mul.c	250;"	d	file:
a1	mpn/generic/toom52_mul.c	74;"	d	file:
a1	mpn/generic/toom53_mul.c	78;"	d	file:
a1	mpn/generic/toom62_mul.c	78;"	d	file:
a1	mpn/mulmod_bnm1.c	149;"	d	file:
a1	mpn/mulmod_bnm1.c	329;"	d	file:
a1	mpn/sqrmod_bnm1.c	138;"	d	file:
a1	mpn/sqrmod_bnm1.c	289;"	d	file:
a1	mpn/toom22_mul.c	102;"	d	file:
a1	mpn/toom2_sqr.c	79;"	d	file:
a1	mpn/toom32_mul.c	78;"	d	file:
a1	mpn/toom33_mul.c	102;"	d	file:
a1	mpn/toom3_sqr.c	89;"	d	file:
a1	mpn/toom42_mul.c	82;"	d	file:
a1	mpn/toom43_mul.c	228;"	d	file:
a1	mpn/toom43_mul.c	71;"	d	file:
a1	mpn/toom44_mul.c	121;"	d	file:
a1	mpn/toom4_sqr.c	93;"	d	file:
a1	mpn/toom52_mul.c	250;"	d	file:
a1	mpn/toom52_mul.c	74;"	d	file:
a1	mpn/toom53_mul.c	78;"	d	file:
a1	mpn/toom62_mul.c	78;"	d	file:
a1a3	mpn/generic/toom43_mul.c	111;"	d	file:
a1a3	mpn/generic/toom43_mul.c	225;"	d	file:
a1a3	mpn/generic/toom52_mul.c	113;"	d	file:
a1a3	mpn/generic/toom52_mul.c	248;"	d	file:
a1a3	mpn/toom43_mul.c	111;"	d	file:
a1a3	mpn/toom43_mul.c	225;"	d	file:
a1a3	mpn/toom52_mul.c	113;"	d	file:
a1a3	mpn/toom52_mul.c	248;"	d	file:
a2	mpn/generic/toom32_mul.c	79;"	d	file:
a2	mpn/generic/toom33_mul.c	103;"	d	file:
a2	mpn/generic/toom3_sqr.c	90;"	d	file:
a2	mpn/generic/toom42_mul.c	83;"	d	file:
a2	mpn/generic/toom43_mul.c	229;"	d	file:
a2	mpn/generic/toom43_mul.c	72;"	d	file:
a2	mpn/generic/toom44_mul.c	122;"	d	file:
a2	mpn/generic/toom4_sqr.c	94;"	d	file:
a2	mpn/generic/toom52_mul.c	251;"	d	file:
a2	mpn/generic/toom52_mul.c	75;"	d	file:
a2	mpn/generic/toom53_mul.c	79;"	d	file:
a2	mpn/generic/toom62_mul.c	79;"	d	file:
a2	mpn/toom32_mul.c	79;"	d	file:
a2	mpn/toom33_mul.c	103;"	d	file:
a2	mpn/toom3_sqr.c	90;"	d	file:
a2	mpn/toom42_mul.c	83;"	d	file:
a2	mpn/toom43_mul.c	229;"	d	file:
a2	mpn/toom43_mul.c	72;"	d	file:
a2	mpn/toom44_mul.c	122;"	d	file:
a2	mpn/toom4_sqr.c	94;"	d	file:
a2	mpn/toom52_mul.c	251;"	d	file:
a2	mpn/toom52_mul.c	75;"	d	file:
a2	mpn/toom53_mul.c	79;"	d	file:
a2	mpn/toom62_mul.c	79;"	d	file:
a3	mpn/generic/toom42_mul.c	84;"	d	file:
a3	mpn/generic/toom43_mul.c	230;"	d	file:
a3	mpn/generic/toom43_mul.c	73;"	d	file:
a3	mpn/generic/toom44_mul.c	123;"	d	file:
a3	mpn/generic/toom4_sqr.c	95;"	d	file:
a3	mpn/generic/toom52_mul.c	252;"	d	file:
a3	mpn/generic/toom52_mul.c	76;"	d	file:
a3	mpn/generic/toom53_mul.c	80;"	d	file:
a3	mpn/generic/toom62_mul.c	80;"	d	file:
a3	mpn/toom42_mul.c	84;"	d	file:
a3	mpn/toom43_mul.c	230;"	d	file:
a3	mpn/toom43_mul.c	73;"	d	file:
a3	mpn/toom44_mul.c	123;"	d	file:
a3	mpn/toom4_sqr.c	95;"	d	file:
a3	mpn/toom52_mul.c	252;"	d	file:
a3	mpn/toom52_mul.c	76;"	d	file:
a3	mpn/toom53_mul.c	80;"	d	file:
a3	mpn/toom62_mul.c	80;"	d	file:
a4	mpn/generic/toom52_mul.c	77;"	d	file:
a4	mpn/generic/toom53_mul.c	81;"	d	file:
a4	mpn/generic/toom54_mul.c	131;"	d	file:
a4	mpn/generic/toom54_mul.c	68;"	d	file:
a4	mpn/generic/toom62_mul.c	81;"	d	file:
a4	mpn/toom52_mul.c	77;"	d	file:
a4	mpn/toom53_mul.c	81;"	d	file:
a4	mpn/toom54_mul.c	131;"	d	file:
a4	mpn/toom54_mul.c	68;"	d	file:
a4	mpn/toom62_mul.c	81;"	d	file:
a5	mpn/generic/toom62_mul.c	82;"	d	file:
a5	mpn/generic/toom63_mul.c	106;"	d	file:
a5	mpn/generic/toom63_mul.c	218;"	d	file:
a5	mpn/toom62_mul.c	82;"	d	file:
a5	mpn/toom63_mul.c	106;"	d	file:
a5	mpn/toom63_mul.c	218;"	d	file:
abort	configure	/^    abort ();$/;"	f
abs_sub_add_n	mpn/generic/toom63_mul.c	/^abs_sub_add_n (mp_ptr rm, mp_ptr rp, mp_srcptr rs, mp_size_t n) {$/;"	f	file:
abs_sub_add_n	mpn/toom63_mul.c	/^abs_sub_add_n (mp_ptr rm, mp_ptr rp, mp_srcptr rs, mp_size_t n) {$/;"	f	file:
abs_sub_n	mpn/generic/matrix22_mul.c	/^abs_sub_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f	file:
abs_sub_n	mpn/generic/toom63_mul.c	/^abs_sub_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f	file:
abs_sub_n	mpn/matrix22_mul.c	/^abs_sub_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f	file:
abs_sub_n	mpn/toom63_mul.c	/^abs_sub_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f	file:
ac_fn_c_check_decl	configure	/^ac_fn_c_check_decl ()$/;"	f
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_member	configure	/^ac_fn_c_check_member ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_compute_int	configure	/^ac_fn_c_compute_int ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_check_header_mongrel	configure	/^ac_fn_cxx_check_header_mongrel ()$/;"	f
ac_fn_cxx_check_type	configure	/^ac_fn_cxx_check_type ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	configure	/^ac_fn_cxx_try_link ()$/;"	f
adc	mpn/arm/udiv.asm	/^	adc	d, d, #0		C d = ceil(orig_d \/ 2)$/;"	d
adc	tests/refmpn.c	/^adc (mp_limb_t *w, mp_limb_t x, mp_limb_t y, mp_limb_t c)$/;"	f
add_csaac	mpn/div_qr_2.c	116;"	d	file:
add_csaac	mpn/div_qr_2.c	67;"	d	file:
add_csaac	mpn/div_qr_2.c	81;"	d	file:
add_csaac	mpn/generic/div_qr_2.c	116;"	d	file:
add_csaac	mpn/generic/div_qr_2.c	67;"	d	file:
add_csaac	mpn/generic/div_qr_2.c	81;"	d	file:
add_dat	tune/tuneup.c	/^add_dat (mp_size_t size, double d)$/;"	f
add_mssaaaa	mpn/div_qr_1n_pi1.c	112;"	d	file:
add_mssaaaa	mpn/div_qr_1n_pi1.c	122;"	d	file:
add_mssaaaa	mpn/div_qr_1n_pi1.c	134;"	d	file:
add_mssaaaa	mpn/div_qr_1n_pi1.c	145;"	d	file:
add_mssaaaa	mpn/div_qr_1n_pi1.c	55;"	d	file:
add_mssaaaa	mpn/div_qr_1n_pi1.c	65;"	d	file:
add_mssaaaa	mpn/div_qr_1n_pi1.c	75;"	d	file:
add_mssaaaa	mpn/div_qr_1n_pi1.c	85;"	d	file:
add_mssaaaa	mpn/div_qr_1n_pi1.c	96;"	d	file:
add_mssaaaa	mpn/div_qr_1n_pi1.c	97;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	112;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	122;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	134;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	145;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	55;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	65;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	75;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	85;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	96;"	d	file:
add_mssaaaa	mpn/generic/div_qr_1n_pi1.c	97;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	111;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	121;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	133;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	144;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	54;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	64;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	74;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	84;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	95;"	d	file:
add_mssaaaa	mpn/generic/mod_1_1.c	96;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	111;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	121;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	133;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	144;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	54;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	64;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	74;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	84;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	95;"	d	file:
add_mssaaaa	mpn/mod_1_1.c	96;"	d	file:
add_signed_n	mpn/generic/matrix22_mul.c	/^add_signed_n (mp_ptr rp,$/;"	f	file:
add_signed_n	mpn/matrix22_mul.c	/^add_signed_n (mp_ptr rp,$/;"	f	file:
add_ssaaaa	longlong.h	1009;"	d
add_ssaaaa	longlong.h	1051;"	d
add_ssaaaa	longlong.h	1102;"	d
add_ssaaaa	longlong.h	1182;"	d
add_ssaaaa	longlong.h	1329;"	d
add_ssaaaa	longlong.h	1407;"	d
add_ssaaaa	longlong.h	1516;"	d
add_ssaaaa	longlong.h	1538;"	d
add_ssaaaa	longlong.h	1597;"	d
add_ssaaaa	longlong.h	1780;"	d
add_ssaaaa	longlong.h	1801;"	d
add_ssaaaa	longlong.h	1802;"	d
add_ssaaaa	longlong.h	1825;"	d
add_ssaaaa	longlong.h	1867;"	d
add_ssaaaa	longlong.h	1984;"	d
add_ssaaaa	longlong.h	392;"	d
add_ssaaaa	longlong.h	422;"	d
add_ssaaaa	longlong.h	442;"	d
add_ssaaaa	longlong.h	543;"	d
add_ssaaaa	longlong.h	611;"	d
add_ssaaaa	longlong.h	635;"	d
add_ssaaaa	longlong.h	686;"	d
add_ssaaaa	longlong.h	698;"	d
add_ssaaaa	longlong.h	816;"	d
add_ssaaaa	longlong.h	868;"	d
add_sssaaaa	mpn/div_qr_2.c	101;"	d	file:
add_sssaaaa	mpn/div_qr_2.c	61;"	d	file:
add_sssaaaa	mpn/div_qr_2.c	75;"	d	file:
add_sssaaaa	mpn/div_qr_2.c	92;"	d	file:
add_sssaaaa	mpn/generic/div_qr_1n_pi2.c	56;"	d	file:
add_sssaaaa	mpn/generic/div_qr_1n_pi2.c	65;"	d	file:
add_sssaaaa	mpn/generic/div_qr_1n_pi2.c	77;"	d	file:
add_sssaaaa	mpn/generic/div_qr_1n_pi2.c	86;"	d	file:
add_sssaaaa	mpn/generic/div_qr_1u_pi2.c	56;"	d	file:
add_sssaaaa	mpn/generic/div_qr_1u_pi2.c	65;"	d	file:
add_sssaaaa	mpn/generic/div_qr_1u_pi2.c	77;"	d	file:
add_sssaaaa	mpn/generic/div_qr_1u_pi2.c	86;"	d	file:
add_sssaaaa	mpn/generic/div_qr_2.c	101;"	d	file:
add_sssaaaa	mpn/generic/div_qr_2.c	61;"	d	file:
add_sssaaaa	mpn/generic/div_qr_2.c	75;"	d	file:
add_sssaaaa	mpn/generic/div_qr_2.c	92;"	d	file:
addp4	mpn/ia64/add_n_sub_n.asm	/^	addp4	dp = 0, dp		C				M I$/;"	d
alarm	tests/spinner.c	39;"	d	file:
align	tests/devel/try.c	/^  mp_size_t  align;$/;"	m	struct:dest_t	file:
align	tests/devel/try.c	/^  mp_size_t  align;$/;"	m	struct:source_t	file:
align_pointer	tests/misc.c	/^align_pointer (void *p, size_t align)$/;"	f
align_wp	tune/speed.h	/^  mp_size_t  align_wp;	\/* intended alignment of wp *\/$/;"	m	struct:speed_params
align_wp2	tune/speed.h	/^  mp_size_t  align_wp2; \/* intended alignment of wp2 *\/$/;"	m	struct:speed_params
align_xp	tune/speed.h	/^  mp_size_t  align_xp;	\/* alignment of xp *\/$/;"	m	struct:speed_params
align_yp	tune/speed.h	/^  mp_size_t  align_yp;	\/* alignment of yp *\/$/;"	m	struct:speed_params
all	tests/mpf/t-int_p.c	/^all (mpf_ptr f, int want)$/;"	f
all	tests/t-modlinv.c	/^all (void)$/;"	f
all	tune/tuneup.c	/^all (void)$/;"	f
alloc	gmp-impl.h	/^  mp_size_t alloc;		\/* for sanity checking only *\/$/;"	m	struct:hgcd_matrix
alloc	gmp-impl.h	/^  size_t  alloc;$/;"	m	struct:gmp_asprintf_t
alloc	tests/mpn/t-matrix22.c	/^  mp_size_t alloc;$/;"	m	struct:matrix	file:
alloc_point	gmp-impl.h	/^  void *alloc_point;$/;"	m	struct:tmp_marker
alloc_point	tal-notreent.c	/^  void *alloc_point;$/;"	m	struct:tmp_stack	file:
alloca	demos/calc/calc.c	454;"	d	file:
alloca	gmp-impl.h	195;"	d
alloca	gmp-impl.h	198;"	d
alloca	gmp-impl.h	202;"	d
allocdat	tune/tuneup.c	/^int  allocdat = 0;$/;"	v
allsizes_seen	tests/mpz/t-powm.c	/^allsizes_seen (unsigned int *allsizes)$/;"	f
alt_add	tests/mpz/t-limbs.c	/^alt_add (mpz_ptr r, mpz_srcptr a, mpz_srcptr b)$/;"	f	file:
alt_mul	tests/mpz/t-limbs.c	/^alt_mul (mpz_ptr r, mpz_srcptr a, mpz_srcptr b)$/;"	f	file:
am1	mpn/generic/toom32_mul.c	98;"	d	file:
am1	mpn/toom32_mul.c	98;"	d	file:
amx	mpn/generic/toom44_mul.c	154;"	d	file:
amx	mpn/generic/toom4_sqr.c	117;"	d	file:
amx	mpn/toom44_mul.c	154;"	d	file:
amx	mpn/toom4_sqr.c	117;"	d	file:
analyze_dat	tune/tuneup.c	/^analyze_dat (int final)$/;"	f
and	mpn/sparc64/ultrasparct3/invert_limb.asm	/^	and	d, 1, %g2$/;"	d
and	mpn/x86_64/div_qr_1n_pi1.asm	/^	and	D, U2$/;"	d
and	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^	and	D, U2$/;"	d
ap	tune/tune-gcd-p.c	/^  mp_ptr ap;$/;"	m	struct:bench_data	file:
ap1	mpn/generic/toom32_mul.c	96;"	d	file:
ap1	mpn/toom32_mul.c	96;"	d	file:
approx_tab	mpn/arm/invert_limb.asm	/^approx_tab:$/;"	l
approx_tab	mpn/arm64/invert_limb.asm	/^approx_tab:$/;"	l
approx_tab	mpn/cray/ieee/invert_limb.c	/^static const unsigned short int approx_tab[0x100] =$/;"	v	file:
approx_tab	mpn/s390_64/invert_limb.asm	/^approx_tab:$/;"	l
approx_tab	mpn/sparc64/ultrasparct3/invert_limb.asm	/^approx_tab:$/;"	l
apx	mpn/generic/toom44_mul.c	153;"	d	file:
apx	mpn/generic/toom4_sqr.c	116;"	d	file:
apx	mpn/toom44_mul.c	153;"	d	file:
apx	mpn/toom4_sqr.c	116;"	d	file:
argcount	demos/expr/expr-impl.h	/^  int                             argcount;$/;"	m	struct:mpexpr_control_t
arity	demos/pexpr.c	/^  int arity; \/* 1 or 2 means real arity; 0 means arbitrary.  *\/$/;"	m	struct:functions	file:
as1	mpn/generic/toom43_mul.c	104;"	d	file:
as1	mpn/generic/toom52_mul.c	107;"	d	file:
as1	mpn/generic/toom52_mul.c	244;"	d	file:
as1	mpn/toom43_mul.c	104;"	d	file:
as1	mpn/toom52_mul.c	107;"	d	file:
as1	mpn/toom52_mul.c	244;"	d	file:
as2	mpn/generic/toom43_mul.c	103;"	d	file:
as2	mpn/generic/toom52_mul.c	106;"	d	file:
as2	mpn/generic/toom52_mul.c	245;"	d	file:
as2	mpn/toom43_mul.c	103;"	d	file:
as2	mpn/toom52_mul.c	106;"	d	file:
as2	mpn/toom52_mul.c	245;"	d	file:
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
asm1	mpn/generic/toom43_mul.c	219;"	d	file:
asm1	mpn/generic/toom43_mul.c	99;"	d	file:
asm1	mpn/generic/toom52_mul.c	102;"	d	file:
asm1	mpn/generic/toom52_mul.c	242;"	d	file:
asm1	mpn/toom43_mul.c	219;"	d	file:
asm1	mpn/toom43_mul.c	99;"	d	file:
asm1	mpn/toom52_mul.c	102;"	d	file:
asm1	mpn/toom52_mul.c	242;"	d	file:
asm2	mpn/generic/toom43_mul.c	100;"	d	file:
asm2	mpn/generic/toom43_mul.c	220;"	d	file:
asm2	mpn/generic/toom52_mul.c	103;"	d	file:
asm2	mpn/generic/toom52_mul.c	243;"	d	file:
asm2	mpn/toom43_mul.c	100;"	d	file:
asm2	mpn/toom43_mul.c	220;"	d	file:
asm2	mpn/toom52_mul.c	103;"	d	file:
asm2	mpn/toom52_mul.c	243;"	d	file:
assign_d	gmpxx.h	/^  void assign_d (double d)        { mpf_set_d (mp, d); }$/;"	f	class:__gmp_expr
assign_d	gmpxx.h	/^  void assign_d (double d)        { mpq_set_d (mp, d); }$/;"	f	class:__gmp_expr
assign_d	gmpxx.h	/^  void assign_d (double d)$/;"	f	class:__gmp_expr
assign_si	gmpxx.h	/^  void assign_si(signed long l)$/;"	f	class:__gmp_expr
assign_ui	gmpxx.h	/^  void assign_ui(unsigned long l) { mpf_set_ui(mp, l); }$/;"	f	class:__gmp_expr
assign_ui	gmpxx.h	/^  void assign_ui(unsigned long l) { mpq_set_ui(mp, l, 1); }$/;"	f	class:__gmp_expr
assign_ui	gmpxx.h	/^  void assign_ui(unsigned long l)$/;"	f	class:__gmp_expr
astr	rand/randlc2s.c	/^  const char *astr;		\/* Multiplier in string form. *\/$/;"	m	struct:__gmp_rand_lc_scheme_struct	file:
b	gen-jacobitab.c	/^  unsigned char b;$/;"	m	struct:__anon3	file:
b	mpn/generic/jacobi.c	/^  unsigned char b;$/;"	m	struct:__anon25	file:
b	mpn/jacobi.c	/^  unsigned char b;$/;"	m	struct:__anon24	file:
b	tests/mpn/t-hgcd.c	/^struct value { int res; const char *a; const char *b; };$/;"	m	struct:value	file:
b0	mpn/generic/mulmod_bnm1.c	150;"	d	file:
b0	mpn/generic/mulmod_bnm1.c	330;"	d	file:
b0	mpn/generic/toom22_mul.c	103;"	d	file:
b0	mpn/generic/toom32_mul.c	80;"	d	file:
b0	mpn/generic/toom33_mul.c	104;"	d	file:
b0	mpn/generic/toom42_mul.c	85;"	d	file:
b0	mpn/generic/toom43_mul.c	231;"	d	file:
b0	mpn/generic/toom43_mul.c	74;"	d	file:
b0	mpn/generic/toom44_mul.c	124;"	d	file:
b0	mpn/generic/toom52_mul.c	253;"	d	file:
b0	mpn/generic/toom52_mul.c	78;"	d	file:
b0	mpn/generic/toom53_mul.c	82;"	d	file:
b0	mpn/generic/toom62_mul.c	83;"	d	file:
b0	mpn/generic/toom63_mul.c	107;"	d	file:
b0	mpn/generic/toom63_mul.c	219;"	d	file:
b0	mpn/mulmod_bnm1.c	150;"	d	file:
b0	mpn/mulmod_bnm1.c	330;"	d	file:
b0	mpn/toom22_mul.c	103;"	d	file:
b0	mpn/toom32_mul.c	80;"	d	file:
b0	mpn/toom33_mul.c	104;"	d	file:
b0	mpn/toom42_mul.c	85;"	d	file:
b0	mpn/toom43_mul.c	231;"	d	file:
b0	mpn/toom43_mul.c	74;"	d	file:
b0	mpn/toom44_mul.c	124;"	d	file:
b0	mpn/toom52_mul.c	253;"	d	file:
b0	mpn/toom52_mul.c	78;"	d	file:
b0	mpn/toom53_mul.c	82;"	d	file:
b0	mpn/toom62_mul.c	83;"	d	file:
b0	mpn/toom63_mul.c	107;"	d	file:
b0	mpn/toom63_mul.c	219;"	d	file:
b0b2	mpn/generic/toom43_mul.c	110;"	d	file:
b0b2	mpn/generic/toom43_mul.c	224;"	d	file:
b0b2	mpn/generic/toom52_mul.c	247;"	d	file:
b0b2	mpn/toom43_mul.c	110;"	d	file:
b0b2	mpn/toom43_mul.c	224;"	d	file:
b0b2	mpn/toom52_mul.c	247;"	d	file:
b1	mpn/generic/mulmod_bnm1.c	151;"	d	file:
b1	mpn/generic/mulmod_bnm1.c	331;"	d	file:
b1	mpn/generic/toom22_mul.c	104;"	d	file:
b1	mpn/generic/toom32_mul.c	81;"	d	file:
b1	mpn/generic/toom33_mul.c	105;"	d	file:
b1	mpn/generic/toom42_mul.c	86;"	d	file:
b1	mpn/generic/toom43_mul.c	232;"	d	file:
b1	mpn/generic/toom43_mul.c	75;"	d	file:
b1	mpn/generic/toom44_mul.c	125;"	d	file:
b1	mpn/generic/toom52_mul.c	254;"	d	file:
b1	mpn/generic/toom52_mul.c	79;"	d	file:
b1	mpn/generic/toom53_mul.c	83;"	d	file:
b1	mpn/generic/toom62_mul.c	84;"	d	file:
b1	mpn/generic/toom63_mul.c	108;"	d	file:
b1	mpn/generic/toom63_mul.c	220;"	d	file:
b1	mpn/mulmod_bnm1.c	151;"	d	file:
b1	mpn/mulmod_bnm1.c	331;"	d	file:
b1	mpn/toom22_mul.c	104;"	d	file:
b1	mpn/toom32_mul.c	81;"	d	file:
b1	mpn/toom33_mul.c	105;"	d	file:
b1	mpn/toom42_mul.c	86;"	d	file:
b1	mpn/toom43_mul.c	232;"	d	file:
b1	mpn/toom43_mul.c	75;"	d	file:
b1	mpn/toom44_mul.c	125;"	d	file:
b1	mpn/toom52_mul.c	254;"	d	file:
b1	mpn/toom52_mul.c	79;"	d	file:
b1	mpn/toom53_mul.c	83;"	d	file:
b1	mpn/toom62_mul.c	84;"	d	file:
b1	mpn/toom63_mul.c	108;"	d	file:
b1	mpn/toom63_mul.c	220;"	d	file:
b1d	mpn/generic/toom43_mul.c	112;"	d	file:
b1d	mpn/generic/toom43_mul.c	226;"	d	file:
b1d	mpn/toom43_mul.c	112;"	d	file:
b1d	mpn/toom43_mul.c	226;"	d	file:
b2	mpn/generic/toom33_mul.c	106;"	d	file:
b2	mpn/generic/toom43_mul.c	233;"	d	file:
b2	mpn/generic/toom43_mul.c	76;"	d	file:
b2	mpn/generic/toom44_mul.c	126;"	d	file:
b2	mpn/generic/toom52_mul.c	255;"	d	file:
b2	mpn/generic/toom53_mul.c	84;"	d	file:
b2	mpn/generic/toom63_mul.c	109;"	d	file:
b2	mpn/generic/toom63_mul.c	221;"	d	file:
b2	mpn/toom33_mul.c	106;"	d	file:
b2	mpn/toom43_mul.c	233;"	d	file:
b2	mpn/toom43_mul.c	76;"	d	file:
b2	mpn/toom44_mul.c	126;"	d	file:
b2	mpn/toom52_mul.c	255;"	d	file:
b2	mpn/toom53_mul.c	84;"	d	file:
b2	mpn/toom63_mul.c	109;"	d	file:
b2	mpn/toom63_mul.c	221;"	d	file:
b3	mpn/generic/toom44_mul.c	127;"	d	file:
b3	mpn/generic/toom54_mul.c	132;"	d	file:
b3	mpn/generic/toom54_mul.c	69;"	d	file:
b3	mpn/toom44_mul.c	127;"	d	file:
b3	mpn/toom54_mul.c	132;"	d	file:
b3	mpn/toom54_mul.c	69;"	d	file:
base	demos/expr/expr-impl.h	/^  int                             base;$/;"	m	struct:mpexpr_parse_t
base	demos/expr/t-expr.c	/^  int         base;$/;"	m	struct:data_t	file:
base	gmp-impl.h	/^  int         base;          \/* negative for upper case *\/$/;"	m	struct:doprnt_params_t
base	gmp-impl.h	/^  int base;$/;"	m	struct:powers
base	scanf/doscan.c	/^  int	base;$/;"	m	struct:gmp_doscan_params_t	file:
base	tests/devel/try.c	/^int  base = 10;$/;"	v
bases	gmp-impl.h	/^struct bases$/;"	s
bb	mini-gmp/mini-gmp.c	/^  mp_limb_t bb;$/;"	m	struct:mpn_base_info	file:
bc_bin_uiui	mpz/bin_uiui.c	/^bc_bin_uiui (unsigned int n, unsigned int k)$/;"	f	file:
bench_data	tune/tune-gcd-p.c	/^struct bench_data$/;"	s	file:
bench_gcd	tune/tune-gcd-p.c	/^bench_gcd (void *ctx, int p)$/;"	f	file:
big_base	gen-bases.c	/^mpz_t  big_base;$/;"	v
big_base	gmp-impl.h	/^  mp_limb_t big_base;$/;"	m	struct:bases
big_base_inverted	gen-bases.c	/^mpz_t  big_base_inverted;$/;"	v
big_base_inverted	gmp-impl.h	/^  mp_limb_t big_base_inverted;$/;"	m	struct:bases
bin2kk	mpz/bin_uiui.c	/^static const mp_limb_t bin2kk[] = { ONE_LIMB_ODD_CENTRAL_BINOMIAL_TABLE };$/;"	v	file:
bin2kkinv	mpz/bin_uiui.c	/^static const mp_limb_t bin2kkinv[] = { ONE_LIMB_ODD_CENTRAL_BINOMIAL_INVERSE_TABLE };$/;"	v	file:
bin_smallexaustive	mini-gmp/tests/t-comb.c	/^bin_smallexaustive (unsigned int count)$/;"	f
binv	mpn/generic/trialdiv.c	/^  mp_limb_t binv;$/;"	m	struct:gmp_primes_dtab	file:
binv	mpn/trialdiv.c	/^  mp_limb_t binv;$/;"	m	struct:gmp_primes_dtab	file:
binv_newton_threshold	tune/tuneup.c	/^mp_size_t  binv_newton_threshold        = MP_SIZE_T_MAX;$/;"	v
binvert_limb	gmp-impl.h	3259;"	d
binvert_limb_arith	tune/modlinv.c	135;"	d	file:
binvert_limb_cond	tune/modlinv.c	105;"	d	file:
binvert_limb_loop	tune/modlinv.c	78;"	d	file:
binvert_limb_mul1	tune/modlinv.c	45;"	d	file:
binvert_limb_mul1	tune/modlinv.c	59;"	d	file:
binvert_limb_table	gmp-impl.h	3256;"	d
binvert_limb_table	mp_minv_tab.c	/^const unsigned char  binvert_limb_table[128] = {$/;"	v
bit_size	tests/mpn/t-minvert.c	/^bit_size (mp_srcptr xp, mp_size_t n)$/;"	f	file:
bit_to_n	mpz/bin_uiui.c	/^bit_to_n (mp_limb_t bit) { return (bit*3+4)|1; }$/;"	f	file:
bit_to_n	mpz/oddfac_1.c	/^bit_to_n (mp_limb_t bit) { return (bit*3+4)|1; }$/;"	f	file:
bits	gmpxx.h	/^  mp_bitcnt_t bits;$/;"	m	class:__gmp_expr
bitsp	mpn/generic/hgcd_jacobi.c	/^  unsigned *bitsp;$/;"	m	struct:hgcd_jacobi_ctx	file:
bitsp	mpn/hgcd_jacobi.c	/^  unsigned *bitsp;$/;"	m	struct:hgcd_jacobi_ctx	file:
block	gmp-impl.h	/^  void                      *block;$/;"	m	struct:tmp_debug_entry_t
block_check	mini-gmp/tests/testutils.c	/^block_check  (void *p)$/;"	f	file:
block_end	mini-gmp/tests/testutils.c	/^static unsigned char block_end[8] =$/;"	v	file:
block_init	mini-gmp/tests/testutils.c	/^block_init (size_t *block, size_t size)$/;"	f	file:
block_resieve	primesieve.c	/^block_resieve (mp_ptr bit_array, mp_size_t limbs, mp_limb_t offset,$/;"	f	file:
bm1	mpn/generic/toom32_mul.c	99;"	d	file:
bm1	mpn/toom32_mul.c	99;"	d	file:
bmod_1_to_mod_1_threshold	gmp-impl.h	/^  mp_size_t            bmod_1_to_mod_1_threshold;$/;"	m	struct:cpuvec_t
bmx	mpn/generic/toom44_mul.c	155;"	d	file:
bmx	mpn/toom44_mul.c	155;"	d	file:
bp	mpn/generic/sec_invert.c	175;"	d	file:
bp	mpn/generic/sec_invert.c	91;"	d	file:
bp	mpn/sec_invert.c	175;"	d	file:
bp	mpn/sec_invert.c	91;"	d	file:
bp	tune/tune-gcd-p.c	/^  mp_ptr bp;$/;"	m	struct:bench_data	file:
bp1	mpn/generic/toom32_mul.c	97;"	d	file:
bp1	mpn/toom32_mul.c	97;"	d	file:
bpx	mpn/generic/toom44_mul.c	156;"	d	file:
bpx	mpn/toom44_mul.c	156;"	d	file:
bs1	mpn/generic/toom43_mul.c	215;"	d	file:
bs1	mpn/generic/toom43_mul.c	97;"	d	file:
bs1	mpn/generic/toom52_mul.c	100;"	d	file:
bs1	mpn/generic/toom52_mul.c	238;"	d	file:
bs1	mpn/toom43_mul.c	215;"	d	file:
bs1	mpn/toom43_mul.c	97;"	d	file:
bs1	mpn/toom52_mul.c	100;"	d	file:
bs1	mpn/toom52_mul.c	238;"	d	file:
bs2	mpn/generic/toom43_mul.c	102;"	d	file:
bs2	mpn/generic/toom43_mul.c	216;"	d	file:
bs2	mpn/generic/toom52_mul.c	105;"	d	file:
bs2	mpn/generic/toom52_mul.c	239;"	d	file:
bs2	mpn/toom43_mul.c	102;"	d	file:
bs2	mpn/toom43_mul.c	216;"	d	file:
bs2	mpn/toom52_mul.c	105;"	d	file:
bs2	mpn/toom52_mul.c	239;"	d	file:
bsm1	mpn/generic/toom43_mul.c	217;"	d	file:
bsm1	mpn/generic/toom43_mul.c	98;"	d	file:
bsm1	mpn/generic/toom52_mul.c	101;"	d	file:
bsm1	mpn/generic/toom52_mul.c	240;"	d	file:
bsm1	mpn/toom43_mul.c	217;"	d	file:
bsm1	mpn/toom43_mul.c	98;"	d	file:
bsm1	mpn/toom52_mul.c	101;"	d	file:
bsm1	mpn/toom52_mul.c	240;"	d	file:
bsm2	mpn/generic/toom43_mul.c	101;"	d	file:
bsm2	mpn/generic/toom43_mul.c	218;"	d	file:
bsm2	mpn/generic/toom52_mul.c	104;"	d	file:
bsm2	mpn/generic/toom52_mul.c	241;"	d	file:
bsm2	mpn/toom43_mul.c	101;"	d	file:
bsm2	mpn/toom43_mul.c	218;"	d	file:
bsm2	mpn/toom52_mul.c	104;"	d	file:
bsm2	mpn/toom52_mul.c	241;"	d	file:
bsr	mpn/x86_64/core2/divrem_1.asm	/^	bsr	d, %rcx$/;"	d
bsr	mpn/x86_64/divrem_1.asm	/^	bsr	d, %rcx$/;"	d
buf	gmp-impl.h	/^  char    *buf;$/;"	m	struct:gmp_asprintf_t
buf	gmp-impl.h	/^  char    *buf;$/;"	m	struct:gmp_snprintf_t
byte_diff_highest	tests/misc.c	/^byte_diff_highest (const void *p1, const void *p2, mp_size_t size)$/;"	f
byte_diff_lowest	tests/misc.c	/^byte_diff_lowest (const void *p1, const void *p2, mp_size_t size)$/;"	f
byte_overlap_p	tests/refmpn.c	/^byte_overlap_p (const void *v_xp, mp_size_t xsize,$/;"	f
byte_trace	tests/trace.c	/^byte_trace (const char *name, const void *ptr, mp_size_t size)$/;"	f
byte_tracen	tests/trace.c	/^byte_tracen (const char *name, int num, const void *ptr, mp_size_t size)$/;"	f
c	rand/randlc2s.c	/^  unsigned long int c;		\/* Addend. *\/$/;"	m	struct:__gmp_rand_lc_scheme_struct	file:
cache	tune/speed.h	/^  int	     cache;$/;"	m	struct:speed_params
cached_measure	tune/tuneup.c	/^cached_measure (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n, int k,$/;"	f
calc_completion_entry	demos/calc/calcread.c	/^calc_completion_entry (const char *text, int state)$/;"	f
calc_help	demos/calc/calc.c	/^calc_help (void)$/;"	f
calc_init_readline	demos/calc/calcread.c	/^calc_init_readline (void)$/;"	f
calc_input	demos/calc/calcread.c	/^calc_input (char *buf, size_t max_size)$/;"	f
calc_keywords	demos/calc/calclex.c	/^const struct calc_keywords_t  calc_keywords[] = {$/;"	v	typeref:struct:calc_keywords_t
calc_keywords_t	demos/calc/calc-common.h	/^struct calc_keywords_t {$/;"	s
calc_more_input	demos/calc/calclex.c	/^int  calc_more_input = 0;$/;"	v
calc_option_readline	demos/calc/calc.c	/^int calc_option_readline = -1;$/;"	v
call	mpn/and_n.c	36;"	d	file:
call	mpn/and_n.c	41;"	d	file:
call	mpn/and_n.c	46;"	d	file:
call	mpn/and_n.c	51;"	d	file:
call	mpn/and_n.c	56;"	d	file:
call	mpn/and_n.c	61;"	d	file:
call	mpn/and_n.c	66;"	d	file:
call	mpn/and_n.c	71;"	d	file:
call	mpn/andn_n.c	36;"	d	file:
call	mpn/andn_n.c	41;"	d	file:
call	mpn/andn_n.c	46;"	d	file:
call	mpn/andn_n.c	51;"	d	file:
call	mpn/andn_n.c	56;"	d	file:
call	mpn/andn_n.c	61;"	d	file:
call	mpn/andn_n.c	66;"	d	file:
call	mpn/andn_n.c	71;"	d	file:
call	mpn/generic/logops_n.c	36;"	d	file:
call	mpn/generic/logops_n.c	41;"	d	file:
call	mpn/generic/logops_n.c	46;"	d	file:
call	mpn/generic/logops_n.c	51;"	d	file:
call	mpn/generic/logops_n.c	56;"	d	file:
call	mpn/generic/logops_n.c	61;"	d	file:
call	mpn/generic/logops_n.c	66;"	d	file:
call	mpn/generic/logops_n.c	71;"	d	file:
call	mpn/ior_n.c	36;"	d	file:
call	mpn/ior_n.c	41;"	d	file:
call	mpn/ior_n.c	46;"	d	file:
call	mpn/ior_n.c	51;"	d	file:
call	mpn/ior_n.c	56;"	d	file:
call	mpn/ior_n.c	61;"	d	file:
call	mpn/ior_n.c	66;"	d	file:
call	mpn/ior_n.c	71;"	d	file:
call	mpn/iorn_n.c	36;"	d	file:
call	mpn/iorn_n.c	41;"	d	file:
call	mpn/iorn_n.c	46;"	d	file:
call	mpn/iorn_n.c	51;"	d	file:
call	mpn/iorn_n.c	56;"	d	file:
call	mpn/iorn_n.c	61;"	d	file:
call	mpn/iorn_n.c	66;"	d	file:
call	mpn/iorn_n.c	71;"	d	file:
call	mpn/nand_n.c	36;"	d	file:
call	mpn/nand_n.c	41;"	d	file:
call	mpn/nand_n.c	46;"	d	file:
call	mpn/nand_n.c	51;"	d	file:
call	mpn/nand_n.c	56;"	d	file:
call	mpn/nand_n.c	61;"	d	file:
call	mpn/nand_n.c	66;"	d	file:
call	mpn/nand_n.c	71;"	d	file:
call	mpn/nior_n.c	36;"	d	file:
call	mpn/nior_n.c	41;"	d	file:
call	mpn/nior_n.c	46;"	d	file:
call	mpn/nior_n.c	51;"	d	file:
call	mpn/nior_n.c	56;"	d	file:
call	mpn/nior_n.c	61;"	d	file:
call	mpn/nior_n.c	66;"	d	file:
call	mpn/nior_n.c	71;"	d	file:
call	mpn/xnor_n.c	36;"	d	file:
call	mpn/xnor_n.c	41;"	d	file:
call	mpn/xnor_n.c	46;"	d	file:
call	mpn/xnor_n.c	51;"	d	file:
call	mpn/xnor_n.c	56;"	d	file:
call	mpn/xnor_n.c	61;"	d	file:
call	mpn/xnor_n.c	66;"	d	file:
call	mpn/xnor_n.c	71;"	d	file:
call	mpn/xor_n.c	36;"	d	file:
call	mpn/xor_n.c	41;"	d	file:
call	mpn/xor_n.c	46;"	d	file:
call	mpn/xor_n.c	51;"	d	file:
call	mpn/xor_n.c	56;"	d	file:
call	mpn/xor_n.c	61;"	d	file:
call	mpn/xor_n.c	66;"	d	file:
call	mpn/xor_n.c	71;"	d	file:
call	tests/devel/try.c	/^call (struct each_t *e, tryfun_t function)$/;"	f
call	tests/mpn/t-instrument.c	/^} call[100];$/;"	v	typeref:struct:__anon28
call_getrusage	tune/freq.c	711;"	d	file:
call_getrusage	tune/time.c	651;"	d	file:
call_gettimeofday	tune/freq.c	698;"	d	file:
call_gettimeofday	tune/time.c	641;"	d	file:
call_gettimeofday	tune/time.c	825;"	d	file:
call_rand_algs	tests/misc.c	/^call_rand_algs (void (*func) (const char *, gmp_randstate_ptr))$/;"	f
call_site	tests/mpn/t-instrument.c	/^  void  *call_site;$/;"	m	struct:__anon28	file:
calling_conventions_check	tests/amd64check.c	/^calling_conventions_check (void)$/;"	f
calling_conventions_check	tests/arm32check.c	/^calling_conventions_check (void)$/;"	f
calling_conventions_check	tests/x86check.c	/^calling_conventions_check (void)$/;"	f
calling_conventions_fenv	tests/amd64check.c	/^} calling_conventions_fenv;$/;"	v	typeref:struct:__anon29
calling_conventions_fenv	tests/x86check.c	/^} calling_conventions_fenv;$/;"	v	typeref:struct:__anon30
calling_conventions_function	tests/misc.c	/^mp_limb_t (*calling_conventions_function) (ANYARGS);$/;"	v
calling_conventions_values	tests/amd64check.c	/^mp_limb_t calling_conventions_values[23] =$/;"	v
calling_conventions_values	tests/arm32check.c	/^mp_limb_t calling_conventions_values[29] =$/;"	v
calling_conventions_values	tests/x86check.c	/^mp_limb_t calling_conventions_values[17] =$/;"	v
canonicalize	gmpxx.h	/^  void canonicalize() { mpq_canonicalize(mp); }$/;"	f	class:__gmp_expr
carry	tests/devel/try.c	/^  char  carry;$/;"	m	struct:try_t	file:
carry	tests/devel/try.c	/^mp_limb_t       carry;$/;"	v
carry_array	tests/devel/try.c	/^mp_limb_t  carry_array[] = {$/;"	v
carry_index	tests/devel/try.c	/^int        carry_index;$/;"	v
carry_sign	tests/devel/try.c	/^  char  carry_sign;$/;"	m	struct:try_t	file:
cfdiv_q_2exp	mpz/cfdiv_q_2exp.c	/^cfdiv_q_2exp (mpz_ptr w, mpz_srcptr u, mp_bitcnt_t cnt, int dir)$/;"	f	file:
cfdiv_q_2exp	mpz/cfdiv_q_2exp.c	39;"	d	file:
cfdiv_r_2exp	mpz/cfdiv_r_2exp.c	/^cfdiv_r_2exp (mpz_ptr w, mpz_srcptr u, mp_bitcnt_t cnt, int dir)$/;"	f	file:
cfdiv_r_2exp	mpz/cfdiv_r_2exp.c	42;"	d	file:
cgt_unittime	tune/time.c	/^static double  cgt_unittime;$/;"	v	file:
cgt_works_p	tune/time.c	/^cgt_works_p (void)$/;"	f
chars_per_limb	gen-bases.c	/^int    chars_per_limb;$/;"	v
chars_per_limb	gmp-impl.h	/^  int chars_per_limb;$/;"	m	struct:bases
check	mpn/alpha/ev6/slot.pl	/^sub check {$/;"	s
check	tests/cxx/t-mix.cc	/^check (void)$/;"	f
check	tests/cxx/t-ops3.cc	/^void check(){$/;"	f
check	tests/mpn/t-instrument.c	/^check (void)$/;"	f
check	tests/mpn/t-scan.c	/^check (void)$/;"	f
checkWilson	mini-gmp/tests/t-comb.c	/^void checkWilson (mpz_t f, unsigned long n)$/;"	f
check_0x81c25113	tests/mpn/t-get_d.c	/^check_0x81c25113 (void)$/;"	f
check_2n_plus_1	tests/mpz/t-set_d.c	/^check_2n_plus_1 (void)$/;"	f
check_a_zero	tests/mpz/t-jac.c	/^check_a_zero (void)$/;"	f
check_add	tests/mpz/t-limbs.c	/^check_add (void)$/;"	f	file:
check_add_1	tests/mpn/t-aors_1.c	/^check_add_1 (void)$/;"	f
check_align_option	tune/speed.c	/^check_align_option (const char *name, mp_size_t align)$/;"	f
check_all	tests/mpf/t-trunc.c	/^check_all (mpf_ptr src, mpf_ptr trunc, mpf_ptr ceil, mpf_ptr floor)$/;"	f
check_all	tests/mpq/t-aors.c	/^check_all (mpq_ptr x, mpq_ptr y, mpq_ptr want_add, mpq_ptr want_sub)$/;"	f
check_all	tests/mpq/t-equal.c	/^check_all (mpq_ptr x, mpq_ptr y, int want)$/;"	f
check_all	tests/mpq/t-get_str.c	/^check_all (mpq_srcptr q, int base, const char *want)$/;"	f
check_all	tests/mpz/t-aorsmul.c	/^check_all (mpz_ptr w, mpz_ptr x, mpz_ptr y)$/;"	f
check_all	tests/mpz/t-cmp.c	/^check_all (mpz_ptr x, mpz_ptr y, int want_cmp, int want_cmpabs)$/;"	f
check_all	tests/mpz/t-div_2exp.c	/^check_all (mpz_ptr a, unsigned long d)$/;"	f
check_all	tests/mpz/t-lcm.c	/^check_all (mpz_ptr want, mpz_srcptr x_orig, mpz_srcptr y_orig)$/;"	f
check_all_inplace	tests/mpz/t-aorsmul.c	/^check_all_inplace (mpz_ptr w, mpz_ptr y)$/;"	f
check_base	tests/mpz/t-pow.c	/^check_base (mpz_srcptr base)$/;"	f
check_bigc	tests/rand/t-lc2exp.c	/^check_bigc (void)$/;"	f
check_bigc1	tests/rand/t-lc2exp.c	/^check_bigc1 (void)$/;"	f
check_bigm	tests/rand/t-lc2exp.c	/^check_bigm (void)$/;"	f
check_bigs	tests/rand/t-lc2exp.c	/^check_bigs (void)$/;"	f
check_bool_conversion	tests/cxx/t-cxx11.cc	/^void check_bool_conversion ()$/;"	f
check_clr_extend	tests/mpz/bit.c	/^check_clr_extend (void)$/;"	f
check_clz	tests/t-count_zeros.c	/^check_clz (int want, mp_limb_t n)$/;"	f
check_com_negs	tests/mpz/bit.c	/^check_com_negs (void)$/;"	f
check_common_type	tests/cxx/t-cxx11.cc	/^void check_common_type ()$/;"	f
check_composites	mini-gmp/tests/t-pprime_p.c	/^check_composites (void)$/;"	f
check_composites	tests/mpz/t-pprime_p.c	/^check_composites (int count)$/;"	f
check_consistency	tests/mpf/t-gsprec.c	/^check_consistency (void)$/;"	f
check_ctz	tests/t-count_zeros.c	/^check_ctz (int want, mp_limb_t n)$/;"	f
check_data	mini-gmp/tests/t-cmp_d.c	/^check_data (void)$/;"	f
check_data	mini-gmp/tests/t-cong.c	/^check_data (void)$/;"	f
check_data	tests/mpf/t-cmp_si.c	/^check_data (void)$/;"	f
check_data	tests/mpf/t-eq.c	/^check_data (void)$/;"	f
check_data	tests/mpf/t-get_si.c	/^check_data (void)$/;"	f
check_data	tests/mpf/t-inp_str.c	/^check_data (void)$/;"	f
check_data	tests/mpf/t-pow_ui.c	/^check_data (void)$/;"	f
check_data	tests/mpf/t-set_si.c	/^check_data (void)$/;"	f
check_data	tests/mpf/t-set_ui.c	/^check_data (void)$/;"	f
check_data	tests/mpf/t-sub.c	/^check_data (void)$/;"	f
check_data	tests/mpn/t-divrem_1.c	/^check_data (void)$/;"	f
check_data	tests/mpq/t-aors.c	/^check_data (void)$/;"	f
check_data	tests/mpq/t-cmp_si.c	/^check_data (void)$/;"	f
check_data	tests/mpq/t-get_str.c	/^check_data (void)$/;"	f
check_data	tests/mpq/t-inp_str.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-aorsmul.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-cmp_d.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-cmp_si.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-cong.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-cong_2exp.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-divis.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-divis_2exp.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-export.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-gcd.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-get_si.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-import.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-inp_str.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-jac.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-oddeven.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-popcount.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-set_d.c	/^check_data (void)$/;"	f
check_data	tests/mpz/t-set_si.c	/^check_data (void)$/;"	f
check_data	tests/t-sub.c	/^check_data (void)$/;"	f
check_data_inplace_ui	tests/mpz/t-aorsmul.c	/^check_data_inplace_ui (void)$/;"	f
check_decr_data	tests/mpn/t-iord_u.c	/^check_decr_data (void)$/;"	f
check_f	demos/expr/t-expr.c	/^check_f (void)$/;"	f
check_f	tests/misc/t-printf.c	/^check_f (void)$/;"	f
check_f	tests/misc/t-scanf.c	/^check_f (void)$/;"	f
check_fib_table	tests/mpz/t-fib_ui.c	/^check_fib_table (void)$/;"	f
check_funcs	tests/mpz/t-limbs.c	/^check_funcs (const char *name,$/;"	f	file:
check_functions	tests/mpn/t-fat.c	/^check_functions (void)$/;"	f
check_ieee_denorm	tests/mpn/t-get_d.c	/^check_ieee_denorm (void)$/;"	f
check_ieee_overflow	tests/mpn/t-get_d.c	/^check_ieee_overflow (void)$/;"	f
check_in	tests/mpz/t-io_raw.c	/^check_in (void)$/;"	f
check_incr_data	tests/mpn/t-iord_u.c	/^check_incr_data (void)$/;"	f
check_inf	tests/mpn/t-get_d.c	/^check_inf (void)$/;"	f
check_infinity	mini-gmp/tests/t-cmp_d.c	/^check_infinity (void)$/;"	f
check_infinity	tests/mpf/t-cmp_d.c	/^check_infinity (void)$/;"	f
check_infinity	tests/mpz/t-cmp_d.c	/^check_infinity (void)$/;"	f
check_input	tests/cxx/t-locale.cc	/^check_input (void)$/;"	f
check_input	tests/misc/t-locale.c	/^check_input (void)$/;"	f
check_jacobi_factored	tests/mpz/t-jac.c	/^check_jacobi_factored (void)$/;"	f
check_kolmo1	tests/mpz/t-gcd.c	/^check_kolmo1 (void)$/;"	f
check_kolmo2	tests/mpz/t-gcd.c	/^check_kolmo2 (void)$/;"	f
check_large_quotients	tests/mpz/t-jac.c	/^check_large_quotients (void)$/;"	f
check_limb	tests/misc/t-printf.c	/^check_limb (void)$/;"	f
check_limbdata	tests/mpf/t-get_si.c	/^check_limbdata (void)$/;"	f
check_limbdata	tests/mpf/t-get_ui.c	/^check_limbdata (void)$/;"	f
check_limits	tests/cxx/t-misc.cc	/^check_limits (void)$/;"	f
check_low_z_one	mini-gmp/tests/t-cmp_d.c	/^check_low_z_one (void)$/;"	f
check_low_z_one	tests/mpz/t-cmp_d.c	/^check_low_z_one (void)$/;"	f
check_macros	tests/cxx/t-cast.cc	/^check_macros (void)$/;"	f
check_max	tests/mpf/t-get_si.c	/^check_max (void)$/;"	f
check_max	tests/mpz/t-get_si.c	/^check_max (void)$/;"	f
check_misc	tests/misc/t-printf.c	/^check_misc (void)$/;"	f
check_misc	tests/misc/t-scanf.c	/^check_misc (void)$/;"	f
check_mod	tests/mpn/t-perfsqr.c	/^check_mod (void)$/;"	f
check_mod_2	tests/mpn/t-perfsqr.c	/^check_mod_2 (mp_limb_t d, mp_limb_t inv, mp_limb_t got_hi, mp_limb_t got_lo)$/;"	f
check_modulo	tests/mpz/t-perfsqr.c	/^check_modulo (void)$/;"	f
check_monotonic	tests/mpq/t-get_d.c	/^check_monotonic (int argc, char **argv)$/;"	f
check_move_assign	tests/cxx/t-cxx11.cc	/^void check_move_assign ()$/;"	f
check_move_init	tests/cxx/t-cxx11.cc	/^void check_move_init ()$/;"	f
check_mpf	tests/cxx/t-assign.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-binary.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-constr.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-istream.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-misc.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-ops.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-ostream.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-prec.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-rand.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-ternary.cc	/^check_mpf (void)$/;"	f
check_mpf	tests/cxx/t-unary.cc	/^check_mpf (void)$/;"	f
check_mpq	tests/cxx/t-assign.cc	/^check_mpq (void)$/;"	f
check_mpq	tests/cxx/t-binary.cc	/^check_mpq (void)$/;"	f
check_mpq	tests/cxx/t-constr.cc	/^check_mpq (void)$/;"	f
check_mpq	tests/cxx/t-istream.cc	/^check_mpq (void)$/;"	f
check_mpq	tests/cxx/t-misc.cc	/^check_mpq (void)$/;"	f
check_mpq	tests/cxx/t-ops.cc	/^check_mpq (void)$/;"	f
check_mpq	tests/cxx/t-ostream.cc	/^check_mpq (void)$/;"	f
check_mpq	tests/cxx/t-ternary.cc	/^check_mpq (void)$/;"	f
check_mpq	tests/cxx/t-unary.cc	/^check_mpq (void)$/;"	f
check_mpz	tests/cxx/t-assign.cc	/^check_mpz (void)$/;"	f
check_mpz	tests/cxx/t-binary.cc	/^check_mpz (void)$/;"	f
check_mpz	tests/cxx/t-constr.cc	/^check_mpz (void)$/;"	f
check_mpz	tests/cxx/t-istream.cc	/^check_mpz (void)$/;"	f
check_mpz	tests/cxx/t-misc.cc	/^check_mpz (void)$/;"	f
check_mpz	tests/cxx/t-ops.cc	/^check_mpz (void)$/;"	f
check_mpz	tests/cxx/t-ostream.cc	/^check_mpz (void)$/;"	f
check_mpz	tests/cxx/t-rand.cc	/^check_mpz (void)$/;"	f
check_mpz	tests/cxx/t-unary.cc	/^check_mpz (void)$/;"	f
check_mpz_1	tests/cxx/t-ternary.cc	/^check_mpz_1 (void)$/;"	f	file:
check_mpz_10	tests/cxx/t-ternary.cc	/^check_mpz_10 (void)$/;"	f	file:
check_mpz_11	tests/cxx/t-ternary.cc	/^check_mpz_11 (void)$/;"	f	file:
check_mpz_12	tests/cxx/t-ternary.cc	/^check_mpz_12 (void)$/;"	f	file:
check_mpz_13	tests/cxx/t-ternary.cc	/^check_mpz_13 (void)$/;"	f	file:
check_mpz_14	tests/cxx/t-ternary.cc	/^check_mpz_14 (void)$/;"	f	file:
check_mpz_15	tests/cxx/t-ternary.cc	/^check_mpz_15 (void)$/;"	f	file:
check_mpz_16	tests/cxx/t-ternary.cc	/^check_mpz_16 (void)$/;"	f	file:
check_mpz_17	tests/cxx/t-ternary.cc	/^check_mpz_17 (void)$/;"	f	file:
check_mpz_18	tests/cxx/t-ternary.cc	/^check_mpz_18 (void)$/;"	f	file:
check_mpz_19	tests/cxx/t-ternary.cc	/^check_mpz_19 (void)$/;"	f	file:
check_mpz_2	tests/cxx/t-ternary.cc	/^check_mpz_2 (void)$/;"	f	file:
check_mpz_20	tests/cxx/t-ternary.cc	/^check_mpz_20 (void)$/;"	f	file:
check_mpz_21	tests/cxx/t-ternary.cc	/^check_mpz_21 (void)$/;"	f	file:
check_mpz_22	tests/cxx/t-ternary.cc	/^check_mpz_22 (void)$/;"	f	file:
check_mpz_23	tests/cxx/t-ternary.cc	/^check_mpz_23 (void)$/;"	f	file:
check_mpz_24	tests/cxx/t-ternary.cc	/^check_mpz_24 (void)$/;"	f	file:
check_mpz_25	tests/cxx/t-ternary.cc	/^check_mpz_25 (void)$/;"	f	file:
check_mpz_26	tests/cxx/t-ternary.cc	/^check_mpz_26 (void)$/;"	f	file:
check_mpz_27	tests/cxx/t-ternary.cc	/^check_mpz_27 (void)$/;"	f	file:
check_mpz_28	tests/cxx/t-ternary.cc	/^check_mpz_28 (void)$/;"	f	file:
check_mpz_29	tests/cxx/t-ternary.cc	/^check_mpz_29 (void)$/;"	f	file:
check_mpz_3	tests/cxx/t-ternary.cc	/^check_mpz_3 (void)$/;"	f	file:
check_mpz_30	tests/cxx/t-ternary.cc	/^check_mpz_30 (void)$/;"	f	file:
check_mpz_31	tests/cxx/t-ternary.cc	/^check_mpz_31 (void)$/;"	f	file:
check_mpz_32	tests/cxx/t-ternary.cc	/^check_mpz_32 (void)$/;"	f	file:
check_mpz_4	tests/cxx/t-ternary.cc	/^check_mpz_4 (void)$/;"	f	file:
check_mpz_5	tests/cxx/t-ternary.cc	/^check_mpz_5 (void)$/;"	f	file:
check_mpz_6	tests/cxx/t-ternary.cc	/^check_mpz_6 (void)$/;"	f	file:
check_mpz_7	tests/cxx/t-ternary.cc	/^check_mpz_7 (void)$/;"	f	file:
check_mpz_8	tests/cxx/t-ternary.cc	/^check_mpz_8 (void)$/;"	f	file:
check_mpz_9	tests/cxx/t-ternary.cc	/^check_mpz_9 (void)$/;"	f	file:
check_mul	tests/mpz/t-limbs.c	/^check_mul (void)$/;"	f
check_n	tests/misc/t-printf.c	/^check_n (void)$/;"	f
check_n	tests/misc/t-scanf.c	/^check_n (void)$/;"	f
check_nega	tests/rand/t-lc2exp.c	/^check_nega (void)$/;"	f
check_noexcept	tests/cxx/t-cxx11.cc	/^void check_noexcept ()$/;"	f
check_obstack_vprintf	tests/misc/t-printf.c	/^check_obstack_vprintf (const char *want, const char *fmt, va_list ap)$/;"	f
check_one	mini-gmp/tests/t-cmp_d.c	/^check_one (const char *name, mpz_srcptr x, double y, int cmp, int cmpabs)$/;"	f
check_one	mini-gmp/tests/t-cong.c	/^check_one (mpz_srcptr a, mpz_srcptr c, mpz_srcptr d, int want)$/;"	f
check_one	mini-gmp/tests/t-pprime_p.c	/^check_one (mpz_srcptr n, int want)$/;"	f	file:
check_one	tests/misc/t-printf.c	/^check_one (const char *want, const char *fmt, ...)$/;"	f
check_one	tests/mpf/t-cmp_d.c	/^check_one (const char *name, mpf_srcptr x, double y, int cmp)$/;"	f
check_one	tests/mpf/t-div.c	/^check_one (const char *desc, mpf_ptr got, mpf_srcptr u, mpf_srcptr v)$/;"	f
check_one	tests/mpf/t-mul_ui.c	/^check_one (const char *desc, mpf_ptr got, mpf_srcptr u, unsigned long v)$/;"	f
check_one	tests/mpf/t-set_q.c	/^check_one (mpf_ptr got, mpq_srcptr q)$/;"	f
check_one	tests/mpf/t-trunc.c	/^check_one (mpf_srcptr src, mpf_srcptr trunc, mpf_srcptr ceil, mpf_srcptr floor)$/;"	f
check_one	tests/mpf/t-ui_div.c	/^check_one (const char *desc, mpf_ptr got, unsigned long u, mpf_srcptr v)$/;"	f
check_one	tests/mpn/logic.c	/^check_one (mp_srcptr refp, mp_srcptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n, const char *funcname)$/;"	f
check_one	tests/mpn/t-bdiv.c	/^check_one (mp_ptr qp, mp_srcptr rp, mp_limb_t rh,$/;"	f
check_one	tests/mpn/t-div.c	/^check_one (mp_ptr qp, mp_srcptr rp,$/;"	f	file:
check_one	tests/mpn/t-iord_u.c	/^check_one (const char *name, int i,$/;"	f
check_one	tests/mpn/t-mod_1.c	/^check_one (mp_srcptr ap, mp_size_t n, mp_limb_t b)$/;"	f	file:
check_one	tests/mpq/t-equal.c	/^check_one (mpq_srcptr x, mpq_srcptr y, int want)$/;"	f
check_one	tests/mpq/t-get_str.c	/^check_one (mpq_srcptr q, int base, const char *want)$/;"	f
check_one	tests/mpq/t-set_str.c	/^check_one (mpq_srcptr want, int base, const char *str)$/;"	f
check_one	tests/mpz/t-aorsmul.c	/^check_one (mpz_srcptr w, mpz_srcptr x, mpz_srcptr y)$/;"	f
check_one	tests/mpz/t-cmp.c	/^check_one (mpz_ptr x, mpz_ptr y, int want_cmp, int want_cmpabs)$/;"	f
check_one	tests/mpz/t-cmp_d.c	/^check_one (const char *name, mpz_srcptr x, double y, int cmp, int cmpabs)$/;"	f
check_one	tests/mpz/t-cong.c	/^check_one (mpz_srcptr a, mpz_srcptr c, mpz_srcptr d, int want)$/;"	f
check_one	tests/mpz/t-cong_2exp.c	/^check_one (mpz_srcptr a, mpz_srcptr c, unsigned long d, int want)$/;"	f
check_one	tests/mpz/t-div_2exp.c	/^check_one (mpz_srcptr a, unsigned long d)$/;"	f
check_one	tests/mpz/t-divis.c	/^check_one (mpz_srcptr a, mpz_srcptr d, int want)$/;"	f
check_one	tests/mpz/t-divis_2exp.c	/^check_one (mpz_srcptr a, unsigned long d, int want)$/;"	f
check_one	tests/mpz/t-pow.c	/^check_one (mpz_srcptr want, mpz_srcptr base, unsigned long exp)$/;"	f
check_one	tests/mpz/t-pprime_p.c	/^check_one (mpz_srcptr n, int want)$/;"	f
check_one	tests/mpz/t-root.c	/^check_one (mpz_t root1, mpz_t x2, unsigned long nth, int res, int i)$/;"	f
check_one	tests/mpz/t-set_f.c	/^check_one (mpz_srcptr z)$/;"	f
check_one	tests/mpz/t-set_str.c	/^check_one (mpz_srcptr want, int fail, int base, const char *str)$/;"	f
check_one	tests/rand/t-iset.c	/^check_one (const char *name, gmp_randstate_ptr src)$/;"	f
check_one	tests/rand/t-urbui.c	/^check_one (const char *name, gmp_randstate_ptr rstate)$/;"	f
check_one	tests/rand/t-urmui.c	/^check_one (const char *name, gmp_randstate_ptr rstate)$/;"	f
check_one	tests/t-parity.c	/^check_one (int want, unsigned long n)$/;"	f
check_one_2exp	mini-gmp/tests/t-cmp_d.c	/^check_one_2exp (void)$/;"	f
check_one_2exp	tests/mpz/t-cmp_d.c	/^check_one_2exp (void)$/;"	f
check_one_inplace	tests/mpz/t-aorsmul.c	/^check_one_inplace (mpz_srcptr w, mpz_srcptr y)$/;"	f
check_one_ui	tests/mpz/t-aorsmul.c	/^check_one_ui (mpz_ptr w, mpz_ptr x, unsigned long y)$/;"	f
check_one_ui_inplace	tests/mpz/t-aorsmul.c	/^check_one_ui_inplace (mpz_ptr w, unsigned long y)$/;"	f
check_onebit	tests/mpf/t-get_d_2exp.c	/^check_onebit (void)$/;"	f	file:
check_onebit	tests/mpn/t-get_d.c	/^check_onebit (void)$/;"	f
check_onebit	tests/mpq/t-get_d.c	/^check_onebit (void)$/;"	f
check_onebit	tests/mpz/t-get_d.c	/^check_onebit (void)$/;"	f
check_onebit	tests/mpz/t-get_d_2exp.c	/^check_onebit (void)$/;"	f	file:
check_onebit	tests/mpz/t-popcount.c	/^check_onebit (void)$/;"	f
check_onebits	mini-gmp/tests/t-cmp_d.c	/^check_onebits (void)$/;"	f
check_onebits	tests/mpz/t-cmp_d.c	/^check_onebits (void)$/;"	f
check_out	tests/mpz/t-io_raw.c	/^check_out (void)$/;"	f
check_output	tests/cxx/t-locale.cc	/^check_output (void)$/;"	f
check_params	tests/rand/t-urndmm.c	/^check_params (void)$/;"	f
check_plain	tests/misc/t-printf.c	/^check_plain (const char *want, const char *fmt_orig, ...)$/;"	f
check_pn	mini-gmp/tests/t-pprime_p.c	/^check_pn (mpz_ptr n, int want)$/;"	f	file:
check_pn	tests/mpz/t-pprime_p.c	/^check_pn (mpz_ptr n, int want)$/;"	f
check_pp	tests/mpn/t-perfsqr.c	/^check_pp (void)$/;"	f
check_primes	mini-gmp/tests/t-pprime_p.c	/^check_primes (void)$/;"	f	file:
check_primes	tests/mpz/t-lcm.c	/^check_primes (void)$/;"	f
check_primes	tests/mpz/t-pprime_p.c	/^check_primes (void)$/;"	f	file:
check_print	tests/mpf/t-trunc.c	/^check_print (mpf_srcptr src, mpf_srcptr got, mpf_srcptr want)$/;"	f
check_putback_tellg	tests/cxx/t-istream.cc	/^check_putback_tellg (void)$/;"	f
check_q	demos/expr/t-expr.c	/^check_q (void)$/;"	f
check_q	tests/misc/t-printf.c	/^check_q (void)$/;"	f
check_q	tests/misc/t-scanf.c	/^check_q (void)$/;"	f
check_rand	tests/mpf/t-div.c	/^check_rand (void)$/;"	f
check_rand	tests/mpf/t-mul_ui.c	/^check_rand (void)$/;"	f
check_rand	tests/mpf/t-set_q.c	/^check_rand (void)$/;"	f
check_rand	tests/mpf/t-sqrt_ui.c	/^check_rand (void)$/;"	f
check_rand	tests/mpf/t-sub.c	/^check_rand (int argc, char **argv)$/;"	f
check_rand	tests/mpf/t-ui_div.c	/^check_rand (void)$/;"	f
check_rand	tests/mpn/t-get_d.c	/^check_rand (void)$/;"	f
check_rand	tests/mpn/t-scan.c	/^check_rand (void)$/;"	f
check_rand	tests/mpq/t-aors.c	/^check_rand (void)$/;"	f
check_rand	tests/mpz/t-get_d_2exp.c	/^check_rand (void)$/;"	f	file:
check_rand	tests/mpz/t-hamdist.c	/^check_rand (void)$/;"	f
check_rand	tests/mpz/t-io_raw.c	/^check_rand (void)$/;"	f
check_rand1	tests/mpf/t-sqrt.c	/^check_rand1 (int argc, char **argv)$/;"	f
check_rand2	tests/mpf/t-sqrt.c	/^check_rand2 (void)$/;"	f
check_randinit	tests/cxx/t-rand.cc	/^check_randinit (void)$/;"	f
check_random	mini-gmp/tests/t-cong.c	/^check_random (int argc, char *argv[])$/;"	f
check_random	tests/mpf/t-eq.c	/^check_random (long reps)$/;"	f
check_random	tests/mpf/t-set.c	/^check_random (long reps)$/;"	f
check_random	tests/mpq/t-get_d.c	/^check_random (int argc, char **argv)$/;"	f
check_random	tests/mpq/t-md_2exp.c	/^check_random ()$/;"	f
check_random	tests/mpz/bit.c	/^check_random (int argc, char *argv[])$/;"	f
check_random	tests/mpz/dive_ui.c	/^check_random (int argc, char *argv[])$/;"	f
check_random	tests/mpz/t-aorsmul.c	/^check_random (int argc, char *argv[])$/;"	f
check_random	tests/mpz/t-cong.c	/^check_random (int argc, char *argv[])$/;"	f
check_random	tests/mpz/t-cong_2exp.c	/^check_random (int reps)$/;"	f
check_random	tests/mpz/t-div_2exp.c	/^check_random (int argc, char *argv[])$/;"	f
check_random	tests/mpz/t-divis.c	/^check_random (int reps)$/;"	f
check_random	tests/mpz/t-perfpow.c	/^check_random (int reps)$/;"	f
check_random	tests/mpz/t-popcount.c	/^check_random (void)$/;"	f
check_random	tests/mpz/t-pow.c	/^check_random (int reps)$/;"	f
check_random	tests/t-sub.c	/^check_random (void)$/;"	f
check_random_bits	tests/mpz/t-cong_2exp.c	/^check_random_bits (int reps)$/;"	f
check_ref	tests/mpz/t-scan.c	/^check_ref (void)$/;"	f
check_reuse	tests/mpf/t-set.c	/^check_reuse (void)$/;"	f
check_reuse_three	tests/mpf/t-div.c	/^check_reuse_three (void)$/;"	f
check_roinit	tests/mpz/t-limbs.c	/^check_roinit (void)$/;"	f	file:
check_round	tests/mpf/t-get_d_2exp.c	/^check_round (void)$/;"	f	file:
check_round	tests/mpz/t-get_d_2exp.c	/^check_round (void)$/;"	f	file:
check_samples	tests/mpq/t-set_str.c	/^check_samples (void)$/;"	f
check_samples	tests/mpz/t-mul_i.c	/^check_samples (void)$/;"	f
check_samples	tests/mpz/t-set_str.c	/^check_samples (void)$/;"	f
check_sequence	tests/mpz/t-lucnum_ui.c	/^check_sequence (int argc, char *argv[])$/;"	f
check_si	mini-gmp/tests/t-signed.c	/^check_si (const mpz_t sz, long si)$/;"	f
check_si_cmp	mini-gmp/tests/t-signed.c	/^check_si_cmp (const mpz_t sz, const mpz_t oz, long si, long oi, int c)$/;"	f
check_single	tests/mpz/bit.c	/^check_single (void)$/;"	f
check_size	tune/tuneup.c	/^  mp_size_t         check_size;$/;"	m	struct:param_t	file:
check_small	mini-gmp/tests/t-pprime_p.c	/^check_small (void)$/;"	f	file:
check_small	tests/mpz/t-pprime_p.c	/^check_small (void)$/;"	f
check_sqrt	tests/mpz/t-perfsqr.c	/^check_sqrt (int reps)$/;"	f
check_squares_zi	tests/mpz/t-jac.c	/^check_squares_zi (void)$/;"	f
check_sub_1	tests/mpn/t-aors_1.c	/^check_sub_1 (void)$/;"	f
check_tests	tests/mpz/t-perfpow.c	/^check_tests ()$/;"	f
check_thresholds	tests/mpn/t-fat.c	/^check_thresholds (void)$/;"	f
check_tstbit	tests/mpz/bit.c	/^check_tstbit (void)$/;"	f
check_twobit	tests/mpn/t-get_d.c	/^check_twobit (void)$/;"	f
check_twobits	tests/mpn/t-scan.c	/^check_twobits (void)$/;"	f
check_twobits	tests/mpz/t-hamdist.c	/^check_twobits (void)$/;"	f
check_twobits_exhaustive	tests/mpn/t-scan.c	/^check_twobits_exhaustive (void)$/;"	f
check_ui_range	tests/mpz/t-gcd_ui.c	/^check_ui_range (void)$/;"	f	file:
check_underflow	tests/mpn/t-get_d.c	/^check_underflow (void)$/;"	f
check_user_defined_literal	tests/cxx/t-cxx11.cc	/^void check_user_defined_literal ()$/;"	f
check_various	tests/mpf/t-div.c	/^check_various (void)$/;"	f
check_various	tests/mpf/t-mul_ui.c	/^check_various (void)$/;"	f
check_various	tests/mpf/t-set_q.c	/^check_various (void)$/;"	f
check_various	tests/mpf/t-trunc.c	/^check_various (void)$/;"	f
check_various	tests/mpf/t-ui_div.c	/^check_various (void)$/;"	f
check_various	tests/mpq/t-equal.c	/^check_various (void)$/;"	f
check_various	tests/mpz/t-cmp.c	/^check_various (void)$/;"	f
check_various	tests/mpz/t-div_2exp.c	/^check_various (void)$/;"	f
check_various	tests/mpz/t-pow.c	/^check_various (void)$/;"	f
check_various	tests/mpz/t-set_f.c	/^check_various (void)$/;"	f
check_various	tests/t-count_zeros.c	/^check_various (void)$/;"	f
check_various	tests/t-parity.c	/^check_various (void)$/;"	f
check_vasprintf	tests/misc/t-printf.c	/^check_vasprintf (const char *want, const char *fmt, va_list ap)$/;"	f
check_vfprintf	tests/misc/t-printf.c	/^check_vfprintf (const char *want, const char *fmt, va_list ap)$/;"	f
check_vfprintf_fp	tests/misc/t-printf.c	/^FILE  *check_vfprintf_fp;$/;"	v
check_vsnprintf	tests/misc/t-printf.c	/^check_vsnprintf (const char *want, const char *fmt, va_list ap)$/;"	f
check_vsprintf	tests/misc/t-printf.c	/^check_vsprintf (const char *want, const char *fmt, va_list ap)$/;"	f
check_z	demos/expr/t-expr.c	/^check_z (void)$/;"	f
check_z	tests/misc/t-printf.c	/^check_z (void)$/;"	f
check_z	tests/misc/t-scanf.c	/^check_z (void)$/;"	f
check_zero	tests/mpz/t-get_d_2exp.c	/^check_zero (void)$/;"	f	file:
check_zero	tests/rand/t-lc2exp.c	/^check_zero (unsigned long m2exp)$/;"	f
checkf	tests/cxx/t-ops2.cc	/^void checkf (){$/;"	f
checki	tests/cxx/t-iostream.cc	/^checki ()$/;"	f
checko	tests/cxx/t-iostream.cc	/^checko ()$/;"	f
checkprimes	mini-gmp/tests/t-comb.c	/^checkprimes (unsigned long p1, unsigned long p2, unsigned long p3)$/;"	f
checkqf	tests/cxx/t-ops2.cc	/^void checkqf (){$/;"	f
checkz	tests/cxx/t-ops2.cc	/^void checkz (){$/;"	f
chk_default_seed	tests/rand/t-mt.c	/^chk_default_seed (void)$/;"	f
choice	tests/devel/try.c	/^const struct choice_t *choice = NULL;$/;"	v	typeref:struct:choice_t
choice	tune/speed.c	/^struct choice_t  *choice;$/;"	v	typeref:struct:choice_t
choice_array	tests/devel/try.c	/^const struct choice_t choice_array[] = {$/;"	v	typeref:struct:choice_t
choice_t	tests/devel/try.c	/^struct choice_t {$/;"	s	file:
choice_t	tune/speed.c	/^struct choice_t {$/;"	s	file:
cleanup_and_exit	demos/pexpr.c	/^cleanup_and_exit (int sig)$/;"	f
clk_tck	tune/time.c	/^clk_tck (void)$/;"	f
clock_getres	tune/time.c	342;"	d	file:
clock_gettime	tune/time.c	341;"	d	file:
clrl	mpn/m68k/lshift.asm	/^	clrl	d0			C initialize carry$/;"	d
clrl	mpn/m68k/mc68020/aorsmul_1.asm	/^	clrl	d1$/;"	d
clrl	mpn/m68k/mc68020/aorsmul_1.asm	/^	clrl	d5$/;"	d
clrl	mpn/m68k/mc68020/mul_1.asm	/^	clrl	d1$/;"	d
clrl	mpn/m68k/mc68020/mul_1.asm	/^	clrl	d3$/;"	d
clrl	mpn/m68k/rshift.asm	/^	clrl	d0			C initialize carry$/;"	d
cmp	mpn/arm/udiv.asm	/^	cmp	d, #0x80000000		C check divisor msb and clear carry$/;"	d
cmp	mpn/arm/v6t2/divrem_1.asm	/^	cmp	d, #0$/;"	d
cmp	mpn/arm/v6t2/divrem_1.asm	/^	cmp	d, r11$/;"	d
cmp	mpn/x86_64/core2/divrem_1.asm	/^	cmp	d, %rax$/;"	d
cmp	mpn/x86_64/div_qr_1n_pi1.asm	/^	cmp	D, %rax$/;"	d
cmp	mpn/x86_64/divrem_1.asm	/^	cmp	d, %rax			C$/;"	d
cmp	mpn/x86_64/divrem_1.asm	/^	cmp	d, %rax$/;"	d
cmp	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^	cmp	D, %rax$/;"	d
cnsts	mpn/x86/pentium4/sse2/popcount.asm	/^cnsts:$/;"	l
common_type	gmpxx.h	/^  struct common_type <__gmp_expr<T, U> >$/;"	s	namespace:std
common_type	gmpxx.h	/^  struct common_type <__gmp_expr<T, U>, __gmp_expr<V, W> >$/;"	s	namespace:std
compare	tests/devel/try.c	/^compare (void)$/;"	f
compare_double	tune/tune-gcd-p.c	/^compare_double(const void *ap, const void *bp)$/;"	f	file:
compare_double	tune/tuneup.c	/^compare_double (const void *ap, const void *bp)$/;"	f	file:
compare_si	tests/mpz/t-mul_i.c	/^compare_si (long y)$/;"	f
compare_ui	tests/mpz/t-mul_i.c	/^compare_ui (unsigned long y)$/;"	f
compute_v	mpn/gcdext.c	/^compute_v (mp_ptr vp,$/;"	f	file:
compute_v	mpn/generic/gcdext.c	/^compute_v (mp_ptr vp,$/;"	f	file:
const	gen-psqr.c	94;"	d	file:
control	tests/amd64check.c	/^  int  control;$/;"	m	struct:__anon29	file:
control	tests/x86check.c	/^  unsigned  control;$/;"	m	struct:__anon30	file:
control_alloc	demos/expr/expr-impl.h	/^  int                             control_alloc;$/;"	m	struct:mpexpr_parse_t
control_stack	demos/expr/expr-impl.h	/^  struct mpexpr_control_t         *control_stack;$/;"	m	struct:mpexpr_parse_t	typeref:struct:mpexpr_parse_t::mpexpr_control_t
control_top	demos/expr/expr-impl.h	/^  int                             control_top;$/;"	m	struct:mpexpr_parse_t
conv	gmp-impl.h	/^  int         conv;          \/* choices above *\/$/;"	m	struct:doprnt_params_t
count_leading_zeros	longlong.h	1028;"	d
count_leading_zeros	longlong.h	1080;"	d
count_leading_zeros	longlong.h	1173;"	d
count_leading_zeros	longlong.h	1190;"	d
count_leading_zeros	longlong.h	1361;"	d
count_leading_zeros	longlong.h	1484;"	d
count_leading_zeros	longlong.h	1575;"	d
count_leading_zeros	longlong.h	1709;"	d
count_leading_zeros	longlong.h	1817;"	d
count_leading_zeros	longlong.h	2127;"	d
count_leading_zeros	longlong.h	233;"	d
count_leading_zeros	longlong.h	250;"	d
count_leading_zeros	longlong.h	270;"	d
count_leading_zeros	longlong.h	290;"	d
count_leading_zeros	longlong.h	333;"	d
count_leading_zeros	longlong.h	414;"	d
count_leading_zeros	longlong.h	535;"	d
count_leading_zeros	longlong.h	559;"	d
count_leading_zeros	longlong.h	629;"	d
count_leading_zeros	longlong.h	659;"	d
count_leading_zeros	longlong.h	913;"	d
count_leading_zeros	longlong.h	937;"	d
count_leading_zeros	longlong.h	953;"	d
count_leading_zeros	longlong.h	967;"	d
count_leading_zeros	longlong.h	977;"	d
count_leading_zeros_32	mpn/sparc64/sparc64.h	164;"	d
count_leading_zeros_gcc_clz	longlong.h	155;"	d
count_leading_zeros_gcc_clz	longlong.h	161;"	d
count_trailing_zeros	longlong.h	1037;"	d
count_trailing_zeros	longlong.h	1300;"	d
count_trailing_zeros	longlong.h	2167;"	d
count_trailing_zeros	longlong.h	2179;"	d
count_trailing_zeros	longlong.h	235;"	d
count_trailing_zeros	longlong.h	349;"	d
count_trailing_zeros	longlong.h	536;"	d
count_trailing_zeros	longlong.h	560;"	d
count_trailing_zeros	longlong.h	987;"	d
count_trailing_zeros	longlong.h	991;"	d
count_trailing_zeros_gcc_ctz	longlong.h	169;"	d
count_trailing_zeros_gcc_ctz	longlong.h	175;"	d
coverage	mpn/alpha/ev6/slot.pl	/^sub coverage {$/;"	s
cps	mpn/generic/trialdiv.c	/^  mp_limb_t cps[7];	\/* ppp values pre-computed for mpn_mod_1s_4p *\/$/;"	m	struct:gmp_primes_ptab	file:
cps	mpn/trialdiv.c	/^  mp_limb_t cps[7];	\/* ppp values pre-computed for mpn_mod_1s_4p *\/$/;"	m	struct:gmp_primes_ptab	file:
cputime	demos/pexpr.c	/^cputime (void)$/;"	f
cputime	tests/devel/anymul_1.c	/^cputime ()$/;"	f
cputime	tests/devel/aors_n.c	/^cputime ()$/;"	f
cputime	tests/devel/copy.c	/^cputime ()$/;"	f
cputime	tests/devel/divmod_1.c	/^cputime ()$/;"	f
cputime	tests/devel/divrem.c	/^cputime ()$/;"	f
cputime	tests/devel/logops_n.c	/^cputime ()$/;"	f
cputime	tests/devel/shift.c	/^cputime ()$/;"	f
cpuvec_t	gmp-impl.h	/^struct cpuvec_t {$/;"	s
cpuvec_t	tests/mpn/t-fat.c	/^struct cpuvec_t {$/;"	s	file:
ctz_tab	mpn/arm/dive_1.asm	/^ctz_tab:$/;"	l
ctz_table	mpn/ia64/gcd_1.asm	/^ctz_table:$/;"	l
ctz_table	mpn/sparc64/gcd_1.asm	/^ctz_table:$/;"	l
current	tal-notreent.c	/^static tmp_stack *current = &xxx;$/;"	v	file:
current_total_allocation	tal-notreent.c	/^static unsigned long current_total_allocation = 0;$/;"	v	file:
cxx_isspace	cxx/ismpf.cc	77;"	d	file:
cxx_isspace	cxx/ismpz.cc	53;"	d	file:
cycles_limit	tune/time.c	/^static double  cycles_limit = 1e100;$/;"	v	file:
cycles_works_buf	tune/time.c	/^static jmp_buf  cycles_works_buf;$/;"	v	file:
cycles_works_handler	tune/time.c	/^cycles_works_handler (int sig)$/;"	f	file:
cycles_works_p	tune/time.c	/^cycles_works_p (void)$/;"	f
d	gmp-impl.h	/^  double d;$/;"	m	union:double_extract
d	gmp-impl.h	/^  double d;$/;"	m	union:ieee_double_extract
d	gmp-impl.h	/^  unsigned long d;		   \/* current index in s[] *\/$/;"	m	struct:__anon14
d	mini-gmp/tests/t-double.c	/^  double d;$/;"	m	struct:__anon20	file:
d	mpn/generic/div_qr_1n_pi2.c	/^  mp_limb_t d;$/;"	m	struct:precomp_div_1_pi2	file:
d	mpn/generic/div_qr_1u_pi2.c	/^  mp_limb_t d;$/;"	m	struct:precomp_div_1_pi2	file:
d	tests/devel/try.c	/^  struct dest_each_t    d[NUM_DESTS];$/;"	m	struct:each_t	typeref:struct:each_t::dest_each_t	file:
d	tests/devel/try.c	/^struct dest_t  d[NUM_DESTS];$/;"	v	typeref:struct:dest_t
d	tune/tuneup.c	/^  double     d;$/;"	m	struct:dat_t	file:
d0	mini-gmp/mini-gmp.c	/^  mp_limb_t d1, d0;$/;"	m	struct:gmp_div_inverse	file:
d1	mini-gmp/mini-gmp.c	/^  mp_limb_t d1, d0;$/;"	m	struct:gmp_div_inverse	file:
d_trace	tests/trace.c	/^d_trace (const char *name, double d)$/;"	f
dat	tune/tuneup.c	/^} *dat = NULL;$/;"	v	typeref:struct:dat_t
dat_t	tune/tuneup.c	/^struct dat_t {$/;"	s	file:
data	demos/expr/t-expr.c	/^  const struct data_t  *data;$/;"	m	struct:datalist_t	typeref:struct:datalist_t::data_t	file:
data	tests/devel/try.c	/^  char  data;$/;"	m	struct:try_t	file:
data1	mpn/ia64/dive_1.asm	/^data1	0,0x01, 0,0xAB, 0,0xCD, 0,0xB7, 0,0x39, 0,0xA3, 0,0xC5, 0,0xEF$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0x11, 0,0x3B, 0,0x5D, 0,0xC7, 0,0x49, 0,0x33, 0,0x55, 0,0xFF$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0x21, 0,0xCB, 0,0xED, 0,0xD7, 0,0x59, 0,0xC3, 0,0xE5, 0,0x0F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0x31, 0,0x5B, 0,0x7D, 0,0xE7, 0,0x69, 0,0x53, 0,0x75, 0,0x1F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0x41, 0,0xEB, 0,0x0D, 0,0xF7, 0,0x79, 0,0xE3, 0,0x05, 0,0x2F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0x51, 0,0x7B, 0,0x9D, 0,0x07, 0,0x89, 0,0x73, 0,0x95, 0,0x3F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0x61, 0,0x0B, 0,0x2D, 0,0x17, 0,0x99, 0,0x03, 0,0x25, 0,0x4F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0x71, 0,0x9B, 0,0xBD, 0,0x27, 0,0xA9, 0,0x93, 0,0xB5, 0,0x5F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0x81, 0,0x2B, 0,0x4D, 0,0x37, 0,0xB9, 0,0x23, 0,0x45, 0,0x6F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0x91, 0,0xBB, 0,0xDD, 0,0x47, 0,0xC9, 0,0xB3, 0,0xD5, 0,0x7F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0xA1, 0,0x4B, 0,0x6D, 0,0x57, 0,0xD9, 0,0x43, 0,0x65, 0,0x8F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0xB1, 0,0xDB, 0,0xFD, 0,0x67, 0,0xE9, 0,0xD3, 0,0xF5, 0,0x9F$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0xC1, 0,0x6B, 0,0x8D, 0,0x77, 0,0xF9, 0,0x63, 0,0x85, 0,0xAF$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0xD1, 0,0xFB, 0,0x1D, 0,0x87, 0,0x09, 0,0xF3, 0,0x15, 0,0xBF$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0xE1, 0,0x8B, 0,0xAD, 0,0x97, 0,0x19, 0,0x83, 0,0xA5, 0,0xCF$/;"	l
data1	mpn/ia64/dive_1.asm	/^data1	0,0xF1, 0,0x1B, 0,0x3D, 0,0xA7, 0,0x29, 0,0x13, 0,0x35, 0,0xDF$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x01, 0,0xAB, 0,0xCD, 0,0xB7, 0,0x39, 0,0xA3, 0,0xC5, 0,0xEF$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x11, 0,0x3B, 0,0x5D, 0,0xC7, 0,0x49, 0,0x33, 0,0x55, 0,0xFF$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x21, 0,0xCB, 0,0xED, 0,0xD7, 0,0x59, 0,0xC3, 0,0xE5, 0,0x0F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x31, 0,0x5B, 0,0x7D, 0,0xE7, 0,0x69, 0,0x53, 0,0x75, 0,0x1F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x41, 0,0xEB, 0,0x0D, 0,0xF7, 0,0x79, 0,0xE3, 0,0x05, 0,0x2F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x51, 0,0x7B, 0,0x9D, 0,0x07, 0,0x89, 0,0x73, 0,0x95, 0,0x3F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x61, 0,0x0B, 0,0x2D, 0,0x17, 0,0x99, 0,0x03, 0,0x25, 0,0x4F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x71, 0,0x9B, 0,0xBD, 0,0x27, 0,0xA9, 0,0x93, 0,0xB5, 0,0x5F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x81, 0,0x2B, 0,0x4D, 0,0x37, 0,0xB9, 0,0x23, 0,0x45, 0,0x6F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0x91, 0,0xBB, 0,0xDD, 0,0x47, 0,0xC9, 0,0xB3, 0,0xD5, 0,0x7F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0xA1, 0,0x4B, 0,0x6D, 0,0x57, 0,0xD9, 0,0x43, 0,0x65, 0,0x8F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0xB1, 0,0xDB, 0,0xFD, 0,0x67, 0,0xE9, 0,0xD3, 0,0xF5, 0,0x9F$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0xC1, 0,0x6B, 0,0x8D, 0,0x77, 0,0xF9, 0,0x63, 0,0x85, 0,0xAF$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0xD1, 0,0xFB, 0,0x1D, 0,0x87, 0,0x09, 0,0xF3, 0,0x15, 0,0xBF$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0xE1, 0,0x8B, 0,0xAD, 0,0x97, 0,0x19, 0,0x83, 0,0xA5, 0,0xCF$/;"	l
data1	mpn/ia64/mode1o.asm	/^data1	0,0xF1, 0,0x1B, 0,0x3D, 0,0xA7, 0,0x29, 0,0x13, 0,0x35, 0,0xDF$/;"	l
data_alloc	demos/expr/expr-impl.h	/^  int                             data_alloc;$/;"	m	struct:mpexpr_parse_t
data_f	demos/expr/t-expr.c	/^const struct data_t  data_f[] = {$/;"	v	typeref:struct:data_t
data_fill	tune/speed.c	/^data_fill (mp_ptr ptr, mp_size_t size)$/;"	f
data_high	tune/tuneup.c	/^  int               data_high;$/;"	m	struct:param_t	file:
data_inited	demos/expr/expr-impl.h	/^  int                             data_inited;$/;"	m	struct:mpexpr_parse_t
data_q	demos/expr/t-expr.c	/^const struct data_t  data_q[] = {$/;"	v	typeref:struct:data_t
data_stack	demos/expr/expr-impl.h	/^  union mpX_t                     *data_stack;$/;"	m	struct:mpexpr_parse_t	typeref:union:mpexpr_parse_t::mpX_t
data_t	demos/expr/t-expr.c	/^struct data_t {$/;"	s	file:
data_top	demos/expr/expr-impl.h	/^  int                             data_top;$/;"	m	struct:mpexpr_parse_t
data_z	demos/expr/t-expr.c	/^const struct data_t  data_z[] = {$/;"	v	typeref:struct:data_t
data_zf	demos/expr/t-expr.c	/^const struct data_t  data_zf[] = {$/;"	v	typeref:struct:data_t
data_zq	demos/expr/t-expr.c	/^const struct data_t  data_zq[] = {$/;"	v	typeref:struct:data_t
data_zqf	demos/expr/t-expr.c	/^struct data_t  data_zqf[] = {$/;"	v	typeref:struct:data_t
datalist_t	demos/expr/t-expr.c	/^struct datalist_t {$/;"	s	file:
dc_bdiv_q_threshold	tune/tuneup.c	/^mp_size_t  dc_bdiv_q_threshold          = MP_SIZE_T_MAX;$/;"	v
dc_bdiv_qr_threshold	tune/tuneup.c	/^mp_size_t  dc_bdiv_qr_threshold         = MP_SIZE_T_MAX;$/;"	v
dc_div_qr_threshold	tune/tuneup.c	/^mp_size_t  dc_div_qr_threshold          = MP_SIZE_T_MAX;$/;"	v
dc_divappr_q_threshold	tune/tuneup.c	/^mp_size_t  dc_divappr_q_threshold       = MP_SIZE_T_MAX;$/;"	v
ddsi_div	tests/mpz/reuse.c	/^} static ddsi_div[] =$/;"	v	file:
ddsi_div_func	mini-gmp/tests/t-reuse.c	/^typedef unsigned long int (*ddsi_div_func) (mpz_t, mpz_t, const mpz_t, unsigned long int);$/;"	t	file:
ddsi_div_func	tests/mpz/reuse.c	/^typedef unsigned long int (*ddsi_div_func) (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);$/;"	t	file:
ddsi_div_func_names	mini-gmp/tests/t-reuse.c	/^const char *ddsi_div_func_names[] =$/;"	v
ddsi_div_funcs	mini-gmp/tests/t-reuse.c	/^ddsi_div_func ddsi_div_funcs[] =$/;"	v
ddss_div	tests/mpz/reuse.c	/^} static ddss_div[] =$/;"	v	file:
ddss_div_func	mini-gmp/tests/t-reuse.c	/^typedef void (*ddss_div_func) (mpz_t, mpz_t, const mpz_t, const mpz_t);$/;"	t	file:
ddss_div_func	tests/mpz/reuse.c	/^typedef void (*ddss_div_func) (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);$/;"	t	file:
ddss_div_func_names	mini-gmp/tests/t-reuse.c	/^const char *ddss_div_func_names[] =$/;"	v
ddss_div_funcs	mini-gmp/tests/t-reuse.c	/^ddss_div_func ddss_div_funcs[] =$/;"	v
debug_dummyf	tests/rand/gen.c	/^static void *debug_dummyf = mpf_dump;$/;"	v	file:
debug_dummyz	tests/rand/gen.c	/^static void *debug_dummyz = mpz_dump;$/;"	v	file:
debug_foo	tests/rand/spect.c	/^debug_foo()$/;"	f
debug_mp	tests/mpn/t-hgcd.c	/^debug_mp (mpz_t x, int base)$/;"	f	file:
debug_mp	tests/mpn/t-hgcd_appr.c	/^debug_mp (mpz_t x, int base)$/;"	f	file:
debug_mp	tests/mpq/io.c	/^debug_mp (mpq_t x, int base)$/;"	f
debug_mp	tests/mpz/bit.c	/^debug_mp (mpz_srcptr x, int base)$/;"	f
debug_mp	tests/mpz/convert.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/io.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/logic.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-addsub.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-cdiv_ui.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-fdiv.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-fdiv_ui.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-gcd.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-mul.c	/^debug_mp (mpz_t x)$/;"	f
debug_mp	tests/mpz/t-powm.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-remove.c	/^debug_mp (mpz_t x)$/;"	f
debug_mp	tests/mpz/t-root.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-sqrtrem.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-tdiv.c	/^debug_mp (mpz_t x, int base)$/;"	f
debug_mp	tests/mpz/t-tdiv_ui.c	/^debug_mp (mpz_t x, int base)$/;"	f
decimal_point	tests/misc/t-locale.c	/^const char *decimal_point;$/;"	v
decode_table	gen-jacobitab.c	/^} decode_table[13] = {$/;"	v	typeref:struct:__anon3	file:
decode_table	mpn/generic/jacobi.c	/^} decode_table[13] = {$/;"	v	typeref:struct:__anon25	file:
decode_table	mpn/jacobi.c	/^} decode_table[13] = {$/;"	v	typeref:struct:__anon24	file:
default_state	rand/randmt.c	/^static const gmp_uint_least32_t default_state[N] =$/;"	v	file:
den	tests/mpq/t-md_2exp.c	/^  const char     *den;$/;"	m	struct:pair_t	file:
denorm_min	gmpxx.h	/^    static mpf_class denorm_min() { return mpf_class(); }$/;"	f	class:std::numeric_limits
denorm_min	gmpxx.h	/^    static mpq_class denorm_min() { return mpq_class(); }$/;"	f	class:std::numeric_limits
denorm_min	gmpxx.h	/^    static mpz_class denorm_min() { return mpz_class(); }$/;"	f	class:std::numeric_limits
dest_each_t	tests/devel/try.c	/^struct dest_each_t {$/;"	s	file:
dest_t	tests/devel/try.c	/^struct dest_t {$/;"	s	file:
di	mini-gmp/mini-gmp.c	/^  mp_limb_t di;$/;"	m	struct:gmp_div_inverse	file:
diff1	tests/mpz/t-nextprime.c	/^short diff1[] =$/;"	v
diff3	tests/mpz/t-nextprime.c	/^short diff3[] =$/;"	v
diff4	tests/mpz/t-nextprime.c	/^short diff4[] =$/;"	v
diff5	tests/mpz/t-nextprime.c	/^short diff5[] =$/;"	v
digit_value_tab	mpf/set_str.c	62;"	d	file:
digit_value_tab	mpz/inp_str.c	43;"	d	file:
digit_value_tab	mpz/set_str.c	42;"	d	file:
digits	gmpxx.h	/^    static const int digits = 0;$/;"	m	class:std::numeric_limits
digits10	gmpxx.h	/^    static const int digits10 = 0;$/;"	m	class:std::numeric_limits
digits_in_base	gmp-impl.h	/^  size_t digits_in_base;	\/* number of corresponding digits *\/$/;"	m	struct:powers
dinv	mpn/generic/sec_pi1_div.c	/^       mp_limb_t dinv,$/;"	v
dinv	mpn/sec_pi1_div_qr.c	/^       mp_limb_t dinv,$/;"	v
dinv	mpn/sec_pi1_div_r.c	/^       mp_limb_t dinv,$/;"	v
dip	mpn/generic/div_qr_1n_pi2.c	/^  mp_limb_t dip[2];$/;"	m	struct:precomp_div_1_pi2	file:
dip	mpn/generic/div_qr_1u_pi2.c	/^  mp_limb_t dip[2];$/;"	m	struct:precomp_div_1_pi2	file:
dis_func	tests/mpf/reuse.c	/^typedef void (*dis_func) (mpf_ptr, unsigned long int, mpf_srcptr);$/;"	t	file:
dis_func_names	tests/mpf/reuse.c	/^const char *dis_func_names[] =$/;"	v
dis_funcs	tests/mpf/reuse.c	/^dis_func dis_funcs[] =$/;"	v
disassemble	mpn/alpha/ev6/slot.pl	/^sub disassemble {$/;"	s
disassemble	mpn/x86/k6/cross.pl	/^sub disassemble {$/;"	s
div1	mpn/generic/hgcd2.c	/^div1 (mp_ptr rp,$/;"	f	file:
div1	mpn/generic/hgcd2_jacobi.c	/^div1 (mp_ptr rp,$/;"	f	file:
div1	mpn/hgcd2.c	/^div1 (mp_ptr rp,$/;"	f	file:
div1	mpn/hgcd2_jacobi.c	/^div1 (mp_ptr rp,$/;"	f	file:
div2	mpn/generic/hgcd2.c	/^div2 (mp_ptr rp,$/;"	f	file:
div2	mpn/generic/hgcd2_jacobi.c	/^div2 (mp_ptr rp,$/;"	f	file:
div2	mpn/hgcd2.c	/^div2 (mp_ptr rp,$/;"	f	file:
div2	mpn/hgcd2_jacobi.c	/^div2 (mp_ptr rp,$/;"	f	file:
div_func	mini-gmp/tests/t-div.c	/^typedef void div_func (mpz_t, const mpz_t, const mpz_t);$/;"	t	file:
div_func	mini-gmp/tests/t-div_2exp.c	/^typedef void div_func (mpz_t, const mpz_t, mp_bitcnt_t);$/;"	t	file:
div_qr_1_norm_threshold	tune/tuneup.c	/^mp_size_t  div_qr_1_norm_threshold      = MP_SIZE_T_MAX;$/;"	v
div_qr_1_unnorm_threshold	tune/tuneup.c	/^mp_size_t  div_qr_1_unnorm_threshold    = MP_SIZE_T_MAX;$/;"	v
div_qr_1n_pi1_method	tune/tuneup.c	/^int	   div_qr_1n_pi1_method		= 0;$/;"	v
div_qr_2_pi2_threshold	tune/tuneup.c	/^mp_size_t  div_qr_2_pi2_threshold       = MP_SIZE_T_MAX;$/;"	v
div_qr_func	mini-gmp/tests/t-div.c	/^typedef void div_qr_func (mpz_t, mpz_t, const mpz_t, const mpz_t);$/;"	t	file:
div_qr_ui_func	mini-gmp/tests/t-div.c	/^typedef unsigned long div_qr_ui_func (mpz_t, mpz_t, const mpz_t, unsigned long);$/;"	t	file:
div_ui_func	mini-gmp/tests/t-div.c	/^typedef unsigned long div_ui_func (const mpz_t, unsigned long);$/;"	t	file:
div_x_ui_func	mini-gmp/tests/t-div.c	/^typedef unsigned long div_x_ui_func (mpz_t, const mpz_t, unsigned long);$/;"	t	file:
divexact_by3	compat.c	/^__MPN (divexact_by3) (mp_ptr dst, mp_srcptr src, mp_size_t size)$/;"	f
divisor	gen-psqr.c	/^  int     divisor;$/;"	m	struct:factor_t	file:
divisor	gen-psqr.c	/^  int     divisor;$/;"	m	struct:rawfactor_t	file:
divisor	tests/devel/try.c	/^  char  divisor;$/;"	m	struct:try_t	file:
divisor	tests/devel/try.c	/^mp_limb_t       divisor;$/;"	v
divisor_array	tests/devel/try.c	/^mp_limb_t  divisor_array[] = {$/;"	v
divisor_index	tests/devel/try.c	/^int        divisor_index;$/;"	v
divmod_1	compat.c	/^__MPN (divmod_1) (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor)$/;"	f
divrem_1_norm_threshold	tune/tuneup.c	/^mp_size_t  divrem_1_norm_threshold      = MP_SIZE_T_MAX;$/;"	v
divrem_1_unnorm_threshold	tune/tuneup.c	/^mp_size_t  divrem_1_unnorm_threshold    = MP_SIZE_T_MAX;$/;"	v
divrem_2_threshold	tune/tuneup.c	/^mp_size_t  divrem_2_threshold           = MP_SIZE_T_MAX;$/;"	v
dn	mpn/generic/sec_div.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dn	mpn/generic/sec_pi1_div.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dn	mpn/sec_div_qr.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dn	mpn/sec_div_r.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dn	mpn/sec_pi1_div_qr.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dn	mpn/sec_pi1_div_r.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dnl	mpn/alpha/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  Alpha mpn_add_n -- Add two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  Copyright 1995, 1999, 2000, 2005, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  res_ptr	r16$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  s1_ptr	r17$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  s2_ptr	r18$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  size	r19$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl  store sum in a third limb vector.$/;"	l
dnl	mpn/alpha/add_n.asm	/^dnl$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  Copyright 1992, 1994, 1995, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl Alpha mpn_addmul_1 -- Multiply a limb vector with a limb and add the$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl result to a second limb vector.$/;"	l
dnl	mpn/alpha/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  Alpha mpn_addlsh1_n\/mpn_sublsh1_n -- rp[] = up[] +- (vp[] << 1).$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  Copyright 2003, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/aorslsh1_n.asm	/^dnl$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  Alpha mpn_addlsh2_n\/mpn_sublsh2_n -- rp[] = up[] +- (vp[] << 2).$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  Copyright 2003, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/aorslsh2_n.asm	/^dnl$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  Alpha mpn_bdiv_dbm1c.$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  Copyright 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  Alpha auxiliary for longlong.h's count_leading_zeros$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  Copyright 1997, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/cntlz.asm	/^dnl$/;"	l
dnl	mpn/alpha/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  Alpha mpn_com -- mpn one's complement.$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  Copyright 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/com.asm	/^dnl$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  Alpha mpn_copyd -- copy, decrementing.$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  Copyright 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/copyd.asm	/^dnl$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  Alpha mpn_copyi -- copy, incrementing.$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  Copyright 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/copyi.asm	/^dnl$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  Alpha mpn_divrem_2 -- Divide an mpn number by a normalized 2-limb number.$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  Copyright 2007, 2008, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/divrem_2.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  Alpha mpn_divexact_by3c -- mpn division by 3, expecting no remainder.$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  Copyright 2004, 2005, 2009 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev5/diveby3.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  Alpha ev6 mpn_add_n -- Add two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  Copyright 2000, 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl  store sum in a third limb vector.$/;"	l
dnl	mpn/alpha/ev6/add_n.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  Alpha mpn_addlsh1_n\/mpn_sublsh1_n -- rp[] = up[] +- (vp[] << 1).$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  Copyright 2003, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/aorslsh1_n.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  Alpha ev6 mpn_addmul_1 and mpn_submul_1.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  At a place where we have an mt followed by a bookkeeping, put the$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  Copyright 2000, 2003-2005, 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  L1, which is NOT where we want it.  It either stalls 1, because it can't$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  Note, the ldq's and stq's are at the end of the quadpacks.  Note, we'd$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  So for b_cache, we're likely going to want to put one or more cycles back$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  The lockup on U0 means that any stall can't be recovered from.  Consider a$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  The stores can issue a cycle late so we have paired no-op's to 'catch'$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  This code was written in cooperation with ev6 pipeline expert Steve Root.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  This is a great schedule for the d_cache, a poor schedule for the b_cache.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  We couldn't pair the loads, because the entangled schedule of the carry's$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  at L0, and goes there.  The instruction we intended for L0 gets to look at$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  bookkeeping in upper, and the prefetch into lower.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  go in L0, or goes there, and causes a further instruction to stall.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  has to happen on one side {0} of the machine.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  into the code! And, of course, put in lds prefetch for the rp[] operand.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  later.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  ldq in L1, say that load gets stalled because it collides with a fill from$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  like not to have an ldq or an stq to preceded a conditional branch in a$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  quadpack.  The conditional branch moves the retire pointer one cycle$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  the b_cache.  On the next cycle, this load gets priority.  If first looks$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl  them, so that further disturbance to the schedule is damped.$/;"	l
dnl	mpn/alpha/ev6/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  Copyright 2009, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl Alpha mpn_mod_1s_4p$/;"	l
dnl	mpn/alpha/ev6/mod_1_4.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  Alpha ev6 mpn_mul_1 -- Multiply a limb vector with a limb and store the$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  Copyright 2000, 2001, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  result in a second limb vector.$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/mul_1.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  Alpha ev6 nails mpn_addmul_1.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  Copyright 2002, 2005, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  This declaration is munged by configure$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  Alpha ev6 nails mpn_addmul_2.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  Copyright 2002, 2005, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_2.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  Alpha ev6 nails mpn_addmul_3.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  Copyright 2002, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_3.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  Alpha ev6 nails mpn_addmul_4.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  Copyright 2002, 2005, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/nails/addmul_4.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  Alpha ev6 nails mpn_add_n and mpn_sub_n.$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  Copyright 2002, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  Runs at 2.5 cycles\/limb.  It would be possible to reach 2.0 cycles\/limb$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  This declaration is munged by configure$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl  with 8-way unrolling.$/;"	l
dnl	mpn/alpha/ev6/nails/aors_n.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  Alpha ev6 nails mpn_mul_1.$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  Copyright 2002, 2005, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  This declaration is munged by configure$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/nails/mul_1.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  Alpha ev6 nails mpn_submul_1.$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  Copyright 2002, 2005, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  This declaration is munged by configure$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/nails/submul_1.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  Alpha ev6 mpn_sub_n -- Subtract two limb vectors of the same length > 0$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  Copyright 2000, 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  and store difference in a third limb vector.$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev6/sub_n.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  Alpha ev67 mpn_gcd_1 -- Nx1 greatest common divisor.$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  Copyright 2003, 2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev67/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  Alpha ev67 mpn_hamdist -- mpn hamming distance.$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  Copyright 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev67/hamdist.asm	/^dnl$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  Alpha ev67 mpn_popcount -- mpn bit population count.$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  Copyright 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/ev67/popcount.asm	/^dnl$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  Alpha mpn_invert_limb -- Invert a normalized limb.$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  Copyright 1996, 2000-2003, 2007, 2011, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  Alpha mpn_lshift -- Shift a number left.$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  Copyright 1994, 1995, 2000, 2003, 2009 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/lshift.asm	/^dnl$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  Copyright 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  n		r17$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl  up		r16$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl Alpha mpn_mod_34lsub1.$/;"	l
dnl	mpn/alpha/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  Alpha mpn_modexact_1c_odd -- mpn exact remainder$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  Copyright 2003, 2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/mode1o.asm	/^dnl$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  Alpha mpn_mul_1 -- Multiply a limb vector with a limb and store$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  Copyright 1992, 1994, 1995, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl  the result in a second limb vector.$/;"	l
dnl	mpn/alpha/mul_1.asm	/^dnl$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  Alpha mpn_rshift -- Shift a number right.$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  Copyright 1994, 1995, 2000, 2009 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/rshift.asm	/^dnl$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  Alpha mpn_sec_tabselect.$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  Copyright 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  Alpha mpn_sqr_diag_addlsh1.$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/sqr_diag_addlsh1.asm	/^dnl$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  Alpha mpn_sub_n -- Subtract two limb vectors of the same length > 0$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  Copyright 1995, 1999, 2000, 2005, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  and store difference in a third limb vector.$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  res_ptr	r16$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  s1_ptr	r17$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  s2_ptr	r18$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl  size	r19$/;"	l
dnl	mpn/alpha/sub_n.asm	/^dnl$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  Alpha mpn_submul_1 -- Multiply a limb vector with a limb and subtract$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  Copyright 1992, 1994, 1995, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl  the result from a second limb vector.$/;"	l
dnl	mpn/alpha/submul_1.asm	/^dnl$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  Copyright 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  mpn_umul_ppmm -- 1x1->2 limb multiplication$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  or$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/alpha/umul.asm	/^dnl$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  ARM mpn_add_n and mpn_sub_n$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  Contributed to the GNU project by Robert Harley.$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  Copyright 1997, 2000, 2001, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/aors_n.asm	/^dnl$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  ARM mpn_addlsh1_n and mpn_sublsh1_n$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/aorslsh1_n.asm	/^dnl$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  ARM mpn_addmul_1 and mpn_submul_1.$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  Copyright 1998, 2000, 2001, 2003, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  ARM mpn_bdiv_dbm1c.$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  Copyright 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  ARM mpn_cnd_add_n, mpn_cnd_sub_n$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/cnd_aors_n.asm	/^dnl$/;"	l
dnl	mpn/arm/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/com.asm	/^dnl  ARM mpn_com.$/;"	l
dnl	mpn/arm/com.asm	/^dnl  Copyright 2003, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/com.asm	/^dnl  or$/;"	l
dnl	mpn/arm/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/com.asm	/^dnl$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  ARM mpn_copyd.$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  Contributed to the GNU project by Robert Harley and Torbjörn Granlund.$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  Copyright 2003, 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/copyd.asm	/^dnl$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  ARM mpn_copyi.$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  Contributed to the GNU project by Robert Harley and Torbjörn Granlund.$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  Copyright 2003, 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/copyi.asm	/^dnl$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  ARM v4 mpn_modexact_1c_odd$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/dive_1.asm	/^dnl$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  ARM mpn_invert_limb -- Invert a normalized limb.$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  Copyright 2001, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  ARM mpn_and_n, mpn_andn_n. mpn_nand_n, etc.$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  Copyright 1997, 2000, 2001, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/logops_n.asm	/^dnl$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  ARM mpn_lshift.$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/lshift.asm	/^dnl$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  ARM mpn_lshiftc.$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  ARM mpn_mod_34lsub1 -- remainder modulo 2^24-1.$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  ARM mpn_modexact_1c_odd$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/mode1o.asm	/^dnl$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  ARM mpn_mul_1 -- Multiply a limb vector with a limb and store the result$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  Contributed by Robert Harley.$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  Copyright 1998, 2000, 2001, 2003, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  in a second limb vector.$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/mul_1.asm	/^dnl$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  ARM Neon mpn_hamdist -- mpn bit hamming distance.$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/neon/hamdist.asm	/^dnl$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  ARM Neon mpn_lshift and mpn_rshift.$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  or$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/neon/lorrshift.asm	/^dnl$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  ARM Neon mpn_lshiftc.$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/neon/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  ARM Neon mpn_popcount -- mpn bit population count.$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/neon/popcount.asm	/^dnl$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  ARM Neon mpn_sec_tabselect.$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  Copyright 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/neon/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  ARM mpn_rsh1add_n and mpn_rsh1sub_n.$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/rsh1aors_n.asm	/^dnl$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  ARM mpn_rshift.$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  Copyright 1997, 2000, 2001, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/rshift.asm	/^dnl$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  ARM mpn_sec_tabselect$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  ARM mpn_udiv_qrnnd -- divide a two limb dividend and a one limb divisor.$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  Copyright 2001, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  Return quotient and store remainder through a supplied pointer.$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/udiv.asm	/^dnl$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  ARM v5 mpn_gcd_1.$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  Based on the K7 gcd_1.asm, by Kevin Ryde.  Rehacked for ARM by Torbjörn$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  Granlund.$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v5/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  ARM mpn_mod_1_1p$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v5/mod_1_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  ARM mpn_mod_1s_2p$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v5/mod_1_2.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  ARM mpn_addmul_1.$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  ARM mpn_addmul_2.$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  Copyright 2012, 2013, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/addmul_2.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  ARM mpn_addmul_3.$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/addmul_3.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  ARM v6 mpn_divexact_1$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/dive_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  ARM v6 mpn_modexact_1c_odd$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/mode1o.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  ARM mpn_mul_1.$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/mul_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  ARM mpn_mul_2.$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/mul_2.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  ARM mpn_popcount and mpn_hamdist.$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/popham.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  ARM v6 mpn_sqr_basecase.$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  Copyright 2012, 2013, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  ARM mpn_submul_1.$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6/submul_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  ARM v6t2 mpn_divrem_1 and mpn_preinv_divrem_1.$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6t2/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  ARM v6t2 mpn_gcd_1.$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  Based on the K7 gcd_1.asm, by Kevin Ryde.  Rehacked for ARM by Torbjörn$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  Granlund.$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v6t2/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  ARM mpn_addmul_1 optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  ARM mpn_add_n\/mpn_sub_n optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/aors_n.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  ARM mpn_cnd_add_n\/mpn_cnd_sub_n optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/cnd_aors_n.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  ARM mpn_com optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/com.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  ARM mpn_and_n, mpn_andn_n. mpn_nand_n, etc, optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/logops_n.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  ARM mpn_mul_1 optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/mul_1.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  ARM mpn_addlshC_n, mpn_sublshC_n, mpn_rsblshC_n$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  ARM mpn_addlshC_n, mpn_sublshC_n, mpn_rsblshC_n$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  ARM mpn_addlshC_n, mpn_sublshC_n, mpn_rsblshC_n$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/aorsorrlshC_n.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  ARM Neon mpn_com optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/com.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  ARM Neon mpn_copyd optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyd.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  ARM Neon mpn_copyi optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/copyi.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  ARM Neon mpn_rsh1add_n, mpn_rsh1sub_n.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/neon/rsh1aors_n.asm	/^dnl$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  ARM mpn_submul_1 optimised for A15.$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm/v7a/cora15/submul_1.asm	/^dnl$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  ARM64 mpn_add_n and mpn_sub_n$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/aors_n.asm	/^dnl$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  ARM64 mpn_submul_1$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  ARM64 mpn_bdiv_dbm1c.$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  Copyright 2008, 2011, 2012, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  ARM64 mpn_cnd_add_n, mpn_cnd_sub_n$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/cnd_aors_n.asm	/^dnl$/;"	l
dnl	mpn/arm64/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  ARM64 mpn_com.$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  Copyright 2013, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/com.asm	/^dnl$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  ARM64 mpn_copyd.$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/copyd.asm	/^dnl$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  ARM64 mpn_copyi.$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/copyi.asm	/^dnl$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  ARM v6t2 mpn_gcd_1.$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  Based on the K7 gcd_1.asm, by Kevin Ryde.  Rehacked for ARM by Torbjorn$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  Granlund.$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  ARM64 Neon mpn_hamdist -- mpn bit hamming distance.$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  Copyright 2013, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/hamdist.asm	/^dnl$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  ARM64 mpn_invert_limb -- Invert a normalized limb.$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  ARM64 mpn_and_n, mpn_andn_n. mpn_nand_n, etc.$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/logops_n.asm	/^dnl$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  ARM64 mpn_lshift.$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  Copyright 2013, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  License for more details.$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  You should have received a copy of the GNU Lesser General Public License$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  along with the GNU MP Library.  If not, see http:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  by the Free Software Foundation; either version 3 of the License, or (at$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  it under the terms of the GNU Lesser General Public License as published$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public$/;"	l
dnl	mpn/arm64/lshift.asm	/^dnl  your option) any later version.$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  ARM64 mpn_mod_34lsub1 -- remainder modulo 2^48-1.$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  Copyright 2012-2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  ARM64 mpn_mul_1$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/mul_1.asm	/^dnl$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  ARM64 Neon mpn_popcount -- mpn bit population count.$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  Copyright 2013, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/popcount.asm	/^dnl$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  ARM64 mpn_rshift.$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  Copyright 2013, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  License for more details.$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  You should have received a copy of the GNU Lesser General Public License$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  along with the GNU MP Library.  If not, see http:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  by the Free Software Foundation; either version 3 of the License, or (at$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  it under the terms of the GNU Lesser General Public License as published$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public$/;"	l
dnl	mpn/arm64/rshift.asm	/^dnl  your option) any later version.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  ARM64 Neon mpn_sec_tabselect.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  Copyright 2011-2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/arm64/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  IA-64 mpn_add_n_sub_n -- mpn parallel addition and subtraction.$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/add_n_sub_n.asm	/^dnl$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  Copyright 2000-2005, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  IA-64 mpn_addmul_1 -- Multiply a limb vector with a limb and add the$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  result to a second limb vector.$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  Copyright 2004, 2005, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  IA-64 mpn_addmul_2 -- Multiply a n-limb number with a 2-limb number and$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  add the result to a (n+1)-limb number.$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl define(`',`r28')$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl define(`',`r29')$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl define(`',`r30')$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl define(`',`r31')$/;"	l
dnl	mpn/ia64/addmul_2.asm	/^dnl$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  Copyright 2003-2005, 2010, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  IA-64 mpn_add_n\/mpn_sub_n -- mpn addition and subtraction.$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/aors_n.asm	/^dnl$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  Copyright 2003-2005, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  IA-64 mpn_addlsh1_n, mpn_sublsh1_n, mpn_rsblsh1_n$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/aorsorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  Copyright 2003-2005, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  IA-64 mpn_addlsh2_n, mpn_sublsh2_n, mpn_rsblsh2_n$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/aorsorrlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  Copyright 2003-2005, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  IA-64 mpn_addlshC_n, mpn_sublshC_n, mpn_rsblshC_n.$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/aorsorrlshC_n.asm	/^dnl$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  Copyright 2008, 2009 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  IA-64 mpn_bdiv_dbm1.$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  IA-64 mpn_cnd_add_n\/mpn_cnd_sub_n.$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/cnd_aors_n.asm	/^dnl$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  Copyright 2001, 2002, 2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  IA-64 mpn_copyd -- copy limb vector, decrementing.$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/copyd.asm	/^dnl$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  Copyright 2001, 2002, 2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  IA-64 mpn_copyi -- copy limb vector, incrementing.$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/copyi.asm	/^dnl$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Kevin Ryde.$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  Copyright 2003-2005, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  IA-64 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/dive_1.asm	/^dnl$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  Copyright 2002, 2004, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  IA-64 mpn_divrem_1 and mpn_preinv_divrem_1 -- Divide an mpn number by an$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl  unnormalized limb.$/;"	l
dnl	mpn/ia64/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  Copyright 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  IA-64 mpn_divrem_2 -- Divide an mpn number by a normalized 2-limb number.$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/divrem_2.asm	/^dnl$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  Contributed to the GNU project by Kevin Ryde, innerloop by Torbjorn$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  Copyright 2002-2005, 2012, 2013, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  Granlund.$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  Itanium-2 mpn_gcd_1 -- mpn by 1 gcd.$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  Copyright 2003-2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  IA-64 mpn_hamdist -- mpn hamming distance.$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/hamdist.asm	/^dnl$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Kevin Ryde.$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  Copyright 2000, 2002, 2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  IA-64 mpn_invert_limb -- Invert a normalized limb.$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  Copyright 2003-2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  IA-64 mpn_and_n, mpn_andn_n, mpn_nand_n, mpn_ior_n, mpn_iorn_n,$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  mpn_nior_n, mpn_xor_n, mpn_xnor_n -- mpn bitwise logical operations.$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/logops_n.asm	/^dnl$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  Copyright 2000-2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  IA-64 mpn_lshift\/mpn_rshift.$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/lorrshift.asm	/^dnl$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  Copyright 2000-2005, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  IA-64 mpn_lshiftc.$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl	br.cloop.dptk	L(top)$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  Copyright 2003-2005, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  IA-64 mpn_mod_34lsub1$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  Contributed to the GNU project by Kevin Ryde.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  Copyright 2003-2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  Emit the given code only under HAVE_ABI_32.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  Itanium-2 mpn_modexact_1c_odd -- mpn by 1 exact remainder.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  Usage: ABI32(`code')$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/mode1o.asm	/^dnl$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  Copyright 2000-2004, 2006, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  IA-64 mpn_mul_1, mpn_mul_1c -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl  store the result in a second limb vector.$/;"	l
dnl	mpn/ia64/mul_1.asm	/^dnl$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  Copyright 2004, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  IA-64 mpn_mul_2 -- Multiply a n-limb number with a 2-limb number and store$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl  store the result to a (n+1)-limb number.$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl define(`',`r28')$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl define(`',`r29')$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl define(`',`r30')$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl define(`',`r31')$/;"	l
dnl	mpn/ia64/mul_2.asm	/^dnl$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  Copyright 2000-2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  IA-64 mpn_popcount -- mpn population count.$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/popcount.asm	/^dnl$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  Copyright 2003-2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  IA-64 mpn_rsh1add_n\/mpn_rsh1sub_n -- rp[] = (up[] +- vp[]) >> 1.$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/rsh1aors_n.asm	/^dnl$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  IA-64 mpn_sec_tabselect.$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  Copyright 2010, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  IA-64 mpn_sqr_diag_addlsh1$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl *** MAIN LOOP END ***$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl *** MAIN LOOP START ***$/;"	l
dnl	mpn/ia64/sqr_diag_addlsh1.asm	/^dnl$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  Copyright 2000-2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  IA-64 mpn_submul_1 -- Multiply a limb vector with a limb and subtract the$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  result from a second limb vector.$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/ia64/submul_1.asm	/^dnl$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  Copyright 1992, 1994, 1996, 1999-2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  mc68020 mpn_add_n, mpn_sub_n -- add or subtract limb vectors$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/m68k/aors_n.asm	/^dnl$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  Copyright 1996, 1999-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  mc68020 mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/m68k/lshift.asm	/^dnl$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 1999-2002, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  mc68020 mpn_addmul_1, mpn_submul_1 -- add or subtract mpn multiple.$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/m68k/mc68020/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  mc68020 mpn_mul_1 -- mpn by limb multiply$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/m68k/mc68020/mul_1.asm	/^dnl$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  Copyright 1999-2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  mc68020 mpn_udiv_qrnnd -- 2x1 limb division$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/m68k/mc68020/udiv.asm	/^dnl$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  Copyright 1999-2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  mc68020 mpn_umul_ppmm -- limb by limb multiplication$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  or$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/m68k/mc68020/umul.asm	/^dnl$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  Copyright 1996, 1999-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  mc68020 mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/m68k/rshift.asm	/^dnl$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  Copyright 1995, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  MIPS32 mpn_add_n -- Add two limb vectors of the same length > 0 and store$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl  sum in a third limb vector.$/;"	l
dnl	mpn/mips32/add_n.asm	/^dnl$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  MIPS32 mpn_addmul_1 -- Multiply a limb vector with a single limb and add$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl  the product to a second limb vector.$/;"	l
dnl	mpn/mips32/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  Copyright 1995, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  MIPS32 mpn_lshift -- Left shift.$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips32/lshift.asm	/^dnl$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  MIPS32 mpn_mul_1 -- Multiply a limb vector with a single limb and store$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl  the product in a second limb vector.$/;"	l
dnl	mpn/mips32/mul_1.asm	/^dnl$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  Copyright 1995, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  MIPS32 mpn_rshift -- Right shift.$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips32/rshift.asm	/^dnl$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  Copyright 1995, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  MIPS32 mpn_sub_n -- Subtract two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl  store difference in a third limb vector.$/;"	l
dnl	mpn/mips32/sub_n.asm	/^dnl$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  MIPS32 mpn_submul_1 -- Multiply a limb vector with a single limb and$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl  subtract the product from a second limb vector.$/;"	l
dnl	mpn/mips32/submul_1.asm	/^dnl$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  Copyright 1999, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  MIPS32 umul_ppmm -- longlong.h support.$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  or$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips32/umul.asm	/^dnl$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  Copyright 1995, 2000-2002, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  MIPS64 mpn_add_n -- Add two limb vectors of the same length > 0 and store$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl  sum in a third limb vector.$/;"	l
dnl	mpn/mips64/add_n.asm	/^dnl$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  Copyright 1992, 1994, 1995, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  MIPS64 mpn_addmul_1 -- Multiply a limb vector with a single limb and add$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl  the product to a second limb vector.$/;"	l
dnl	mpn/mips64/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  Copyright 1995, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  MIPS64 mpn_lshift -- Left shift.$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips64/lshift.asm	/^dnl$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  Copyright 1992, 1994, 1995, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  MIPS64 mpn_mul_1 -- Multiply a limb vector with a single limb and store$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl  the product in a second limb vector.$/;"	l
dnl	mpn/mips64/mul_1.asm	/^dnl$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  Copyright 1995, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  MIPS64 mpn_rshift -- Right shift.$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips64/rshift.asm	/^dnl$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  MIPS64 mpn_sqr_diagonal.$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  n		$6$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  or$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  rp		$4$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl  up		$5$/;"	l
dnl	mpn/mips64/sqr_diagonal.asm	/^dnl$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  Copyright 1995, 2000-2002, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  MIPS64 mpn_sub_n -- Subtract two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl  store difference in a third limb vector.$/;"	l
dnl	mpn/mips64/sub_n.asm	/^dnl$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  Copyright 1992, 1994, 1995, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  MIPS64 mpn_submul_1 -- Multiply a limb vector with a single limb and$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl  subtract the product from a second limb vector.$/;"	l
dnl	mpn/mips64/submul_1.asm	/^dnl$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  Copyright 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  MIPS64 umul_ppmm -- longlong.h support.$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  or$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/mips64/umul.asm	/^dnl$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  Copyright 1992, 1994, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  HP-PA mpn_add_n -- Add two limb vectors of the same length > 0 and store$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl  sum in a third limb vector.$/;"	l
dnl	mpn/pa32/add_n.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  Copyright 1992-1994, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  HP-PA 1.1 mpn_addmul_1 -- Multiply a limb vector with a limb and add the$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  result to a second limb vector.$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  Copyright 1992-1994, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  HP-PA 1.1 mpn_mul_1 -- Multiply a limb vector with a limb and store the$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  result in a second limb vector.$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/mul_1.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  4.25 cycles\/limb.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  Copyright 1992, 1994, 2000-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  HP-PA mpn_add_n -- Add two limb vectors of the same length > 0 and store$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl  sum in a third limb vector.  Optimized for the PA7100, where is runs at$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/add_n.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  Copyright 1995, 2000-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  HP-PA 7100\/7200 mpn_addmul_1 -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  add the result to a second limb vector.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  Copyright 1992, 1994, 2000-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  HP-PA  mpn_lshift -- Shift a number left.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  Optimized for the PA7100, where is runs at 3.25 cycles\/limb.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/lshift.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  Copyright 1992, 1994, 2000-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  HP-PA  mpn_rshift -- Shift a number right.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  Optimized for the PA7100, where is runs at 3.25 cycles\/limb.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/rshift.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  Copyright 1992, 1994, 2000-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  HP-PA mpn_sub_n -- Subtract two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  is runs at 4.25 cycles\/limb.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl  store difference in a third limb vector.  Optimized for the PA7100, where$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/sub_n.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  Copyright 1995, 2000-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  HP-PA 7100\/7200 mpn_submul_1 -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl  subtract the result from a second limb vector.$/;"	l
dnl	mpn/pa32/hppa1_1/pa7100/submul_1.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  HP-PA 1.1 32-bit mpn_sqr_diagonal.$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/sqr_diagonal.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  Copyright 1992-1994, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  HP-PA 1.1 mpn_submul_1 -- Multiply a limb vector with a limb and subtract$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl  the result from a second limb vector.$/;"	l
dnl	mpn/pa32/hppa1_1/submul_1.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  Copyright 1993, 1994, 2000, 2001, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  HP-PA  __udiv_qrnnd division support, used from longlong.h.$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  This version runs fast on PA 7000 and later.$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/udiv.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  Copyright 1999, 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa1_1/umul.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  Copyright 1997, 1998, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  HP-PA 2.0 32-bit mpn_add_n -- Add two limb vectors of the same length > 0$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  and store sum in a third limb vector.$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa2_0/add_n.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  HP-PA 32-bit mpn_sqr_diagonal optimized for the PA8x00.$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa2_0/sqr_diagonal.asm	/^dnl$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  Copyright 1997, 1998, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  HP-PA 2.0 32-bit mpn_sub_n -- Subtract two limb vectors of the same$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  length > 0 and store difference in a third limb vector.$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/hppa2_0/sub_n.asm	/^dnl$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  Copyright 1992, 1994, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  HP-PA  mpn_lshift -- Shift a number left.$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/lshift.asm	/^dnl$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  Copyright 1992, 1994, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  HP-PA  mpn_rshift -- Shift a number right.$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/rshift.asm	/^dnl$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  Copyright 1992, 1994, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  HP-PA mpn_sub_n -- Subtract two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl  store difference in a third limb vector.$/;"	l
dnl	mpn/pa32/sub_n.asm	/^dnl$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  Copyright 1993, 1994, 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  HP-PA  __udiv_qrnnd division support, used from longlong.h.$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  This version runs fast on pre-PA7000 CPUs.$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa32/udiv.asm	/^dnl$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  Copyright 1998-2000, 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  HP-PA 2.0 64-bit mpn_addmul_1 -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  add the result to a second limb vector.$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  Copyright 1997, 2000, 2002, 2003, 2009, 2010 Free Software Foundation,$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  HP-PA 2.0 mpn_add_n, mpn_sub_n$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  Inc.$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  This runs at 2 cycles\/limb on PA8000 and 1.6875 cycles\/limb on PA8500.  It$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  should be possible to reach the cache bandwidth 1.5 cycles\/limb at least$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  where the processor gets confused about where carry comes from.$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl  with PA8500.  The problem now is stalling of the first ADD,DC after LDO,$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl INPUT PARAMETERS$/;"	l
dnl	mpn/pa64/aors_n.asm	/^dnl$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  Copyright 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  PA64 mpn_addlsh1_n\/mpn_sublsh1_n -- rp[] = up[] +- (vp[] << 1).$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl INPUT PARAMETERS$/;"	l
dnl	mpn/pa64/aorslsh1_n.asm	/^dnl$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  Copyright 1997, 2000, 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  HP-PA 2.0 mpn_lshift -- Left shift.$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  This runs at 1.5 cycles\/limb on PA8000 and 1.0 cycles\/limb on PA8500.$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/lshift.asm	/^dnl$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  Copyright 1998-2000, 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  HP-PA 2.0 64-bit mpn_mul_1 -- Multiply a limb vector with a limb and store$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl  the result in a second limb vector.$/;"	l
dnl	mpn/pa64/mul_1.asm	/^dnl$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  Copyright 1997, 2000, 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  HP-PA 2.0 mpn_rshift -- Right shift.$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  This runs at 1.5 cycles\/limb on PA8000 and 1.0 cycles\/limb on PA8500.$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/rshift.asm	/^dnl$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  Copyright 2001-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  HP-PA 2.0 64-bit mpn_sqr_diagonal.$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  PA8500.  The cache would saturate at 5 cycles\/limb, so there is some room$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  This code runs at 7.25 cycles\/limb on PA8000 and 7.75 cycles\/limb on$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  for optimization.$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/sqr_diagonal.asm	/^dnl$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  Copyright 1998-2000, 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  HP-PA 2.0 64-bit mpn_submul_1 -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl  subtract the result from a second limb vector.$/;"	l
dnl	mpn/pa64/submul_1.asm	/^dnl$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  Copyright 2001-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  HP-PA 2.0 64-bit mpn_udiv_qrnnd_r.$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/udiv.asm	/^dnl$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  * Avoid skip instructions$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  * Don't allocate any stack, "home" positions for parameters could be used.$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  * Put carry-generating and carry-consuming insns consecutively$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  Copyright 1999, 2000, 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  Optimizations:$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  or$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/pa64/umul.asm	/^dnl$/;"	l
dnl	mpn/power/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/power/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/power/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/power/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/power/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/power/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  Copyright 1992, 1994-1996, 1999-2001, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  IBM POWER mpn_add_n -- Add two limb vectors of equal, non-zero length.$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  res_ptr	r3$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  s1_ptr	r4$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  s2_ptr	r5$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/power/add_n.asm	/^dnl  size	r6$/;"	l
dnl	mpn/power/add_n.asm	/^dnl$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  Copyright 1992, 1994, 1999-2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  IBM POWER mpn_addmul_1 -- Multiply a limb vector with a limb and add the$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  The POWER architecture has no unsigned 32x32->64 bit multiplication$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  branch in zero cycles, we use conditional branches for the compensation.$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  carefully (the natural, srai+and doesn't work).  Since all POWER can$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  carry flag between each iteration, so we have to compute the compensation$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  has its most significant bit set, and we add the multiplier if the$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  instruction.  To obtain that operation, we have to use the 32x32->64$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  multiplicand has its most significant bit set.  We need to preserve the$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  res_ptr	r3$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  result to a second limb vector.$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  s1_ptr	r4$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  s2_limb	r6$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  signed multiplication instruction, and add the appropriate compensation to$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  size	r5$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl  the high limb of the result.  We add the multiplicand if the multiplier$/;"	l
dnl	mpn/power/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/power/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/power/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/power/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/power/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/power/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/power/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  Copyright 1992, 1994, 1999-2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  IBM POWER mpn_lshift -- Shift a number left.$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  cnt	r6$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  res_ptr	r3$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  s_ptr	r4$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/power/lshift.asm	/^dnl  size	r5$/;"	l
dnl	mpn/power/lshift.asm	/^dnl$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  Copyright 1992, 1994, 1999-2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  IBM POWER mpn_mul_1 -- Multiply a limb vector with a limb and store the$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  The POWER architecture has no unsigned 32x32->64 bit multiplication$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  branch in zero cycles, we use conditional branches for the compensation.$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  carefully (the natural, srai+and doesn't work).  Since all POWER can$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  carry flag between each iteration, so we have to compute the compensation$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  has its most significant bit set, and we add the multiplier if the$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  instruction.  To obtain that operation, we have to use the 32x32->64$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  multiplicand has its most significant bit set.  We need to preserve the$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  res_ptr	r3$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  result in a second limb vector.$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  s1_ptr	r4$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  s2_limb	r6$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  signed multiplication instruction, and add the appropriate compensation to$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  size	r5$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl  the high limb of the result.  We add the multiplicand if the multiplier$/;"	l
dnl	mpn/power/mul_1.asm	/^dnl$/;"	l
dnl	mpn/power/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/power/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/power/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/power/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/power/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/power/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  Copyright 1992, 1994, 1999-2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  IBM POWER mpn_rshift -- Shift a number right.$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  cnt	r6$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  res_ptr	r3$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  s_ptr	r4$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/power/rshift.asm	/^dnl  size	r5$/;"	l
dnl	mpn/power/rshift.asm	/^dnl$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  Copyright 1999, 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  or$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/power/sdiv.asm	/^dnl$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  Copyright 1992, 1994-1996, 1999-2001, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  IBM POWER mpn_sub_n -- Subtract two limb vectors of equal, non-zero$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  length.$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  res_ptr	r3$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  s1_ptr	r4$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  s2_ptr	r5$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl  size	r6$/;"	l
dnl	mpn/power/sub_n.asm	/^dnl$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  Copyright 1992, 1994, 1999-2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  IBM POWER mpn_submul_1 -- Multiply a limb vector with a limb and subtract$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  INPUT PARAMETERS$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  The POWER architecture has no unsigned 32x32->64 bit multiplication$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  branch in zero cycles, we use conditional branches for the compensation.$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  carefully (the natural, srai+and doesn't work).  Since all POWER can$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  carry flag between each iteration, so we have to compute the compensation$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  has its most significant bit set, and we add the multiplier if the$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  instruction.  To obtain that operation, we have to use the 32x32->64$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  multiplicand has its most significant bit set.  We need to preserve the$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  res_ptr	r3$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  s1_ptr	r4$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  s2_limb	r6$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  signed multiplication instruction, and add the appropriate compensation to$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  size	r5$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  the high limb of the result.  We add the multiplicand if the multiplier$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl  the result from a second limb vector.$/;"	l
dnl	mpn/power/submul_1.asm	/^dnl$/;"	l
dnl	mpn/power/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/power/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/power/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/power/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/power/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/power/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/power/umul.asm	/^dnl  Copyright 1999, 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/power/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/power/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/power/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/power/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/power/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/power/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/power/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/power/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/power/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/power/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/power/umul.asm	/^dnl  or$/;"	l
dnl	mpn/power/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/power/umul.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  Copyright 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  PowerPC 750 mpn_com -- mpn bitwise one's complement$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/750/com.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  Copyright 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  PowerPC 750 mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/750/lshift.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  Copyright 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  PowerPC 750 mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/750/rshift.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  Copyright 2003, 2005, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  PowerPC-32 mpn_addlsh1_n -- rp[] = up[] + (vp[] << 1)$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/addlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  Copyright 1995, 1997, 1998, 2000-2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  PowerPC-32 mpn_addmul_1 -- Multiply a limb vector with a limb and add the$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  result to a second limb vector.$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  Copyright 2002, 2005, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  PowerPC-32 mpn_add_n and mpn_sub_n.$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/aors_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  Copyright 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  PPC32 mpn_bdiv_dbm1c.$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  Copyright 2002, 2003, 2005, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  PowerPC-32 mpn_divexact_by3 -- mpn by 3 exact division$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/diveby3.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  Copyright 2007, 2008, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  PPC-32 mpn_divrem_2 -- Divide an mpn number by a normalized 2-limb number.$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/divrem_2.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  PowerPC-32 mpn_invert_limb -- Invert a normalized limb.$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  Copyright 1995, 1998, 2000, 2002-2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  PowerPC-32 mpn_lshift -- Shift a number left.$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/lshift.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  Copyright 1995, 1998, 2000, 2002-2005, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  PowerPC-32 mpn_lshiftc.$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  Copyright 2002, 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  PowerPC-32 mpn_mod_34lsub1 -- mpn remainder mod 2^24-1.$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  Copyright 2002, 2003, 2005, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  PowerPC-32 mpn_modexact_1_odd -- mpn by limb exact remainder.$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/mode1o.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  Copyright 1995, 1997, 2000, 2002, 2003, 2005 Free Software Foundation,$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  Inc.$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  PowerPC-32 mpn_mul_1 -- Multiply a limb vector with a limb and store the$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  result in a second limb vector.$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/mul_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  Copyright 1999-2001, 2003-2005, 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  PowerPC-32 mpn_add_n\/mpn_sub_n -- mpn addition and subtraction.$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/p3-p7/aors_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  Copyright 1995, 1998, 2000, 2002-2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  PowerPC-32 mpn_rshift -- Shift a number right.$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/rshift.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  Copyright 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  PowerPC-32 mpn_sec_tabselect.$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  PowerPC-32 mpn_sqr_diag_addlsh1.$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/sqr_diag_addlsh1.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  Copyright 2003, 2005, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  PowerPC-32 mpn_sublsh1_n -- rp[] = up[] - (vp[] << 1)$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/sublsh1_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  Copyright 1995, 1997, 1998, 2000, 2002, 2005 Free Software Foundation,$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  Inc.$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  PowerPC-32 mpn_submul_1 -- Multiply a limb vector with a limb and subtract$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl  the result from a second limb vector.$/;"	l
dnl	mpn/powerpc32/submul_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  Copyright 2000, 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  PowerPC-32 umul_ppmm -- support for longlong.h$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/umul.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  Copyright 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  PowerPC-32\/VMX and PowerPC-64\/VMX mpn_copyd.$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/vmx/copyd.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  Copyright 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  PowerPC-32\/VMX and PowerPC-64\/VMX mpn_copyi.$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/vmx/copyi.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  Copyright 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  PowerPC-32\/VMX and PowerPC-64\/VMX mpn_and_n, mpn_andn_n, mpn_nand_n,$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  logical operations.$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  mpn_ior_n, mpn_iorn_n, mpn_nior_n, mpn_xor_n, mpn_xnor_n -- mpn bitwise$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/vmx/logops_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  Copyright 2002, 2003, 2005-2007, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  PowerPC-32 mpn_mod_34lsub1 -- mpn remainder mod 2^24-1.$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/vmx/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  Copyright 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  PowerPC-32\/VMX mpn_popcount.$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc32/vmx/popcount.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  Copyright 2004, 2005, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  PowerPC-64 mpn_com.$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/com.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  Copyright 2004, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  PowerPC-64 mpn_copyd$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/copyd.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  Copyright 2004, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  PowerPC-64 mpn_copyi.$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/copyi.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  Copyright 2003-2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  PowerPC-64 mpn_and_n, mpn_andn_n, mpn_nand_n, mpn_ior_n, mpn_iorn_n,$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  mpn_nior_n, mpn_xor_n, mpn_xnor_n -- mpn bitwise logical operations.$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/logops_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  Copyright 2003, 2005, 2010, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  PowerPC-64 mpn_lshift -- rp[] = up[] << cnt$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/lshift.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  Copyright 2003, 2005, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  PowerPC-64 mpn_lshiftc -- rp[] = ~up[] << cnt$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  Copyright 1999-2001, 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  PowerPC-64\/mode32 mpn_add_n -- Add two limb vectors of the same length > 0$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  and store sum in a third limb vector.$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode32/add_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  Copyright 1999-2001, 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  PowerPC-64 mpn_addmul_1 -- Multiply a limb vector with a limb and add$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl  the result to a second limb vector.$/;"	l
dnl	mpn/powerpc64/mode32/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  Copyright 1999-2001, 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  PowerPC-64 mpn_mul_1 -- Multiply a limb vector with a limb and add$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl  the result to a second limb vector.$/;"	l
dnl	mpn/powerpc64/mode32/mul_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  Copyright 2001-2003, 2005, 2006, 20010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  PowerPC-64 mpn_sqr_diagonal.$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode32/sqr_diagonal.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  Copyright 1999-2001, 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  PowerPC-64\/mode32 mpn_sub_n -- Subtract two limb vectors of the same$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  length and store difference in a third limb vector.$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode32/sub_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  Copyright 1999-2001, 2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  PowerPC-64 mpn_submul_1 -- Multiply a limb vector with a limb and subtract$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl  the result from a second limb vector.$/;"	l
dnl	mpn/powerpc64/mode32/submul_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  Copyright 1999-2001, 2003-2005, 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  PowerPC-64 mpn_add_n\/mpn_sub_n -- mpn addition and subtraction.$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/aors_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  Copyright 1999-2001, 2003-2006, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  PowerPC-64 mpn_addmul_1 and mpn_submul_1.$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  Copyright 2003, 2005, 2009, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  PowerPC-64 mpn_addlsh1_n, mpn_sublsh1_n, mpn_rsblsh1_n.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  Copyright 2003, 2005, 2009, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  PowerPC-64 mpn_addlsh2_n, mpn_sublsh2_n, mpn_rsblsh2_n.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  Copyright 2003, 2005, 2009, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  PowerPC-64 mpn_addlshC_n, mpn_sublshC_n, mpn_rsblshC_n.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/aorsorrlshC_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  Copyright 2008, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  PPC64 mpn_bdiv_dbm1c.$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  Copyright 1999-2001, 2003-2005, 2007, 2011, 2012 Free Software Foundation,$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  Inc.$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  PowerPC-64 mpn_cnd_add_n\/mpn_cnd_sub_n.$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/cnd_aors_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  Copyright 2006, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  PowerPC-64 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/dive_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2010, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  PowerPC-64 mpn_divrem_1 -- Divide an mpn number by an unnormalized limb.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  Copyright 2007, 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  PPC-64 mpn_divrem_2 -- Divide an mpn number by a normalized 2-limb number.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/divrem_2.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  PowerPC-64 mpn_gcd_1.$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  Copyright 2004-2006, 2008, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  PowerPC-64 mpn_invert_limb -- Invert a normalized limb.$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  Copyright 2010, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  PowerPC-64 mpn_mod_1_1p$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  Copyright 2010, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  PowerPC-64 mpn_mod_1s_4p$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/mod_1_4.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  Copyright 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  PowerPC-64 mpn_mod_34lsub1 -- modulo 2^48-1.$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  Copyright 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  PowerPC-64 mpn_modexact_1_odd -- mpn by limb exact remainder.$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/mode1o.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  Copyright 1999-2001, 2003-2006, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  PowerPC-64 mpn_mul_1 -- Multiply a limb vector with a limb and store$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl  the result in a second limb vector.$/;"	l
dnl	mpn/powerpc64/mode64/mul_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  Copyright 1999-2001, 2003-2006, 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  PowerPC-64 mpn_mul_basecase.$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  Copyright 1999-2001, 2003-2006, 2008, 2010, 2011 Free Software Foundation,$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  Inc.$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  PowerPC-64 mpn_addmul_1 and mpn_submul_1 optimised for power6.$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/p6/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  Copyright 1999-2001, 2003-2006, 2008, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  PowerPC-64 mpn_mul_basecase.$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/p6/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  PowerPC-64 mpn_mul_2 and mpn_addmul_2.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aormul_2.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  PowerPC-64 mpn_add_n, mpn_sub_n optimised for POWER7.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aors_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  Copyright 2003, 2005, 2009, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  PowerPC-64 mpn_addlsh1_n, mpn_sublsh1_n, mpn_rsblsh1_n.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  Copyright 2003, 2005, 2009, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  PowerPC-64 mpn_addlsh2_n, mpn_sublsh2_n, mpn_rsblsh2_n.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  Copyright 2003, 2005, 2009, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  PowerPC-64 mpn_addlshC_n, mpn_sublshC_n, mpn_rsblshC_n.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/p7/aorsorrlshC_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  PowerPC-64 mpn_gcd_1.$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/p7/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  Copyright 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  PowerPC-64 mpn_invert_limb -- Invert a normalized limb.$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/p8/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  Copyright 2003, 2005, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  PowerPC-64 mpn_rsh1add_n, mpn_rsh1sub_n$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/rsh1aors_n.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  Copyright 1999-2001, 2003-2006, 2008, 2010, 2011 Free Software Foundation,$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  Inc.$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  PowerPC-64 mpn_sqr_basecase.$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/mode64/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  Copyright 2003, 2005, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  PowerPC-64 mpn_lshift -- rp[] = up[] << cnt$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/p6/lshift.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  Copyright 2003, 2005, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  PowerPC-64 mpn_lshiftc -- rp[] = ~up[] << cnt$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/p6/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  Copyright 2003, 2005, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  PowerPC-64 mpn_rshift -- rp[] = up[] << cnt$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/p6/rshift.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  Copyright 2004, 2005, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  PowerPC-64 mpn_copyd.$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/p7/copyd.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  Copyright 2004, 2005, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  PowerPC-64 mpn_copyi.$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/p7/copyi.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  PowerPC-64 mpn_hamdist.$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/p7/hamdist.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  PowerPC-64 mpn_popcount.$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/p7/popcount.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  Copyright 2003, 2005, 2010, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  PowerPC-64 mpn_rshift -- rp[] = up[] >> cnt$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/rshift.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  Copyright 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  PowerPC-64 mpn_sec_tabselect.$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  Copyright 2000, 2001, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  PowerPC-64 umul_ppmm -- support for longlong.h$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/umul.asm	/^dnl$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  Copyright 2006, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  PowerPC-32\/VMX and PowerPC-64\/VMX mpn_popcount.$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/powerpc64/vmx/popcount.asm	/^dnl$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  Copyright 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  S\/390 mpn_addmul_1 -- Multiply a limb vector with a limb and add the$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  result to a second limb vector.$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  S\/390-32 mpn_copyd$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/copyd.asm	/^dnl$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  S\/390-32 mpn_copyi$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/copyi.asm	/^dnl$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  S\/390-32 mpn_addmul_1 for systems with MLR instruction$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/esame/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  S\/390-32 mpn_add_n and mpn_sub_n.$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/esame/aors_n.asm	/^dnl$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  S\/390-32 mpn_addlsh1_n$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/esame/aorslsh1_n.asm	/^dnl$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  S\/390-32 mpn_bdiv_dbm1c for systems with MLR instruction.$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/esame/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  S\/390-32 mpn_mul_1 for systems with MLR instruction$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/esame/mul_1.asm	/^dnl$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  S\/390-32\/esame mpn_mul_basecase.$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/esame/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  S\/390-32 mpn_sqr_basecase.$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/esame/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  S\/390-32 mpn_submul_1 for systems with MLR instruction.$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/esame/submul_1.asm	/^dnl$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  S\/390-32 logops.$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/logops_n.asm	/^dnl$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  S\/390-32 mpn_lshift.$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/lshift.asm	/^dnl$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  S\/390-32 mpn_lshiftc.$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  Copyright 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  S\/390 mpn_mul_1 -- Multiply a limb vector with a limb and store the$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  result in a second limb vector.$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/mul_1.asm	/^dnl$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  S\/390-32 mpn_rshift.$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/rshift.asm	/^dnl$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  Copyright 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  S\/390 mpn_submul_1 -- Multiply a limb vector with a limb and subtract the$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  result from a second limb vector.$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_32/submul_1.asm	/^dnl$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  S\/390-64 mpn_addmul_1$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  S\/390-64 mpn_addlsh1_n and mpn_rsblsh1_n.$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/aorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  S\/390-64 mpn_add_n and mpn_sub_n.$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/aors_n.asm	/^dnl$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  S\/390-64 mpn_bdiv_dbm1c$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  S\/390-64 mpn_copyd$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/copyd.asm	/^dnl$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  S\/390-64 mpn_copyi$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/copyi.asm	/^dnl$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  Copyright 2011, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  S\/390-64 mpn_invert_limb$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  S\/390-64 logops.$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/logops_n.asm	/^dnl$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  Copyright 2011, 2012, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  S\/390-64 mpn_lshift.$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/lshift.asm	/^dnl$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  Copyright 2011, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  S\/390-64 mpn_lshiftc.$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  S\/390-64 mpn_mod_34lsub1$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  S\/390-64 mpn_mul_1$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/mul_1.asm	/^dnl$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  S\/390-64 mpn_mul_basecase.$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  Copyright 2011, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  S\/390-64 mpn_rshift.$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/rshift.asm	/^dnl$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  S\/390-64 mpn_sqr_basecase.$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  S\/390-64 mpn_sublsh1_n$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/sublsh1_n.asm	/^dnl$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  S\/390-64 mpn_submul_1$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/s390_64/submul_1.asm	/^dnl$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  Copyright 1995, 1997, 2000, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  SH mpn_add_n -- Add two limb vectors of the same length > 0 and store sum$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  in a third limb vector.$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sh/add_n.asm	/^dnl$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  Copyright 1995, 2000, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  SH2 mpn_addmul_1 -- Multiply a limb vector with a limb and add the result$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl  to a second limb vector.$/;"	l
dnl	mpn/sh/sh2/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  Copyright 1995, 2000, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  SH2 mpn_mul_1 -- Multiply a limb vector with a limb and store the result$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  in a second limb vector.$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sh/sh2/mul_1.asm	/^dnl$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  Copyright 1995, 2000, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  SH2 mpn_submul_1 -- Multiply a limb vector with a limb and subtract the$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  result from a second limb vector.$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sh/sh2/submul_1.asm	/^dnl$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  Copyright 1995, 1997, 2000, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  SH mpn_sub_n -- Subtract two limb vectors of the same length > 0 and store$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  difference in a third limb vector.$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sh/sub_n.asm	/^dnl$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  Copyright 1995, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  SPARC mpn_add_n -- Add two limb vectors of the same length > 0 and store$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl  sum in a third limb vector.$/;"	l
dnl	mpn/sparc32/add_n.asm	/^dnl$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  Copyright 1992-1994, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  SPARC mpn_addmul_1 -- Multiply a limb vector with a limb and add the$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  result to a second limb vector.$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  Copyright 1995, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  SPARC mpn_lshift -- Shift a number left.$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/lshift.asm	/^dnl$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  Copyright 1992-1994, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  SPARC mpn_mul_1 -- Multiply a limb vector with a limb and store$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl  the result in a second limb vector.$/;"	l
dnl	mpn/sparc32/mul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  Copyright 1995, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  SPARC mpn_rshift -- Shift a number right.$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/rshift.asm	/^dnl$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  Copyright 1995, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  SPARC mpn_sub_n -- Subtract two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl  store difference in a third limb vector.$/;"	l
dnl	mpn/sparc32/sub_n.asm	/^dnl$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  Copyright 1992-1994, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  SPARC mpn_submul_1 -- Multiply a limb vector with a limb and subtract$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl  the result from a second limb vector.$/;"	l
dnl	mpn/sparc32/submul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  Copyright 1993, 1994, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  SPARC v7 __udiv_qrnnd division support, used from longlong.h.$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  This is for v7 CPUs with a floating-point unit.$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/udiv.asm	/^dnl$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  Copyright 1993, 1994, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  SPARC v7 __udiv_qrnnd division support, used from longlong.h.$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  This is for v7 CPUs without a floating-point unit.$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/udiv_nfp.asm	/^dnl$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  SPARC T1 32-bit mpn_add_n.$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/ultrasparct1/add_n.asm	/^dnl$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  Copyright 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  SPARC T1 32-bit mpn_addmul_1.$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/ultrasparct1/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  Copyright 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  SPARC T1 32-bit mpn_mul_1.$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/ultrasparct1/mul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  SPARC T1 32-bit mpn_sqr_diagonal.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sqr_diagonal.asm	/^dnl$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  SPARC T1 32-bit mpn_sub_n.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/ultrasparct1/sub_n.asm	/^dnl$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  Copyright 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  SPARC T1 32-bit mpn_submul_1.$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/ultrasparct1/submul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  Copyright 1995, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  SPARC mpn_umul_ppmm -- support for longlong.h for non-gcc.$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/umul.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  Copyright 1992-1995, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  SPARC v8 mpn_addmul_1 -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  add the result to a second limb vector.$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v8/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  Copyright 1992, 1994, 1995, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  SPARC v8 mpn_mul_1 -- Multiply a limb vector with a single limb and$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl  store the product in a second limb vector.$/;"	l
dnl	mpn/sparc32/v8/mul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  Copyright 1992-1994, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  SPARC v8 mpn_submul_1 -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl  subtract the result from a second limb vector.$/;"	l
dnl	mpn/sparc32/v8/submul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  Copyright 1993, 1994, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  SuperSPARC mpn_udiv_qrnnd division support, used from longlong.h.$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  This is for SuperSPARC only, to compensate for its semi-functional$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl  udiv instruction.$/;"	l
dnl	mpn/sparc32/v8/supersparc/udiv.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  Copyright 1993, 1994, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  SuperSPARC mpn_udiv_qrnnd division support, used from longlong.h.$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  This is for SuperSPARC only, to compensate for its semi-functional$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl  udiv instruction.$/;"	l
dnl	mpn/sparc32/v8/udiv.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  Copyright 1995, 1996, 2000 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  SPARC v8 mpn_umul_ppmm -- support for longlong.h for non-gcc.$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v8/umul.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  Copyright 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  SPARC mpn_add_n -- Add two limb vectors of the same length > 0 and store$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl  sum in a third limb vector.$/;"	l
dnl	mpn/sparc32/v9/add_n.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  Copyright 1998, 2000, 2001, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  SPARC v9 32-bit mpn_addmul_1 -- Multiply a limb vector with a limb and add$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl  the result to a second limb vector.$/;"	l
dnl	mpn/sparc32/v9/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  Copyright 1998, 2000, 2001, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  SPARC v9 32-bit mpn_mul_1 -- Multiply a limb vector with a limb and store$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl  the result in a second limb vector.$/;"	l
dnl	mpn/sparc32/v9/mul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  Copyright 2001, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  SPARC v9 32-bit mpn_sqr_diagonal.$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v9/sqr_diagonal.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  Copyright 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  SPARC mpn_sub_n -- Subtract two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl  store difference in a third limb vector.$/;"	l
dnl	mpn/sparc32/v9/sub_n.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  Copyright 1998, 2000, 2001, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  SPARC v9 32-bit mpn_submul_1 -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl  subtract the result from a second limb vector.$/;"	l
dnl	mpn/sparc32/v9/submul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  Copyright 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  SPARC v9 32-bit mpn_udiv_qrnnd - division support for longlong.h.$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc32/v9/udiv.asm	/^dnl$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  Copyright 1999-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  SPARC v9 mpn_copyd -- Copy a limb vector, decrementing.$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/copyd.asm	/^dnl$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  Copyright 1999-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  SPARC v9 mpn_copyi -- Copy a limb vector, incrementing.$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/copyi.asm	/^dnl$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  Based on the K7 gcd_1.asm, by Kevin Ryde.  Rehacked for SPARC by Torbjörn$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  Granlund.$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  SPARC64 mpn_gcd_1.$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  SPARC v9 mpn_lshift$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/lshift.asm	/^dnl$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  SPARC v9 mpn_lshiftc$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  SPARC v9 mpn_rshift$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/rshift.asm	/^dnl$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund and David Miller.$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  SPARC v9 mpn_sec_tabselect.$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  Copyright 2001-2003, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  SPARC v9 mpn_add_n -- Add two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl  store sum in a third limb vector.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/add_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  Copyright 1998, 2000-2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  SPARC v9 64-bit mpn_addmul_1 -- Multiply a limb vector with a limb and add$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl  the result to a second limb vector.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  Copyright 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  SPARC v9 64-bit mpn_addmul_2 -- Multiply an n limb number with 2-limb$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  number and add the result to a n limb vector.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/addmul_2.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  Copyright 1996, 2000-2003, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  SPARC v9 mpn_lshiftc$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  Copyright 1998, 2000-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  SPARC v9 64-bit mpn_mul_1 -- Multiply a limb vector with a limb and store$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl  the result in a second limb vector.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/mul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  SPARC v9 64-bit mpn_sqr_diagonal.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sqr_diagonal.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  Copyright 2001-2003, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  SPARC v9 mpn_sub_n -- Subtract two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl  store difference in a third limb vector.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/sub_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  Copyright 2001-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  SPARC v9 64-bit mpn_submul_1 -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl  subtract the result from a second limb vector.$/;"	l
dnl	mpn/sparc64/ultrasparc1234/submul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  SPARC v9 mpn_add_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/add_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  SPARC v9 mpn_addlsh1_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  SPARC v9 mpn_addlsh2_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  SPARC v9 mpn_addlshC_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addlshC_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  SPARC v9 mpn_addmul_1 for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  SPARC v9 mpn_mul_1 for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/mul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  SPARC v9 mpn_rsblsh1_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh1_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  SPARC v9 mpn_rsblsh2_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblsh2_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  SPARC v9 mpn_rsblshC_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/rsblshC_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  SPARC v9 mpn_sub_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sub_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  SPARC v9 mpn_sublsh1_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh1_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  SPARC v9 mpn_sublsh2_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublsh2_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  SPARC v9 mpn_sublshC_n for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/sublshC_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  Copyright 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  SPARC v9 mpn_submul_1 for T1\/T2.$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct1/submul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  SPARC v9 mpn_add_n for T3\/T4.$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/add_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  Contributed to the GNU project by David Miller and Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  SPARC v9 mpn_addmul_1 for T3\/T4\/T5.$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  SPARC v9 mpn_mul_2 and mpn_addmul_2 for T3\/T4\/T5.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_2.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  SPARC v9 mpn_mul_4 and mpn_addmul_4 for T3\/T4\/T5.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aormul_4.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  SPARC v9 mpn_addlsh_n and mpn_sublsh_n for T3\/T4\/T5.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/aorslsh_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  SPARC T3\/T4\/T5 mpn_bdiv_dbm1c.$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  Contributed to the GNU project by David Miller and Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  SPARC v9 mpn_cnd_add_n and mpn_cnd_sub_n for T3\/T4\/T5.$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/cnd_aors_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  SPARC T3\/T4\/T5 mpn_divexact_1.$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/dive_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  SPARC v9 mpn_hamdist for T3\/T4.$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/hamdist.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  SPARC T3\/T4\/T5 mpn_invert_limb.$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  SPARC v9-2011 simulation support.$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/missing.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  SPARC T3\/T4\/T5 mpn_mod_1s_4p.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_1_4.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  Copyright 2005, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  SPARC v9 mpn_mod_34lsub1 for T3\/T4\/T5.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  SPARC T3\/T4\/T5 mpn_modexact_1c_odd.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mode1o.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  Contributed to the GNU project by David Miller and Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  SPARC v9 mpn_mul_1 for T3\/T4\/T5.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/mul_1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  SPARC v9 mpn_popcount for T3\/T4.$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/popcount.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  SPARC v9 mpn_sqr_dial_addlsh1 for T3\/T4\/T5.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sqr_diag_addlsh1.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  Contributed to the GNU project by David Miller.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  SPARC v9 mpn_sub_n for T3\/T4.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/sub_n.asm	/^dnl$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  Contributed to the GNU project by David Miller and Torbjörn Granlund.$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  SPARC v9 mpn_submul_1 for T3\/T4\/T5.$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/sparc64/ultrasparct3/submul_1.asm	/^dnl$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  ARM\/Thumb mpn_add_n.$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  Copyright 1997, 2000, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/thumb/add_n.asm	/^dnl$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  ARM\/Thumb mpn_sub_n.$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  Copyright 1997, 2000, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/thumb/sub_n.asm	/^dnl$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  Copyright 1999, 2000, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  VAX mpn_add_n -- Add two limb vectors of the same length > 0 and store sum$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  in a third limb vector.$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/vax/add_n.asm	/^dnl$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 2000, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  VAX mpn_addmul_1 -- Multiply a limb vector with a limb and add the result$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl  to a second limb vector.$/;"	l
dnl	mpn/vax/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  Copyright 1999-2001, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  VAX mpn_lshift -- left shift.$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/vax/lshift.asm	/^dnl$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 2000, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  VAX mpn_mul_1 -- Multiply a limb vector with a limb and store the result$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  in a second limb vector.$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/vax/mul_1.asm	/^dnl$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  Copyright 1999-2001, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  VAX mpn_rshift -- right shift.$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/vax/rshift.asm	/^dnl$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  Copyright 1999, 2000, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  VAX mpn_sub_n -- Subtract two limb vectors of the same length > 0 and$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl  store difference in a third limb vector.$/;"	l
dnl	mpn/vax/sub_n.asm	/^dnl$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 2000, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  VAX mpn_submul_1 -- Multiply a limb vector with a limb and subtract the$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  result from a second limb vector.$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/vax/submul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  Copyright 1992, 1994-1996, 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl  x86 mpn_add_n\/mpn_sub_n -- mpn addition and subtraction.$/;"	l
dnl	mpn/x86/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  Copyright 1992, 1994, 1997, 1999-2002, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  limb and add the result to a second limb vector.$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl  x86 __gmpn_addmul_1 (for 386 and 486) -- Multiply a limb vector with a$/;"	l
dnl	mpn/x86/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  Contributed to the GNU project by Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  Intel Atom mpn_rsblsh1_n -- rp[] = (vp[] << 1) - up[]$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/aorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  Contributed to the GNU project by Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  Intel Atom mpn_addlsh2_n\/mpn_rsblsh2_n -- rp[] = (vp[] << 2) +- up[]$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/aorrlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  Contributed to the GNU project by Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  Intel Atom mpn_addlshC_n\/mpn_rsblshC_n -- rp[] = (vp[] << C) +- up[]$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/aorrlshC_n.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  Contributed to the GNU project by Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  Intel Atom mpn_add_n\/mpn_sub_n -- rp[] = up[] +- vp[].$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  Contributed to the GNU project by Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  Intel Atom mpn_addlshC_n\/mpn_sublshC_n -- rp[] = up[] +- (vp[] << C)$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/aorslshC_n.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  Intel Atom mpn_bdiv_q_1, mpn_pi1_bdiv_q_1 -- schoolbook Hensel$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  division by 1-limb divisor, returning quotient only.$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/bdiv_q_1.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  X86 mpn_cnd_add_n optimised for Intel Atom.$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/cnd_add_n.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  X86 mpn_cnd_sub_n optimised for Intel Atom.$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/cnd_sub_n.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  Intel Atom mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  Contributed to the GNU project by Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  Intel Atom mpn_and_n,...,mpn_xnor_n -- bitwise logical operations.$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/logops_n.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  Intel Atom mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  Intel Atom mpn_lshiftc -- mpn left shift with complement.$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  Intel Atom mpn_copyd -- copy limb vector, decrementing.$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/mmx/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  Intel Atom mpn_copyi -- copy limb vector, incrementing.$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/mmx/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  Intel Atom mpn_hamdist -- hamming distance.$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/mmx/hamdist.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  Intel Atom mpn_mod_34lsub1 -- remainder modulo 2^24-1.$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  Intel Atom mpn_modexact_1_odd -- exact division style remainder.$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/mode1o.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  Converted from AMD64 by Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  Intel Atom mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl x86-32 mpn_addmul_1 and mpn_submul_1 optimised for Intel Atom.$/;"	l
dnl	mpn/x86/atom/sse2/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  Intel Atom  mpn_bdiv_dbm1.$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sse2/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  Intel Atom mpn_divrem_1 -- mpn by limb division.$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sse2/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  Copyright 2009, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  Intel Atom\/SSE2 mpn_mod_1_1.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_1.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  Copyright 2009, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  Intel Atom\/SSE2 mpn_mod_1_4.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sse2/mod_1_4.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  Intel Atom mpn_mul_1.$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sse2/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  a third limb vector.$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl  x86 mpn_mul_basecase -- Multiply two limb vectors and store the result in$/;"	l
dnl	mpn/x86/atom/sse2/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  Intel Atom mpn_popcount -- population count.$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sse2/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl  x86 mpn_sqr_basecase -- square an mpn number, optimised for atom.$/;"	l
dnl	mpn/x86/atom/sse2/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  Intel Atom mpn_sublsh1_n -- rp[] = up[] - (vp[] << 1)$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sublsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  Contributed to the GNU project by Marco Bodrato.$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  Intel Atom mpn_addlsh2_n\/mpn_sublsh2_n -- rp[] = up[] +- (vp[] << 2).$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/atom/sublsh2_n.asm	/^dnl$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  Copyright 2008, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl  x86 mpn_bdiv_dbm1.$/;"	l
dnl	mpn/x86/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  Copyright 2001, 2002, 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  Rearranged from mpn\/x86\/dive_1.asm by Marco Bodrato.$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl  x86 mpn_bdiv_q_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/bdiv_q_1.asm	/^dnl$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  X86 mpn_cnd_add_n, mpn_cnd_sub_n$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/cnd_aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl  x86 mpn_copyd -- copy limb vector, decrementing.$/;"	l
dnl	mpn/x86/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl  x86 mpn_copyi -- copy limb vector, incrementing.$/;"	l
dnl	mpn/x86/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  Copyright 2001, 2002, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl  x86 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  Copyright 1999-2003, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl  x86 mpn_divrem_1 -- mpn by limb division extending to fractional quotient.$/;"	l
dnl	mpn/x86/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  Copyright 2007, 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl  x86 mpn_divrem_2 -- Divide an mpn number by a normalized 2-limb number.$/;"	l
dnl	mpn/x86/divrem_2.asm	/^dnl$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  "instrument" profiling scheme anyway.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  $1 in it.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  Copyright 2003, 2012, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  Emit a fat binary entrypoint function of the given name.  This is the$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  Emit a fat binary initializer function of the given name.  These$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  FAT_ENTRY for each CPUVEC_FUNCS_LIST$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  FAT_INIT for each CPUVEC_FUNCS_LIST$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  For PIC, the jumps are 20 bytes each, and are best aligned to 16 to$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  For non-PIC, the jumps are 5 bytes each, aligning them to 8 should be$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  Forcibly disable profiling.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  HAVE_NATIVE grepping in configure, preventing that code trying to eval$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  Note having `PROLOGUE in FAT_INIT obscures that PROLOGUE from the$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  Note the extra `' ahead of PROLOGUE obscures it from the HAVE_NATIVE$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  Only one of these routines will be executed, and only once, since after$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  The code simply calls __gmpn_cpuvec_init, and then jumps back through$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  The code simply jumps through the function pointer in __gmpn_cpuvec at$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  The entrypoints and inits are small enough not to worry about, the real$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  Usage: FAT_ENTRY(name, offset)$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  Usage: FAT_INIT(name, offset)$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  __gmpn_cpuvec_init will have stored the address of the selected$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  boundary.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  bytes where %eax would be 4.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  ensure at least the first two instructions don't cross a cache line$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  fine for all x86s.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  functions are the initial values for the pointers in __gmpn_cpuvec.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  grepping in configure, stopping that code trying to eval something with$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  here ends with a jump means we won't work properly with the$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  implementation there.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  keep code size down, "fat_init" is a shared bit of code, arrived at$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  need for anything special here, just something small and simple.  To$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  normal entry for applications, eg. __gmpn_add_n.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  or$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  routines arrived at will have any profiling.  Also, the way the code$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  something with $1 in it.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  that all the __gmpn_cpuvec pointers go to real routines.  So there's no$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  the __gmpn_cpuvec pointer, at the given "offset" (in bytes).$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  the given "offset" (in bytes).$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  with the offset in %al.  %al is used since the movb instruction is 2$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl  x86 fat binary entrypoints.$/;"	l
dnl	mpn/x86/fat/fat_entry.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  AMD K6 mpn_add\/sub_n -- mpn addition or subtraction.$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  minimum 5 because the unrolled code can't handle less$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl        4             9.5              7.78$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl        8             9.0              7.78$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl       16             8.4              7.65$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl       32             8.4              8.2$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  AMD K6 mpn_addmul_1\/mpn_submul_1 -- add or subtract mpn multiple.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  Copyright 1999-2003, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  K6:           large multipliers  small multipliers$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  Maximum possible unrolling with the current code is 32.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  UNROLL_COUNT    cycles\/limb       cycles\/limb$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  Unrolling to 16 limbs\/loop makes the unrolled loop fit exactly in a 256$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  byte block, which might explain the good speed at that unrolling.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  overlapping with parameters already fetched$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  AMD K6 mpn_divrem_1 -- mpn by limb division.$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  Copyright 1999-2003, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  A divl is 20 cycles and the loop runs at about 9.5 cycles\/bitpair so$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  AMD K6 mpn_gcd_1 -- mpn by 1 gcd.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  Copyright 2000-2002, 2004, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  If size==1 and x (the larger operand) is more than DIV_THRESHOLD bits$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  bigger than y, then a division x%y is done to reduce it.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  there should be an advantage in the divl at about 4 or 5 bits, which is$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl  what's found.$/;"	l
dnl	mpn/x86/k6/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  AMD K6-2 mpn_copyd -- copy limb vector, decrementing.$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  re-using parameter space$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/k62mmx/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  AMD K6-2 mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  Copyright 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  minimum 9, because unrolled loop can't handle less$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl  used after src has been fetched$/;"	l
dnl	mpn/x86/k6/k62mmx/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  AMD K6-2 mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  Copyright 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  Minimum 9, because the unrolled loop can't handle less.$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/k62mmx/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  AMD K6-2 mpn_com -- mpn bitwise one's complement.$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mmx/com.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  AMD K6 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  Copyright 2000-2002, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mmx/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  AMD K6-2 mpn_and_n, mpn_andn_n, mpn_nand_n, mpn_ior_n, mpn_iorn_n,$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  M4_*_neg_dst means whether to negate the final result before writing$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  M4_*_neg_src2 means whether to negate the src2 values before using them$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  M4_p and M4_i are the MMX and integer instructions$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  mpn_nior_n, mpn_xor_n, mpn_xnor_n -- mpn bitwise logical operations.$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  pandn can't be used with nails.$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  style (the two are equivalent for xor).$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl  xnor is done in "iorn" style because it's a touch faster than "nior"$/;"	l
dnl	mpn/x86/k6/mmx/logops_n.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  AMD K6 mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  Copyright 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mmx/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  AMD K6-2 mpn_popcount, mpn_hamdist -- mpn bit population count and$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  Copyright 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  hamming distance.$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mmx/popham.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  AMD K6 mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  Copyright 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mmx/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  AMD K6 mpn_mod_34lsub1 -- mpn remainder modulo 2**24-1.$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  Copyright 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  AMD K6 mpn_modexact_1_odd -- exact division style remainder.$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  Copyright 2000-2003, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mode1o.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  AMD K6 mpn_mul_1 -- mpn by limb multiply.$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  Copyright 1999, 2000, 2002, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  minimum 5 because the unrolled code can't handle less$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl           8           9.75$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl          16           9.3$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl          32           9.3$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  AMD K6 mpn_mul_basecase -- multiply two mpn numbers.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  Copyright 1999-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  For some strange reason using (%esp) instead of 0(%esp) is a touch$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  If VAR_COUNTER is at (%esp), the effect is worse.  In this case the$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  K6: UNROLL_COUNT cycles\/product (approx)$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  Maximum possible with the current code is 32.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  With 16 the inner unrolled loop fits exactly in a 256 byte block, which$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  anything isn't clear.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  disabled.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  might explain it's good performance.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  slower in this code, hence the defframe empty-if-zero feature is$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl  unrolled loop is 255 instead of 256 bytes, but quite how this affects$/;"	l
dnl	mpn/x86/k6/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  AMD K6 mpn_preinv_mod_1 -- mpn by 1 remainder, with pre-inverted divisor.$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  Copyright 2000, 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/pre_mod_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  63, giving a maximum SQR_TOOM2_THRESHOLD of 66.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  AMD K6 mpn_sqr_basecase -- square an mpn number.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  Allow a value from the tune program to override config.m4.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  SQR_TOOM2_THRESHOLD_MAX is the maximum SQR_TOOM2_THRESHOLD this$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  The first addmul is the biggest, and this takes the second least$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  The value is determined by requiring the displacements in the unrolled$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  This value is also implicitly encoded in a shift and add.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  UNROLL_COUNT is the number of code chunks in the unrolled addmul.  The$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  With the unmodified &src[size] and &dst[size] pointers, the$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  addmul to fit in single bytes.  This means a maximum UNROLL_COUNT of$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  code supports.  This value is used only by the tune program to know$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  displacements in the unrolled code fit in a byte for UNROLL_COUNT$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  limbs, UNROLL_COUNT needs to be SQR_TOOM2_THRESHOLD-3.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  mpn_sqr_basecase only needs to handle sizes < SQR_TOOM2_THRESHOLD.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  number required is determined by SQR_TOOM2_THRESHOLD, since$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  significant limb and multiplies it by the third least significant and$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  trigger some m4_assert()s in the code, making the build fail.)$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  up.  Hence for a maximum operand size of SQR_TOOM2_THRESHOLD-1$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  values up to 31.  Above that an offset must be added to them.$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl  what it can go up to.  (An attempt to compile with a bigger value will$/;"	l
dnl	mpn/x86/k6/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  AMD K7 mpn_addlsh1_n -- rp[] = up[] + (vp[] << 1)$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Marco Bodrato.$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/addlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl           8           1.9$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl          16           1.64$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl          32           1.7$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl          64           2.0$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  AMD K7 mpn_add_n\/mpn_sub_n -- mpn add or subtract.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  Copyright 1999-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  K7: UNROLL_COUNT cycles\/limb$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  Maximum possible with the current code is 64.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  Must have UNROLL_THRESHOLD >= 2, since the unrolled loop can't handle 1.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  AMD K7 mpn_addmul_1\/mpn_submul_1 -- add or subtract mpn multiple.$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  Copyright 1999-2002, 2005, 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  AMD K7 mpn_bdiv_q_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  Copyright 2001, 2002, 2004, 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  Rearranged from mpn\/x86\/k7\/dive_1.asm by Marco Bodrato.$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/bdiv_q_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  AMD K7 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  Copyright 2001, 2002, 2004, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  Contributed to the GNU project by by Kevin Ryde.  Rehacked by Torbjorn$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011, 2012, 2014, 2015 Free Software$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  Granlund.$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl  x86 mpn_gcd_1 optimised for AMD K7.$/;"	l
dnl	mpn/x86/k7/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  Contributed to the GNU project by Niels Möller$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  Copyright 2009, 2011, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl  x86 mpn_invert_limb$/;"	l
dnl	mpn/x86/k7/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  AMD Athlon mpn_com -- mpn bitwise one's complement.$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  Copyright 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mmx/com.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  AMD K7 mpn_copyd -- copy limb vector, decrementing.$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  Copyright 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  minimum 5 since the unrolled code can't handle less than 5$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  parameter space reused$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mmx/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  AMD K7 mpn_copyi -- copy limb vector, incrementing.$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  Copyright 1999, 2000, 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  minimum 5 since the unrolled code can't handle less than 5$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  parameter space reused$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mmx/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  AMD K7 mpn_divrem_1, mpn_divrem_1c, mpn_preinv_divrem_1 -- mpn by limb$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  At 3 limbs the mul is a touch faster than div on the integer part, and$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  Copyright 1999-2002, 2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  MUL_THRESHOLD is the value of xsize+size at which the multiply by$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  The inverse takes about 50 cycles to calculate, but after that the$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  division.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  even more so on the fractional part.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  inverse method is used, rather than plain "divl"s.  Minimum value 1.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  multiply is 17 c\/l versus division at 42 c\/l.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mmx/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl           4           1.51$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl           8           1.26$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl          16           1.21$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl          32           1.2$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  AMD K7 mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  K7: UNROLL_COUNT cycles\/limb$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  Maximum possible with the current code is 64.$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mmx/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  AMD K7 mpn_popcount, mpn_hamdist -- population count and hamming$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  Copyright 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  distance.$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mmx/popham.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl           4           1.51$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl           8           1.26$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl          16           1.21$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl          32           1.2$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  AMD K7 mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  K7: UNROLL_COUNT cycles\/limb$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  Maximum possible with the current code is 64.$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mmx/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  Contributed to the GNU project by Niels Möller and Torbjorn Granlund.$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  Copyright 2010, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl  x86-32 mpn_mod_1_1p, requiring cmov.$/;"	l
dnl	mpn/x86/k7/mod_1_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  Copyright 2009, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl  x86-32 mpn_mod_1s_4p, requiring cmov.$/;"	l
dnl	mpn/x86/k7/mod_1_4.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  AMD K7 mpn_mod_34lsub1 -- remainder modulo 2^24-1.$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  Copyright 2000-2002, 2004, 2005, 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  AMD K7 mpn_modexact_1_odd -- exact division style remainder.$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  Copyright 2000-2002, 2004, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mode1o.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  AMD K7 mpn_mul_1.$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  Copyright 1999-2002, 2005, 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl           8           4.67$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl          16           4.59$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl          32           4.42$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  32 gives 1k of code, but the k7 has a 64k L1 code cache.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  AMD K7 mpn_mul_basecase -- multiply two mpn numbers.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  At 32 the typical 13-26 limb sizes from the karatsuba code will get$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  FRAME carries on from previous$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  FRAME doesn't carry on from previous, no pushes yet here$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  K7 UNROLL_COUNT cycles\/product (at around 20x20)$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  Maximum possible with the current code is 32.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  done with a straight run through a block of code, no inner loop.  Using$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  AMD K7 mpn_sqr_basecase -- square an mpn number.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  Because the last chunk of code is generated differently, a label placed$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  These are the same as mpn\/x86\/k6\/sqr_basecase.asm, see that code for$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  This value also hard coded in some shifts and adds$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  With the unmodified &src[size] and &dst[size] pointers, the$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  at the end doesn't work.  Instead calculate the implied end using the$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  displacements in the unrolled code fit in a byte for UNROLL_COUNT$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  some comments.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  start and how many chunks of code there are.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl  values up to 31, but above that an offset must be added to them.$/;"	l
dnl	mpn/x86/k7/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  AMD K7 mpn_sublsh1_n_ip1 -- rp[] = rp[] - (up[] << 1)$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Marco Bodrato.$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/k7/sublsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  Copyright 1992, 1994, 1996, 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl  x86 mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/x86/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  Copyright 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  X86 MMX mpn_sec_tabselect.$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/mmx/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  Copyright 2000-2002, 2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  Generic x86 mpn_mod_34lsub1 -- mpn remainder modulo 2^24-1.$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  Copyright 1992, 1994, 1997-2002, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  with a limb and store the result in a second limb vector.$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl  x86 mpn_mul_1 (for 386, 486, and Pentium Pro) -- Multiply a limb vector$/;"	l
dnl	mpn/x86/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  Copyright 1996-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  in a third limb vector.$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl  x86 mpn_mul_basecase -- Multiply two limb vectors and store the result$/;"	l
dnl	mpn/x86/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  Copyright 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  Intel P6 mpn_add_n\/mpn_sub_n -- mpn add or subtract.$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl          8           6.7$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl         16           6.35$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl         32           6.3$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl         64           6.3$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  Copyright 1999-2002, 2005 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  Intel P6 mpn_addmul_1\/mpn_submul_1 -- add or subtract mpn multiple.$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  Maximum possible with the current code is 64.$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  P6 UNROLL_COUNT cycles\/limb$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  overlapping with parameters already fetched$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  Copyright 2001, 2002, 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  Intel P6 mpn_modexact_1_odd -- exact division style remainder.$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  Rearranged from mpn\/x86\/p6\/dive_1.asm by Marco Bodrato.$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/bdiv_q_1.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  Intel P6 mpn_copyd -- copy limb vector backwards.$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  re-using parameter space$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  Copyright 2001, 2002, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  Intel P6 mpn_modexact_1_odd -- exact division style remainder.$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  Based on the K7 gcd_1.asm, by Kevin Ryde.  Rehacked by Torbjorn Granlund.$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011, 2012, 2015 Free Software$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl  x86 mpn_gcd_1 optimised for processors with fast BSF.$/;"	l
dnl	mpn/x86/p6/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  Copyright 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  Intel P6 mpn_lshsub_n -- mpn papillion support.$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/lshsub_n.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  Intel Pentium-II mpn_divrem_1 -- mpn by limb division.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  MUL_THRESHOLD is the value of xsize+size at which the multiply by$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  The different speeds of the integer and fraction parts means that using$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  The threshold is set to make the integer part right.  At 4 limbs the$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  div and mul are about the same there, but on the fractional part the$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  for the integer part and a bit lower for the fraction part.  (Or what's$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  inverse method is used, rather than plain "divl"s.  Minimum value 1.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  mul is much faster.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  really wanted is to speed up the integer part!)$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl  xsize+size isn't quite right.  The threshold wants to be a bit higher$/;"	l
dnl	mpn/x86/p6/mmx/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  Copyright 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  Intel Pentium-II mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  The P55 code runs well on P-II\/III, but could stand some minor tweaks$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  at some stage probably.$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/mmx/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  Copyright 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  Intel Pentium-II mpn_popcount, mpn_hamdist -- population count and$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  hamming distance.$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/mmx/popham.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  Copyright 2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  Intel Pentium-II mpn_rshift -- mpn left shift.$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  The P55 code runs well on P-II\/III, but could stand some minor tweaks$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  at some stage probably.$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/mmx/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  Copyright 2000-2002, 2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  Intel P6 mpn_mod_34lsub1 -- remainder modulo 2^24-1.$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  Copyright 2000-2002, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  Intel P6 mpn_modexact_1_odd -- exact division style remainder.$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  Not enough room under modexact_1 to make these re-use the parameter$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl  space, unfortunately.$/;"	l
dnl	mpn/x86/p6/mode1o.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl           8           7$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl          16           6.5$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl          32           6.4$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  Copyright 1999-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  Intel P6 mpn_mul_basecase -- multiply two mpn numbers.$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  Maximum possible with the current code is 32.$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  P6 UNROLL_COUNT cycles\/product (approx)$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  more parameter space re-use$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  Copyright 2000, 2002, 2004, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  Intel Pentium-III mpn_popcount, mpn_hamdist -- population count and$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  hamming distance.$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/p3mmx/popham.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  Copyright 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  Intel P6 mpn_sqr_basecase -- square an mpn number.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  These are the same as in mpn\/x86\/k6\/sqr_basecase.asm, see that file for$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  This is also hard-coded in the address calculation below.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  With &src[size] and &dst[size-1] pointers, the displacements in the$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  a description.  The only difference here is that UNROLL_COUNT can go up$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  that an offset must be added to them.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  to 64 (not 63) making SQR_TOOM2_THRESHOLD_MAX 67.$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl  unrolled code fit in a byte for UNROLL_COUNT values up to 32, but above$/;"	l
dnl	mpn/x86/p6/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  Copyright 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  Intel P6\/SSE2 mpn_addmul_1.$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/sse2/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  Copyright 2009, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  Intel P6\/SSE2 mpn_mod_1_1.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_1.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  Copyright 2009, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  Intel P6\/SSE2 mpn_mod_1_4.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/sse2/mod_1_4.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  Copyright 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  Intel P6\/SSE2 mpn_mul_1.$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/sse2/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  Copyright 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  Intel P6\/SSE2 mpn_mul_basecase.$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/sse2/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  Copyright 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  Intel P6\/SSE2 mpn_popcount -- population count.$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/sse2/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  Copyright 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  Intel P6\/SSE2 mpn_sqr_basecase.$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/sse2/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  Copyright 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  Intel P6\/SSE2 mpn_submul_1.$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/p6/sse2/submul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  Copyright 1992, 1994-1996, 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  Intel Pentium mpn_add_n\/mpn_sub_n -- mpn addition and subtraction.$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 1999, 2000, 2002 Free Software Foundation,$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  Inc.$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  Intel Pentium mpn_addmul_1 -- mpn by limb multiplication.$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  Copyright 2001, 2002, 2011, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  Intel Pentium mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  Rearranged from mpn\/x86\/pentium\/dive_1.asm by Marco Bodrato.$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl non-PIC$/;"	l
dnl	mpn/x86/pentium/bdiv_q_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  Copyright 1996, 2001, 2002, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  Intel Pentium mpn_com -- mpn ones complement.$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/com.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  Copyright 1996, 2001, 2002, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  Intel Pentium mpn_copyd -- copy limb vector, decrementing.$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  Copyright 1996, 2001, 2002, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  Intel Pentium mpn_copyi -- copy limb vector, incrementing.$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  Copyright 2001, 2002, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  Intel Pentium mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  Copyright 2001, 2002, 2014, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  Intel P5 mpn_hamdist -- mpn hamming distance.$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl non-PIC$/;"	l
dnl	mpn/x86/pentium/hamdist.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  Intel Pentium mpn_and_n,...,mpn_xnor_n -- bitwise logical operations.$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/logops_n.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  Copyright 1992, 1994-1996, 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  Intel Pentium mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  Copyright 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  Intel P55 mpn_hamdist -- mpn hamming distance.$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/mmx/hamdist.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  Copyright 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  Intel P5 mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  minimum 5, because the unrolled loop can't handle less$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/mmx/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  Copyright 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  Intel Pentium MMX mpn_mul_1 -- mpn by limb multiplication.$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/mmx/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  Copyright 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  Intel P5 mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  Minimum 5, because the unrolled loop can't handle less.$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/mmx/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  Copyright 2000-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  Intel P5 mpn_mod_34lsub1 -- mpn remainder modulo 2**24-1.$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  Copyright 2000-2002, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  Intel Pentium mpn_modexact_1_odd -- exact division style remainder.$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  re-using parameter space$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl non-PIC$/;"	l
dnl	mpn/x86/pentium/mode1o.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  Copyright 1992, 1994, 1996, 1999, 2000, 2002 Free Software Foundation,$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  Inc.$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  Intel Pentium mpn_mul_1 -- mpn by limb multiplication.$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  Intel Pentium mpn_mul_2 -- mpn by 2-limb multiplication.$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/mul_2.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  Copyright 1996, 1998-2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  Intel Pentium mpn_mul_basecase -- mpn by mpn multiplication.$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  Copyright 2001, 2002, 2014, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  Intel P5 mpn_popcount -- mpn bit population count.$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl non-PIC$/;"	l
dnl	mpn/x86/pentium/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  Copyright 1992, 1994-1996, 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  Intel Pentium mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  Copyright 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  Intel P5 mpn_sqr_basecase -- square an mpn number.$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  Copyright 1999-2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  Pentium-4 mpn_copyd -- copy limb vector, decrementing.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  The std\/rep\/movsl\/cld is very slow for small blocks on pentium4.  Its$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  Ultimately, we may want to use 64-bit movq or 128-bit movdqu in some$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  We therefore use an open-coded 2 c\/l copying loop.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  nifty unrolled arrangement.  Clearly, that could reach much higher$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  speeds, at least for large blocks.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl  startup time seems to be about 165 cycles.  It then needs 2.6 c\/l.$/;"	l
dnl	mpn/x86/pentium4/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  Copyright 1999-2001 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  Pentium-4 mpn_copyi -- copy limb vector, incrementing.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  The rep\/movsl is very slow for small blocks on pentium4.  Its startup$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  Ultimately, we may want to use 64-bit movd or 128-bit movdqu in some$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  limb per cycle.  We therefore fall back to an open-coded 2 c\/l copying$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  loop for smaller sizes.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  nifty unrolled arrangement.  Clearly, that could reach much higher$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  speeds, at least for large blocks.$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl  time seems to be about 110 cycles.  It then copies at a rate of one$/;"	l
dnl	mpn/x86/pentium4/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  Intel Pentium-4 mpn_lshift -- left shift.$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/mmx/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  Copyright 2000-2002, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  Intel Pentium 4 mpn_popcount, mpn_hamdist -- population count and$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  hamming distance.$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/mmx/popham.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  Intel Pentium-4 mpn_rshift -- right shift.$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/mmx/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  Intel Pentium-4 mpn_add_n -- mpn addition.$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/add_n.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  Copyright 2001-2004, 2006 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  Intel Pentium-4 mpn_addlsh1_n -- mpn x+2*y.$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/addlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  Copyright 2005, 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  mpn_addmul_1 for Pentium 4 and P6 models with SSE2 (i.e., 9,D,E,F).$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Marco Bodrato.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  Intel Atom  mpn_bdiv_dbm1.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  Copyright 2001, 2002, 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  Intel Pentium-4 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  Rearranged from mpn\/x86\/pentium4\/sse2\/dive_1.asm by Marco Bodrato.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/bdiv_q_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  Copyright 2001, 2002, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  Intel Pentium-4 mpn_cnd_add_n -- mpn addition.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_add_n.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  Copyright 2001, 2002, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  Intel Pentium-4 mpn_cnd_sub_n -- mpn subtraction.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/cnd_sub_n.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  Copyright 2001, 2002, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  Intel Pentium-4 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  At 4 limbs the div is a touch faster than the mul (and of course$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  Copyright 1999-2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  Intel Pentium-4 mpn_divrem_1 -- mpn by limb division.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  MUL_THRESHOLD is the value of xsize+size at which the multiply by$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  The inverse takes about 80-90 cycles to calculate, but after that the$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  inverse method is used, rather than plain "divl"s.  Minimum value 1.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  multiply is 32 c\/l versus division at about 58 c\/l.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl  simpler), so start the mul from 5 limbs.$/;"	l
dnl	mpn/x86/pentium4/sse2/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  Copyright 2009, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl  x86-32 mpn_mod_1_1p for Pentium 4 and P6 models with SSE2 (i.e., 9,D,E,F).$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  Copyright 2009, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl  x86-32 mpn_mod_1s_4p for Pentium 4 and P6 models with SSE2 (i.e. 9,D,E,F).$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_1_4.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  Copyright 2000-2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  Intel Pentium 4 mpn_mod_34lsub1 -- remainder modulo 2^24-1.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  Copyright 2001, 2002, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  Intel Pentium-4 mpn_modexact_1_odd -- mpn by limb exact remainder.$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/mode1o.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  Copyright 2005, 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  mpn_mul_1 for Pentium 4 and P6 models with SSE2 (i.e., 9,D,E,F).$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  Copyright 2001, 2002, 2005, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  mpn_mul_basecase for Pentium 4 and P6 models with SSE2 (i.e., 9,D,E,F).$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  Copyright 2006, 2007, 2011, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  X86-32 and X86-64 mpn_popcount using SSE2.$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  Copyright 2001-2004 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  Intel Pentium-4 mpn_rsh1add_n -- mpn (x+y)\/2$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/rsh1add_n.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  Copyright 2001, 2002, 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  mpn_sqr_basecase for Pentium 4 and P6 models with SSE2 (i.e., 9,D,E,F).$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  Copyright 2001, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  Intel Pentium-4 mpn_sub_n -- mpn subtraction.$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/sub_n.asm	/^dnl$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  Copyright 2001, 2002, 2008, 2010 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  Intel Pentium-4 mpn_submul_1 -- Multiply a limb vector with a limb and$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl  subtract the result from a second limb vector.$/;"	l
dnl	mpn/x86/pentium4/sse2/submul_1.asm	/^dnl$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  Copyright 1992, 1994, 1996, 1999-2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl  x86 mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/x86/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl  x86 mpn_sec_tabselect.$/;"	l
dnl	mpn/x86/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  Copyright 1999, 2000, 2002, 2003 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  re-use parameter space$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl  x86 generic mpn_sqr_basecase -- square an mpn number.$/;"	l
dnl	mpn/x86/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  Copyright 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  or$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl  x86 mpn_udiv_qrnnd -- 2 by 1 limb division$/;"	l
dnl	mpn/x86/udiv.asm	/^dnl$/;"	l
dnl	mpn/x86/umul.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86/umul.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86/umul.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86/umul.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86/umul.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86/umul.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  Copyright 1999, 2000, 2002 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  mpn_umul_ppmm -- 1x1->2 limb multiplication$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  or$/;"	l
dnl	mpn/x86/umul.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86/umul.asm	/^dnl$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  AMD64 mpn_addaddmul_1msb0, R = Au + Bv, u,v < 2^63.$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  Copyright 2008 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/addaddmul_1msb0.asm	/^dnl$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  AMD64 mpn_addmul_2 -- Multiply an n-limb vector with a 2-limb vector and$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  Copyright 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  add the result to a third limb vector.$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/addmul_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  AMD64 mpn_addlsh1_n -- rp[] = up[] + (vp[] << 1)$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  AMD64 mpn_rsblsh1_n -- rp[] = (vp[] << 1) - up[]$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  Copyright 2003, 2005-2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/aorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  AMD64 mpn_addlsh2_n -- rp[] = up[] + (vp[] << 2)$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  AMD64 mpn_rsblsh2_n -- rp[] = (vp[] << 2) - up[]$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  Copyright 2009-2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/aorrlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  AMD64 mpn_addlshC_n -- rp[] = up[] + (vp[] << C)$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  AMD64 mpn_rsblshC_n -- rp[] = (vp[] << C) - up[]$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  Copyright 2009-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/aorrlshC_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  AMD64 mpn_addlsh_n and mpn_rsblsh_n.  R = V2^k +- U.$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  Copyright 2006, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/aorrlsh_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  AMD64 mpn_add_err1_n, mpn_sub_err1_n$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  Contributed by David Harvey.$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/aors_err1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  AMD64 mpn_add_err2_n, mpn_sub_err2_n$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  Contributed by David Harvey.$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/aors_err2_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  AMD64 mpn_add_err3_n, mpn_sub_err3_n$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  Contributed by David Harvey.$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/aors_err3_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  AMD64 mpn_add_n, mpn_sub_n$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  AMD64 mpn_addmul_1 and mpn_submul_1.$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  AMD64 mpn_addmul_2 optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  Copyright 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/addmul_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  AMD64 mpn_addlsh1_n, mpn_rsblsh1_n optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  Used also for AMD bd1.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  AMD64 mpn_addlsh2_n -- rp[] = up[] + (vp[] << 2)$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  AMD64 mpn_rsblsh2_n -- rp[] = (vp[] << 2) - up[]$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  Optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/aorrlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  X86-64 mpn_add_n, mpn_sub_n, optimized for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  AMD64 mpn_addmul_1\/mpn_submul_1 optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  X86-64 mpn_com optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/com.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  X86-64 mpn_copyd optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  X86-64 mpn_copyi optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  AMD64 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  AMD64 mpn_lshift -- mpn left shift, optimised for Atom.$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  AMD64 mpn_lshiftc -- mpn left shift with complement, optimised for Atom.$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  AMD64 mpn_mul_1 optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  AMD64 mpn_mul_2 optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  Copyright 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/mul_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  Copyright 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl  x86-64 mpn_popcount.$/;"	l
dnl	mpn/x86_64/atom/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  X86-64 mpn_redc_1 optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/redc_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl  x86-64 mpn_rsh1add_n\/mpn_rsh1sub_n.$/;"	l
dnl	mpn/x86_64/atom/rsh1aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  AMD64 mpn_rshift -- mpn right shift, optimised for Atom.$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  AMD64 mpn_sublsh1_n optimised for Intel Atom.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  Used also for AMD bd1.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/atom/sublsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  AMD64 mpn_addlsh1_n and mpn_rsblsh1_n$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/aorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  AMD64 mpn_addmul_1 and mpn_submul_1 optimised for AMD Bulldozer.$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  X86-64 mpn_com optimised for AMD bd1.$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/com.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  X86-64 mpn_copyd optimised for AMD bd1.$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  X86-64 mpn_copyi optimised for AMD bd1.$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  AMD64 mpn_gcd_1.$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  AMD64 mpn_hamdist -- hamming distance.$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/hamdist.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  AMD64 mpn_mul_1 optimised for AMD Bulldozer.$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  AMD64 mpn_mul_2 optimised for AMD Bulldozer.$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  Copyright 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/mul_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  AMD64 mpn_mul_basecase optimised for AMD Bulldozer and Piledriver.$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  AMD64 mpn_popcount -- population count.$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  X86-64 mpn_sec_tabselect.$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  AMD64 mpn_sublsh1_n$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bd1/sublsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  Copyright 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl  x86_64 mpn_bdiv_dbm1.$/;"	l
dnl	mpn/x86_64/bdiv_dbm1c.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  1-limb divisor, returning quotient only.$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  AMD64 mpn_bdiv_q_1, mpn_pi1_bdiv_q_1 -- schoolbook Hensel division by$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  Copyright 2001, 2002, 2004-2006, 2009, 2011, 2012 Free Software$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bdiv_q_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  AMD64 mpn_add_n, mpn_sub_n optimised for bobcat.$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2010-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bobcat/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  AMD64 mpn_addmul_1 and mpn_submul_1 optimised for AMD bobcat.$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bobcat/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  AMD64 mpn_copyd optimised for AMD bobcat.$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  Copyright 2003, 2005, 2007, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bobcat/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  AMD64 mpn_copyi optimised for AMD bobcat.$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  Copyright 2003, 2005, 2007, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bobcat/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  AMD64 mpn_mul_1 optimised for AMD bobcat.$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bobcat/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  AMD64 mpn_mul_basecase optimised for AMD bobcat.$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bobcat/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  X86-64 mpn_redc_1 optimised for AMD bobcat.$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bobcat/redc_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  AMD64 mpn_sqr_basecase optimised for AMD bobcat.$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl define(`X',`$1')$/;"	l
dnl	mpn/x86_64/bobcat/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  AMD64 mpn_cnd_add_n, mpn_cnd_sub_n$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  Copyright 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/cnd_aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  AMD64 mpn_com.$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  Copyright 2004-2006, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/com.asm	/^dnl$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  AMD64 mpn_copyd -- copy limb vector, decrementing.$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  Copyright 2003, 2005, 2007, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  AMD64 mpn_copyi -- copy limb vector, incrementing.$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  Copyright 2003, 2005, 2007, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  AMD64 mpn_addlsh1_n -- rp[] = up[] + (vp[] << 1)$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  AMD64 mpn_rsblsh1_n -- rp[] = (vp[] << 1) - up[]$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  AMD64 mpn_addlsh2_n -- rp[] = up[] + (vp[] << 2)$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  AMD64 mpn_rsblsh2_n -- rp[] = (vp[] << 2) - up[]$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  AMD64 mpn_addlsh_n and mpn_rsblsh_n.  R = V2^k +- U.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/aorrlsh_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  Contributed by David Harvey.$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  Copyright 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  Core 2 mpn_add_err1_n, mpn_sub_err1_n$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/aors_err1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  Copyright 2006, 2007, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  Intel mpn_add_n\/mpn_sub_n optimised for Conroe, Nehalem.$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  Copyright 2003-2005, 2007-2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl  x86-64 mpn_addmul_1 and mpn_submul_1, optimized for "Core 2".$/;"	l
dnl	mpn/x86_64/core2/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  X86-64 mpn_copyd optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  X86-64 mpn_copyi optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  Copyright 2004, 2005, 2007-2010, 2012, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl  x86-64 mpn_divrem_1 -- mpn by limb division.$/;"	l
dnl	mpn/x86_64/core2/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  AMD64 mpn_gcd_1 optimised for Intel C2, NHM, SBR and AMD K10, BD.$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  Based on the K7 gcd_1.asm, by Kevin Ryde.  Rehacked for AMD64 by Torbjorn$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  Granlund.$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  Copyright 2007, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl  x86-64 mpn_lshift optimized for "Core 2".$/;"	l
dnl	mpn/x86_64/core2/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  Copyright 2007, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl  x86-64 mpn_lshiftc optimized for "Core 2".$/;"	l
dnl	mpn/x86_64/core2/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  Copyright 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  It also seems good for Conroe\/Wolfdale.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  X86-64 mpn_mul_basecase optimised for Intel Nehalem\/Westmere.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  AMD64 mpn_mullo_basecase optimised for Conroe\/Wolfdale\/Nehalem\/Westmere.$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  Copyright 2008, 2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/mullo_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  Copyright 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl  x86-64 mpn_popcount optimized for "Core 2".$/;"	l
dnl	mpn/x86_64/core2/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  X86-64 mpn_redc_1 optimised for Intel Conroe and Wolfdale.$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/redc_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  Copyright 2003, 2005, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  X86-64 mpn_rsh1add_n, mpn_rsh1sub_n optimised for Intel Conroe\/Penryn.$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/rsh1aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  Copyright 2007, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl  x86-64 mpn_rshift optimized for "Core 2".$/;"	l
dnl	mpn/x86_64/core2/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  X86-64 mpn_sec_tabselect.$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  Copyright 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  It also seems good for Conroe\/Wolfdale.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  X86-64 mpn_sqr_basecase optimised for Intel Nehalem\/Westmere.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  AMD64 mpn_sublsh1_n optimised for Core 2 and Core iN.$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/sublsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  AMD64 mpn_sublsh2_n optimised for Core 2 and Core iN.$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/sublsh2_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  AMD64 mpn_sublshC_n -- rp[] = up[] - (vp[] << 1), optimised for Core 2 and$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  Core iN.$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/core2/sublshC_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  AMD64 mpn_addmul_1 optimised for Intel Broadwell.$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  Copyright 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl ABI_SUPPORT(DOS64)$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl IFDOS(`	define(`n',  ``%r8'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl IFDOS(`	define(`r8', ``r11'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl IFDOS(`	define(`r9', ``rdi'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl IFDOS(`	define(`rp', ``%rcx'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl IFDOS(`	define(`up', ``%rsi'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl IFDOS(`	define(`vl', ``%r9'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  AMD64 mpn_mul_1 optimised for Intel Broadwell.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  Copyright 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl ABI_SUPPORT(DOS64)$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl IFDOS(`	define(`n',  ``%r8'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl IFDOS(`	define(`r8', ``r11'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl IFDOS(`	define(`r9', ``rdi'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl IFDOS(`	define(`rp', ``%rcx'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl IFDOS(`	define(`up', ``%rsi'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl IFDOS(`	define(`vl', ``%r9'')	') dnl$/;"	l
dnl	mpn/x86_64/coreibwl/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  AMD64 mpn_mul_basecase optimised for Intel Broadwell.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  Copyright 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreibwl/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  AMD64 mpn_sqr_basecase optimised for Intel Broadwell.$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  Copyright 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreibwl/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  AMD64 mpn_addmul_2 optimised for Intel Haswell.$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreihwl/addmul_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  AMD64 mpn_addmul_1 and mpn_submul_1 optimised for Intel Haswell.$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreihwl/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  AMD64 mpn_mul_1 using mulx optimised for Intel Haswell.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  AMD64 mpn_mul_2 optimised for Intel Haswell.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  AMD64 mpn_mul_basecase optimised for Intel Haswell.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreihwl/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  AMD64 mpn_mullo_basecase optimised for Intel Haswell.$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  Copyright 2008, 2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreihwl/mullo_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  AMD64 mpn_redc_1 optimised for Intel Haswell.$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreihwl/redc_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  AMD64 mpn_sqr_basecase optimised for Intel Haswell.$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  Copyright 2008, 2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreihwl/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  AMD64 mpn_addlsh_n -- rp[] = up[] + (vp[] << k)$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  AMD64 mpn_rsblsh_n -- rp[] = (vp[] << k) - up[]$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  Optimised for Nehalem.$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreinhm/aorrlsh_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  AMD64 mpn_addmul_1 and mpn_submul_1 optimised for Intel Nehalem.$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreinhm/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  AMD64 mpn_hamdist -- hamming distance.$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreinhm/hamdist.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  AMD64 mpn_popcount -- population count.$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreinhm/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  X86-64 mpn_redc_1 optimised for Intel Nehalem and Westmere.$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreinhm/redc_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  X86-64 mpn_sec_tabselect.$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreinhm/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  AMD64 mpn_addmul_2 optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/addmul_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  AMD64 mpn_addlsh1_n -- rp[] = up[] + (vp[] << 1)$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  AMD64 mpn_rsblsh1_n -- rp[] = (vp[] << 1) - up[]$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  AMD64 mpn_addlsh2_n -- rp[] = up[] + (vp[] << 1)$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  AMD64 mpn_rsblsh2_n -- rp[] = (vp[] << 1) - up[]$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh2_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  AMD64 mpn_addlshC_n -- rp[] = up[] + (vp[] << C)$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  AMD64 mpn_rsblshC_n -- rp[] = (vp[] << C) - up[]$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  Copyright 2009-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlshC_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  AMD64 mpn_addlsh_n -- rp[] = up[] + (vp[] << k)$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  AMD64 mpn_rsblsh_n -- rp[] = (vp[] << k) - up[]$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  Optimised for Sandy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/aorrlsh_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  AMD64 mpn_add_n, mpn_sub_n optimised for Sandy bridge, Ivy bridge, and$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2010-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  Haswell.$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  X86-64 mpn_addmul_1 and mpn_submul_1 optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  X86-64 mpn_divrem_1$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  X86-64 mpn_lshift optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  X86-64 mpn_lshiftc optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  X86-64 mpn_mul_1 optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  AMD64 mpn_mul_2 optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  AMD64 mpn_mul_basecase optimised for Intel Sandy bridge and Ivy bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  AMD64 mpn_mullo_basecase optimised for Intel Sandy bridge and Ivy bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  Copyright 2008, 2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/mullo_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  AMD64 mpn_popcount -- population count.$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  Copyright 2008, 2010-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  X86-64 mpn_redc_1 optimised for Intel Sandy Bridge and Ivy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/redc_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  Copyright 2003, 2005, 2009-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  X86-64 mpn_rsh1add_n, mpn_rsh1sub_n optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/rsh1aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  X86-64 mpn_rshift optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  X86-64 mpn_sec_tabselect.$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  AMD64 mpn_sqr_basecase optimised for Intel Sandy bridge and Ivy bridge.$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  Copyright 2008, 2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/coreisbr/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl     using a single-limb inverse.$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  -- Divide an mpn number by a normalized single-limb number,$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  Contributed to the GNU project by Niels Möller$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl  x86-64 mpn_div_qr_1n_pi1$/;"	l
dnl	mpn/x86_64/div_qr_1n_pi1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl     using a single-limb inverse.$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  -- Divide an mpn number by a normalized 2-limb number,$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  Copyright 2007, 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl  x86-64 mpn_div_qr_2n_pi1$/;"	l
dnl	mpn/x86_64/div_qr_2n_pi1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl     using a single-limb inverse and shifting the dividend on the fly.$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  -- Divide an mpn number by an unnormalized 2-limb number,$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  Copyright 2007, 2008, 2010, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl  x86-64 mpn_div_qr_2u_pi1$/;"	l
dnl	mpn/x86_64/div_qr_2u_pi1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  AMD64 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  Copyright 2001, 2002, 2004-2006, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  Copyright 2004, 2005, 2007-2012, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl  x86-64 mpn_divrem_1 -- mpn by limb division.$/;"	l
dnl	mpn/x86_64/divrem_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  Copyright 2007, 2008, 2010, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl  x86-64 mpn_divrem_2 -- Divide an mpn number by a normalized 2-limb number.$/;"	l
dnl	mpn/x86_64/divrem_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  AMD64 mpn_copyd optimised for CPUs with fast AVX.$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  Copyright 2003, 2005, 2007, 2011-2013, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl define(`vmovdqu', vlddqu)$/;"	l
dnl	mpn/x86_64/fastavx/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  AMD64 mpn_copyi optimised for CPUs with fast AVX.$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  Copyright 2003, 2005, 2007, 2011-2013, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl define(`vmovdqu', vlddqu)$/;"	l
dnl	mpn/x86_64/fastavx/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  AMD64 mpn_com optimised for CPUs with fast SSE copying and SSSE3.$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  Copyright 2012, 2013, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/com-palignr.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  AMD64 mpn_com optimised for CPUs with fast SSE.$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  Copyright 2003, 2005, 2007, 2011, 2012, 2015 Free Software Foundation,$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  Inc.$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/com.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  AMD64 mpn_copyd optimised for CPUs with fast SSE copying and SSSE3.$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  Copyright 2012, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/copyd-palignr.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  AMD64 mpn_copyd optimised for CPUs with fast SSE.$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  Copyright 2003, 2005, 2007, 2011, 2012, 2015 Free Software Foundation,$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  Inc.$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl define(`movdqu', lddqu)$/;"	l
dnl	mpn/x86_64/fastsse/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  AMD64 mpn_copyi optimised for CPUs with fast SSE copying and SSSE3.$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  Copyright 2012, 2013, 2015 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl define(`movdqa', ``movaps'')$/;"	l
dnl	mpn/x86_64/fastsse/copyi-palignr.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl	jnc	1b$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl	lea	16(rp), rp$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl	lea	16(up), up$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl	sub	$2, n$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  AMD64 mpn_copyi optimised for CPUs with fast SSE.$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  Copyright 2003, 2005, 2007, 2011, 2012, 2015 Free Software Foundation,$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  Inc.$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl define(`movdqu', lddqu)$/;"	l
dnl	mpn/x86_64/fastsse/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  AMD64 mpn_lshift optimised for CPUs with fast SSE including fast movdqu.$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  Copyright 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/lshift-movdqu2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  AMD64 mpn_lshift optimised for CPUs with fast SSE.$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  Contributed to the GNU project by David Harvey and Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  Copyright 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  AMD64 mpn_lshiftc optimised for CPUs with fast SSE including fast movdqu.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  Copyright 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc-movdqu2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  AMD64 mpn_lshiftc optimised for CPUs with fast SSE.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  Contributed to the GNU project by David Harvey and Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  Copyright 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  AMD64 mpn_rshift optimised for CPUs with fast SSE including fast movdqu.$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  Copyright 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/rshift-movdqu2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  AMD64 SSE mpn_sec_tabselect.$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  Copyright 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fastsse/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  "instrument" profiling scheme anyway.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  $1 in it.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  (at least with certain assembler\/linkers) but FreeBSD 8.2 crashes.  Not$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  16 to ensure at least the first two instructions don't cross a cache line$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Contributed to the GNU project by Kevin Ryde (original x86_32 code) and$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Copyright 2003, 2009, 2011-2014, 2016 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Emit a fat binary entrypoint function of the given name.  This is the$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Emit a fat binary initializer function of the given name.  These$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  FAT_ENTRY for each CPUVEC_FUNCS_LIST$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  FAT_INIT for each CPUVEC_FUNCS_LIST$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  For DOS64, the jumps are 6 bytes.  The same form works also for GNU\/Linux$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  For ELF\/DARWIN PIC, the jumps are 20 bytes each, and are best aligned to$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  For non-PIC, the jumps are 5 bytes each, aligning them to 8 should be$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Forcibly disable profiling.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  HAVE_NATIVE grepping in configure, preventing that code trying to eval$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Note having `PROLOGUE in FAT_INIT obscures that PROLOGUE from the$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Note the extra `' ahead of PROLOGUE obscures it from the HAVE_NATIVE$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Only one of these routines will be executed, and only once, since after$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  The code simply calls __gmpn_cpuvec_init, and then jumps back through$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  The code simply jumps through the function pointer in __gmpn_cpuvec at$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  The entrypoints and inits are small enough not to worry about, the real$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Torbjorn Granlund (port to x86_64)$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Usage: FAT_ENTRY(name, offset)$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  Usage: FAT_INIT(name, offset)$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  We define PRETEND_PIC as a helper symbol, the use it for suppressing$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  We need to preserve parameter registers over the __gmpn_cpuvec_init call$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  __gmpn_cpuvec_init will have stored the address of the selected$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  and some versions of GNU\/Linux.  This will go away when symbol hiding is$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  boundary.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  bytes where %eax would be 4.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  fine for all x86s.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  finished.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  functions are the initial values for the pointers in __gmpn_cpuvec.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  grepping in configure, stopping that code trying to eval something with$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  here ends with a jump means we won't work properly with the$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  implementation there.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  keep code size down, "fat_init" is a shared bit of code, arrived at$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  need for anything special here, just something small and simple.  To$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  normal entry for applications, eg. __gmpn_add_n.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  normal, fast call code, since that triggers problems on Darwin, OpenBSD$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  routines arrived at will have any profiling.  Also, the way the code$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  something with $1 in it.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  tested on Darwin, Slowaris, NetBSD, etc.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  that all the __gmpn_cpuvec pointers go to real routines.  So there's no$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  the __gmpn_cpuvec pointer, at the given "offset" (in bytes).$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  the given "offset" (in bytes).$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  with the offset in %al.  %al is used since the movb instruction is 2$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl  x86 fat binary entrypoints.$/;"	l
dnl	mpn/x86_64/fat/fat_entry.asm	/^dnl$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  AMD64 mpn_gcd_1 -- mpn by 1 gcd.$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  Based on the K7 gcd_1.asm, by Kevin Ryde.  Rehacked for AMD64 by Torbjorn$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  Copyright 2000-2002, 2005, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  Granlund.$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  AMD64 mpn_invert_limb -- Invert a normalized limb.$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Niels Möller.$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  Copyright 2004, 2007-2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/invert_limb.asm	/^dnl$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and Niels Möller.$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  Copyright 2004, 2007-2009, 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  Table used for mpn_invert_limb$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/invert_limb_table.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  AMD64 mpn_gcd_1.$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k10/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  AMD64 mpn_hamdist -- hamming distance.$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k10/hamdist.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  X86-64 mpn_lshift optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k10/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  X86-64 mpn_lshiftc optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k10/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  AMD64 mpn_popcount -- population count.$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k10/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  X86-64 mpn_rshift optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k10/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  X86-64 mpn_sec_tabselect.$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k10/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  AMD64 mpn_addlsh_n and mpn_rsblsh_n.  R = V2^k +- U.$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  Copyright 2006, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k8/aorrlsh_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl     using a single-limb inverse.$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  -- Divide an mpn number by a normalized single-limb number,$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  Contributed to the GNU project by Niels Möller$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl  x86-64 mpn_div_qr_1n_pi1$/;"	l
dnl	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  AMD64 mpn_mul_basecase.$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund and David Harvey.$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  Copyright 2008, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k8/mul_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl	JMPENT(	L(0m4), L(tab))			C 4$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl	JMPENT(	L(0m4), L(tab))			C 8$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl	JMPENT(	L(1m4), L(tab))			C 5$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl	JMPENT(	L(1m4), L(tab))			C 9$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl	JMPENT(	L(2m4), L(tab))			C 10$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl	JMPENT(	L(2m4), L(tab))			C 6$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl	JMPENT(	L(3m4), L(tab))			C 11$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl	JMPENT(	L(3m4), L(tab))			C 7$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  AMD64 mpn_mullo_basecase.$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  Copyright 2008, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k8/mullo_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  AMD64 mpn_mulmid_basecase$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  Contributed by David Harvey.$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  Copyright 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k8/mulmid_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  Copyright 2004, 2008, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  X86-64 mpn_redc_1 optimised for AMD K8-K10.$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k8/redc_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  AMD64 mpn_sqr_basecase.$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  Copyright 2008, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/k8/sqr_basecase.asm	/^dnl$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  AMD64 logops.$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  Copyright 2004-2006, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/logops_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  AMD64 mpn_lshift -- mpn left shift.$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  Copyright 2003, 2005, 2007, 2009, 2011, 2012 Free Software Foundation,$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  Inc.$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  AMD64 mpn_lshiftc -- mpn left shift with complement.$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  Copyright 2003, 2005, 2006, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  AMD64 mpn_lshsub_n.  R = 2^k(U - V).$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  Copyright 2006, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/lshsub_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  Copyright 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/missing.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  AMD64 mpn_mod_1_1p$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund and Niels Möller.$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  Copyright 2009-2012, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mod_1_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  AMD64 mpn_mod_1s_2p$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  Copyright 2009-2012, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mod_1_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  AMD64 mpn_mod_1s_4p$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  Copyright 2009-2012, 2014 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mod_1_4.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  AMD64 mpn_mod_34lsub1 -- remainder modulo 2^48-1.$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  Copyright 2000-2002, 2004, 2005, 2007, 2009-2012 Free Software Foundation,$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  Inc.$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  AMD64 mpn_modexact_1_odd -- Hensel norm remainder.$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  Copyright 2000-2006, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mode1o.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  AMD64 mpn_mul_1.$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  Copyright 2003-2005, 2007, 2008, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  AMD64 mpn_mul_2 -- Multiply an n-limb vector with a 2-limb vector and$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  Copyright 2008, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl  store the result in a third limb vector.$/;"	l
dnl	mpn/x86_64/mul_2.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  AMD64 mpn_addmul_1 for CPUs with mulx and adx.$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mulx/adx/addmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  AMD64 mpn_addmul_1 and mpn_submul_1 for CPUs with mulx.$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mulx/aorsmul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  AMD64 mpn_mul_1 for CPUs with mulx.$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/mulx/mul_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  X86-64 mpn_copyd optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/nano/copyd.asm	/^dnl$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  X86-64 mpn_copyi optimised for Intel Sandy Bridge.$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/nano/copyi.asm	/^dnl$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  AMD64 mpn_divexact_1 -- mpn by limb exact division.$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  Copyright 2001, 2002, 2004-2006, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/nano/dive_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  AMD64 mpn_gcd_1.$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  Copyright 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/nano/gcd_1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  Copyright 2007, 2011 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl  x86-64 mpn_popcount.$/;"	l
dnl	mpn/x86_64/nano/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  Copyright 2007, 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl  x86-64 mpn_add_n\/mpn_sub_n optimized for Pentium 4.$/;"	l
dnl	mpn/x86_64/pentium4/aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  AMD64 mpn_addlsh1_n, mpn_sublsh1_n -- rp[] = up[] +- (vp[] << 1),$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  optimised for Pentium 4.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh1_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  AMD64 mpn_addlsh2_n, mpn_sublsh2_n -- rp[] = up[] +- (vp[] << 2),$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  optimised for Pentium 4.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/aorslsh2_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  AMD64 mpn_addlshC_n, mpn_sublshC_n -- rp[] = up[] +- (vp[] << C), where$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  C is 1, 2, 3.  Optimized for Pentium 4.$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  Copyright 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/aorslshC_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  Copyright 2003, 2005, 2007, 2008, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl  x86-64 mpn_lshift optimized for Pentium 4.$/;"	l
dnl	mpn/x86_64/pentium4/lshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  Copyright 2003, 2005, 2007, 2008, 2010, 2012 Free Software Foundation,$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  Inc.$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl  x86-64 mpn_lshiftc optimized for Pentium 4.$/;"	l
dnl	mpn/x86_64/pentium4/lshiftc.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  AMD64 mpn_mod_34lsub1 -- remainder modulo 2^48-1.$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  Copyright 2000-2002, 2004, 2005, 2007, 2010-2012 Free Software Foundation,$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  Inc.$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/mod_34lsub1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  Copyright 2007 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl  x86-64 mpn_popcount optimized for Pentium 4.$/;"	l
dnl	mpn/x86_64/pentium4/popcount.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  Contributed to the GNU project by Torbjorn Granlund.$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  Copyright 2007, 2008, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl  x86-64 mpn_rsh1add_n\/mpn_rsh1sub_n optimized for Pentium 4.$/;"	l
dnl	mpn/x86_64/pentium4/rsh1aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  Copyright 2003, 2005, 2007, 2008, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl  x86-64 mpn_rshift optimized for Pentium 4.$/;"	l
dnl	mpn/x86_64/pentium4/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  Copyright 2012, 2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  X86-64 mpn_sec_tabselect.$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/pentium4/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  AMD64 mpn_popcount, mpn_hamdist -- population count and hamming distance.$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  Copyright 2004, 2005, 2007, 2010-2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/popham.asm	/^dnl$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  AMD64 mpn_rsh1add_n -- rp[] = (up[] + vp[]) >> 1$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  AMD64 mpn_rsh1sub_n -- rp[] = (up[] - vp[]) >> 1$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  Copyright 2003, 2005, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/rsh1aors_n.asm	/^dnl$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  AMD64 mpn_rshift -- mpn right shift.$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  Copyright 2003, 2005, 2009, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/rshift.asm	/^dnl$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  AMD64 mpn_sec_tabselect.$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  Copyright 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/sec_tabselect.asm	/^dnl$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  AMD64 mpn_sqr_diag_addlsh1$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  Contributed to the GNU project by Torbjörn Granlund.$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  Copyright 2011-2013 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/sqr_diag_addlsh1.asm	/^dnl$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl      later version.$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl      option) any later version.$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  AMD64 mpn_sublsh1_n -- rp[] = up[] - (vp[] << 1)$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  Copyright 2003, 2005-2007, 2011, 2012 Free Software Foundation, Inc.$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  for more details.$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  it under the terms of either:$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  or$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	mpn/x86_64/sublsh1_n.asm	/^dnl$/;"	l
dnl	tests/amd64call.asm	/^dnl  AMD64 calling conventions checking.$/;"	l
dnl	tests/amd64call.asm	/^dnl  Copyright 2000, 2003, 2004, 2006, 2007, 2010 Free Software Foundation, Inc.$/;"	l
dnl	tests/amd64call.asm	/^dnl  Instrumented profiling won't come out quite right below, since we don't do$/;"	l
dnl	tests/amd64call.asm	/^dnl  License, or (at your option) any later version.$/;"	l
dnl	tests/amd64call.asm	/^dnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General$/;"	l
dnl	tests/amd64call.asm	/^dnl  Public License for more details.$/;"	l
dnl	tests/amd64call.asm	/^dnl  The GNU MP Library test suite is distributed in the hope that it will be$/;"	l
dnl	tests/amd64call.asm	/^dnl  The GNU MP Library test suite is free software; you can redistribute it$/;"	l
dnl	tests/amd64call.asm	/^dnl  The current version of the code attempts to keep the call\/return$/;"	l
dnl	tests/amd64call.asm	/^dnl  This file is part of the GNU MP Library test suite.$/;"	l
dnl	tests/amd64call.asm	/^dnl  You should have received a copy of the GNU General Public License along$/;"	l
dnl	tests/amd64call.asm	/^dnl  an actual "ret".  There's only a few instructions here, so there's no$/;"	l
dnl	tests/amd64call.asm	/^dnl  and\/or modify it under the terms of the GNU General Public License as$/;"	l
dnl	tests/amd64call.asm	/^dnl  great need to get them separately accounted, just let them get attributed$/;"	l
dnl	tests/amd64call.asm	/^dnl  https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tests/amd64call.asm	/^dnl  prediction stack valid, but matching calls and returns.$/;"	l
dnl	tests/amd64call.asm	/^dnl  published by the Free Software Foundation; either version 3 of the$/;"	l
dnl	tests/amd64call.asm	/^dnl  to the caller.  FIXME this comment might no longer be true.$/;"	l
dnl	tests/amd64call.asm	/^dnl  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of$/;"	l
dnl	tests/amd64call.asm	/^dnl  with the GNU MP Library test suite.  If not, see$/;"	l
dnl	tests/arm32call.asm	/^dnl  ARM32 calling conventions checking.$/;"	l
dnl	tests/arm32call.asm	/^dnl  Copyright 2000, 2003, 2004, 2006, 2007, 2010, 2013 Free Software$/;"	l
dnl	tests/arm32call.asm	/^dnl  Foundation, Inc.$/;"	l
dnl	tests/arm32call.asm	/^dnl  License, or (at your option) any later version.$/;"	l
dnl	tests/arm32call.asm	/^dnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General$/;"	l
dnl	tests/arm32call.asm	/^dnl  Public License for more details.$/;"	l
dnl	tests/arm32call.asm	/^dnl  The GNU MP Library test suite is distributed in the hope that it will be$/;"	l
dnl	tests/arm32call.asm	/^dnl  The GNU MP Library test suite is free software; you can redistribute it$/;"	l
dnl	tests/arm32call.asm	/^dnl  The current version of the code attempts to keep the call\/return$/;"	l
dnl	tests/arm32call.asm	/^dnl  This file is part of the GNU MP Library test suite.$/;"	l
dnl	tests/arm32call.asm	/^dnl  You should have received a copy of the GNU General Public License along$/;"	l
dnl	tests/arm32call.asm	/^dnl  and\/or modify it under the terms of the GNU General Public License as$/;"	l
dnl	tests/arm32call.asm	/^dnl  https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tests/arm32call.asm	/^dnl  prediction stack valid, but matching calls and returns.$/;"	l
dnl	tests/arm32call.asm	/^dnl  published by the Free Software Foundation; either version 3 of the$/;"	l
dnl	tests/arm32call.asm	/^dnl  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of$/;"	l
dnl	tests/arm32call.asm	/^dnl  with the GNU MP Library test suite.  If not, see$/;"	l
dnl	tests/x86call.asm	/^dnl  Copyright 2000, 2003, 2010, 2013 Free Software Foundation, Inc.$/;"	l
dnl	tests/x86call.asm	/^dnl  Instrumented profiling doesn't come out quite right below, since we don't$/;"	l
dnl	tests/x86call.asm	/^dnl  License, or (at your option) any later version.$/;"	l
dnl	tests/x86call.asm	/^dnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General$/;"	l
dnl	tests/x86call.asm	/^dnl  Public License for more details.$/;"	l
dnl	tests/x86call.asm	/^dnl  The GNU MP Library test suite is distributed in the hope that it will be$/;"	l
dnl	tests/x86call.asm	/^dnl  The GNU MP Library test suite is free software; you can redistribute it$/;"	l
dnl	tests/x86call.asm	/^dnl  The current version of the code attempts to keep the call\/return$/;"	l
dnl	tests/x86call.asm	/^dnl  This file is part of the GNU MP Library test suite.$/;"	l
dnl	tests/x86call.asm	/^dnl  You should have received a copy of the GNU General Public License along$/;"	l
dnl	tests/x86call.asm	/^dnl  and\/or modify it under the terms of the GNU General Public License as$/;"	l
dnl	tests/x86call.asm	/^dnl  do an actual "ret".  There's only a few instructions here, so there's no$/;"	d
dnl	tests/x86call.asm	/^dnl  great need to get them separately accounted, just let them get attributed$/;"	l
dnl	tests/x86call.asm	/^dnl  https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tests/x86call.asm	/^dnl  prediction stack valid, but matching calls and returns.$/;"	l
dnl	tests/x86call.asm	/^dnl  published by the Free Software Foundation; either version 3 of the$/;"	l
dnl	tests/x86call.asm	/^dnl  to the caller.  FIXME this comment might no longer be true.$/;"	l
dnl	tests/x86call.asm	/^dnl  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of$/;"	l
dnl	tests/x86call.asm	/^dnl  with the GNU MP Library test suite.  If not, see$/;"	l
dnl	tests/x86call.asm	/^dnl  x86 calling conventions checking.$/;"	l
dnl	tune/alpha.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/alpha.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/alpha.asm	/^dnl      later version.$/;"	l
dnl	tune/alpha.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/alpha.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/alpha.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/alpha.asm	/^dnl  Alpha time stamp counter access routine.$/;"	l
dnl	tune/alpha.asm	/^dnl  Copyright 2000, 2005 Free Software Foundation, Inc.$/;"	l
dnl	tune/alpha.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/alpha.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/alpha.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/alpha.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/alpha.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/alpha.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/alpha.asm	/^dnl  for more details.$/;"	l
dnl	tune/alpha.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/alpha.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/alpha.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/alpha.asm	/^dnl  or$/;"	l
dnl	tune/alpha.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/alpha.asm	/^dnl$/;"	l
dnl	tune/hppa.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/hppa.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/hppa.asm	/^dnl      later version.$/;"	l
dnl	tune/hppa.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/hppa.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/hppa.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/hppa.asm	/^dnl  Copyright 2000, 2002, 2005 Free Software Foundation, Inc.$/;"	l
dnl	tune/hppa.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/hppa.asm	/^dnl  HPPA 32-bit time stamp counter access routine.$/;"	l
dnl	tune/hppa.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/hppa.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/hppa.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/hppa.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/hppa.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/hppa.asm	/^dnl  for more details.$/;"	l
dnl	tune/hppa.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/hppa.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/hppa.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/hppa.asm	/^dnl  or$/;"	l
dnl	tune/hppa.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/hppa.asm	/^dnl Get the HPPA interval timer.$/;"	l
dnl	tune/hppa.asm	/^dnl void speed_cyclecounter (unsigned p[2]);$/;"	l
dnl	tune/hppa.asm	/^dnl$/;"	l
dnl	tune/hppa2.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/hppa2.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/hppa2.asm	/^dnl      later version.$/;"	l
dnl	tune/hppa2.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/hppa2.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/hppa2.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/hppa2.asm	/^dnl  Copyright 2000, 2002, 2005 Free Software Foundation, Inc.$/;"	l
dnl	tune/hppa2.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/hppa2.asm	/^dnl  HPPA 64-bit time stamp counter access routine.$/;"	l
dnl	tune/hppa2.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/hppa2.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/hppa2.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/hppa2.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/hppa2.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/hppa2.asm	/^dnl  for more details.$/;"	l
dnl	tune/hppa2.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/hppa2.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/hppa2.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/hppa2.asm	/^dnl  or$/;"	l
dnl	tune/hppa2.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/hppa2.asm	/^dnl Get the HPPA interval timer.$/;"	l
dnl	tune/hppa2.asm	/^dnl void speed_cyclecounter (unsigned p[2]);$/;"	l
dnl	tune/hppa2.asm	/^dnl$/;"	l
dnl	tune/hppa2w.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/hppa2w.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/hppa2w.asm	/^dnl      later version.$/;"	l
dnl	tune/hppa2w.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/hppa2w.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/hppa2w.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/hppa2w.asm	/^dnl  Copyright 2000, 2002, 2005 Free Software Foundation, Inc.$/;"	l
dnl	tune/hppa2w.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/hppa2w.asm	/^dnl  HPPA 64-bit time stamp counter access routine.$/;"	l
dnl	tune/hppa2w.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/hppa2w.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/hppa2w.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/hppa2w.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/hppa2w.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/hppa2w.asm	/^dnl  for more details.$/;"	l
dnl	tune/hppa2w.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/hppa2w.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/hppa2w.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/hppa2w.asm	/^dnl  or$/;"	l
dnl	tune/hppa2w.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/hppa2w.asm	/^dnl Get the HPPA interval timer.$/;"	l
dnl	tune/hppa2w.asm	/^dnl void speed_cyclecounter (unsigned p[2]);$/;"	l
dnl	tune/hppa2w.asm	/^dnl$/;"	l
dnl	tune/ia64.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/ia64.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/ia64.asm	/^dnl      later version.$/;"	l
dnl	tune/ia64.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/ia64.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/ia64.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/ia64.asm	/^dnl  Copyright 2000, 2005 Free Software Foundation, Inc.$/;"	l
dnl	tune/ia64.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/ia64.asm	/^dnl  IA-64 time stamp counter access routine.$/;"	l
dnl	tune/ia64.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/ia64.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/ia64.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/ia64.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/ia64.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/ia64.asm	/^dnl  for more details.$/;"	l
dnl	tune/ia64.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/ia64.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/ia64.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/ia64.asm	/^dnl  or$/;"	l
dnl	tune/ia64.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/ia64.asm	/^dnl$/;"	l
dnl	tune/pentium.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/pentium.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/pentium.asm	/^dnl      later version.$/;"	l
dnl	tune/pentium.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/pentium.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/pentium.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/pentium.asm	/^dnl  Copyright 1999, 2000, 2005 Free Software Foundation, Inc.$/;"	l
dnl	tune/pentium.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/pentium.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/pentium.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/pentium.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/pentium.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/pentium.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/pentium.asm	/^dnl  for more details.$/;"	l
dnl	tune/pentium.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/pentium.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/pentium.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/pentium.asm	/^dnl  or$/;"	l
dnl	tune/pentium.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/pentium.asm	/^dnl  x86 pentium time stamp counter access routine.$/;"	l
dnl	tune/pentium.asm	/^dnl$/;"	l
dnl	tune/powerpc.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/powerpc.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/powerpc.asm	/^dnl      later version.$/;"	l
dnl	tune/powerpc.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/powerpc.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/powerpc.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/powerpc.asm	/^dnl  Copyright 2002 Free Software Foundation, Inc.$/;"	l
dnl	tune/powerpc.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/powerpc.asm	/^dnl  PowerPC mftb_function -- read time base registers.$/;"	l
dnl	tune/powerpc.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/powerpc.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/powerpc.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/powerpc.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/powerpc.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/powerpc.asm	/^dnl  for more details.$/;"	l
dnl	tune/powerpc.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/powerpc.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/powerpc.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/powerpc.asm	/^dnl  or$/;"	l
dnl	tune/powerpc.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/powerpc.asm	/^dnl$/;"	l
dnl	tune/powerpc64.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/powerpc64.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/powerpc64.asm	/^dnl      later version.$/;"	l
dnl	tune/powerpc64.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/powerpc64.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/powerpc64.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/powerpc64.asm	/^dnl  Copyright 2002-2004 Free Software Foundation, Inc.$/;"	l
dnl	tune/powerpc64.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/powerpc64.asm	/^dnl  PowerPC mftb_function -- read time base registers, 64-bit integer.$/;"	l
dnl	tune/powerpc64.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/powerpc64.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/powerpc64.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/powerpc64.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/powerpc64.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/powerpc64.asm	/^dnl  for more details.$/;"	l
dnl	tune/powerpc64.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/powerpc64.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/powerpc64.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/powerpc64.asm	/^dnl  or$/;"	l
dnl	tune/powerpc64.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/powerpc64.asm	/^dnl$/;"	l
dnl	tune/sparcv9.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/sparcv9.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/sparcv9.asm	/^dnl      later version.$/;"	l
dnl	tune/sparcv9.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/sparcv9.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/sparcv9.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/sparcv9.asm	/^dnl  Copyright 2000, 2005 Free Software Foundation, Inc.$/;"	l
dnl	tune/sparcv9.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/sparcv9.asm	/^dnl  Sparc v9 32-bit time stamp counter access routine.$/;"	l
dnl	tune/sparcv9.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/sparcv9.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/sparcv9.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/sparcv9.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/sparcv9.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/sparcv9.asm	/^dnl  for more details.$/;"	l
dnl	tune/sparcv9.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/sparcv9.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/sparcv9.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/sparcv9.asm	/^dnl  or$/;"	l
dnl	tune/sparcv9.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/sparcv9.asm	/^dnl$/;"	l
dnl	tune/x86_64.asm	/^dnl      Foundation; either version 2 of the License, or (at your option) any$/;"	l
dnl	tune/x86_64.asm	/^dnl      Software Foundation; either version 3 of the License, or (at your$/;"	l
dnl	tune/x86_64.asm	/^dnl      later version.$/;"	l
dnl	tune/x86_64.asm	/^dnl      option) any later version.$/;"	l
dnl	tune/x86_64.asm	/^dnl    * the GNU General Public License as published by the Free Software$/;"	l
dnl	tune/x86_64.asm	/^dnl    * the GNU Lesser General Public License as published by the Free$/;"	l
dnl	tune/x86_64.asm	/^dnl  Copyright 1999, 2000, 2003-2005 Free Software Foundation, Inc.$/;"	l
dnl	tune/x86_64.asm	/^dnl  GNU Lesser General Public License along with the GNU MP Library.  If not,$/;"	l
dnl	tune/x86_64.asm	/^dnl  The GNU MP Library is distributed in the hope that it will be useful, but$/;"	l
dnl	tune/x86_64.asm	/^dnl  The GNU MP Library is free software; you can redistribute it and\/or modify$/;"	l
dnl	tune/x86_64.asm	/^dnl  This file is part of the GNU MP Library.$/;"	l
dnl	tune/x86_64.asm	/^dnl  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY$/;"	l
dnl	tune/x86_64.asm	/^dnl  You should have received copies of the GNU General Public License and the$/;"	l
dnl	tune/x86_64.asm	/^dnl  for more details.$/;"	l
dnl	tune/x86_64.asm	/^dnl  it under the terms of either:$/;"	l
dnl	tune/x86_64.asm	/^dnl  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License$/;"	l
dnl	tune/x86_64.asm	/^dnl  or both in parallel, as here.$/;"	l
dnl	tune/x86_64.asm	/^dnl  or$/;"	l
dnl	tune/x86_64.asm	/^dnl  see https:\/\/www.gnu.org\/licenses\/.$/;"	l
dnl	tune/x86_64.asm	/^dnl  x86 pentium time stamp counter access routine.$/;"	l
dnl	tune/x86_64.asm	/^dnl$/;"	l
do_decimal_point	tests/cxx/t-locale.cc	/^  char do_decimal_point() const { return point_string[0]; }$/;"	f	class:my_numpunct
doprnt_final_t	gmp-impl.h	/^typedef int (*doprnt_final_t)  (void *);$/;"	t
doprnt_format_t	gmp-impl.h	/^typedef int (*doprnt_format_t) (void *, const char *, va_list);$/;"	t
doprnt_funs_t	gmp-impl.h	/^struct doprnt_funs_t {$/;"	s
doprnt_memory_t	gmp-impl.h	/^typedef int (*doprnt_memory_t) (void *, const char *, size_t);$/;"	t
doprnt_params_t	gmp-impl.h	/^struct doprnt_params_t {$/;"	s
doprnt_reps_t	gmp-impl.h	/^typedef int (*doprnt_reps_t)   (void *, int, int);$/;"	t
double_cmp_ptr	tune/common.c	/^double_cmp_ptr (const double *p, const double *q)$/;"	f
double_extract	gmp-impl.h	/^union double_extract$/;"	u
dp	mpn/generic/sec_div.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dp	mpn/generic/sec_pi1_div.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dp	mpn/sec_div_qr.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dp	mpn/sec_div_r.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dp	mpn/sec_pi1_div_qr.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
dp	mpn/sec_pi1_div_r.c	/^       mp_srcptr dp, mp_size_t dn,$/;"	v
ds	tests/mpz/reuse.c	/^} static ds[] =$/;"	v	file:
ds_func	mini-gmp/tests/t-reuse.c	/^typedef void (*ds_func) (mpz_t, const mpz_t);$/;"	t	file:
ds_func	tests/mpq/reuse.c	/^typedef void (*ds_func) (mpq_ptr, mpq_srcptr);$/;"	t	file:
ds_func	tests/mpz/reuse.c	/^typedef void (*ds_func) (mpz_ptr, mpz_srcptr);$/;"	t	file:
ds_func_names	mini-gmp/tests/t-reuse.c	/^const char *ds_func_names[] =$/;"	v
ds_func_names	tests/mpq/reuse.c	/^const char *ds_func_names[] =$/;"	v
ds_funcs	mini-gmp/tests/t-reuse.c	/^ds_func ds_funcs[] =$/;"	v
ds_funcs	tests/mpq/reuse.c	/^ds_func ds_funcs[] =$/;"	v
dsi	tests/mpz/reuse.c	/^} static dsi[] =$/;"	v	file:
dsi_div	tests/mpz/reuse.c	/^} static dsi_div[] =$/;"	v	file:
dsi_div_func	mini-gmp/tests/t-reuse.c	/^typedef unsigned long int (*dsi_div_func) (mpz_t, const mpz_t, unsigned long int);$/;"	t	file:
dsi_div_func	tests/mpz/reuse.c	/^typedef unsigned long int (*dsi_div_func) (mpz_ptr, mpz_srcptr, unsigned long int);$/;"	t	file:
dsi_div_func_names	mini-gmp/tests/t-reuse.c	/^const char *dsi_div_func_names[] =$/;"	v
dsi_div_funcs	mini-gmp/tests/t-reuse.c	/^dsi_div_func dsi_div_funcs[] =$/;"	v
dsi_func	mini-gmp/tests/t-reuse.c	/^typedef void (*dsi_func) (mpz_t, const mpz_t, unsigned long int);$/;"	t	file:
dsi_func	tests/mpf/reuse.c	/^typedef void (*dsi_func) (mpf_ptr, mpf_srcptr, unsigned long int);$/;"	t	file:
dsi_func	tests/mpq/reuse.c	/^typedef void (*dsi_func) (mpq_ptr, mpq_srcptr, unsigned long int);$/;"	t	file:
dsi_func	tests/mpz/reuse.c	/^typedef void (*dsi_func) (mpz_ptr, mpz_srcptr, unsigned long int);$/;"	t	file:
dsi_func_names	mini-gmp/tests/t-reuse.c	/^const char *dsi_func_names[] =$/;"	v
dsi_func_names	tests/mpf/reuse.c	/^const char *dsi_func_names[] =$/;"	v
dsi_func_names	tests/mpq/reuse.c	/^const char *dsi_func_names[] =$/;"	v
dsi_funcs	mini-gmp/tests/t-reuse.c	/^dsi_func dsi_funcs[] =$/;"	v
dsi_funcs	tests/mpf/reuse.c	/^dsi_func dsi_funcs[] =$/;"	v
dsi_funcs	tests/mpq/reuse.c	/^dsi_func dsi_funcs[] =$/;"	v
dss	tests/mpz/reuse.c	/^} static dss[] =$/;"	v	file:
dss_func	mini-gmp/tests/t-reuse.c	/^typedef void (*dss_func) (mpz_t, const mpz_t, const mpz_t);$/;"	t	file:
dss_func	tests/mpf/reuse.c	/^typedef void (*dss_func) (mpf_ptr, mpf_srcptr, mpf_srcptr);$/;"	t	file:
dss_func	tests/mpq/reuse.c	/^typedef void (*dss_func) (mpq_ptr, mpq_srcptr, mpq_srcptr);$/;"	t	file:
dss_func	tests/mpz/reuse.c	/^typedef void (*dss_func) (mpz_ptr, mpz_srcptr, mpz_srcptr);$/;"	t	file:
dss_func_division	mini-gmp/tests/t-reuse.c	/^char dss_func_division[] = {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0};$/;"	v
dss_func_names	mini-gmp/tests/t-reuse.c	/^const char *dss_func_names[] =$/;"	v
dss_func_names	tests/mpf/reuse.c	/^const char *dss_func_names[] =$/;"	v
dss_func_names	tests/mpq/reuse.c	/^const char *dss_func_names[] =$/;"	v
dss_funcs	mini-gmp/tests/t-reuse.c	/^dss_func dss_funcs[] =$/;"	v
dss_funcs	tests/mpf/reuse.c	/^dss_func dss_funcs[] =$/;"	v
dss_funcs	tests/mpq/reuse.c	/^dss_func dss_funcs[] =$/;"	v
dst	tests/devel/try.c	/^  char  dst[NUM_DESTS];$/;"	m	struct:try_t	file:
dst	tune/speed.h	/^  } src[5], dst[4];$/;"	m	struct:speed_params	typeref:struct:speed_params::__anon39
dst0_from_src1	tests/devel/try.c	/^  char  dst0_from_src1;$/;"	m	struct:try_t	file:
dst_bytes	tests/devel/try.c	/^  char  dst_bytes[NUM_DESTS];$/;"	m	struct:try_t	file:
dst_num	tune/speed.h	/^  unsigned   src_num, dst_num;$/;"	m	struct:speed_params
dst_size	tests/devel/try.c	/^  char  dst_size[NUM_DESTS];$/;"	m	struct:try_t	file:
dummy	tests/mpn/t-fat.c	/^  int  dummy;$/;"	m	struct:cpuvec_t	file:
dump	mini-gmp/tests/testutils.c	/^dump (const char *label, const mpz_t x)$/;"	f
dump	tests/mpq/t-get_d.c	/^dump (mpq_t x)$/;"	f
dump	tests/mpz/reuse.c	/^dump (const char *name, mpz_t in1, mpz_t in2, mpz_t in3)$/;"	f
dump3	mini-gmp/tests/t-reuse.c	/^dump3 (const char *name, mpz_t in1, mpz_t in2, mpz_t in3)$/;"	f
dump_abort	tests/mpf/reuse.c	/^dump_abort (const char *name, mpf_t res1, mpf_t res2)$/;"	f
dump_abort	tests/mpf/t-eq.c	/^dump_abort (mpf_t a, mpf_t b, int cmp_prec, int lshift1, int lshift2, int hibits, int want, long test)$/;"	f
dump_abort	tests/mpq/reuse.c	/^dump_abort (const char *name, mpq_t res1, mpq_t res2)$/;"	f
dump_abort	tests/mpz/logic.c	/^dump_abort ()$/;"	f
dump_abort	tests/mpz/t-addsub.c	/^dump_abort (int i, const char *s, mpz_t op1, mpz_t op2)$/;"	f
dump_abort	tests/mpz/t-cdiv_ui.c	/^dump_abort (const char *str, mpz_t dividend, unsigned long divisor)$/;"	f
dump_abort	tests/mpz/t-fdiv.c	/^dump_abort (mpz_t dividend, mpz_t divisor)$/;"	f
dump_abort	tests/mpz/t-fdiv_ui.c	/^dump_abort (const char *str, mpz_t dividend, unsigned long divisor)$/;"	f
dump_abort	tests/mpz/t-mul.c	/^dump_abort (int i, const char *s,$/;"	f
dump_abort	tests/mpz/t-sqrtrem.c	/^dump_abort (mpz_t x2, mpz_t x, mpz_t rem)$/;"	f
dump_abort	tests/mpz/t-tdiv.c	/^dump_abort (mpz_t dividend, mpz_t divisor)$/;"	f
dump_abort	tests/mpz/t-tdiv_ui.c	/^dump_abort (const char *str, mpz_t dividend, unsigned long divisor)$/;"	f
dump_bytes	mini-gmp/tests/t-import.c	/^dump_bytes (const char *label, const unsigned char *s, size_t n)$/;"	f	file:
dumpy	tests/mpn/t-bdiv.c	/^dumpy (mp_srcptr p, mp_size_t n)$/;"	f	file:
dumpy	tests/mpn/t-div.c	/^dumpy (mp_srcptr p, mp_size_t n)$/;"	f	file:
e	demos/expr/expr-impl.h	/^  const char                      *e;$/;"	m	struct:mpexpr_parse_t
e	demos/factorize.c	/^  unsigned long *e;$/;"	m	struct:factors	file:
e00	tests/mpn/t-matrix22.c	/^  mp_ptr e00, e01, e10, e11;$/;"	m	struct:matrix	file:
e01	tests/mpn/t-matrix22.c	/^  mp_ptr e00, e01, e10, e11;$/;"	m	struct:matrix	file:
e0h	mpn/generic/toom42_mulmid.c	72;"	d	file:
e0h	mpn/toom42_mulmid.c	72;"	d	file:
e0l	mpn/generic/toom42_mulmid.c	71;"	d	file:
e0l	mpn/toom42_mulmid.c	71;"	d	file:
e10	tests/mpn/t-matrix22.c	/^  mp_ptr e00, e01, e10, e11;$/;"	m	struct:matrix	file:
e11	tests/mpn/t-matrix22.c	/^  mp_ptr e00, e01, e10, e11;$/;"	m	struct:matrix	file:
e1h	mpn/generic/toom42_mulmid.c	74;"	d	file:
e1h	mpn/toom42_mulmid.c	74;"	d	file:
e1l	mpn/generic/toom42_mulmid.c	73;"	d	file:
e1l	mpn/toom42_mulmid.c	73;"	d	file:
e2h	mpn/generic/toom42_mulmid.c	76;"	d	file:
e2h	mpn/toom42_mulmid.c	76;"	d	file:
e2l	mpn/generic/toom42_mulmid.c	75;"	d	file:
e2l	mpn/toom42_mulmid.c	75;"	d	file:
e3h	mpn/generic/toom42_mulmid.c	78;"	d	file:
e3h	mpn/toom42_mulmid.c	78;"	d	file:
e3l	mpn/generic/toom42_mulmid.c	77;"	d	file:
e3l	mpn/toom42_mulmid.c	77;"	d	file:
e4h	mpn/generic/toom42_mulmid.c	80;"	d	file:
e4h	mpn/toom42_mulmid.c	80;"	d	file:
e4l	mpn/generic/toom42_mulmid.c	79;"	d	file:
e4l	mpn/toom42_mulmid.c	79;"	d	file:
e5h	mpn/generic/toom42_mulmid.c	82;"	d	file:
e5h	mpn/toom42_mulmid.c	82;"	d	file:
e5l	mpn/generic/toom42_mulmid.c	81;"	d	file:
e5l	mpn/toom42_mulmid.c	81;"	d	file:
e_mpf_number	demos/expr/exprfa.c	/^e_mpf_number (mpf_ptr res, const char *e, size_t elen, int base)$/;"	f	file:
e_mpf_set_or_swap	demos/expr/exprfa.c	/^e_mpf_set_or_swap (mpf_ptr w, mpf_ptr x)$/;"	f	file:
e_mpf_sgn	demos/expr/exprf.c	/^e_mpf_sgn (mpf_srcptr x)$/;"	f	file:
e_mpf_ulong_p	demos/expr/exprfa.c	/^e_mpf_ulong_p (mpf_srcptr f)$/;"	f	file:
e_mpq_den	demos/expr/exprq.c	/^e_mpq_den (mpq_ptr w, mpq_srcptr x)$/;"	f	file:
e_mpq_equal	demos/expr/exprq.c	/^e_mpq_equal (mpq_srcptr x, mpq_srcptr y)$/;"	f	file:
e_mpq_get_ui_fits	demos/expr/exprqa.c	/^e_mpq_get_ui_fits (mpq_srcptr q)$/;"	f	file:
e_mpq_init	demos/expr/exprqa.c	/^e_mpq_init (mpq_ptr q, unsigned long prec)$/;"	f	file:
e_mpq_notequal	demos/expr/exprq.c	/^e_mpq_notequal (mpq_srcptr x, mpq_srcptr y)$/;"	f	file:
e_mpq_num	demos/expr/exprq.c	/^e_mpq_num (mpq_ptr w, mpq_srcptr x)$/;"	f	file:
e_mpq_number	demos/expr/exprqa.c	/^e_mpq_number (mpq_ptr res, const char *e, size_t elen, int base)$/;"	f	file:
e_mpq_pow_ui	demos/expr/exprq.c	/^e_mpq_pow_ui (mpq_ptr r, mpq_srcptr b, unsigned long e)$/;"	f	file:
e_mpq_set_si1	demos/expr/exprqa.c	/^e_mpq_set_si1 (mpq_ptr q, long num)$/;"	f	file:
e_mpq_sgn	demos/expr/exprq.c	/^e_mpq_sgn (mpq_srcptr x)$/;"	f	file:
e_mpq_ulong_p	demos/expr/exprqa.c	/^e_mpq_ulong_p (mpq_srcptr q)$/;"	f	file:
e_mpz_clrbit	demos/expr/exprz.c	/^e_mpz_clrbit (mpz_ptr w, mpz_srcptr x, unsigned long n)$/;"	f	file:
e_mpz_even_p	demos/expr/exprz.c	/^e_mpz_even_p (mpz_srcptr x)$/;"	f	file:
e_mpz_hamdist	demos/expr/exprz.c	/^e_mpz_hamdist (mpz_ptr w, mpz_srcptr x, mpz_srcptr y)$/;"	f	file:
e_mpz_init	demos/expr/exprza.c	/^e_mpz_init (mpz_ptr z, unsigned long prec)$/;"	f	file:
e_mpz_odd_p	demos/expr/exprz.c	/^e_mpz_odd_p (mpz_srcptr x)$/;"	f	file:
e_mpz_popcount	demos/expr/exprz.c	/^e_mpz_popcount (mpz_ptr w, mpz_srcptr x)$/;"	f	file:
e_mpz_scan0	demos/expr/exprz.c	/^e_mpz_scan0 (mpz_ptr w, mpz_srcptr x, unsigned long start)$/;"	f	file:
e_mpz_scan1	demos/expr/exprz.c	/^e_mpz_scan1 (mpz_ptr w, mpz_srcptr x, unsigned long start)$/;"	f	file:
e_mpz_setbit	demos/expr/exprz.c	/^e_mpz_setbit (mpz_ptr w, mpz_srcptr x, unsigned long n)$/;"	f	file:
e_mpz_sgn	demos/expr/exprz.c	/^e_mpz_sgn (mpz_srcptr x)$/;"	f	file:
each_t	tests/devel/try.c	/^struct each_t {$/;"	s	file:
elen	demos/expr/expr-impl.h	/^  size_t                          elen;$/;"	m	struct:mpexpr_parse_t
encode	gen-jacobitab.c	/^encode (unsigned a, unsigned b, unsigned d)$/;"	f	file:
end	tal-notreent.c	/^  void *end;$/;"	m	struct:tmp_stack	file:
end	tune/speed.c	/^  mp_size_t start, end;$/;"	m	struct:size_array_t	file:
endian_test	mpz/export.c	/^static const mp_limb_t  endian_test = (CNST_LIMB(1) << (GMP_LIMB_BITS-7)) - 1;$/;"	v	file:
endian_test	mpz/import.c	/^static const mp_limb_t  endian_test = (CNST_LIMB(1) << (GMP_LIMB_BITS-7)) - 1;$/;"	v	file:
endianness	mpn/sparc64/sparc64.h	/^Error, error, unknown limb endianness;$/;"	v
enter_seen	tests/mpn/t-instrument.c	/^volatile int  enter_seen;$/;"	v
env_program	mini-gmp/tests/run-tests	/^env_program () {$/;"	f
epsilon	gmpxx.h	/^    static mpf_class epsilon() { return mpf_class(); }$/;"	f	class:std::numeric_limits
epsilon	gmpxx.h	/^    static mpq_class epsilon() { return mpq_class(); }$/;"	f	class:std::numeric_limits
epsilon	gmpxx.h	/^    static mpz_class epsilon() { return mpz_class(); }$/;"	f	class:std::numeric_limits
errjmpbuf	demos/pexpr.c	/^jmp_buf errjmpbuf;$/;"	v
error	demos/pexpr.c	/^char *error;$/;"	v
error	doc/mdate-sh	/^error ()$/;"	f
error_code	demos/expr/expr-impl.h	/^  int                             error_code;$/;"	m	struct:mpexpr_parse_t
eval	gmpxx.h	/^  static bool eval(double d, mpf_srcptr f)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(double d, mpf_srcptr f)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(double d, mpq_srcptr q)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(double d, mpq_srcptr q)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(double d, mpz_srcptr z)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(double d, mpz_srcptr z)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, double d)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, double d)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, mpf_srcptr g) { return mpf_cmp(f, g) < 0; }$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, mpf_srcptr g) { return mpf_cmp(f, g) == 0; }$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, mpq_srcptr q)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, mpq_srcptr q)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, mpz_srcptr z)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, mpz_srcptr z)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, signed long int l)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, signed long int l)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, unsigned long int l)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpf_srcptr f, unsigned long int l)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, double d)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, double d)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, mpf_srcptr f)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, mpf_srcptr f)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, mpq_srcptr r) { return mpq_cmp(q, r) < 0; }$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, mpq_srcptr r)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, mpz_srcptr z)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, mpz_srcptr z)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, signed long int l)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, signed long int l)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, unsigned long int l)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpq_srcptr q, unsigned long int l)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, double d)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, double d)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, mpf_srcptr f)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, mpf_srcptr f)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, mpq_srcptr q)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, mpq_srcptr q)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, mpz_srcptr w) { return mpz_cmp(z, w) < 0; }$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, mpz_srcptr w) { return mpz_cmp(z, w) == 0; }$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, signed long int l)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, signed long int l)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, unsigned long int l)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(mpz_srcptr z, unsigned long int l)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(signed long int l, mpf_srcptr f)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(signed long int l, mpf_srcptr f)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(signed long int l, mpq_srcptr q)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(signed long int l, mpq_srcptr q)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(signed long int l, mpz_srcptr z)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(signed long int l, mpz_srcptr z)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(unsigned long int l, mpf_srcptr f)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(unsigned long int l, mpf_srcptr f)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(unsigned long int l, mpq_srcptr q)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(unsigned long int l, mpq_srcptr q)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static bool eval(unsigned long int l, mpz_srcptr z)$/;"	f	struct:__gmp_binary_equal
eval	gmpxx.h	/^  static bool eval(unsigned long int l, mpz_srcptr z)$/;"	f	struct:__gmp_binary_less
eval	gmpxx.h	/^  static inline bool eval(T t, U u) { return __gmp_binary_less::eval(u, t); }$/;"	f	struct:__gmp_binary_greater
eval	gmpxx.h	/^  static int eval(double d, mpf_srcptr f)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(double d, mpq_srcptr q)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(double d, mpz_srcptr z)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpf_srcptr f) { return mpf_sgn(f); }$/;"	f	struct:__gmp_sgn_function
eval	gmpxx.h	/^  static int eval(mpf_srcptr f, double d)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpf_srcptr f, mpf_srcptr g) { return mpf_cmp(f, g); }$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpf_srcptr f, mpq_srcptr q)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpf_srcptr f, mpz_srcptr z)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpf_srcptr f, signed long int l)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpf_srcptr f, unsigned long int l)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpq_srcptr q) { return mpq_sgn(q); }$/;"	f	struct:__gmp_sgn_function
eval	gmpxx.h	/^  static int eval(mpq_srcptr q, double d)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpq_srcptr q, mpf_srcptr f)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpq_srcptr q, mpq_srcptr r) { return mpq_cmp(q, r); }$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpq_srcptr q, mpz_srcptr z)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpq_srcptr q, signed long int l)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpq_srcptr q, unsigned long int l)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpz_srcptr z) { return mpz_sgn(z); }$/;"	f	struct:__gmp_sgn_function
eval	gmpxx.h	/^  static int eval(mpz_srcptr z, double d)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpz_srcptr z, mpf_srcptr f)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpz_srcptr z, mpq_srcptr q)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpz_srcptr z, mpz_srcptr w) { return mpz_cmp(z, w); }$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpz_srcptr z, signed long int l)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(mpz_srcptr z, unsigned long int l)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(signed long int l, mpf_srcptr f)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(signed long int l, mpq_srcptr q)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(signed long int l, mpz_srcptr z)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(unsigned long int l, mpf_srcptr f)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(unsigned long int l, mpq_srcptr q)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static int eval(unsigned long int l, mpz_srcptr z)$/;"	f	struct:__gmp_cmp_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f) { mpf_add_ui(f, f, 1); }$/;"	f	struct:__gmp_unary_increment
eval	gmpxx.h	/^  static void eval(mpf_ptr f) { mpf_sub_ui(f, f, 1); }$/;"	f	struct:__gmp_unary_decrement
eval	gmpxx.h	/^  static void eval(mpf_ptr f, double d, mpf_srcptr g)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpf_ptr f, double d, mpf_srcptr g)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, double d, mpf_srcptr g)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpf_ptr f, double d, mpf_srcptr g)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, double d, mpf_srcptr g)$/;"	f	struct:__gmp_hypot_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, gmp_randstate_t s, mp_bitcnt_t prec)$/;"	f	struct:__gmp_rand_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g) { mpf_abs(f, g); }$/;"	f	struct:__gmp_abs_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g) { mpf_ceil(f, g); }$/;"	f	struct:__gmp_ceil_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g) { mpf_floor(f, g); }$/;"	f	struct:__gmp_floor_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g) { mpf_neg(f, g); }$/;"	f	struct:__gmp_unary_minus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g) { mpf_set(f, g); }$/;"	f	struct:__gmp_unary_plus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g) { mpf_sqrt(f, g); }$/;"	f	struct:__gmp_sqrt_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g) { mpf_trunc(f, g); }$/;"	f	struct:__gmp_trunc_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, double d)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, double d)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, double d)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, double d)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, double d)$/;"	f	struct:__gmp_hypot_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, mp_bitcnt_t l)$/;"	f	struct:__gmp_binary_lshift
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, mp_bitcnt_t l)$/;"	f	struct:__gmp_binary_rshift
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, mpf_srcptr h)$/;"	f	struct:__gmp_hypot_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, signed long int l)$/;"	f	struct:__gmp_hypot_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, mpf_srcptr g, unsigned long int l)$/;"	f	struct:__gmp_hypot_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, signed long int l, mpf_srcptr g)$/;"	f	struct:__gmp_hypot_function
eval	gmpxx.h	/^  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpf_ptr f, unsigned long int l, mpf_srcptr g)$/;"	f	struct:__gmp_hypot_function
eval	gmpxx.h	/^  static void eval(mpq_ptr q)$/;"	f	struct:__gmp_unary_decrement
eval	gmpxx.h	/^  static void eval(mpq_ptr q)$/;"	f	struct:__gmp_unary_increment
eval	gmpxx.h	/^  static void eval(mpq_ptr q, double d, mpq_srcptr r)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpq_ptr q, double d, mpq_srcptr r)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, double d, mpq_srcptr r)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpq_ptr q, double d, mpq_srcptr r)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r) { mpq_abs(q, r); }$/;"	f	struct:__gmp_abs_function
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r) { mpq_neg(q, r); }$/;"	f	struct:__gmp_unary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r) { mpq_set(q, r); }$/;"	f	struct:__gmp_unary_plus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, double d)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, double d)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, double d)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, double d)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, mp_bitcnt_t l)$/;"	f	struct:__gmp_binary_lshift
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, mp_bitcnt_t l)$/;"	f	struct:__gmp_binary_rshift
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, mpq_srcptr s)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, mpq_srcptr s)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, mpq_srcptr s)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, mpq_srcptr s)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, mpz_srcptr z)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, mpz_srcptr z)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, signed long int l)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, signed long int l)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, signed long int l)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, unsigned long int l)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, unsigned long int l)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, unsigned long int l)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpq_srcptr r, unsigned long int l)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpz_srcptr z, mpq_srcptr r)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, mpz_srcptr z, mpq_srcptr r)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, signed long int l, mpq_srcptr r)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpq_ptr q, signed long int l, mpq_srcptr r)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, signed long int l, mpq_srcptr r)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpq_ptr q, signed long int l, mpq_srcptr r)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, unsigned long int l, mpq_srcptr r)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpq_ptr q, unsigned long int l, mpq_srcptr r)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpq_ptr q, unsigned long int l, mpq_srcptr r)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpq_ptr q, unsigned long int l, mpq_srcptr r)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpz_ptr z) { mpz_add_ui(z, z, 1); }$/;"	f	struct:__gmp_unary_increment
eval	gmpxx.h	/^  static void eval(mpz_ptr z) { mpz_sub_ui(z, z, 1); }$/;"	f	struct:__gmp_unary_decrement
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_binary_and
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_binary_ior
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_binary_modulus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_binary_xor
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_gcd_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, double d, mpz_srcptr w)$/;"	f	struct:__gmp_lcm_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, gmp_randstate_t s, mp_bitcnt_t l)$/;"	f	struct:__gmp_rand_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, gmp_randstate_t s, mpz_srcptr w)$/;"	f	struct:__gmp_rand_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w) { mpz_abs(z, w); }$/;"	f	struct:__gmp_abs_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w) { mpz_com(z, w); }$/;"	f	struct:__gmp_unary_com
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w) { mpz_neg(z, w); }$/;"	f	struct:__gmp_unary_minus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w) { mpz_set(z, w); }$/;"	f	struct:__gmp_unary_plus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w) { mpz_sqrt(z, w); }$/;"	f	struct:__gmp_sqrt_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_binary_and
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_binary_ior
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_binary_modulus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_binary_xor
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_gcd_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, double d)$/;"	f	struct:__gmp_lcm_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mp_bitcnt_t l)$/;"	f	struct:__gmp_binary_lshift
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mp_bitcnt_t l)$/;"	f	struct:__gmp_binary_rshift
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_binary_and
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_binary_ior
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_binary_modulus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_binary_xor
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_gcd_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)$/;"	f	struct:__gmp_lcm_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_binary_and
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_binary_ior
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_binary_modulus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_binary_xor
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_gcd_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)$/;"	f	struct:__gmp_lcm_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_binary_and
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_binary_ior
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_binary_modulus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_binary_xor
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_gcd_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)$/;"	f	struct:__gmp_lcm_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_and
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_ior
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_modulus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_xor
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_gcd_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)$/;"	f	struct:__gmp_lcm_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_and
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_divides
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_ior
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_minus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_modulus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_multiplies
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_plus
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_binary_xor
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_gcd_function
eval	gmpxx.h	/^  static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)$/;"	f	struct:__gmp_lcm_function
eval	gmpxx.h	/^  void eval(mpf_ptr f) const$/;"	f	class:__gmp_expr
eval	gmpxx.h	/^  void eval(mpz_ptr z) const { __gmp_rand_function::eval(z, state, bits); }$/;"	f	class:__gmp_expr
eval	gmpxx.h	/^  void eval(mpz_ptr z) const$/;"	f	class:__gmp_expr
eval	gmpxx.h	/^  void eval(typename __gmp_resolve_expr<T>::ptr_type p) const$/;"	f	class:__gmp_expr
eval	gmpxx.h	/^__gmp_binary_plus::eval(mpq_ptr q, mpq_srcptr r, signed long int l)$/;"	f	class:__gmp_binary_plus
exp	gmp-impl.h	/^      gmp_uint_least32_t exp:11;$/;"	m	struct:ieee_double_extract::__anon15
exp	gmp-impl.h	/^      gmp_uint_least32_t exp:11;$/;"	m	struct:ieee_double_extract::__anon16
exp	gmp-impl.h	/^      gmp_uint_least32_t exp:11;$/;"	m	struct:ieee_double_extract::__anon17
exp	gmp-impl.h	/^      gmp_uint_least32_t exp:8;		\/* excess-128 exponent *\/$/;"	m	struct:double_extract::__anon18
exp	mini-gmp/mini-gmp.c	/^  unsigned exp;$/;"	m	struct:mpn_base_info	file:
expfmt	gmp-impl.h	/^  const char  *expfmt;       \/* exponent format *\/$/;"	m	struct:doprnt_params_t
expr	demos/expr/t-expr.c	/^  const char  *expr;$/;"	m	struct:data_t	file:
expr	demos/pexpr.c	/^expr (char *str, expr_t *e)$/;"	f
expr	demos/pexpr.c	/^struct expr$/;"	s	file:
expr	gmpxx.h	/^  __gmp_binary_expr<val1_type, val2_type, Op> expr;$/;"	m	class:__gmp_expr
expr	gmpxx.h	/^  __gmp_unary_expr<val_type, Op> expr;$/;"	m	class:__gmp_expr
expr_t	demos/pexpr.c	/^typedef struct expr *expr_t;$/;"	t	typeref:struct:expr	file:
exptimes4	gmp-impl.h	/^  int         exptimes4;     \/* exponent multiply by 4 *\/$/;"	m	struct:doprnt_params_t
extra_fft	tests/mpz/t-mul.c	/^char *extra_fft;$/;"	v
f	demos/expr/expr-impl.h	/^  mpf_t   f;$/;"	m	union:mpX_t
f	gen-fib.c	/^mpz_t  *f;$/;"	v
f	tests/cxx/t-ops3.cc	/^template<class T,class U> void f(T t, U u){$/;"	f
f1	tests/rand/t-rand.c	/^const char *f1[ENTS] = {"0.@0", "0.8@0", "0.8@0", "0.8@0", "0.8@0", "0.@0", "0.8@0", "0.8@0", "0.8@0", "0.8@0"};$/;"	v
f10	tests/rand/t-rand.c	/^const char *f10[ENTS] = {"0.a7@0", "0.84c@0", "0.3c4@0", "0.5fc@0", "0.4ac@0", "0.5e@0", "0.e0c@0", "0.34c@0", "0.e8c@0", "0.a04@0"};$/;"	v
f127	tests/rand/t-rand.c	/^const char *f127[ENTS] = {"0.5ecd7526555eb140e3fb1e0e85533418@0", "0.e79f478cc99382ea6a0f94c1d8d7084a@0", "0.a7d40e994263bd8259ad171551c404f@0", "0.79eb5918686a65f14a7981d68eb03ee6@0", "0.a1823ab0d3c411543735462f7185a152@0", "0.16462c791250ec8e563de32c85d59c12@0", "0.913e9807a83f0ea1391ad9219cce9f2a@0", "0.5570e9192d54cec5d4326568993ae2c8@0", "0.13196ab23f80b5a635f7783acf721dba@0", "0.ef09177323fa17c6635b9e28aff78ce4@0"};$/;"	v
f128	tests/rand/t-rand.c	/^const char *f128[ENTS] = {"0.af66ba932aaf58a071fd8f0742a99a0c@0", "0.73cfa3c664c9c1753507ca60ec6b8425@0", "0.53ea074ca131dec12cd68b8aa8e20278@0", "0.3cf5ac8c343532f8a53cc0eb47581f73@0", "0.50c11d5869e208aa1b9aa317b8c2d0a9@0", "0.8b23163c892876472b1ef19642eace09@0", "0.489f4c03d41f87509c8d6c90ce674f95@0", "0.aab8748c96aa6762ea1932b44c9d7164@0", "0.98cb5591fc05ad31afbbc1d67b90edd@-1", "0.f7848bb991fd0be331adcf1457fbc672@0"};$/;"	v
f15	tests/rand/t-rand.c	/^const char *f15[ENTS] = {"0.538@-1", "0.3426@0", "0.e9e2@0", "0.4afe@0", "0.b256@0", "0.92f@0", "0.8f06@0", "0.f9a6@0", "0.b746@0", "0.8d02@0"};$/;"	v
f16	tests/rand/t-rand.c	/^const char *f16[ENTS] = {"0.29c@-1", "0.9a13@0", "0.74f1@0", "0.a57f@0", "0.d92b@0", "0.4978@0", "0.c783@0", "0.fcd3@0", "0.5ba3@0", "0.c681@0"};$/;"	v
f17	tests/rand/t-rand.c	/^const char *f17[ENTS] = {"0.28f@-1", "0.78bd@0", "0.2a7f8@0", "0.d19a8@0", "0.67b28@0", "0.2eb78@0", "0.2c1f8@0", "0.30c78@0", "0.de3@-1", "0.4c7f8@0"};$/;"	v
f2	tests/rand/t-rand.c	/^const char *f2[ENTS] = {"0.@0", "0.c@0", "0.4@0", "0.c@0", "0.c@0", "0.@0", "0.c@0", "0.c@0", "0.c@0", "0.4@0"};$/;"	v
f3	tests/rand/t-rand.c	/^const char *f3[ENTS] = {"0.8@0", "0.6@0", "0.2@0", "0.e@0", "0.6@0", "0.@0", "0.6@0", "0.6@0", "0.6@0", "0.2@0"};$/;"	v
f31	tests/rand/t-rand.c	/^const char *f31[ENTS] = {"0.75d9aa2a@0", "0.275d1d8c@0", "0.a319012@0", "0.103940ee@0", "0.e16e268@-1", "0.fdcf1ae2@0", "0.6474ec6c@0", "0.42459634@0", "0.33023282@0", "0.83fac0a@-1"};$/;"	v
f32	tests/rand/t-rand.c	/^const char *f32[ENTS] = {"0.baecd515@0", "0.13ae8ec6@0", "0.518c809@0", "0.881ca077@0", "0.870b7134@0", "0.7ee78d71@0", "0.323a7636@0", "0.a122cb1a@0", "0.99811941@0", "0.841fd605@0"};$/;"	v
f33	tests/rand/t-rand.c	/^const char *f33[ENTS] = {"0.fd7a665@-1", "0.aeb77c1d8@0", "0.484aff39@0", "0.db51effb@0", "0.58be5eee8@0", "0.b72904ea@0", "0.37b2d896@0", "0.249ddde3@0", "0.55f952ea8@0", "0.36a48d1e@0"};$/;"	v
f4	tests/rand/t-rand.c	/^const char *f4[ENTS] = {"0.c@0", "0.3@0", "0.1@0", "0.f@0", "0.b@0", "0.8@0", "0.3@0", "0.3@0", "0.3@0", "0.1@0"};$/;"	v
f5	tests/rand/t-rand.c	/^const char *f5[ENTS] = {"0.e@0", "0.98@0", "0.88@0", "0.f8@0", "0.58@0", "0.c@0", "0.18@0", "0.98@0", "0.18@0", "0.8@-1"};$/;"	v
f63	tests/rand/t-rand.c	/^const char *f63[ENTS] = {"0.914e9e6cff4f6b9@0", "0.7753d3b8364c60ec@0", "0.3c15909cecf1c1f6@0", "0.2282cb02e5167c6a@0", "0.6d56c20a47e1e3ee@0", "0.7ca81d1d2b81d696@0", "0.8735c2c0afb793a6@0", "0.e69f64c1b64872a@0", "0.fa7462fdff85137e@0", "0.3b00603f67a341a2@0"};$/;"	v
f64	tests/rand/t-rand.c	/^const char *f64[ENTS] = {"0.48a74f367fa7b5c8@0", "0.bba9e9dc1b263076@0", "0.9e0ac84e7678e0fb@0", "0.11416581728b3e35@0", "0.b6ab610523f0f1f7@0", "0.be540e8e95c0eb4b@0", "0.439ae16057dbc9d3@0", "0.f34fb260db24395@0", "0.fd3a317effc289bf@0", "0.1d80301fb3d1a0d1@0"};$/;"	v
f65	tests/rand/t-rand.c	/^const char *f65[ENTS] = {"0.ffbbb886c236a4f8@0", "0.d8a08b80eb84f708@0", "0.18ffd40d1045b57a@0", "0.22331c6a18e9e3408@0", "0.6fae2b4eadd545aa8@0", "0.cbeccf54df9472d@0", "0.c8d6f04f6eca67d7@0", "0.ca5677d36ef2f0c68@0", "0.d7e08b3e2b1396c9@0", "0.68494ca6d39790378@0"};$/;"	v
f_cmp_divisor	gen-psqr.c	/^f_cmp_divisor (const void *parg, const void *qarg)$/;"	f
f_cmp_fraction	gen-psqr.c	/^f_cmp_fraction (const void *parg, const void *qarg)$/;"	f
f_f	tests/cxx/t-mix.cc	/^int f_f  (mpf_class){return 2;}$/;"	f
f_floor	tests/rand/statlib.c	/^f_floor (mpf_t rop, mpf_t op)$/;"	f
f_freq	tests/rand/stat.c	/^f_freq (const unsigned l1runs, const unsigned l2runs,$/;"	f	file:
f_q	tests/cxx/t-mix.cc	/^int f_q  (mpq_class){return 1;}$/;"	f
f_qf	tests/cxx/t-mix.cc	/^int f_qf (mpf_class){return 2;}$/;"	f
f_qf	tests/cxx/t-mix.cc	/^int f_qf (mpq_class){return 1;}$/;"	f
f_z	tests/cxx/t-mix.cc	/^int f_z  (mpz_class){return 0;}$/;"	f
f_zf	tests/cxx/t-mix.cc	/^int f_zf (mpf_class){return 2;}$/;"	f
f_zf	tests/cxx/t-mix.cc	/^int f_zf (mpz_class){return 0;}$/;"	f
f_zq	tests/cxx/t-mix.cc	/^int f_zq (mpq_class){return 1;}$/;"	f
f_zq	tests/cxx/t-mix.cc	/^int f_zq (mpz_class){return 0;}$/;"	f
f_zqf	tests/cxx/t-mix.cc	/^int f_zqf(mpf_class){return 2;}$/;"	f
f_zqf	tests/cxx/t-mix.cc	/^int f_zqf(mpq_class){return 1;}$/;"	f
f_zqf	tests/cxx/t-mix.cc	/^int f_zqf(mpz_class){return 0;}$/;"	f
fac2bin	mpz/bin_uiui.c	/^static const unsigned char fac2bin[] = { CENTRAL_BINOMIAL_2FAC_TABLE };$/;"	v	file:
fac_dsc_threshold	tune/tuneup.c	/^mp_size_t  fac_dsc_threshold            = FAC_DSC_THRESHOLD_LIMIT;$/;"	v
fac_odd_threshold	tune/tuneup.c	/^mp_size_t  fac_odd_threshold            = 0;$/;"	v
fac_smallexaustive	mini-gmp/tests/t-comb.c	/^fac_smallexaustive (unsigned int limit)$/;"	f
facinv	mpz/bin_uiui.c	/^static const mp_limb_t facinv[] = { ONE_LIMB_ODD_FACTORIAL_INVERSES_TABLE };$/;"	v	file:
factor	demos/factorize.c	/^factor (mpz_t t, struct factors *factors)$/;"	f
factor	demos/pexpr.c	/^factor (char *str, expr_t *e)$/;"	f
factor	gen-psqr.c	/^struct factor_t  *factor;$/;"	v	typeref:struct:factor_t
factor_alloc	gen-psqr.c	/^int              factor_alloc;  \/* entries allocated to factor array *\/$/;"	v
factor_clear	demos/factorize.c	/^factor_clear (struct factors *factors)$/;"	f
factor_init	demos/factorize.c	/^factor_init (struct factors *factors)$/;"	f
factor_insert	demos/factorize.c	/^factor_insert (struct factors *factors, mpz_t prime)$/;"	f
factor_insert_ui	demos/factorize.c	/^factor_insert_ui (struct factors *factors, unsigned long prime)$/;"	f
factor_t	gen-psqr.c	/^struct factor_t {$/;"	s	file:
factor_using_division	demos/factorize.c	/^factor_using_division (mpz_t t, struct factors *factors)$/;"	f
factor_using_pollard_rho	demos/factorize.c	/^factor_using_pollard_rho (mpz_t n, unsigned long a, struct factors *factors)$/;"	f
factors	demos/factorize.c	/^struct factors$/;"	s	file:
fake_cpuid	mpn/x86/fat/fat.c	/^fake_cpuid (char dst[12], int id)$/;"	f	file:
fake_cpuid	mpn/x86_64/fat/fat.c	/^fake_cpuid (char dst[12], unsigned int id)$/;"	f	file:
fake_cpuid_available	mpn/x86/fat/fat.c	/^fake_cpuid_available (void)$/;"	f	file:
fake_cpuid_lookup	mpn/x86/fat/fat.c	/^fake_cpuid_lookup (void)$/;"	f	file:
fake_cpuid_lookup	mpn/x86_64/fat/fat.c	/^fake_cpuid_lookup (void)$/;"	f	file:
fake_cpuid_table	mpn/x86/fat/fat.c	/^} fake_cpuid_table[] = {$/;"	v	typeref:struct:__anon21	file:
fake_cpuid_table	mpn/x86_64/fat/fat.c	/^} fake_cpuid_table[] = {$/;"	v	typeref:struct:__anon22	file:
farr	tests/rand/t-rand.c	/^static struct rt farr[] =$/;"	v	typeref:struct:rt	file:
fclose_written	tune/speed.c	/^fclose_written (FILE *fp, const char *filename)$/;"	f
ff	tests/cxx/t-ops3.cc	/^template<class T, class U> void ff(T t, U u){$/;"	f
ffs	tests/cxx/t-ops3.cc	/^template<class T, class U> void ffs(T t, U u){$/;"	f
fft	tune/tuneup.c	/^fft (struct fft_param_t *p)$/;"	f
fft_cache	tune/tuneup.c	/^fft_cache_t fft_cache[FFT_CACHE_SIZE];$/;"	v
fft_cache	tune/tuneup.c	/^typedef struct fft_cache$/;"	s	file:
fft_cache_t	tune/tuneup.c	/^} fft_cache_t;$/;"	t	typeref:struct:fft_cache	file:
fft_modf_mul_threshold	tune/tuneup.c	/^mp_size_t  fft_modf_mul_threshold = MP_SIZE_T_MAX;$/;"	v
fft_modf_sqr_threshold	tune/tuneup.c	/^mp_size_t  fft_modf_sqr_threshold = MP_SIZE_T_MAX;$/;"	v
fft_next_size	tune/tuneup.c	/^fft_next_size (mp_size_t pl, int k)$/;"	f
fft_param_t	tune/tuneup.c	/^struct fft_param_t {$/;"	s	file:
fft_step_size	tune/tuneup.c	/^fft_step_size (int k)$/;"	f
fft_table_nk	gmp-impl.h	/^struct fft_table_nk$/;"	s
fftfill	tune/tuneup.c	/^fftfill (mp_size_t pl, int k, int sqr)$/;"	f
fftmes	tune/tuneup.c	/^fftmes (mp_size_t nmin, mp_size_t nmax, int initial_k, struct fft_param_t *p, int idx, int print)$/;"	f
fib_limit	gen-fib.c	/^int    fnum, fib_limit, luc_limit;$/;"	v
file	gmp-impl.h	/^  const char                *file;$/;"	m	struct:tmp_debug_t
fill	gmp-impl.h	/^  char        fill;          \/* character *\/$/;"	m	struct:doprnt_params_t
final	gmp-impl.h	/^  doprnt_final_t   final;   \/* NULL if not required *\/$/;"	m	struct:doprnt_funs_t
find_primes	demos/primes.c	/^find_primes (unsigned char *s, mpz_t  fr, unsigned long ssize,$/;"	f
find_program	mini-gmp/tests/run-tests	/^find_program () {$/;"	f
first_block_primesieve	primesieve.c	/^first_block_primesieve (mp_ptr bit_array, mp_limb_t n)$/;"	f	file:
first_size	tune/tuneup.c	/^  mp_size_t         first_size;$/;"	m	struct:fft_param_t	file:
fits_sint_p	gmpxx.h	/^  bool fits_sint_p() const { return mpf_fits_sint_p(mp); }$/;"	f	class:__gmp_expr
fits_sint_p	gmpxx.h	/^  bool fits_sint_p() const { return mpz_fits_sint_p(mp); }$/;"	f	class:__gmp_expr
fits_slong_p	gmpxx.h	/^  bool fits_slong_p() const { return mpf_fits_slong_p(mp); }$/;"	f	class:__gmp_expr
fits_slong_p	gmpxx.h	/^  bool fits_slong_p() const { return mpz_fits_slong_p(mp); }$/;"	f	class:__gmp_expr
fits_sshort_p	gmpxx.h	/^  bool fits_sshort_p() const { return mpf_fits_sshort_p(mp); }$/;"	f	class:__gmp_expr
fits_sshort_p	gmpxx.h	/^  bool fits_sshort_p() const { return mpz_fits_sshort_p(mp); }$/;"	f	class:__gmp_expr
fits_uint_p	gmpxx.h	/^  bool fits_uint_p() const { return mpf_fits_uint_p(mp); }$/;"	f	class:__gmp_expr
fits_uint_p	gmpxx.h	/^  bool fits_uint_p() const { return mpz_fits_uint_p(mp); }$/;"	f	class:__gmp_expr
fits_ulong_p	gmpxx.h	/^  bool fits_ulong_p() const { return mpf_fits_ulong_p(mp); }$/;"	f	class:__gmp_expr
fits_ulong_p	gmpxx.h	/^  bool fits_ulong_p() const { return mpz_fits_ulong_p(mp); }$/;"	f	class:__gmp_expr
fits_ushort_p	gmpxx.h	/^  bool fits_ushort_p() const { return mpf_fits_ushort_p(mp); }$/;"	f	class:__gmp_expr
fits_ushort_p	gmpxx.h	/^  bool fits_ushort_p() const { return mpz_fits_ushort_p(mp); }$/;"	f	class:__gmp_expr
flag	tune/speed.c	/^  int               flag;$/;"	m	struct:routine_t	file:
flag	tune/time.c	/^  int             flag;$/;"	m	struct:timebasestruct_dummy	file:
flag_count	demos/primes.c	/^int flag_count = 0;$/;"	v
flag_html	demos/pexpr.c	/^int flag_html = 0;$/;"	v
flag_maxgap	demos/primes.c	/^int flag_maxgap = 0;$/;"	v
flag_print	demos/pexpr.c	/^int flag_print = 1;$/;"	v
flag_print	demos/primes.c	/^int flag_print = 1;$/;"	v
flag_prove_primality	demos/factorize.c	/^int flag_prove_primality = 1;$/;"	v
flag_splitup_output	demos/pexpr.c	/^int flag_splitup_output = 0;$/;"	v
flag_verbose	demos/factorize.c	/^int flag_verbose = 0;$/;"	v
flag_wml	demos/pexpr.c	/^int flag_wml = 0;$/;"	v
fms	mpn/x86/fat/fat.c	/^  unsigned    fms;$/;"	m	struct:__anon21	file:
fms	mpn/x86_64/fat/fat.c	/^  unsigned    fms;$/;"	m	struct:__anon22	file:
fmt_allignore	tests/misc/t-scanf.c	/^fmt_allignore (const char *fmt)$/;"	f
fname	tests/mpz/reuse.c	/^  const char *fname;$/;"	m	struct:__anon31	file:
fname	tests/mpz/reuse.c	/^  const char *fname;$/;"	m	struct:__anon32	file:
fname	tests/mpz/reuse.c	/^  const char *fname;$/;"	m	struct:__anon33	file:
fname	tests/mpz/reuse.c	/^  const char *fname;$/;"	m	struct:__anon34	file:
fname	tests/mpz/reuse.c	/^  const char *fname;$/;"	m	struct:__anon35	file:
fname	tests/mpz/reuse.c	/^  const char *fname;$/;"	m	struct:__anon36	file:
fns	demos/pexpr.c	/^struct functions fns[] =$/;"	v	typeref:struct:functions
fnum	gen-fib.c	/^int    fnum, fib_limit, luc_limit;$/;"	v
foo	configure	/^foo ()$/;"	f
foo	configure	/^foo(){bar();}$/;"	f
foo	cxx/dummy.cc	/^typedef int  foo;$/;"	t	file:
foo_debug	tests/rand/statlib.c	/^foo_debug ()$/;"	f
fopen_for_write	tune/speed.c	/^fopen_for_write (const char *filename)$/;"	f
fopen_wplusb_or_die	tests/mpz/t-io_raw.c	/^fopen_wplusb_or_die (const char *filename)$/;"	f
format	gmp-impl.h	/^  doprnt_format_t  format;$/;"	m	struct:doprnt_funs_t
fptr	tests/mpz/reuse.c	/^  ddsi_div_func fptr;$/;"	m	struct:__anon34	file:
fptr	tests/mpz/reuse.c	/^  ddss_div_func fptr;$/;"	m	struct:__anon35	file:
fptr	tests/mpz/reuse.c	/^  ds_func fptr;$/;"	m	struct:__anon36	file:
fptr	tests/mpz/reuse.c	/^  dsi_div_func fptr;$/;"	m	struct:__anon33	file:
fptr	tests/mpz/reuse.c	/^  dsi_func fptr;$/;"	m	struct:__anon32	file:
fptr	tests/mpz/reuse.c	/^  dss_func fptr;$/;"	m	struct:__anon31	file:
fraction	gen-psqr.c	/^  double  fraction;  \/* squares\/total *\/$/;"	m	struct:factor_t	file:
free_expr	demos/pexpr.c	/^free_expr (expr_t e)$/;"	f
freq_all	tune/freq.c	/^freq_all (int help)$/;"	f	file:
freq_attr_get_invent	tune/freq.c	/^freq_attr_get_invent (int help)$/;"	f	file:
freq_bsd_dmesg	tune/freq.c	/^freq_bsd_dmesg (int help)$/;"	f	file:
freq_environment	tune/freq.c	/^freq_environment (int help)$/;"	f	file:
freq_getsysinfo	tune/freq.c	/^freq_getsysinfo (int help)$/;"	f	file:
freq_irix_hinv	tune/freq.c	/^freq_irix_hinv (int help)$/;"	f	file:
freq_measure	tune/freq.c	/^freq_measure (const char *name, double (*one) (void))$/;"	f
freq_measure_getrusage	tune/freq.c	/^freq_measure_getrusage (int help)$/;"	f	file:
freq_measure_getrusage_one	tune/freq.c	/^freq_measure_getrusage_one (void)$/;"	f	file:
freq_measure_gettimeofday	tune/freq.c	/^freq_measure_gettimeofday (int help)$/;"	f	file:
freq_measure_gettimeofday_one	tune/freq.c	/^freq_measure_gettimeofday_one (void)$/;"	f	file:
freq_measure_mftb_one	tune/time.c	/^freq_measure_mftb_one (void)$/;"	f	file:
freq_proc_cpuinfo	tune/freq.c	/^freq_proc_cpuinfo (int help)$/;"	f	file:
freq_processor_info	tune/freq.c	/^freq_processor_info (int help)$/;"	f	file:
freq_pstat_getprocessor	tune/freq.c	/^freq_pstat_getprocessor (int help)$/;"	f	file:
freq_sco_etchw	tune/freq.c	/^freq_sco_etchw (int help)$/;"	f	file:
freq_sunos_sysinfo	tune/freq.c	/^freq_sunos_sysinfo (int help)$/;"	f	file:
freq_sysctl_hw_cpufrequency	tune/freq.c	/^freq_sysctl_hw_cpufrequency (int help)$/;"	f	file:
freq_sysctl_hw_model	tune/freq.c	/^freq_sysctl_hw_model (int help)$/;"	f	file:
freq_sysctlbyname_i586_freq	tune/freq.c	/^freq_sysctlbyname_i586_freq (int help)$/;"	f	file:
freq_sysctlbyname_tsc_freq	tune/freq.c	/^freq_sysctlbyname_tsc_freq (int help)$/;"	f	file:
fromstring_gmp_fscanf	tests/misc/t-scanf.c	/^fromstring_gmp_fscanf (const char *input, const char *fmt, ...)$/;"	f
fromstring_next_c	tests/misc/t-scanf.c	/^int   fromstring_next_c;$/;"	v
ftab	mpz/bin_uiui.c	/^static const unsigned long ftab[] =$/;"	v	file:
fudge	tests/mpn/t-aors_1.c	/^fudge (mpn_aors_1_t f)$/;"	f
fun	demos/expr/expr.h	/^  mpexpr_fun_t fun;$/;"	m	struct:mpexpr_operator_t
fun	tests/devel/try.c	/^struct each_t  fun = { "Fun" };$/;"	v	typeref:struct:each_t
fun	tune/speed.c	/^  speed_function_t  fun;$/;"	m	struct:routine_t	file:
fun_fscanf	tests/misc/t-scanf.c	/^fun_fscanf (const char *input, const char *fmt, void *a1, void *a2)$/;"	f
fun_gmp_fscanf	tests/misc/t-scanf.c	/^fun_gmp_fscanf (const char *input, const char *fmt, void *a1, void *a2)$/;"	f
fun_gmp_sscanf	tests/misc/t-scanf.c	/^fun_gmp_sscanf (const char *input, const char *fmt, void *a1, void *a2)$/;"	f
fun_sscanf	tests/misc/t-scanf.c	/^fun_sscanf (const char *input, const char *fmt, void *a1, void *a2)$/;"	f
fun_t	tests/misc/t-scanf.c	/^typedef int (*fun_t) (const char *, const char *, void *, void *);$/;"	t	file:
func	mpn/and_n.c	/^func (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
func	mpn/and_n.c	35;"	d	file:
func	mpn/and_n.c	40;"	d	file:
func	mpn/and_n.c	45;"	d	file:
func	mpn/and_n.c	50;"	d	file:
func	mpn/and_n.c	55;"	d	file:
func	mpn/and_n.c	60;"	d	file:
func	mpn/and_n.c	65;"	d	file:
func	mpn/and_n.c	70;"	d	file:
func	mpn/andn_n.c	/^func (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
func	mpn/andn_n.c	35;"	d	file:
func	mpn/andn_n.c	40;"	d	file:
func	mpn/andn_n.c	45;"	d	file:
func	mpn/andn_n.c	50;"	d	file:
func	mpn/andn_n.c	55;"	d	file:
func	mpn/andn_n.c	60;"	d	file:
func	mpn/andn_n.c	65;"	d	file:
func	mpn/andn_n.c	70;"	d	file:
func	mpn/generic/logops_n.c	/^func (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
func	mpn/generic/logops_n.c	35;"	d	file:
func	mpn/generic/logops_n.c	40;"	d	file:
func	mpn/generic/logops_n.c	45;"	d	file:
func	mpn/generic/logops_n.c	50;"	d	file:
func	mpn/generic/logops_n.c	55;"	d	file:
func	mpn/generic/logops_n.c	60;"	d	file:
func	mpn/generic/logops_n.c	65;"	d	file:
func	mpn/generic/logops_n.c	70;"	d	file:
func	mpn/ior_n.c	/^func (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
func	mpn/ior_n.c	35;"	d	file:
func	mpn/ior_n.c	40;"	d	file:
func	mpn/ior_n.c	45;"	d	file:
func	mpn/ior_n.c	50;"	d	file:
func	mpn/ior_n.c	55;"	d	file:
func	mpn/ior_n.c	60;"	d	file:
func	mpn/ior_n.c	65;"	d	file:
func	mpn/ior_n.c	70;"	d	file:
func	mpn/iorn_n.c	/^func (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
func	mpn/iorn_n.c	35;"	d	file:
func	mpn/iorn_n.c	40;"	d	file:
func	mpn/iorn_n.c	45;"	d	file:
func	mpn/iorn_n.c	50;"	d	file:
func	mpn/iorn_n.c	55;"	d	file:
func	mpn/iorn_n.c	60;"	d	file:
func	mpn/iorn_n.c	65;"	d	file:
func	mpn/iorn_n.c	70;"	d	file:
func	mpn/nand_n.c	/^func (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
func	mpn/nand_n.c	35;"	d	file:
func	mpn/nand_n.c	40;"	d	file:
func	mpn/nand_n.c	45;"	d	file:
func	mpn/nand_n.c	50;"	d	file:
func	mpn/nand_n.c	55;"	d	file:
func	mpn/nand_n.c	60;"	d	file:
func	mpn/nand_n.c	65;"	d	file:
func	mpn/nand_n.c	70;"	d	file:
func	mpn/nior_n.c	/^func (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
func	mpn/nior_n.c	35;"	d	file:
func	mpn/nior_n.c	40;"	d	file:
func	mpn/nior_n.c	45;"	d	file:
func	mpn/nior_n.c	50;"	d	file:
func	mpn/nior_n.c	55;"	d	file:
func	mpn/nior_n.c	60;"	d	file:
func	mpn/nior_n.c	65;"	d	file:
func	mpn/nior_n.c	70;"	d	file:
func	mpn/xnor_n.c	/^func (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
func	mpn/xnor_n.c	35;"	d	file:
func	mpn/xnor_n.c	40;"	d	file:
func	mpn/xnor_n.c	45;"	d	file:
func	mpn/xnor_n.c	50;"	d	file:
func	mpn/xnor_n.c	55;"	d	file:
func	mpn/xnor_n.c	60;"	d	file:
func	mpn/xnor_n.c	65;"	d	file:
func	mpn/xnor_n.c	70;"	d	file:
func	mpn/xor_n.c	/^func (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
func	mpn/xor_n.c	35;"	d	file:
func	mpn/xor_n.c	40;"	d	file:
func	mpn/xor_n.c	45;"	d	file:
func	mpn/xor_n.c	50;"	d	file:
func	mpn/xor_n.c	55;"	d	file:
func	mpn/xor_n.c	60;"	d	file:
func	mpn/xor_n.c	65;"	d	file:
func	mpn/xor_n.c	70;"	d	file:
func	tests/devel/anymul_1.c	28;"	d	file:
func	tests/devel/anymul_1.c	34;"	d	file:
func	tests/devel/anymul_1.c	40;"	d	file:
func	tests/devel/aors_n.c	27;"	d	file:
func	tests/devel/aors_n.c	33;"	d	file:
func	tests/devel/aors_n.c	39;"	d	file:
func	tests/devel/aors_n.c	45;"	d	file:
func	tests/devel/aors_n.c	51;"	d	file:
func	tests/devel/aors_n.c	57;"	d	file:
func	tests/devel/copy.c	27;"	d	file:
func	tests/devel/copy.c	33;"	d	file:
func	tests/devel/logops_n.c	26;"	d	file:
func	tests/devel/logops_n.c	32;"	d	file:
func	tests/devel/logops_n.c	38;"	d	file:
func	tests/devel/logops_n.c	44;"	d	file:
func	tests/devel/logops_n.c	50;"	d	file:
func	tests/devel/logops_n.c	56;"	d	file:
func	tests/devel/logops_n.c	62;"	d	file:
func	tests/devel/logops_n.c	68;"	d	file:
func	tests/devel/shift.c	28;"	d	file:
func	tests/devel/shift.c	34;"	d	file:
func_add_hook	ltmain.sh	/^func_add_hook ()$/;"	f
func_append	ltmain.sh	/^  func_append ()$/;"	f
func_append_quoted	ltmain.sh	/^  func_append_quoted ()$/;"	f
func_append_uniq	ltmain.sh	/^func_append_uniq ()$/;"	f
func_arith	ltmain.sh	/^  func_arith ()$/;"	f
func_cc_basename	configure	/^func_cc_basename ()$/;"	f
func_check_prog_grep	ltmain.sh	/^  func_check_prog_grep ()$/;"	f
func_check_prog_sed	ltmain.sh	/^  func_check_prog_sed ()$/;"	f
func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
func_cl_dashL	compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	f
func_config	ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
func_dll_def_p	ltmain.sh	/^func_dll_def_p ()$/;"	f
func_echo	ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	configure	/^func_echo_all ()$/;"	f
func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_infix_1	ltmain.sh	/^func_echo_infix_1 ()$/;"	f
func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	ltmain.sh	/^func_error ()$/;"	f
func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
func_executable_p	ltmain.sh	/^func_executable_p ()$/;"	f
func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	ltmain.sh	/^func_features ()$/;"	f
func_file_conv	compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generated_by_libtool_p	ltmain.sh	/^func_generated_by_libtool_p ()$/;"	f
func_grep	ltmain.sh	/^func_grep ()$/;"	f
func_help	ltmain.sh	/^func_help ()$/;"	f
func_hookable	ltmain.sh	/^func_hookable ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	ltmain.sh	/^  func_len ()$/;"	f
func_lo2o	ltmain.sh	/^  func_lo2o ()$/;"	f
func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_ver	ltmain.sh	/^func_lt_ver ()$/;"	f
func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_munge_path_list	configure	/^func_munge_path_list ()$/;"	f
func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
func_notquiet	ltmain.sh	/^func_notquiet ()$/;"	f
func_options	ltmain.sh	/^func_options ()$/;"	f
func_options_prep	ltmain.sh	/^func_options_prep ()$/;"	f
func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_options	ltmain.sh	/^func_parse_options ()$/;"	f
func_path_progs	ltmain.sh	/^func_path_progs ()$/;"	f
func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
func_remove_hook	ltmain.sh	/^func_remove_hook ()$/;"	f
func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_require_term_colors	ltmain.sh	/^func_require_term_colors ()$/;"	f
func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_run_hooks	ltmain.sh	/^func_run_hooks ()$/;"	f
func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_sort_ver	ltmain.sh	/^func_sort_ver ()$/;"	f
func_source	ltmain.sh	/^func_source ()$/;"	f
func_split_equals	ltmain.sh	/^  func_split_equals ()$/;"	f
func_split_short_opt	ltmain.sh	/^  func_split_short_opt ()$/;"	f
func_stripname	ltmain.sh	/^  func_stripname ()$/;"	f
func_stripname_cnf	configure	/^func_stripname_cnf ()$/;"	f
func_suncc_cstd_abi	ltmain.sh	/^func_suncc_cstd_abi ()$/;"	f
func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	ltmain.sh	/^func_usage ()$/;"	f
func_usage_message	ltmain.sh	/^func_usage_message ()$/;"	f
func_validate_options	ltmain.sh	/^func_validate_options ()$/;"	f
func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
func_version	ltmain.sh	/^func_version ()$/;"	f
func_warn_and_continue	ltmain.sh	/^func_warn_and_continue ()$/;"	f
func_warning	ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	ltmain.sh	/^  func_xform ()$/;"	f
funcname	tests/devel/anymul_1.c	30;"	d	file:
funcname	tests/devel/anymul_1.c	36;"	d	file:
funcname	tests/devel/anymul_1.c	42;"	d	file:
funcname	tests/devel/aors_n.c	29;"	d	file:
funcname	tests/devel/aors_n.c	35;"	d	file:
funcname	tests/devel/aors_n.c	41;"	d	file:
funcname	tests/devel/aors_n.c	47;"	d	file:
funcname	tests/devel/aors_n.c	53;"	d	file:
funcname	tests/devel/aors_n.c	59;"	d	file:
funcname	tests/devel/copy.c	29;"	d	file:
funcname	tests/devel/copy.c	35;"	d	file:
funcname	tests/devel/logops_n.c	28;"	d	file:
funcname	tests/devel/logops_n.c	34;"	d	file:
funcname	tests/devel/logops_n.c	40;"	d	file:
funcname	tests/devel/logops_n.c	46;"	d	file:
funcname	tests/devel/logops_n.c	52;"	d	file:
funcname	tests/devel/logops_n.c	58;"	d	file:
funcname	tests/devel/logops_n.c	64;"	d	file:
funcname	tests/devel/logops_n.c	70;"	d	file:
funcname	tests/devel/shift.c	30;"	d	file:
funcname	tests/devel/shift.c	36;"	d	file:
function	tests/devel/try.c	/^  tryfun_t    function;$/;"	m	struct:choice_t	file:
function	tune/tuneup.c	/^  speed_function_t  function;$/;"	m	struct:fft_param_t	file:
function	tune/tuneup.c	/^  speed_function_t  function;$/;"	m	struct:param_t	file:
function2	tune/tuneup.c	/^  speed_function_t  function2;$/;"	m	struct:param_t	file:
function_fudge	tune/tuneup.c	/^  double            function_fudge; \/* multiplier for "function" speeds *\/$/;"	m	struct:param_t	file:
functions	demos/pexpr.c	/^struct functions$/;"	s	file:
g	tests/cxx/t-ops3.cc	/^template<class T,class U> void g(T t, U u){$/;"	f
g_debug	tests/rand/findlc.c	/^int g_debug = 0;$/;"	v
g_debug	tests/rand/spect.c	/^int g_debug = 0;$/;"	v
g_debug	tests/rand/stat.c	/^int g_debug = 0;$/;"	v
gcd1	tests/mpz/t-gcd.c	/^mpz_t gcd1, gcd2, s, temp1, temp2, temp3;$/;"	v
gcd2	tests/mpz/t-gcd.c	/^mpz_t gcd1, gcd2, s, temp1, temp2, temp3;$/;"	v
gcd_2	mpn/gcd.c	/^gcd_2 (mp_ptr gp, mp_srcptr up, mp_srcptr vp)$/;"	f	file:
gcd_2	mpn/generic/gcd.c	/^gcd_2 (mp_ptr gp, mp_srcptr up, mp_srcptr vp)$/;"	f	file:
gcd_ctx	mpn/gcd.c	/^struct gcd_ctx$/;"	s	file:
gcd_ctx	mpn/generic/gcd.c	/^struct gcd_ctx$/;"	s	file:
gcd_dc_threshold	tune/tuneup.c	/^mp_size_t  gcd_dc_threshold             = MP_SIZE_T_MAX;$/;"	v
gcd_hook	mpn/gcd.c	/^gcd_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f	file:
gcd_hook	mpn/generic/gcd.c	/^gcd_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f	file:
gcd_subdiv_step_hook	gmp-impl.h	/^typedef void gcd_subdiv_step_hook(void *, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t, int);$/;"	t
gcdext_ctx	gmp-impl.h	/^struct gcdext_ctx$/;"	s
gcdext_dc_threshold	tune/tuneup.c	/^mp_size_t  gcdext_dc_threshold          = MP_SIZE_T_MAX;$/;"	v
gcdext_valid_p	mini-gmp/tests/t-gcd.c	/^gcdext_valid_p (const mpz_t a, const mpz_t b,$/;"	f	file:
gcdext_valid_p	tests/mpz/t-gcd.c	/^gcdext_valid_p (const mpz_t a, const mpz_t b, const mpz_t g, const mpz_t s)$/;"	f	file:
gcdlist	demos/calc/calc.y	/^gcdlist:$/;"	l
gen_consts	gen-fac.c	/^gen_consts (int numb, int nail, int limb)$/;"	f
generate	gen-bases.c	/^generate (int limb_bits, int nail_bits, int base)$/;"	f
generate	gen-fib.c	/^generate (int numb_bits)$/;"	f
generate_mod	gen-psqr.c	/^generate_mod (int limb_bits, int nail_bits)$/;"	f
generate_sq_res_0x100	gen-psqr.c	/^generate_sq_res_0x100 (int limb_bits)$/;"	f
get	gmp-impl.h	/^  gmp_doscan_get_t    get;$/;"	m	struct:gmp_doscan_funs_t
get	scanf/sscanffuns.c	/^get (const char **sp)$/;"	f	file:
get_d	gmpxx.h	/^  double get_d() const { return mpf_get_d(mp); }$/;"	f	class:__gmp_expr
get_d	gmpxx.h	/^  double get_d() const { return mpq_get_d(mp); }$/;"	f	class:__gmp_expr
get_d	gmpxx.h	/^  double get_d() const { return mpz_get_d(mp); }$/;"	f	class:__gmp_expr
get_den	gmpxx.h	/^  const mpz_class & get_den() const$/;"	f	class:__gmp_expr
get_den	gmpxx.h	/^  mpz_class & get_den()$/;"	f	class:__gmp_expr
get_den_mpz_t	gmpxx.h	/^  mpz_ptr get_den_mpz_t() { return mpq_denref(mp); }$/;"	f	class:__gmp_expr
get_den_mpz_t	gmpxx.h	/^  mpz_srcptr get_den_mpz_t() const { return mpq_denref(mp); }$/;"	f	class:__gmp_expr
get_dirname	ylwrap	/^get_dirname ()$/;"	f
get_f	gmpxx.h	/^  __gmp_expr<mpf_t, __gmp_urandomb_value> get_f(mp_bitcnt_t prec = 0)$/;"	f	class:gmp_randclass
get_mpf_t	gmpxx.h	/^  mpf_ptr get_mpf_t() { return mp; }$/;"	f	class:__gmp_expr
get_mpf_t	gmpxx.h	/^  mpf_srcptr get_mpf_t() const { return mp; }$/;"	f	class:__gmp_expr
get_mpq_t	gmpxx.h	/^  mpq_ptr get_mpq_t() { return mp; }$/;"	f	class:__gmp_expr
get_mpq_t	gmpxx.h	/^  mpq_srcptr get_mpq_t() const { return mp; }$/;"	f	class:__gmp_expr
get_mpz_t	gmpxx.h	/^  mpz_ptr get_mpz_t() { return mp; }$/;"	f	class:__gmp_expr
get_mpz_t	gmpxx.h	/^  mpz_srcptr get_mpz_t() const { return mp; }$/;"	f	class:__gmp_expr
get_num	gmpxx.h	/^  const mpz_class & get_num() const$/;"	f	class:__gmp_expr
get_num	gmpxx.h	/^  mpz_class & get_num()$/;"	f	class:__gmp_expr
get_num_mpz_t	gmpxx.h	/^  mpz_ptr get_num_mpz_t() { return mpq_numref(mp); }$/;"	f	class:__gmp_expr
get_num_mpz_t	gmpxx.h	/^  mpz_srcptr get_num_mpz_t() const { return mpq_numref(mp); }$/;"	f	class:__gmp_expr
get_prec	gmpxx.h	/^  mp_bitcnt_t get_prec() const { return expr.val.get_prec(); }$/;"	f	class:__gmp_expr
get_prec	gmpxx.h	/^  mp_bitcnt_t get_prec() const { return expr.val1.get_prec(); }$/;"	f	class:__gmp_expr
get_prec	gmpxx.h	/^  mp_bitcnt_t get_prec() const { return expr.val2.get_prec(); }$/;"	f	class:__gmp_expr
get_prec	gmpxx.h	/^  mp_bitcnt_t get_prec() const { return mpf_get_default_prec(); }$/;"	f	class:__gmp_expr
get_prec	gmpxx.h	/^  mp_bitcnt_t get_prec() const { return mpf_get_prec(mp); }$/;"	f	class:__gmp_expr
get_prec	gmpxx.h	/^  mp_bitcnt_t get_prec() const$/;"	f	class:__gmp_expr
get_si	gmpxx.h	/^  signed long int get_si() const { return mpf_get_si(mp); }$/;"	f	class:__gmp_expr
get_si	gmpxx.h	/^  signed long int get_si() const { return mpz_get_si(mp); }$/;"	f	class:__gmp_expr
get_str	gmpxx.h	/^  std::string get_str(int base = 10) const$/;"	f	class:__gmp_expr
get_str	gmpxx.h	/^  std::string get_str(mp_exp_t &expo, int base = 10, size_t size = 0) const$/;"	f	class:__gmp_expr
get_str_dc_threshold	tune/tuneup.c	/^mp_size_t  get_str_dc_threshold         = MP_SIZE_T_MAX;$/;"	v
get_str_precompute_threshold	tune/tuneup.c	/^mp_size_t  get_str_precompute_threshold = MP_SIZE_T_MAX;$/;"	v
get_ui	gmpxx.h	/^  unsigned long int get_ui() const { return mpf_get_ui(mp); }$/;"	f	class:__gmp_expr
get_ui	gmpxx.h	/^  unsigned long int get_ui() const { return mpz_get_ui(mp); }$/;"	f	class:__gmp_expr
get_val	gmpxx.h	/^  const val_type & get_val() const { return expr.val; }$/;"	f	class:__gmp_expr
get_val1	gmpxx.h	/^  const val1_type & get_val1() const { return expr.val1; }$/;"	f	class:__gmp_expr
get_val2	gmpxx.h	/^  const val2_type & get_val2() const { return expr.val2; }$/;"	f	class:__gmp_expr
get_z_bits	gmpxx.h	/^  __gmp_expr<mpz_t, __gmp_urandomb_value> get_z_bits(const mpz_class &z)$/;"	f	class:gmp_randclass
get_z_bits	gmpxx.h	/^  __gmp_expr<mpz_t, __gmp_urandomb_value> get_z_bits(mp_bitcnt_t l)$/;"	f	class:gmp_randclass
get_z_range	gmpxx.h	/^  __gmp_expr<mpz_t, __gmp_urandomm_value> get_z_range(const mpz_class &z)$/;"	f	class:gmp_randclass
getbit	mpn/generic/powlo.c	37;"	d	file:
getbit	mpn/generic/powm.c	110;"	d	file:
getbit	mpn/generic/sec_powm.c	143;"	d	file:
getbit	mpn/powlo.c	37;"	d	file:
getbit	mpn/powm.c	110;"	d	file:
getbit	mpn/sec_powm.c	143;"	d	file:
getbits	mpn/generic/powlo.c	/^getbits (const mp_limb_t *p, mp_bitcnt_t bi, int nbits)$/;"	f	file:
getbits	mpn/generic/powm.c	/^getbits (const mp_limb_t *p, mp_bitcnt_t bi, int nbits)$/;"	f	file:
getbits	mpn/generic/sec_powm.c	/^getbits (const mp_limb_t *p, mp_bitcnt_t bi, int nbits)$/;"	f	file:
getbits	mpn/powlo.c	/^getbits (const mp_limb_t *p, mp_bitcnt_t bi, int nbits)$/;"	f	file:
getbits	mpn/powm.c	/^getbits (const mp_limb_t *p, mp_bitcnt_t bi, int nbits)$/;"	f	file:
getbits	mpn/sec_powm.c	/^getbits (const mp_limb_t *p, mp_bitcnt_t bi, int nbits)$/;"	f	file:
getrusage	tune/time.c	350;"	d	file:
getrusage_backwards_p	tune/time.c	/^getrusage_backwards_p (void)$/;"	f
getrusage_microseconds_p	tune/time.c	/^getrusage_microseconds_p (void)$/;"	f
gettimeofday	tune/time.c	359;"	d	file:
gettimeofday_microseconds_p	tune/time.c	/^gettimeofday_microseconds_p (void)$/;"	f
gg	tests/cxx/t-ops3.cc	/^template<class U> void gg(mpz_class t, U u){$/;"	f
ggs	tests/cxx/t-ops3.cc	/^template<class U> void ggs(mpz_class t, U u){$/;"	f
give_advice	missing	/^give_advice ()$/;"	f
gmp_add_ssaaaa	mini-gmp/mini-gmp.c	98;"	d	file:
gmp_allocate_func	mini-gmp/mini-gmp.c	/^static void * (*gmp_allocate_func) (size_t) = gmp_default_alloc;$/;"	v	file:
gmp_allocated_string	gmp-impl.h	/^  gmp_allocated_string(char *arg)$/;"	f	class:gmp_allocated_string
gmp_allocated_string	gmp-impl.h	/^class gmp_allocated_string {$/;"	c
gmp_asprintf	gmp.h	531;"	d
gmp_asprintf	printf/asprintf.c	/^gmp_asprintf (char **result, const char *fmt, ...)$/;"	f
gmp_asprintf_format	printf/vasprintf.c	/^gmp_asprintf_format (struct gmp_asprintf_t *d, const char *fmt,$/;"	f	file:
gmp_asprintf_t	gmp-impl.h	/^struct gmp_asprintf_t {$/;"	s
gmp_assert_nocarry	mini-gmp/mini-gmp.c	74;"	d	file:
gmp_clz	mini-gmp/mini-gmp.c	79;"	d	file:
gmp_ctz	mini-gmp/mini-gmp.c	91;"	d	file:
gmp_default_alloc	mini-gmp/mini-gmp.c	/^gmp_default_alloc (size_t size)$/;"	f	file:
gmp_default_free	mini-gmp/mini-gmp.c	/^gmp_default_free (void *p, size_t size)$/;"	f	file:
gmp_default_realloc	mini-gmp/mini-gmp.c	/^gmp_default_realloc (void *old, size_t old_size, size_t new_size)$/;"	f	file:
gmp_detect_endian	mini-gmp/mini-gmp.c	/^gmp_detect_endian (void)$/;"	f	file:
gmp_die	mini-gmp/mini-gmp.c	/^gmp_die (const char *msg)$/;"	f	file:
gmp_div_inverse	mini-gmp/mini-gmp.c	/^struct gmp_div_inverse$/;"	s	file:
gmp_doscan_funs_t	gmp-impl.h	/^struct gmp_doscan_funs_t {$/;"	s
gmp_doscan_get_t	gmp-impl.h	/^typedef int (*gmp_doscan_get_t)   (void *);$/;"	t
gmp_doscan_params_t	scanf/doscan.c	/^struct gmp_doscan_params_t {$/;"	s	file:
gmp_doscan_scan_t	gmp-impl.h	/^typedef int (*gmp_doscan_scan_t)  (void *, const char *, ...);$/;"	t
gmp_doscan_step_t	gmp-impl.h	/^typedef void *(*gmp_doscan_step_t) (void *, int);$/;"	t
gmp_doscan_unget_t	gmp-impl.h	/^typedef int (*gmp_doscan_unget_t) (int, void *);$/;"	t
gmp_errno	errno.c	/^int gmp_errno = 0;$/;"	v
gmp_errno	gmp.h	485;"	d
gmp_fprintf	gmp.h	534;"	d
gmp_fprintf	printf/fprintf.c	/^gmp_fprintf (FILE *fp, const char *fmt, ...)$/;"	f
gmp_fprintf_memory	printf/printffuns.c	/^gmp_fprintf_memory (FILE *fp, const char *str, size_t len)$/;"	f	file:
gmp_fprintf_reps	printf/printffuns.c	/^gmp_fprintf_reps (FILE *fp, int c, int reps)$/;"	f	file:
gmp_free	mini-gmp/mini-gmp.c	322;"	d	file:
gmp_free_func	mini-gmp/mini-gmp.c	/^static void (*gmp_free_func) (void *, size_t) = gmp_default_free;$/;"	v	file:
gmp_fscanf	gmp.h	586;"	d
gmp_fscanf	scanf/fscanf.c	/^gmp_fscanf (FILE *fp, const char *fmt, ...)$/;"	f
gmp_init_primesieve	gmp-impl.h	2024;"	d
gmp_init_primesieve	nextprime.c	/^gmp_init_primesieve (gmp_primesieve_t *ps)$/;"	f
gmp_intptr_t	gmp-impl.h	/^typedef intptr_t            gmp_intptr_t;$/;"	t
gmp_intptr_t	gmp-impl.h	/^typedef size_t              gmp_intptr_t;$/;"	t
gmp_millerrabin	mini-gmp/mini-gmp.c	/^gmp_millerrabin (const mpz_t n, const mpz_t nm1, mpz_t y,$/;"	f	file:
gmp_nextprime	gmp-impl.h	2027;"	d
gmp_nextprime	nextprime.c	/^gmp_nextprime (gmp_primesieve_t *ps)$/;"	f
gmp_obstack_memory	printf/obprntffuns.c	/^gmp_obstack_memory (struct obstack *ob, const char *ptr, size_t len)$/;"	f	file:
gmp_obstack_printf	gmp.h	539;"	d
gmp_obstack_printf	printf/obprintf.c	/^gmp_obstack_printf (struct obstack *ob, const char *fmt, ...)$/;"	f
gmp_obstack_reps	printf/obprntffuns.c	/^gmp_obstack_reps (struct obstack *ob, int c, int reps)$/;"	f	file:
gmp_obstack_vprintf	gmp.h	544;"	d
gmp_obstack_vprintf	printf/obvprintf.c	/^gmp_obstack_vprintf (struct obstack *ob, const char *fmt, va_list ap)$/;"	f
gmp_pi1_t	gmp-impl.h	/^typedef struct {mp_limb_t inv32;} gmp_pi1_t;$/;"	t	typeref:struct:__anon11
gmp_pi2_t	gmp-impl.h	/^typedef struct {mp_limb_t inv21, inv32, inv53;} gmp_pi2_t;$/;"	t	typeref:struct:__anon12
gmp_popcount_limb	mini-gmp/mini-gmp.c	/^gmp_popcount_limb (mp_limb_t x)$/;"	f	file:
gmp_primes_dtab	mpn/generic/trialdiv.c	/^static const struct gmp_primes_dtab gmp_primes_dtab[] =$/;"	v	typeref:struct:gmp_primes_dtab	file:
gmp_primes_dtab	mpn/generic/trialdiv.c	/^struct gmp_primes_dtab {$/;"	s	file:
gmp_primes_dtab	mpn/trialdiv.c	/^static const struct gmp_primes_dtab gmp_primes_dtab[] =$/;"	v	typeref:struct:gmp_primes_dtab	file:
gmp_primes_dtab	mpn/trialdiv.c	/^struct gmp_primes_dtab {$/;"	s	file:
gmp_primes_ptab	mpn/generic/trialdiv.c	/^static const struct gmp_primes_ptab gmp_primes_ptab[] =$/;"	v	typeref:struct:gmp_primes_ptab	file:
gmp_primes_ptab	mpn/generic/trialdiv.c	/^struct gmp_primes_ptab {$/;"	s	file:
gmp_primes_ptab	mpn/trialdiv.c	/^static const struct gmp_primes_ptab gmp_primes_ptab[] =$/;"	v	typeref:struct:gmp_primes_ptab	file:
gmp_primes_ptab	mpn/trialdiv.c	/^struct gmp_primes_ptab {$/;"	s	file:
gmp_primesieve	gmp-impl.h	2030;"	d
gmp_primesieve	primesieve.c	/^gmp_primesieve (mp_ptr bit_array, mp_limb_t n)$/;"	f
gmp_primesieve_t	gmp-impl.h	/^} gmp_primesieve_t;$/;"	t	typeref:struct:__anon14
gmp_printf	gmp.h	549;"	d
gmp_printf	printf/printf.c	/^gmp_printf (const char *fmt, ...)$/;"	f
gmp_rand_lc_struct	rand/randlc2x.c	/^} gmp_rand_lc_struct;$/;"	t	typeref:struct:__anon27	file:
gmp_rand_mt_struct	rand/randmt.h	/^} gmp_rand_mt_struct;$/;"	t	typeref:struct:__anon26
gmp_randalg_t	gmp.h	/^} gmp_randalg_t;$/;"	t	typeref:enum:__anon7
gmp_randclass	gmpxx.h	/^  gmp_randclass(__gmp_randinit_default_t* f) { f(state); }$/;"	f	class:gmp_randclass
gmp_randclass	gmpxx.h	/^  gmp_randclass(__gmp_randinit_lc_2exp_size_t* f,$/;"	f	class:gmp_randclass
gmp_randclass	gmpxx.h	/^  gmp_randclass(__gmp_randinit_lc_2exp_t* f,$/;"	f	class:gmp_randclass
gmp_randclass	gmpxx.h	/^  gmp_randclass(gmp_randalg_t alg, unsigned long int size)$/;"	f	class:gmp_randclass
gmp_randclass	gmpxx.h	/^class gmp_randclass$/;"	c
gmp_randclear	gmp.h	519;"	d
gmp_randclear	rand/randclr.c	/^gmp_randclear (gmp_randstate_t rstate)$/;"	f
gmp_randfnptr_t	gmp-impl.h	/^} gmp_randfnptr_t;$/;"	t	typeref:struct:__anon13
gmp_randinit	gmp.h	495;"	d
gmp_randinit	rand/rand.c	/^gmp_randinit (gmp_randstate_t rstate, gmp_randalg_t alg, ...)$/;"	f
gmp_randinit_default	gmp.h	498;"	d
gmp_randinit_default	rand/randdef.c	/^gmp_randinit_default (gmp_randstate_t rstate)$/;"	f
gmp_randinit_lc_2exp	gmp.h	501;"	d
gmp_randinit_lc_2exp	rand/randlc2x.c	/^gmp_randinit_lc_2exp (gmp_randstate_t rstate,$/;"	f
gmp_randinit_lc_2exp_size	gmp.h	504;"	d
gmp_randinit_lc_2exp_size	rand/randlc2s.c	/^gmp_randinit_lc_2exp_size (gmp_randstate_t rstate, mp_bitcnt_t size)$/;"	f
gmp_randinit_mt	gmp.h	507;"	d
gmp_randinit_mt	rand/randmts.c	/^gmp_randinit_mt (gmp_randstate_t rstate)$/;"	f
gmp_randinit_set	gmp.h	510;"	d
gmp_randinit_set	rand/randiset.c	/^gmp_randinit_set (gmp_randstate_ptr dst, gmp_randstate_srcptr src)$/;"	f
gmp_randseed	gmp.h	513;"	d
gmp_randseed	rand/randsd.c	/^gmp_randseed (gmp_randstate_t rstate,$/;"	f
gmp_randseed_ui	gmp.h	516;"	d
gmp_randseed_ui	rand/randsdui.c	/^gmp_randseed_ui (gmp_randstate_t rstate,$/;"	f
gmp_randstate_ptr	gmp-impl.h	/^typedef __gmp_randstate_struct *gmp_randstate_ptr;$/;"	t
gmp_randstate_srcptr	gmp-impl.h	/^typedef const __gmp_randstate_struct *gmp_randstate_srcptr;$/;"	t
gmp_randstate_t	gmp.h	/^typedef __gmp_randstate_struct gmp_randstate_t[1];$/;"	t
gmp_reallocate_func	mini-gmp/mini-gmp.c	/^static void * (*gmp_reallocate_func) (void *, size_t, size_t) = gmp_default_realloc;$/;"	v	file:
gmp_rrandomb	mpn/generic/random2.c	/^gmp_rrandomb (mp_ptr rp, gmp_randstate_t rstate, mp_bitcnt_t nbits)$/;"	f	file:
gmp_rrandomb	mpn/random2.c	/^gmp_rrandomb (mp_ptr rp, gmp_randstate_t rstate, mp_bitcnt_t nbits)$/;"	f	file:
gmp_rrandomb	mpz/rrandomb.c	/^gmp_rrandomb (mp_ptr rp, gmp_randstate_t rstate, mp_bitcnt_t nbits)$/;"	f	file:
gmp_scanf	gmp.h	591;"	d
gmp_scanf	scanf/scanf.c	/^gmp_scanf (const char *fmt, ...)$/;"	f
gmp_snprintf	gmp.h	552;"	d
gmp_snprintf	printf/snprintf.c	/^gmp_snprintf (char *buf, size_t size, const char *fmt, ...)$/;"	f
gmp_snprintf_final	printf/snprntffuns.c	/^gmp_snprintf_final (struct gmp_snprintf_t *d)$/;"	f	file:
gmp_snprintf_format	printf/snprntffuns.c	/^gmp_snprintf_format (struct gmp_snprintf_t *d, const char *fmt,$/;"	f	file:
gmp_snprintf_memory	printf/snprntffuns.c	/^gmp_snprintf_memory (struct gmp_snprintf_t *d, const char *str, size_t len)$/;"	f	file:
gmp_snprintf_reps	printf/snprntffuns.c	/^gmp_snprintf_reps (struct gmp_snprintf_t *d, int c, int reps)$/;"	f	file:
gmp_snprintf_t	gmp-impl.h	/^struct gmp_snprintf_t {$/;"	s
gmp_sprintf	gmp.h	555;"	d
gmp_sprintf	printf/sprintf.c	/^gmp_sprintf (char *buf, const char *fmt, ...)$/;"	f
gmp_sprintf_final	printf/sprintffuns.c	/^gmp_sprintf_final (char **bufp)$/;"	f	file:
gmp_sprintf_format	printf/sprintffuns.c	/^gmp_sprintf_format (char **bufp, const char *fmt, va_list ap)$/;"	f	file:
gmp_sprintf_memory	printf/sprintffuns.c	/^gmp_sprintf_memory (char **bufp, const char *str, size_t len)$/;"	f	file:
gmp_sprintf_reps	printf/sprintffuns.c	/^gmp_sprintf_reps (char **bufp, int c, int reps)$/;"	f	file:
gmp_sscanf	gmp.h	594;"	d
gmp_sscanf	scanf/sscanf.c	/^gmp_sscanf (const char *s, const char *fmt, ...)$/;"	f
gmp_sub_ddmmss	mini-gmp/mini-gmp.c	106;"	d	file:
gmp_udiv_qr_3by2	mini-gmp/mini-gmp.c	158;"	d	file:
gmp_udiv_qrnnd_preinv	mini-gmp/mini-gmp.c	139;"	d	file:
gmp_uint_least32_t	gmp-impl.h	/^typedef uint_least32_t      gmp_uint_least32_t;$/;"	t
gmp_uint_least32_t	gmp-impl.h	/^typedef unsigned            gmp_uint_least32_t;$/;"	t
gmp_uint_least32_t	gmp-impl.h	/^typedef unsigned long       gmp_uint_least32_t;$/;"	t
gmp_uint_least32_t	gmp-impl.h	/^typedef unsigned short      gmp_uint_least32_t;$/;"	t
gmp_umul_ppmm	mini-gmp/mini-gmp.c	114;"	d	file:
gmp_urandomb_ui	gmp.h	522;"	d
gmp_urandomb_ui	rand/randbui.c	/^gmp_urandomb_ui (gmp_randstate_ptr rstate, unsigned long bits)$/;"	f
gmp_urandomm_ui	gmp.h	525;"	d
gmp_urandomm_ui	rand/randmui.c	/^gmp_urandomm_ui (gmp_randstate_ptr rstate, unsigned long n)$/;"	f
gmp_vasprintf	gmp.h	558;"	d
gmp_vasprintf	printf/vasprintf.c	/^gmp_vasprintf (char **result, const char *fmt, va_list ap)$/;"	f
gmp_version	gmp.h	488;"	d
gmp_version	version.c	/^const char * const gmp_version = VERSION;$/;"	v
gmp_vfprintf	gmp.h	563;"	d
gmp_vfprintf	printf/vfprintf.c	/^gmp_vfprintf (FILE *fp, const char *fmt, va_list ap)$/;"	f
gmp_vfscanf	gmp.h	597;"	d
gmp_vfscanf	scanf/vfscanf.c	/^gmp_vfscanf (FILE *fp, const char *fmt, va_list ap)$/;"	f
gmp_vprintf	gmp.h	568;"	d
gmp_vprintf	printf/vprintf.c	/^gmp_vprintf (const char *fmt, va_list ap)$/;"	f
gmp_vscanf	gmp.h	602;"	d
gmp_vscanf	scanf/vscanf.c	/^gmp_vscanf (const char *fmt, va_list ap)$/;"	f
gmp_vsnprintf	gmp.h	573;"	d
gmp_vsnprintf	printf/vsnprintf.c	/^gmp_vsnprintf (char *buf, size_t size, const char *fmt, va_list ap)$/;"	f
gmp_vsprintf	gmp.h	578;"	d
gmp_vsprintf	printf/vsprintf.c	/^gmp_vsprintf (char *buf, const char *fmt, va_list ap)$/;"	f
gmp_vsscanf	gmp.h	607;"	d
gmp_vsscanf	scanf/vsscanf.c	/^gmp_vsscanf (const char *s, const char *fmt, va_list ap)$/;"	f
gmp_workaround_skylake_cpuid_bug	config.guess	/^gmp_workaround_skylake_cpuid_bug ()$/;"	f
gmp_workaround_skylake_cpuid_bug	mpn/x86_64/fat/fat.c	/^gmp_workaround_skylake_cpuid_bug ()$/;"	f	file:
gmp_xalloc	mini-gmp/mini-gmp.c	321;"	d	file:
gmp_xalloc_limbs	mini-gmp/mini-gmp.c	/^gmp_xalloc_limbs (mp_size_t size)$/;"	f	file:
gmp_xrealloc_limbs	mini-gmp/mini-gmp.c	/^gmp_xrealloc_limbs (mp_ptr old, mp_size_t size)$/;"	f	file:
gmpasm	mpn/lisp/gmpasm-mode.el	/^(defgroup gmpasm nil$/;"	f
gmpasm-add-to-list-second	mpn/lisp/gmpasm-mode.el	/^(defun gmpasm-add-to-list-second (list-var element)$/;"	f
gmpasm-comment-region-dnl	mpn/lisp/gmpasm-mode.el	/^(defun gmpasm-comment-region-dnl (beg end &optional arg)$/;"	f
gmpasm-comment-start-regexp	mpn/lisp/gmpasm-mode.el	/^(defcustom gmpasm-comment-start-regexp "\\\\([#;!@*|C]\\\\|\/\/\\\\)"$/;"	f
gmpasm-filladapt-token-conversion-table	mpn/lisp/gmpasm-mode.el	/^(defvar gmpasm-filladapt-token-conversion-table nil$/;"	f
gmpasm-filladapt-token-match-table	mpn/lisp/gmpasm-mode.el	/^(defvar gmpasm-filladapt-token-match-table nil$/;"	f
gmpasm-filladapt-token-table	mpn/lisp/gmpasm-mode.el	/^(defvar gmpasm-filladapt-token-table nil$/;"	f
gmpasm-font-lock-keywords	mpn/lisp/gmpasm-mode.el	/^(defvar gmpasm-font-lock-keywords$/;"	f
gmpasm-mode	mpn/lisp/gmpasm-mode.el	/^(defun gmpasm-mode ()$/;"	f
gmpasm-mode-hook	mpn/lisp/gmpasm-mode.el	/^(defcustom gmpasm-mode-hook nil$/;"	f
gmpasm-mode-map	mpn/lisp/gmpasm-mode.el	/^(defvar gmpasm-mode-map$/;"	f
gmpasm-mode-syntax-table	mpn/lisp/gmpasm-mode.el	/^(defvar gmpasm-mode-syntax-table$/;"	f
gmpasm-remove-from-list	mpn/lisp/gmpasm-mode.el	/^(defun gmpasm-remove-from-list (list-var element)$/;"	f
gmpn_mulww	mpn/cray/mulww.f	/^      subroutine gmpn_mulww(/;"	s
gmpscan	scanf/doscan.c	/^gmpscan (const struct gmp_doscan_funs_t *funs, void *data,$/;"	f	file:
gn	gmp-impl.h	/^  mp_size_t gn;$/;"	m	struct:gcdext_ctx
gn	mpn/gcd.c	/^  mp_size_t gn;$/;"	m	struct:gcd_ctx	file:
gn	mpn/generic/gcd.c	/^  mp_size_t gn;$/;"	m	struct:gcd_ctx	file:
got	tests/mpz/t-mul_i.c	/^mpz_t got, want, x;$/;"	v
got_ftell	tests/misc/t-scanf.c	/^long  got_ftell;$/;"	v
gp	gmp-impl.h	/^  mp_ptr gp;$/;"	m	struct:gcdext_ctx
gp	mpn/gcd.c	/^  mp_ptr gp;$/;"	m	struct:gcd_ctx	file:
gp	mpn/generic/gcd.c	/^  mp_ptr gp;$/;"	m	struct:gcd_ctx	file:
gp	tune/tune-gcd-p.c	/^  mp_ptr gp;$/;"	m	struct:bench_data	file:
grus_tick_boundary	tune/time.c	/^grus_tick_boundary (void)$/;"	f
grus_unittime	tune/time.c	/^static double  grus_unittime;$/;"	v	file:
gtod_tick_boundary	tune/time.c	/^gtod_tick_boundary (void)$/;"	f
gtod_unittime	tune/time.c	/^static double  gtod_unittime;$/;"	v	file:
guard	ylwrap	/^guard ()$/;"	f
h	tests/cxx/t-ops3.cc	/^template<class T> void h(T t){$/;"	f
has_denorm	gmpxx.h	/^    static const float_denorm_style has_denorm = denorm_absent;$/;"	m	class:std::numeric_limits
has_denorm_loss	gmpxx.h	/^    static const bool has_denorm_loss = false;$/;"	m	class:std::numeric_limits
has_infinity	gmpxx.h	/^    static const bool has_infinity = false;$/;"	m	class:std::numeric_limits
has_quiet_NaN	gmpxx.h	/^    static const bool has_quiet_NaN = false;$/;"	m	class:std::numeric_limits
has_signaling_NaN	gmpxx.h	/^    static const bool has_signaling_NaN = false;$/;"	m	class:std::numeric_limits
have_cgt	tune/time.c	/^static const int have_cgt = 0;$/;"	v	file:
have_cgt	tune/time.c	/^static const int have_cgt = 1;$/;"	v	file:
have_cgt_id	tune/time.c	/^const int  have_cgt_id = 0;$/;"	v
have_cgt_id	tune/time.c	/^const int  have_cgt_id = 1;$/;"	v
have_cycles	tune/time.c	/^static const int have_cycles = 0;$/;"	v	file:
have_cycles	tune/time.c	/^static const int have_cycles = HAVE_SPEED_CYCLECOUNTER;$/;"	v	file:
have_grus	tune/time.c	/^static const int have_grus = 0;$/;"	v	file:
have_grus	tune/time.c	/^static const int have_grus = 1;$/;"	v	file:
have_gtod	tune/time.c	/^static const int have_gtod = 0;$/;"	v	file:
have_gtod	tune/time.c	/^static const int have_gtod = 1;$/;"	v	file:
have_mftb	tune/time.c	/^static const int  have_mftb = 0;$/;"	v	file:
have_mftb	tune/time.c	/^static const int  have_mftb = 1;$/;"	v	file:
have_rrt	tune/time.c	/^static const int have_rrt = 0;$/;"	v	file:
have_rrt	tune/time.c	/^static const int have_rrt = 1;$/;"	v	file:
have_sgi	tune/time.c	/^static const int  have_sgi = 0;$/;"	v	file:
have_sgi	tune/time.c	/^static const int  have_sgi = 1;$/;"	v	file:
have_stck	tune/time.c	/^static const int  have_stck = 0;$/;"	v	file:
have_stck	tune/time.c	/^static const int  have_stck = 1;$/;"	v	file:
have_times	tune/time.c	/^static const int have_times = 0;$/;"	v	file:
have_times	tune/time.c	/^static const int have_times = 1;$/;"	v	file:
header	gen-bases.c	/^header (int limb_bits, int nail_bits)$/;"	f
header	gen-fib.c	/^header (int numb_bits)$/;"	f
header	tests/memory.c	/^struct header {$/;"	s	file:
hex_or_octal_p	tests/misc/t-printf.c	317;"	d	file:
hex_random_bit_op	mini-gmp/tests/hex-random.c	/^hex_random_bit_op (enum hex_random_op op, unsigned long maxbits,$/;"	f
hex_random_init	mini-gmp/tests/hex-random.c	/^hex_random_init (void)$/;"	f
hex_random_op	mini-gmp/tests/hex-random.h	/^enum hex_random_op$/;"	g
hex_random_op2	mini-gmp/tests/hex-random.c	/^void hex_random_op2 (enum hex_random_op op,  unsigned long maxbits,$/;"	f
hex_random_op3	mini-gmp/tests/hex-random.c	/^hex_random_op3 (enum hex_random_op op,  unsigned long maxbits,$/;"	f
hex_random_op4	mini-gmp/tests/hex-random.c	/^hex_random_op4 (enum hex_random_op op, unsigned long maxbits,$/;"	f
hex_random_scan_op	mini-gmp/tests/hex-random.c	/^hex_random_scan_op (enum hex_random_op op, unsigned long maxbits,$/;"	f
hex_random_str_op	mini-gmp/tests/hex-random.c	/^hex_random_str_op (unsigned long maxbits,$/;"	f
hex_rrandomb	mini-gmp/tests/hex-random.c	/^hex_rrandomb (unsigned long bits)$/;"	f
hex_rrandomb_export	mini-gmp/tests/hex-random.c	/^hex_rrandomb_export (void *dst, size_t *countp,$/;"	f
hex_urandomb	mini-gmp/tests/hex-random.c	/^hex_urandomb (unsigned long bits)$/;"	f
hexdump	tests/mpf/t-eq.c	/^hexdump (mpf_t x)$/;"	f
hgcd_appr_threshold	tune/tuneup.c	/^mp_size_t  hgcd_appr_threshold          = MP_SIZE_T_MAX;$/;"	v
hgcd_appr_valid_p	tests/mpn/t-hgcd_appr.c	/^hgcd_appr_valid_p (mpz_t a, mpz_t b, mp_size_t res0,$/;"	f	file:
hgcd_hook	mpn/generic/hgcd_step.c	/^hgcd_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f	file:
hgcd_hook	mpn/hgcd_step.c	/^hgcd_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f	file:
hgcd_jacobi_ctx	mpn/generic/hgcd_jacobi.c	/^struct hgcd_jacobi_ctx$/;"	s	file:
hgcd_jacobi_ctx	mpn/hgcd_jacobi.c	/^struct hgcd_jacobi_ctx$/;"	s	file:
hgcd_jacobi_hook	mpn/generic/hgcd_jacobi.c	/^hgcd_jacobi_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f	file:
hgcd_jacobi_hook	mpn/hgcd_jacobi.c	/^hgcd_jacobi_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f	file:
hgcd_jacobi_step	mpn/generic/hgcd_jacobi.c	/^hgcd_jacobi_step (mp_size_t n, mp_ptr ap, mp_ptr bp, mp_size_t s,$/;"	f	file:
hgcd_jacobi_step	mpn/hgcd_jacobi.c	/^hgcd_jacobi_step (mp_size_t n, mp_ptr ap, mp_ptr bp, mp_size_t s,$/;"	f	file:
hgcd_matrix	gmp-impl.h	/^struct hgcd_matrix$/;"	s
hgcd_matrix1	gmp-impl.h	/^struct hgcd_matrix1$/;"	s
hgcd_matrix_apply	mpn/generic/hgcd_reduce.c	/^hgcd_matrix_apply (const struct hgcd_matrix *M,$/;"	f	file:
hgcd_matrix_apply	mpn/hgcd_reduce.c	/^hgcd_matrix_apply (const struct hgcd_matrix *M,$/;"	f	file:
hgcd_mul_matrix_vector	mpn/gcdext.c	/^hgcd_mul_matrix_vector (struct hgcd_matrix *M,$/;"	f	file:
hgcd_mul_matrix_vector	mpn/generic/gcdext.c	/^hgcd_mul_matrix_vector (struct hgcd_matrix *M,$/;"	f	file:
hgcd_reduce_threshold	tune/tuneup.c	/^mp_size_t  hgcd_reduce_threshold        = MP_SIZE_T_MAX;$/;"	v
hgcd_ref	tests/mpn/t-hgcd.c	/^hgcd_ref (struct hgcd_ref *hgcd, mpz_t a, mpz_t b)$/;"	f	file:
hgcd_ref	tests/mpn/t-hgcd.c	/^struct hgcd_ref$/;"	s	file:
hgcd_ref	tests/mpn/t-hgcd_appr.c	/^hgcd_ref (struct hgcd_ref *hgcd, mpz_t a, mpz_t b)$/;"	f	file:
hgcd_ref	tests/mpn/t-hgcd_appr.c	/^struct hgcd_ref$/;"	s	file:
hgcd_ref_clear	tests/mpn/t-hgcd.c	/^hgcd_ref_clear (struct hgcd_ref *hgcd)$/;"	f	file:
hgcd_ref_clear	tests/mpn/t-hgcd_appr.c	/^hgcd_ref_clear (struct hgcd_ref *hgcd)$/;"	f	file:
hgcd_ref_equal	tests/mpn/t-hgcd.c	/^hgcd_ref_equal (const struct hgcd_matrix *hgcd, const struct hgcd_ref *ref)$/;"	f	file:
hgcd_ref_equal	tests/mpn/t-hgcd_appr.c	/^hgcd_ref_equal (const struct hgcd_ref *A, const struct hgcd_ref *B)$/;"	f	file:
hgcd_ref_init	tests/mpn/t-hgcd.c	/^hgcd_ref_init (struct hgcd_ref *hgcd)$/;"	f	file:
hgcd_ref_init	tests/mpn/t-hgcd_appr.c	/^hgcd_ref_init (struct hgcd_ref *hgcd)$/;"	f	file:
hgcd_threshold	tune/tuneup.c	/^mp_size_t  hgcd_threshold               = MP_SIZE_T_MAX;$/;"	v
hgcd_values	tests/mpn/t-hgcd.c	/^static const struct value hgcd_values[] = {$/;"	v	typeref:struct:value	file:
high	tests/devel/try.c	/^  int        high;$/;"	m	struct:dest_t	file:
high	tests/devel/try.c	/^  int        high;$/;"	m	struct:source_t	file:
ibase	demos/calc/calc.c	/^int  ibase = 0;$/;"	v
id_to_n	mpz/bin_uiui.c	/^id_to_n  (mp_limb_t id)  { return id*3+1+(id&1); }$/;"	f	file:
id_to_n	mpz/oddfac_1.c	/^id_to_n  (mp_limb_t id)  { return id*3+1+(id&1); }$/;"	f	file:
id_to_n	mpz/primorial_ui.c	/^id_to_n  (mp_limb_t id)  { return id*3+1+(id&1); }$/;"	f	file:
id_to_n	primesieve.c	/^id_to_n  (mp_limb_t id)  { return id*3+1+(id&1); }$/;"	f	file:
idx	mpn/generic/trialdiv.c	/^  gmp_uint_least32_t idx:24;	\/* index of  first primes in dtab *\/$/;"	m	struct:gmp_primes_ptab	file:
idx	mpn/trialdiv.c	/^  gmp_uint_least32_t idx:24;	\/* index of  first primes in dtab *\/$/;"	m	struct:gmp_primes_ptab	file:
ieee_double_extract	gmp-impl.h	/^union ieee_double_extract$/;"	u
ignore	scanf/doscan.c	/^  int	ignore;$/;"	m	struct:gmp_doscan_params_t	file:
import	demos/perl/GMP/Mpf.pm	/^sub import {$/;"	s
import	demos/perl/GMP/Mpq.pm	/^sub import {$/;"	s
import	demos/perl/GMP/Mpz.pm	/^sub import {$/;"	s
imul	mpn/x86_64/core2/divrem_1.asm	/^	imul	d, %rdx$/;"	d
imul	mpn/x86_64/div_qr_1n_pi1.asm	/^	imul	D, %rdx$/;"	d
imul	mpn/x86_64/divrem_1.asm	/^	imul	d, %rdx			C	      6     11     11     23$/;"	d
imul	mpn/x86_64/divrem_1.asm	/^	imul	d, %rdx$/;"	d
imul	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^	imul	D, %rdx$/;"	d
infinity	gmpxx.h	/^    static mpf_class infinity() { return mpf_class(); }$/;"	f	class:std::numeric_limits
infinity	gmpxx.h	/^    static mpq_class infinity() { return mpq_class(); }$/;"	f	class:std::numeric_limits
infinity	gmpxx.h	/^    static mpz_class infinity() { return mpz_class(); }$/;"	f	class:std::numeric_limits
init_d	gmpxx.h	/^  void init_d (double d)	{ mpf_init_set_d (mp, d); }$/;"	f	class:__gmp_expr
init_d	gmpxx.h	/^  void init_d (double d)	{ mpq_init(mp); assign_d (d); }$/;"	f	class:__gmp_expr
init_d	gmpxx.h	/^  void init_d (double d)$/;"	f	class:__gmp_expr
init_si	gmpxx.h	/^  void init_si(signed long l)	{ mpq_init(mp); get_num() = l; }$/;"	f	class:__gmp_expr
init_si	gmpxx.h	/^  void init_si(signed long l)$/;"	f	class:__gmp_expr
init_ui	gmpxx.h	/^  void init_ui(unsigned long l)	{ mpq_init(mp); get_num() = l; }$/;"	f	class:__gmp_expr
init_ui	gmpxx.h	/^  void init_ui(unsigned long l)$/;"	f	class:__gmp_expr
initial_cpuvec	tests/mpn/t-fat.c	/^struct cpuvec_t  initial_cpuvec;$/;"	v	typeref:struct:cpuvec_t
input	demos/calc/calcread.c	/^input (void)$/;"	f
insert_random_low_zero_limbs	tests/mpf/t-eq.c	/^insert_random_low_zero_limbs (mpf_t x, gmp_randstate_ptr rands)$/;"	f
int_max_def	tests/t-constants.c	/^const char *int_max_def = "defined";$/;"	v
int_max_def	tests/t-constants.c	/^const char *int_max_def = "not defined";$/;"	v
inv21	gmp-impl.h	/^typedef struct {mp_limb_t inv21, inv32, inv53;} gmp_pi2_t;$/;"	m	struct:__anon12
inv32	gmp-impl.h	/^typedef struct {mp_limb_t inv21, inv32, inv53;} gmp_pi2_t;$/;"	m	struct:__anon12
inv32	gmp-impl.h	/^typedef struct {mp_limb_t inv32;} gmp_pi1_t;$/;"	m	struct:__anon11
inv53	gmp-impl.h	/^typedef struct {mp_limb_t inv21, inv32, inv53;} gmp_pi2_t;$/;"	m	struct:__anon12
inv_appr_threshold	tune/tuneup.c	/^mp_size_t  inv_appr_threshold           = MP_SIZE_T_MAX;$/;"	v
inv_mulmod_bnm1_threshold	tune/tuneup.c	/^mp_size_t  inv_mulmod_bnm1_threshold    = MP_SIZE_T_MAX;$/;"	v
inv_newton_threshold	tune/tuneup.c	/^mp_size_t  inv_newton_threshold         = MP_SIZE_T_MAX;$/;"	v
inverse	gen-psqr.c	/^  mpz_t   inverse;   \/* 1\/divisor mod 2^mod_bits *\/$/;"	m	struct:factor_t	file:
invert_4by2	mpn/div_qr_2.c	/^invert_4by2 (mp_ptr di, mp_limb_t d1, mp_limb_t d0)$/;"	f	file:
invert_4by2	mpn/generic/div_qr_2.c	/^invert_4by2 (mp_ptr di, mp_limb_t d1, mp_limb_t d0)$/;"	f	file:
invert_half_limb	mpn/sparc64/sparc64.h	179;"	d
invert_limb	gmp-impl.h	3002;"	d
invert_limb	gmp-impl.h	3009;"	d
invert_pi1	gmp-impl.h	3017;"	d
invert_valid	tests/mpn/t-invert.c	/^invert_valid (mp_srcptr ip, mp_srcptr dp, mp_size_t n)$/;"	f	file:
invsqrttab	mpn/generic/sqrtrem.c	/^static const unsigned char invsqrttab[384] = \/* The common 0x100 was removed *\/$/;"	v	file:
invsqrttab	mpn/sqrtrem.c	/^static const unsigned char invsqrttab[384] = \/* The common 0x100 was removed *\/$/;"	v	file:
ip	mpn/generic/mu_bdiv_q.c	184;"	d	file:
ip	mpn/generic/mu_bdiv_q.c	194;"	d	file:
ip	mpn/generic/mu_bdiv_q.c	222;"	d	file:
ip	mpn/generic/mu_bdiv_q.c	92;"	d	file:
ip	mpn/generic/mu_bdiv_qr.c	178;"	d	file:
ip	mpn/generic/mu_bdiv_qr.c	187;"	d	file:
ip	mpn/generic/mu_bdiv_qr.c	240;"	d	file:
ip	mpn/generic/mu_bdiv_qr.c	92;"	d	file:
ip	mpn/mu_bdiv_q.c	184;"	d	file:
ip	mpn/mu_bdiv_q.c	194;"	d	file:
ip	mpn/mu_bdiv_q.c	222;"	d	file:
ip	mpn/mu_bdiv_q.c	92;"	d	file:
ip	mpn/mu_bdiv_qr.c	178;"	d	file:
ip	mpn/mu_bdiv_qr.c	187;"	d	file:
ip	mpn/mu_bdiv_qr.c	240;"	d	file:
ip	mpn/mu_bdiv_qr.c	92;"	d	file:
is_bounded	gmpxx.h	/^    static const bool is_bounded = false;$/;"	m	class:std::numeric_limits
is_exact	gmpxx.h	/^    static const bool is_exact = false;$/;"	m	class:std::numeric_limits
is_exact	gmpxx.h	/^    static const bool is_exact = true;$/;"	m	class:std::numeric_limits
is_iec559	gmpxx.h	/^    static const bool is_iec559 = false;$/;"	m	class:std::numeric_limits
is_integer	gmpxx.h	/^    static const bool is_integer = false;$/;"	m	class:std::numeric_limits
is_integer	gmpxx.h	/^    static const bool is_integer = true;$/;"	m	class:std::numeric_limits
is_kth_power	mpn/generic/perfpow.c	/^is_kth_power (mp_ptr rp, mp_srcptr np,$/;"	f	file:
is_kth_power	mpn/perfpow.c	/^is_kth_power (mp_ptr rp, mp_srcptr np,$/;"	f	file:
is_modulo	gmpxx.h	/^    static const bool is_modulo = false;$/;"	m	class:std::numeric_limits
is_signed	gmpxx.h	/^    static const bool is_signed = true;$/;"	m	class:std::numeric_limits
is_specialized	gmpxx.h	/^    static const bool is_specialized = true;$/;"	m	class:std::numeric_limits
isasciicsym	demos/expr/expr-impl.h	37;"	d
isasciidigit	demos/expr/expr-impl.h	36;"	d
isasciidigit_in_base	demos/expr/expr-impl.h	39;"	d
isasciispace	demos/expr/expr.c	145;"	d	file:
isdivision	tests/mpz/reuse.c	/^  int isdivision;$/;"	m	struct:__anon31	file:
isprime	bootstrap.c	/^isprime (unsigned long int t)$/;"	f
isprime	mini-gmp/tests/t-pprime_p.c	/^isprime (unsigned long int t)$/;"	f	file:
isprime	mpz/pprime_p.c	/^isprime (unsigned long int t)$/;"	f	file:
isprime	tests/mpz/t-pprime_p.c	/^isprime (long n)$/;"	f
isprime	tests/mpz/t-primorial_ui.c	/^isprime (unsigned long int t)$/;"	f	file:
isqrt	tests/mpn/t-mul.c	/^isqrt (unsigned t)$/;"	f	file:
isslow	tests/mpz/reuse.c	/^  int isslow;$/;"	m	struct:__anon31	file:
isslow	tests/mpz/reuse.c	/^  int isslow;$/;"	m	struct:__anon34	file:
isslow	tests/mpz/reuse.c	/^  int isslow;$/;"	m	struct:__anon35	file:
istringstream	tests/tests.h	/^  istringstream (const char *s) : istrstream (s) { };$/;"	f	class:istringstream
istringstream	tests/tests.h	/^istringstream : public std::istrstream {$/;"	c
jacobi_hook	mpn/generic/jacobi.c	/^jacobi_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f	file:
jacobi_hook	mpn/jacobi.c	/^jacobi_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f	file:
jacobi_table	gmp-impl.h	4072;"	d
jacobi_table	mpn/generic/jacobi.c	/^const unsigned char jacobi_table[208] = {$/;"	v
jacobi_table	mpn/jacobi.c	/^const unsigned char jacobi_table[208] = {$/;"	v
justify	gmp-impl.h	/^  int         justify;       \/* choices above *\/$/;"	m	struct:doprnt_params_t
k	gmp-impl.h	/^  gmp_uint_least32_t k:5;$/;"	m	struct:fft_table_nk
ks	tests/rand/statlib.c	/^ks (mpf_t Kp,$/;"	f
ks_table	tests/rand/statlib.c	/^ks_table (mpf_t p, mpf_t val, const unsigned int n)$/;"	f
ktable	tests/mpz/t-jac.c	/^static const unsigned long  ktable[] = {$/;"	v	file:
l	gmp-impl.h	/^  mp_limb_t  l;$/;"	m	union:tmp_align_t
large_prec	tests/cxx/t-prec.cc	/^small_prec = 64, medium_prec = 128, large_prec = 192, very_large_prec = 256;$/;"	v
lc	rand/randlc2x.c	/^lc (mp_ptr rp, gmp_randstate_t rstate)$/;"	f	file:
lcmlist	demos/calc/calc.y	/^lcmlist:$/;"	l
ldr	mpn/arm/v6t2/divrem_1.asm	/^	ldr	d,    [sp, #9*4+d_arg]$/;"	d
ldr	mpn/arm/v6t2/divrem_1.asm	/^	ldr	d, [sp, #9*4+d_arg]	C d$/;"	d
len	gmp-impl.h	/^  size_t len;$/;"	m	class:gmp_allocated_string
lhs	demos/pexpr.c	/^    struct {struct expr *lhs, *rhs;} ops;$/;"	m	struct:expr::__anon1::__anon2	typeref:struct:expr::__anon1::__anon2::expr	file:
libc_scanf_convert	tests/misc/t-scanf.c	/^libc_scanf_convert (char *fmt)$/;"	f
libtool_options_prep	ltmain.sh	/^libtool_options_prep ()$/;"	f
libtool_parse_options	ltmain.sh	/^libtool_parse_options ()$/;"	f
libtool_validate_options	ltmain.sh	/^libtool_validate_options ()$/;"	f
lim	mpn/generic/trialdiv.c	/^  mp_limb_t lim;$/;"	m	struct:gmp_primes_dtab	file:
lim	mpn/trialdiv.c	/^  mp_limb_t lim;$/;"	m	struct:gmp_primes_dtab	file:
limb_apprsqrt	mpz/bin_uiui.c	/^limb_apprsqrt (mp_limb_t x)$/;"	f	file:
limb_apprsqrt	mpz/oddfac_1.c	/^limb_apprsqrt (mp_limb_t x)$/;"	f	file:
limb_bits	gen-trialdivtab.c	/^int limb_bits;$/;"	v
line	gmp-impl.h	/^  int                       line;$/;"	m	struct:tmp_debug_t
list	gmp-impl.h	/^  struct tmp_debug_entry_t  *list;$/;"	m	struct:tmp_debug_t	typeref:struct:tmp_debug_t::tmp_debug_entry_t
list_f	demos/expr/t-expr.c	/^struct datalist_t  list_f[] = {$/;"	v	typeref:struct:datalist_t
list_q	demos/expr/t-expr.c	/^struct datalist_t  list_q[] = {$/;"	v	typeref:struct:datalist_t
list_z	demos/expr/t-expr.c	/^struct datalist_t  list_z[] = {$/;"	v	typeref:struct:datalist_t
log2_ceil	bootstrap.c	/^log2_ceil (int n)$/;"	f
log2b	gmp-impl.h	/^  mp_limb_t log2b;$/;"	m	struct:bases
log_n_max	gmp-impl.h	/^log_n_max (mp_limb_t n)$/;"	f
logb2	gmp-impl.h	/^  mp_limb_t logb2;$/;"	m	struct:bases
logbased_root	mpn/generic/rootrem.c	/^logbased_root (mp_ptr rootp, mp_limb_t op, mp_bitcnt_t bitn, mp_limb_t k)$/;"	f	file:
logbased_root	mpn/rootrem.c	/^logbased_root (mp_ptr rootp, mp_limb_t op, mp_bitcnt_t bitn, mp_limb_t k)$/;"	f	file:
logs	mpn/generic/perfpow.c	/^static const double logs[] =$/;"	v	file:
logs	mpn/perfpow.c	/^static const double logs[] =$/;"	v	file:
long_max_def	tests/t-constants.c	/^const char *long_max_def = "defined";$/;"	v
long_max_def	tests/t-constants.c	/^const char *long_max_def = "not defined";$/;"	v
lookahead	demos/expr/expr.c	/^lookahead (struct mpexpr_parse_t *p, int prefix)$/;"	f	file:
lowest	gmpxx.h	/^    static mpf_class lowest() { return mpf_class(); }$/;"	f	class:std::numeric_limits
lowest	gmpxx.h	/^    static mpq_class lowest() { return mpq_class(); }$/;"	f	class:std::numeric_limits
lowest	gmpxx.h	/^    static mpz_class lowest() { return mpz_class(); }$/;"	f	class:std::numeric_limits
lshift_make	tests/refmpn.c	/^lshift_make (mp_limb_t hi, mp_limb_t lo, unsigned shift)$/;"	f
luc_limit	gen-fib.c	/^int    fnum, fib_limit, luc_limit;$/;"	v
m	tests/mpn/t-hgcd.c	/^  mpz_t m[2][2];$/;"	m	struct:hgcd_ref	file:
m	tests/mpn/t-hgcd_appr.c	/^  mpz_t m[2][2];$/;"	m	struct:hgcd_ref	file:
m1hp	mpn/generic/sec_invert.c	177;"	d	file:
m1hp	mpn/generic/sec_invert.c	93;"	d	file:
m1hp	mpn/sec_invert.c	177;"	d	file:
m1hp	mpn/sec_invert.c	93;"	d	file:
m2exp	rand/randlc2s.c	/^  unsigned long int m2exp;	\/* Modulus is 2 ^ m2exp. *\/$/;"	m	struct:__gmp_rand_lc_scheme_struct	file:
main	config.guess	/^main ()$/;"	f
main	configfsf.guess	/^		main()$/;"	f
main	configfsf.guess	/^	main ()$/;"	f
main	demos/calc/calc.c	/^main (int argc, char *argv[])$/;"	f
main	demos/calc/calclex.c	/^int main()$/;"	f
main	demos/expr/run-expr.c	/^main (int argc, char *argv[])$/;"	f
main	demos/expr/t-expr.c	/^main (int argc, char *argv[])$/;"	f
main	demos/factorize.c	/^main (int argc, char *argv[])$/;"	f
main	demos/isprime.c	/^main (int argc, char **argv)$/;"	f
main	demos/perl/test.pl	/^package main;$/;"	p
main	demos/pexpr.c	/^main (int argc, char **argv)$/;"	f
main	demos/primes.c	/^main (int argc, char *argv[])$/;"	f
main	demos/qcn.c	/^main (int argc, char *argv[])$/;"	f
main	gen-bases.c	/^main (int argc, char **argv)$/;"	f
main	gen-fac.c	/^main (int argc, char *argv[])$/;"	f
main	gen-fib.c	/^main (int argc, char *argv[])$/;"	f
main	gen-jacobitab.c	/^main (int argc, char **argv)$/;"	f
main	gen-psqr.c	/^main (int argc, char *argv[])$/;"	f
main	gen-trialdivtab.c	/^main (int argc, char *argv[])$/;"	f
main	mini-gmp/tests/testutils.c	/^main (int argc, char **argv)$/;"	f
main	mpn/add_n_sub_n.c	/^main (int argc, char **argv)$/;"	f
main	mpn/generic/add_n_sub_n.c	/^main (int argc, char **argv)$/;"	f
main	tests/cxx/t-assign.cc	/^main (void)$/;"	f
main	tests/cxx/t-binary.cc	/^main (void)$/;"	f
main	tests/cxx/t-cast.cc	/^main (void)$/;"	f
main	tests/cxx/t-constr.cc	/^main (void)$/;"	f
main	tests/cxx/t-cxx11.cc	/^int main () { return 0; }$/;"	f
main	tests/cxx/t-cxx11.cc	/^main (void)$/;"	f
main	tests/cxx/t-do-exceptions-work-at-all-with-this-compiler.cc	/^main ()$/;"	f
main	tests/cxx/t-headers.cc	/^main (void)$/;"	f
main	tests/cxx/t-iostream.cc	/^main (int argc, char *argv[])$/;"	f
main	tests/cxx/t-istream.cc	/^main (int argc, char *argv[])$/;"	f
main	tests/cxx/t-locale.cc	/^main (void)$/;"	f
main	tests/cxx/t-misc.cc	/^main (void)$/;"	f
main	tests/cxx/t-mix.cc	/^main (void)$/;"	f
main	tests/cxx/t-ops.cc	/^main (void)$/;"	f
main	tests/cxx/t-ops2.cc	/^main (void)$/;"	f
main	tests/cxx/t-ops3.cc	/^main (void)$/;"	f
main	tests/cxx/t-ostream.cc	/^main (int argc, char *argv[])$/;"	f
main	tests/cxx/t-prec.cc	/^main (void)$/;"	f
main	tests/cxx/t-rand.cc	/^main (void)$/;"	f
main	tests/cxx/t-ternary.cc	/^main (void)$/;"	f
main	tests/cxx/t-unary.cc	/^main (void)$/;"	f
main	tests/devel/anymul_1.c	/^main (int argc, char **argv)$/;"	f
main	tests/devel/aors_n.c	/^main (int argc, char **argv)$/;"	f
main	tests/devel/copy.c	/^main (int argc, char **argv)$/;"	f
main	tests/devel/divmod_1.c	/^main ()$/;"	f
main	tests/devel/divrem.c	/^main ()$/;"	f
main	tests/devel/logops_n.c	/^main (int argc, char **argv)$/;"	f
main	tests/devel/shift.c	/^main (int argc, char **argv)$/;"	f
main	tests/devel/try.c	/^main (int argc, char *argv[])$/;"	f
main	tests/devel/tst-addsub.c	/^main (int argc, char **argv)$/;"	f
main	tests/misc/t-locale.c	/^main (void)$/;"	f
main	tests/misc/t-printf.c	/^main (int argc, char *argv[])$/;"	f
main	tests/misc/t-scanf.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpf/reuse.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/reuse.c	/^main (void)$/;"	f
main	tests/mpf/t-add.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/t-cmp_d.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpf/t-cmp_si.c	/^main (void)$/;"	f
main	tests/mpf/t-conv.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/t-div.c	/^main (void)$/;"	f
main	tests/mpf/t-dm2exp.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/t-eq.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpf/t-fits.c	/^main (void)$/;"	f
main	tests/mpf/t-get_d.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/t-get_d_2exp.c	/^main (void)$/;"	f
main	tests/mpf/t-get_si.c	/^main (void)$/;"	f
main	tests/mpf/t-get_ui.c	/^main (void)$/;"	f
main	tests/mpf/t-gsprec.c	/^main (void)$/;"	f
main	tests/mpf/t-inp_str.c	/^main (void)$/;"	f
main	tests/mpf/t-int_p.c	/^main (void)$/;"	f
main	tests/mpf/t-mul_ui.c	/^main (void)$/;"	f
main	tests/mpf/t-muldiv.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/t-pow_ui.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/t-set.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpf/t-set_q.c	/^main (void)$/;"	f
main	tests/mpf/t-set_si.c	/^main (void)$/;"	f
main	tests/mpf/t-set_ui.c	/^main (void)$/;"	f
main	tests/mpf/t-sqrt.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/t-sqrt_ui.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/t-sub.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpf/t-trunc.c	/^main (void)$/;"	f
main	tests/mpf/t-ui_div.c	/^main (void)$/;"	f
main	tests/mpn/logic.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-aors_1.c	/^main (void)$/;"	f
main	tests/mpn/t-asmtype.c	/^main (void)$/;"	f
main	tests/mpn/t-bdiv.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-broot.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-brootinv.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-div.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-divrem_1.c	/^main (void)$/;"	f
main	tests/mpn/t-fat.c	/^main (void)$/;"	f
main	tests/mpn/t-get_d.c	/^main (void)$/;"	f
main	tests/mpn/t-hgcd.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-hgcd_appr.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-instrument.c	/^main (void)$/;"	f
main	tests/mpn/t-invert.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-iord_u.c	/^main (void)$/;"	f
main	tests/mpn/t-matrix22.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-minvert.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-mod_1.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-mp_bases.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpn/t-mul.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-mullo.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-mulmid.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-mulmod_bnm1.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-perfsqr.c	/^main (void)$/;"	f
main	tests/mpn/t-scan.c	/^main (void)$/;"	f
main	tests/mpn/t-sizeinbase.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-sqrlo.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/t-sqrmod_bnm1.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/toom-shared.h	/^main (int argc, char **argv)$/;"	f
main	tests/mpn/toom-sqr-shared.h	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/io.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/reuse.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/reuse.c	/^main (void)$/;"	f
main	tests/mpq/t-aors.c	/^main (void)$/;"	f
main	tests/mpq/t-cmp.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/t-cmp_si.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/t-cmp_ui.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/t-cmp_z.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/t-equal.c	/^main (void)$/;"	f
main	tests/mpq/t-get_d.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/t-get_str.c	/^main (void)$/;"	f
main	tests/mpq/t-inp_str.c	/^main (void)$/;"	f
main	tests/mpq/t-inv.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/t-md_2exp.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/t-set_f.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpq/t-set_str.c	/^main (void)$/;"	f
main	tests/mpz/bit.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/convert.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/dive.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/dive_ui.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/io.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/logic.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/reuse.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/reuse.c	/^main (void)$/;"	f
main	tests/mpz/t-addsub.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-aorsmul.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-bin.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-cdiv_ui.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-cmp.c	/^main (void)$/;"	f
main	tests/mpz/t-cmp_d.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-cmp_si.c	/^main (void)$/;"	f
main	tests/mpz/t-cong.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-cong_2exp.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-div_2exp.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-divis.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-divis_2exp.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-export.c	/^main (void)$/;"	f
main	tests/mpz/t-fac_ui.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-fdiv.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-fdiv_ui.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-fib_ui.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-fits.c	/^main (void)$/;"	f
main	tests/mpz/t-gcd.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-gcd_ui.c	/^main (void)$/;"	f
main	tests/mpz/t-get_d.c	/^main (void)$/;"	f
main	tests/mpz/t-get_d_2exp.c	/^main (void)$/;"	f
main	tests/mpz/t-get_si.c	/^main (void)$/;"	f
main	tests/mpz/t-hamdist.c	/^main (void)$/;"	f
main	tests/mpz/t-import.c	/^main (void)$/;"	f
main	tests/mpz/t-inp_str.c	/^main (void)$/;"	f
main	tests/mpz/t-invert.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-io_raw.c	/^main (void)$/;"	f
main	tests/mpz/t-jac.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-lcm.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-limbs.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-lucnum_ui.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-mfac_uiui.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-mul.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-mul_i.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-nextprime.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-oddeven.c	/^main (void)$/;"	f
main	tests/mpz/t-perfpow.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-perfsqr.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-popcount.c	/^main (void)$/;"	f
main	tests/mpz/t-pow.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-powm.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-powm_ui.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-pprime_p.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-primorial_ui.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-remove.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-root.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-scan.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-set_d.c	/^main (void)$/;"	f
main	tests/mpz/t-set_f.c	/^main (int argc, char *argv[])$/;"	f
main	tests/mpz/t-set_si.c	/^main (void)$/;"	f
main	tests/mpz/t-set_str.c	/^main (void)$/;"	f
main	tests/mpz/t-sizeinbase.c	/^main (void)$/;"	f
main	tests/mpz/t-sqrtrem.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-tdiv.c	/^main (int argc, char **argv)$/;"	f
main	tests/mpz/t-tdiv_ui.c	/^main (int argc, char **argv)$/;"	f
main	tests/rand/findlc.c	/^main (int argc, char *argv[])$/;"	f
main	tests/rand/gen.c	/^int main (argc, argv)$/;"	f
main	tests/rand/spect.c	/^main (int argc, char *argv[])$/;"	f
main	tests/rand/stat.c	/^main (argc, argv)$/;"	f
main	tests/rand/t-iset.c	/^main (int argc, char *argv[])$/;"	f
main	tests/rand/t-lc2exp.c	/^main (void)$/;"	f
main	tests/rand/t-mt.c	/^main (int argc, char *argv[])$/;"	f
main	tests/rand/t-rand.c	/^main (int argc, char *argv[])$/;"	f
main	tests/rand/t-urbui.c	/^main (int argc, char *argv[])$/;"	f
main	tests/rand/t-urmui.c	/^main (int argc, char *argv[])$/;"	f
main	tests/rand/t-urndmm.c	/^main (int argc, char *argv[])$/;"	f
main	tests/t-bswap.c	/^main (void)$/;"	f
main	tests/t-constants.c	/^main (int argc, char *argv[])$/;"	f
main	tests/t-count_zeros.c	/^main (int argc, char *argv[])$/;"	f
main	tests/t-hightomask.c	/^main (void)$/;"	f
main	tests/t-modlinv.c	/^main (int argc, char *argv[])$/;"	f
main	tests/t-parity.c	/^main (int argc, char *argv[])$/;"	f
main	tests/t-popc.c	/^main (void)$/;"	f
main	tests/t-sub.c	/^main (void)$/;"	f
main	tune/speed.c	/^main (int argc, char *argv[])$/;"	f
main	tune/tune-gcd-p.c	/^main(int argc, char **argv)$/;"	f
main	tune/tuneup.c	/^main (int argc, char *argv[])$/;"	f
make_chain_operands	tests/mpz/t-gcd.c	/^make_chain_operands (mpz_t ref, mpz_t a, mpz_t b, gmp_randstate_t rs, int nb1, int nb2, int chain_len)$/;"	f
make_primelist	demos/primes.c	/^make_primelist (unsigned long maxprime)$/;"	f
makeexp	demos/pexpr.c	/^makeexp (expr_t *r, enum op_t op, expr_t lhs, expr_t rhs)$/;"	f
malloc_region	tests/devel/try.c	/^malloc_region (struct region_t *r, mp_size_t n)$/;"	f
man0	gmp-impl.h	/^      gmp_uint_least32_t man0:16;	\/* lowest 16 bits *\/$/;"	m	struct:double_extract::__anon18
man1	gmp-impl.h	/^      gmp_uint_least32_t man1:16;$/;"	m	struct:double_extract::__anon18
man2	gmp-impl.h	/^      gmp_uint_least32_t man2:16;$/;"	m	struct:double_extract::__anon18
man3	gmp-impl.h	/^      gmp_uint_least32_t man3:7;	\/* highest 7 bits *\/$/;"	m	struct:double_extract::__anon18
mangle_seed	rand/randmts.c	/^mangle_seed (mpz_ptr r)$/;"	f	file:
manh	gmp-impl.h	/^      gmp_uint_least32_t manh:20;$/;"	m	struct:ieee_double_extract::__anon15
manh	gmp-impl.h	/^      gmp_uint_least32_t manh:20;$/;"	m	struct:ieee_double_extract::__anon16
manh	gmp-impl.h	/^      gmp_uint_least32_t manh:20;$/;"	m	struct:ieee_double_extract::__anon17
manl	gmp-impl.h	/^      gmp_uint_least32_t manl:32;$/;"	m	struct:ieee_double_extract::__anon15
manl	gmp-impl.h	/^      gmp_uint_least32_t manl:32;$/;"	m	struct:ieee_double_extract::__anon16
manl	gmp-impl.h	/^      gmp_uint_least32_t manl:32;$/;"	m	struct:ieee_double_extract::__anon17
mask	gen-psqr.c	/^  mpz_t   mask;      \/* indicating squares mod divisor *\/$/;"	m	struct:factor_t	file:
match	demos/pexpr.c	/^match (char *s, char *str)$/;"	f
matchp	demos/pexpr.c	/^matchp (char *s, char *str)$/;"	f
matrix	tests/mpn/t-matrix22.c	/^struct matrix {$/;"	s	file:
matrix22_strassen_threshold	tune/tuneup.c	/^mp_size_t  matrix22_strassen_threshold  = MP_SIZE_T_MAX;$/;"	v
matrix_clear	tests/mpn/t-matrix22.c	/^matrix_clear (struct matrix *M)$/;"	f	file:
matrix_copy	tests/mpn/t-matrix22.c	/^matrix_copy (struct matrix *R, const struct matrix *M)$/;"	f	file:
matrix_equal_p	tests/mpn/t-matrix22.c	/^matrix_equal_p (const struct matrix *A, const struct matrix *B)$/;"	f	file:
matrix_init	tests/mpn/t-matrix22.c	/^matrix_init (struct matrix *M, mp_size_t n)$/;"	f	file:
matrix_random	tests/mpn/t-matrix22.c	/^matrix_random(struct matrix *M, mp_size_t n, gmp_randstate_ptr rands)$/;"	f	file:
max	gmpxx.h	/^    static mpf_class max() { return mpf_class(); }$/;"	f	class:std::numeric_limits
max	gmpxx.h	/^    static mpq_class max() { return mpq_class(); }$/;"	f	class:std::numeric_limits
max	gmpxx.h	/^    static mpz_class max() { return mpz_class(); }$/;"	f	class:std::numeric_limits
max_digits10	gmpxx.h	/^    static const int max_digits10 = 0;$/;"	m	class:std::numeric_limits
max_divisor	gen-psqr.c	/^int     max_divisor;       \/* all divisors <= max_divisor *\/$/;"	v
max_divisor_bits	gen-psqr.c	/^int     max_divisor_bits;  \/* ceil(log2(max_divisor)) *\/$/;"	v
max_exponent	gmpxx.h	/^    static const int max_exponent = 0;$/;"	m	class:std::numeric_limits
max_exponent10	gmpxx.h	/^    static const int max_exponent10 = 0;$/;"	m	class:std::numeric_limits
max_size	tune/tuneup.c	/^  mp_size_t         max_size;$/;"	m	struct:fft_param_t	file:
max_size	tune/tuneup.c	/^  mp_size_t         max_size;$/;"	m	struct:param_t	file:
max_total_allocation	tal-notreent.c	/^static unsigned long max_total_allocation = 0;$/;"	v	file:
maxgap	demos/primes.c	/^unsigned long maxgap = 0;$/;"	v
mean_calls	tune/speed-ext.c	/^mean_calls (mp_ptr wp, mp_srcptr xp, mp_srcptr yp, mp_size_t size)$/;"	f
mean_open	tune/speed-ext.c	/^mean_open (mp_ptr wp, mp_srcptr xp, mp_srcptr yp, mp_size_t size)$/;"	f
mean_open2	tune/speed-ext.c	/^mean_open2 (mp_ptr wp, mp_srcptr xp, mp_srcptr yp, mp_size_t size)$/;"	f
median	tune/tune-gcd-p.c	/^median (double *v, size_t n)$/;"	f	file:
median	tune/tuneup.c	/^median (double *times, int n)$/;"	f
medium_prec	tests/cxx/t-prec.cc	/^small_prec = 64, medium_prec = 128, large_prec = 192, very_large_prec = 256;$/;"	v
memory	gmp-impl.h	/^  doprnt_memory_t  memory;$/;"	m	struct:doprnt_funs_t
memset	gmp-impl.h	291;"	d
merit	tests/rand/statlib.c	/^merit (mpf_t rop, unsigned int t, mpf_t v, mpz_t m)$/;"	f
merit_u	tests/rand/statlib.c	/^merit_u (unsigned int t, mpf_t v, mpz_t m)$/;"	f
mftb_unittime	tune/time.c	/^static double  mftb_unittime;$/;"	v	file:
mftb_works_buf	tune/time.c	/^static jmp_buf  mftb_works_buf;$/;"	v	file:
mftb_works_handler	tune/time.c	/^mftb_works_handler (int sig)$/;"	f	file:
mftb_works_p	tune/time.c	/^mftb_works_p (void)$/;"	f
millerrabin	mpz/millerrabin.c	/^millerrabin (mpz_srcptr n, mpz_srcptr nm1, mpz_ptr x, mpz_ptr y,$/;"	f	file:
min	gmpxx.h	/^    static mpf_class min() { return mpf_class(); }$/;"	f	class:std::numeric_limits
min	gmpxx.h	/^    static mpq_class min() { return mpq_class(); }$/;"	f	class:std::numeric_limits
min	gmpxx.h	/^    static mpz_class min() { return mpz_class(); }$/;"	f	class:std::numeric_limits
min_exponent	gmpxx.h	/^    static const int min_exponent = 0;$/;"	m	class:std::numeric_limits
min_exponent10	gmpxx.h	/^    static const int min_exponent10 = 0;$/;"	m	class:std::numeric_limits
min_is_always	tune/tuneup.c	/^  int               min_is_always;$/;"	m	struct:param_t	file:
min_size	tune/tuneup.c	/^  mp_size_t         min_size;$/;"	m	struct:param_t	file:
mini_random_bit_op	mini-gmp/tests/mini-random.c	/^mini_random_bit_op (enum hex_random_op op, unsigned long maxbits,$/;"	f
mini_random_op2	mini-gmp/tests/mini-random.c	/^mini_random_op2 (enum hex_random_op op, unsigned long maxbits,$/;"	f
mini_random_op3	mini-gmp/tests/mini-random.c	/^mini_random_op3 (enum hex_random_op op, unsigned long maxbits,$/;"	f
mini_random_op4	mini-gmp/tests/mini-random.c	/^mini_random_op4 (enum hex_random_op op, unsigned long maxbits,$/;"	f
mini_random_scan_op	mini-gmp/tests/mini-random.c	/^mini_random_scan_op (enum hex_random_op op, unsigned long maxbits,$/;"	f
mini_rrandomb	mini-gmp/tests/mini-random.c	/^mini_rrandomb (mpz_t r, unsigned long bits)$/;"	f
mini_rrandomb_export	mini-gmp/tests/mini-random.c	/^mini_rrandomb_export (mpz_t r, void *dst, size_t *countp,$/;"	f
mini_urandomb	mini-gmp/tests/mini-random.c	/^mini_urandomb (mpz_t r, unsigned long bits)$/;"	f
minsize	tests/devel/try.c	/^  mp_size_t   minsize;$/;"	m	struct:choice_t	file:
mkseed	mini-gmp/tests/hex-random.c	/^mkseed (mpz_t seed)$/;"	f	file:
mod	mpz/powm_ui.c	/^mod (mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, gmp_pi1_t *dinv, mp_ptr tp)$/;"	f	file:
mod	tests/mpz/reuse.c	/^  int mod;$/;"	m	struct:__anon32	file:
mod34_bits	gen-psqr.c	/^int     mod34_bits;        \/* 3*GMP_NUMB_BITS\/4 *\/$/;"	v
mod34_excuse	gen-psqr.c	/^char    mod34_excuse[128]; \/* why mod_34lsub1 not used (if it's not) *\/$/;"	v
mod_1_1_to_mod_1_2_threshold	tune/tuneup.c	/^mp_size_t  mod_1_1_to_mod_1_2_threshold = MP_SIZE_T_MAX;$/;"	v
mod_1_1p_method	tune/tuneup.c	/^int	   mod_1_1p_method		= 0;$/;"	v
mod_1_2_to_mod_1_4_threshold	tune/tuneup.c	/^mp_size_t  mod_1_2_to_mod_1_4_threshold = MP_SIZE_T_MAX;$/;"	v
mod_1_norm_threshold	tune/tuneup.c	/^mp_size_t  mod_1_norm_threshold         = MP_SIZE_T_MAX;$/;"	v
mod_1_unnorm_threshold	tune/tuneup.c	/^mp_size_t  mod_1_unnorm_threshold       = MP_SIZE_T_MAX;$/;"	v
mod_1n_to_mod_1_1_threshold	tune/tuneup.c	/^mp_size_t  mod_1n_to_mod_1_1_threshold  = MP_SIZE_T_MAX;$/;"	v
mod_1u_to_mod_1_1_threshold	tune/tuneup.c	/^mp_size_t  mod_1u_to_mod_1_1_threshold  = MP_SIZE_T_MAX;$/;"	v
mod_bits	gen-psqr.c	/^int     mod_bits;          \/* bits from PERFSQR_MOD_34 or MOD_PP *\/$/;"	v
mod_mask	gen-psqr.c	/^mpz_t   mod_mask;          \/* 2^mod_bits-1 *\/$/;"	v
modf_threshold_name	tune/tuneup.c	/^  const char        *modf_threshold_name;$/;"	m	struct:fft_param_t	file:
modlimb_invert	gmp-impl.h	3282;"	d
mord_2exp	mpq/md_2exp.c	/^mord_2exp (mpz_ptr ldst, mpz_ptr rdst, mpz_srcptr lsrc, mpz_srcptr rsrc,$/;"	f	file:
mov	mpn/arm/dive_1.asm	/^	mov	d, d, lsr r4$/;"	d
mov	mpn/arm/v6/dive_1.asm	/^	mov	d, d, lsr cnt$/;"	d
mov	mpn/arm/v6t2/divrem_1.asm	/^	mov	d, d, lsl cnt		C d <<= cnt$/;"	d
mov	mpn/x86_64/core2/divrem_1.asm	/^	mov	d, %rax			C$/;"	d
mov	mpn/x86_64/core2/divrem_1.asm	/^	mov	d, %rax$/;"	d
mov	mpn/x86_64/div_qr_1n_pi1.asm	/^	mov	D, B2$/;"	d
mov	mpn/x86_64/divrem_1.asm	/^	mov	d, %rax			C$/;"	d
mov	mpn/x86_64/divrem_1.asm	/^	mov	d, %rax$/;"	d
mov	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^	mov	D, B2$/;"	d
moveq	mpn/arm/dive_1.asm	/^	moveq	d, d, lsr #16$/;"	d
moveq	mpn/arm/dive_1.asm	/^	moveq	d, d, lsr #8$/;"	d
movs	mpn/arm/udiv.asm	/^	movs	d, d, lsr #1		C d = floor(orig_d \/ 2)$/;"	d
mp	gmpxx.h	/^  value_type mp;$/;"	m	class:__gmp_expr
mpX_clear	demos/expr/expr-impl.h	/^  mpexpr_fun_0ary_t               mpX_clear;$/;"	m	struct:mpexpr_parse_t
mpX_get_ui	demos/expr/expr-impl.h	/^  mpexpr_fun_get_ui_t             mpX_get_ui;$/;"	m	struct:mpexpr_parse_t
mpX_init	demos/expr/expr-impl.h	/^  mpexpr_fun_unary_ui_t           mpX_init;$/;"	m	struct:mpexpr_parse_t
mpX_number	demos/expr/expr-impl.h	/^  mpexpr_fun_number_t             mpX_number;$/;"	m	struct:mpexpr_parse_t
mpX_ptr	demos/expr/expr-impl.h	/^typedef union mpX_t *mpX_ptr;$/;"	t	typeref:union:mpX_t
mpX_set	demos/expr/expr-impl.h	/^  mpexpr_fun_unary_t              mpX_set;$/;"	m	struct:mpexpr_parse_t
mpX_set_or_swap	demos/expr/expr-impl.h	/^  mpexpr_fun_unary_t              mpX_set_or_swap;$/;"	m	struct:mpexpr_parse_t
mpX_set_si	demos/expr/expr-impl.h	/^  mpexpr_fun_set_si_t             mpX_set_si;$/;"	m	struct:mpexpr_parse_t
mpX_srcptr	demos/expr/expr-impl.h	/^typedef const union mpX_t *mpX_srcptr;$/;"	t	typeref:union:mpX_t
mpX_swap	demos/expr/expr-impl.h	/^  mpexpr_fun_swap_t               mpX_swap;$/;"	m	struct:mpexpr_parse_t
mpX_t	demos/expr/expr-impl.h	/^union mpX_t {$/;"	u
mpX_ulong_p	demos/expr/expr-impl.h	/^  mpexpr_fun_i_unary_t            mpX_ulong_p;$/;"	m	struct:mpexpr_parse_t
mp_2logb	gen-bases.c	/^mp_2logb (mpz_t r, int bi, int prec)$/;"	f
mp_bases	gmp-impl.h	2863;"	d
mp_bases	mpn/mp_bases.c	/^const struct bases mp_bases[257] =$/;"	v	typeref:struct:bases
mp_bitcnt_t	gmp.h	/^typedef unsigned long int	mp_bitcnt_t;$/;"	t
mp_bitcnt_t	mini-gmp/mini-gmp.h	/^typedef unsigned long mp_bitcnt_t;$/;"	t
mp_bits_per_limb	gmp.h	482;"	d
mp_bits_per_limb	mini-gmp/mini-gmp.c	/^const int mp_bits_per_limb = GMP_LIMB_BITS;$/;"	v
mp_bits_per_limb	mp_bpl.c	/^const int mp_bits_per_limb = GMP_LIMB_BITS;$/;"	v
mp_exp_t	gmp.h	/^typedef int			mp_exp_t;$/;"	t
mp_exp_t	gmp.h	/^typedef long int		mp_exp_t;$/;"	t
mp_get_memory_functions	gmp.h	477;"	d
mp_get_memory_functions	mini-gmp/mini-gmp.c	/^mp_get_memory_functions (void *(**alloc_func) (size_t),$/;"	f
mp_limb_signed_t	gmp.h	/^typedef int			mp_limb_signed_t;$/;"	t
mp_limb_signed_t	gmp.h	/^typedef long int		mp_limb_signed_t;$/;"	t
mp_limb_signed_t	gmp.h	/^typedef long long int		mp_limb_signed_t;$/;"	t
mp_limb_t	gmp.h	/^typedef unsigned int		mp_limb_t;$/;"	t
mp_limb_t	gmp.h	/^typedef unsigned long int	mp_limb_t;$/;"	t
mp_limb_t	gmp.h	/^typedef unsigned long long int	mp_limb_t;$/;"	t
mp_limb_t	mini-gmp/mini-gmp.h	/^typedef unsigned long mp_limb_t;$/;"	t
mp_limb_trace	tests/trace.c	/^mp_limb_trace (const char *name, mp_limb_t n)$/;"	f
mp_millerrabin	demos/factorize.c	/^mp_millerrabin (mpz_srcptr n, mpz_srcptr nm1, mpz_ptr x, mpz_ptr y,$/;"	f	file:
mp_prime_p	demos/factorize.c	/^mp_prime_p (mpz_t n)$/;"	f
mp_ptr	gmp.h	/^typedef mp_limb_t *		mp_ptr;$/;"	t
mp_ptr	mini-gmp/mini-gmp.h	/^typedef mp_limb_t *mp_ptr;$/;"	t
mp_set_memory_functions	gmp.h	472;"	d
mp_set_memory_functions	mini-gmp/mini-gmp.c	/^mp_set_memory_functions (void *(*alloc_func) (size_t),$/;"	f
mp_size_t	gmp.h	/^typedef int			mp_size_t;$/;"	t
mp_size_t	gmp.h	/^typedef long int		mp_size_t;$/;"	t
mp_size_t	mini-gmp/mini-gmp.h	/^typedef long mp_size_t;$/;"	t
mp_srcptr	gmp.h	/^typedef const mp_limb_t *	mp_srcptr;$/;"	t
mp_srcptr	mini-gmp/mini-gmp.h	/^typedef const mp_limb_t *mp_srcptr;$/;"	t
mp_trace_base	tests/trace.c	/^int  mp_trace_base = 10;$/;"	v
mp_trace_start	tests/trace.c	/^mp_trace_start (const char *name)$/;"	f
mpexpr_control_t	demos/expr/expr-impl.h	/^struct mpexpr_control_t {$/;"	s
mpexpr_evaluate	demos/expr/expr.c	/^mpexpr_evaluate (struct mpexpr_parse_t *p)$/;"	f
mpexpr_fun_0ary_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_0ary_t) (mpX_ptr);$/;"	t
mpexpr_fun_binary_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_binary_t) (mpX_ptr, mpX_srcptr, mpX_srcptr);$/;"	t
mpexpr_fun_binary_ui_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_binary_ui_t) (mpX_ptr, mpX_srcptr, unsigned long);$/;"	t
mpexpr_fun_get_ui_t	demos/expr/expr-impl.h	/^typedef unsigned long (*mpexpr_fun_get_ui_t) (mpX_srcptr);$/;"	t
mpexpr_fun_i_0ary_t	demos/expr/expr-impl.h	/^typedef int  (*mpexpr_fun_i_0ary_t) (void);$/;"	t
mpexpr_fun_i_binary_t	demos/expr/expr-impl.h	/^typedef int  (*mpexpr_fun_i_binary_t) (mpX_srcptr, mpX_srcptr);$/;"	t
mpexpr_fun_i_binary_ui_t	demos/expr/expr-impl.h	/^typedef int  (*mpexpr_fun_i_binary_ui_t) (mpX_srcptr, unsigned long);$/;"	t
mpexpr_fun_i_ternary_t	demos/expr/expr-impl.h	/^typedef int (*mpexpr_fun_i_ternary_t) (mpX_srcptr, mpX_srcptr, mpX_srcptr);$/;"	t
mpexpr_fun_i_ternary_ui_t	demos/expr/expr-impl.h	/^typedef int (*mpexpr_fun_i_ternary_ui_t) (mpX_srcptr, mpX_srcptr, unsigned long);$/;"	t
mpexpr_fun_i_unary_t	demos/expr/expr-impl.h	/^typedef int  (*mpexpr_fun_i_unary_t) (mpX_srcptr);$/;"	t
mpexpr_fun_i_unary_ui_t	demos/expr/expr-impl.h	/^typedef int  (*mpexpr_fun_i_unary_ui_t) (unsigned long);$/;"	t
mpexpr_fun_number_t	demos/expr/expr-impl.h	/^typedef size_t (*mpexpr_fun_number_t) (mpX_ptr, const char *str, size_t len, int base);$/;"	t
mpexpr_fun_one_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_one_t) (mpX_ptr);$/;"	t
mpexpr_fun_set_si_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_set_si_t) (mpX_srcptr, long);$/;"	t
mpexpr_fun_swap_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_swap_t) (mpX_ptr, mpX_ptr);$/;"	t
mpexpr_fun_t	demos/expr/expr.h	/^typedef void (*mpexpr_fun_t) (void);$/;"	t
mpexpr_fun_ternary_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_ternary_t) (mpX_ptr, mpX_srcptr, mpX_srcptr, mpX_srcptr);$/;"	t
mpexpr_fun_ternary_ui_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_ternary_ui_t) (mpX_ptr, mpX_srcptr, mpX_srcptr, unsigned long);$/;"	t
mpexpr_fun_ui_one_t	demos/expr/expr-impl.h	/^typedef unsigned long (*mpexpr_fun_ui_one_t) (mpX_ptr);$/;"	t
mpexpr_fun_unary_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_unary_t) (mpX_ptr, mpX_srcptr);$/;"	t
mpexpr_fun_unary_ui_t	demos/expr/expr-impl.h	/^typedef void (*mpexpr_fun_unary_ui_t) (mpX_ptr, unsigned long);$/;"	t
mpexpr_mpz_number	demos/expr/exprza.c	/^mpexpr_mpz_number (mpz_ptr res, const char *e, size_t elen, int base)$/;"	f
mpexpr_operator_t	demos/expr/expr.h	/^struct mpexpr_operator_t {$/;"	s
mpexpr_parse_t	demos/expr/expr-impl.h	/^struct mpexpr_parse_t {$/;"	s
mpexpr_va_to_var	demos/expr/exprv.c	/^mpexpr_va_to_var (void *var[], va_list ap)$/;"	f
mpf_abs	gmp.h	1247;"	d
mpf_abs	mpf/abs.c	/^mpf_abs (mpf_ptr r, mpf_srcptr u)$/;"	f
mpf_add	gmp.h	1250;"	d
mpf_add	mpf/add.c	/^mpf_add (mpf_ptr r, mpf_srcptr u, mpf_srcptr v)$/;"	f
mpf_add_ui	gmp.h	1253;"	d
mpf_add_ui	mpf/add_ui.c	/^mpf_add_ui (mpf_ptr sum, mpf_srcptr u, unsigned long int v)$/;"	f
mpf_ceil	gmp.h	1255;"	d
mpf_ceil	mpf/ceilfloor.c	/^mpf_ceil (mpf_ptr r, mpf_srcptr u)$/;"	f
mpf_ceil_or_floor	mpf/ceilfloor.c	/^mpf_ceil_or_floor (mpf_ptr r, mpf_srcptr u, int dir)$/;"	f	file:
mpf_ceil_or_floor	mpf/ceilfloor.c	41;"	d	file:
mpf_class	gmpxx.h	/^typedef __gmp_expr<mpf_t, mpf_t> mpf_class;$/;"	t
mpf_clear	gmp.h	1258;"	d
mpf_clear	mpf/clear.c	/^mpf_clear (mpf_ptr x)$/;"	f
mpf_clears	gmp.h	1261;"	d
mpf_clears	mpf/clears.c	/^mpf_clears (mpf_ptr x, ...)$/;"	f
mpf_cmp	gmp.h	1264;"	d
mpf_cmp_d	gmp.h	1270;"	d
mpf_cmp_d	mpf/cmp_d.c	/^mpf_cmp_d (mpf_srcptr f, double d)$/;"	f
mpf_cmp_si	gmp.h	1273;"	d
mpf_cmp_ui	gmp.h	1276;"	d
mpf_cmp_z	gmp.h	1267;"	d
mpf_div	gmp.h	1279;"	d
mpf_div	mpf/div.c	/^mpf_div (mpf_ptr r, mpf_srcptr u, mpf_srcptr v)$/;"	f
mpf_div_2exp	gmp.h	1282;"	d
mpf_div_2exp	mpf/div_2exp.c	/^mpf_div_2exp (mpf_ptr r, mpf_srcptr u, mp_bitcnt_t exp)$/;"	f
mpf_div_ui	gmp.h	1285;"	d
mpf_div_ui	mpf/div_ui.c	/^mpf_div_ui (mpf_ptr r, mpf_srcptr u, unsigned long int v)$/;"	f
mpf_dump	gmp.h	1288;"	d
mpf_dump	mpf/dump.c	/^mpf_dump (mpf_srcptr u)$/;"	f
mpf_eq	gmp.h	1291;"	d
mpf_eq	mpf/eq.c	/^mpf_eq (mpf_srcptr u, mpf_srcptr v, mp_bitcnt_t n_bits)$/;"	f
mpf_expr	demos/expr/exprf.c	/^mpf_expr (mpf_ptr res, int base, const char *e, ...)$/;"	f
mpf_expr_a	demos/expr/exprfa.c	/^mpf_expr_a (const struct mpexpr_operator_t *table,$/;"	f
mpf_expr_standard_table	demos/expr/exprf.c	/^const struct mpexpr_operator_t * const mpf_expr_standard_table$/;"	v
mpf_fits_sint_p	gmp.h	1294;"	d
mpf_fits_slong_p	gmp.h	1297;"	d
mpf_fits_sshort_p	gmp.h	1300;"	d
mpf_fits_uint_p	gmp.h	1303;"	d
mpf_fits_ulong_p	gmp.h	1306;"	d
mpf_fits_ushort_p	gmp.h	1309;"	d
mpf_floor	gmp.h	1312;"	d
mpf_floor	mpf/ceilfloor.c	/^mpf_floor (mpf_ptr r, mpf_srcptr u)$/;"	f
mpf_freqt	tests/rand/statlib.c	/^mpf_freqt (mpf_t Kp,$/;"	f
mpf_get_d	gmp.h	1315;"	d
mpf_get_d	mpf/get_d.c	/^mpf_get_d (mpf_srcptr src)$/;"	f
mpf_get_d_2exp	gmp.h	1318;"	d
mpf_get_d_2exp	mpf/get_d_2exp.c	/^mpf_get_d_2exp (signed long int *exp2, mpf_srcptr src)$/;"	f
mpf_get_default_prec	gmp.h	1321;"	d
mpf_get_prec	gmp.h	1324;"	d
mpf_get_si	gmp.h	1327;"	d
mpf_get_str	gmp.h	1330;"	d
mpf_get_str	mpf/get_str.c	/^mpf_get_str (char *dbuf, mp_exp_t *exp, int base, size_t n_digits, mpf_srcptr u)$/;"	f
mpf_get_ui	gmp.h	1333;"	d
mpf_init	gmp.h	1336;"	d
mpf_init	mpf/init.c	/^mpf_init (mpf_ptr r)$/;"	f
mpf_init2	gmp.h	1339;"	d
mpf_init2	mpf/init2.c	/^mpf_init2 (mpf_ptr r, mp_bitcnt_t prec_in_bits)$/;"	f
mpf_init_set	gmp.h	1345;"	d
mpf_init_set	mpf/iset.c	/^mpf_init_set (mpf_ptr r, mpf_srcptr s)$/;"	f
mpf_init_set_d	gmp.h	1348;"	d
mpf_init_set_d	mpf/iset_d.c	/^mpf_init_set_d (mpf_ptr r, double val)$/;"	f
mpf_init_set_si	gmp.h	1351;"	d
mpf_init_set_si	mpf/iset_si.c	/^mpf_init_set_si (mpf_ptr r, long int val)$/;"	f
mpf_init_set_str	gmp.h	1354;"	d
mpf_init_set_str	mpf/iset_str.c	/^mpf_init_set_str (mpf_ptr r, const char *s, int base)$/;"	f
mpf_init_set_ui	gmp.h	1357;"	d
mpf_init_set_ui	mpf/iset_ui.c	/^mpf_init_set_ui (mpf_ptr r, unsigned long int val)$/;"	f
mpf_inits	gmp.h	1342;"	d
mpf_inits	mpf/inits.c	/^mpf_inits (mpf_ptr x, ...)$/;"	f
mpf_inp_str	gmp.h	1360;"	d
mpf_inp_str	mpf/inp_str.c	/^mpf_inp_str (mpf_ptr rop, FILE *stream, int base)$/;"	f
mpf_integer_p	gmp.h	1365;"	d
mpf_mul	gmp.h	1368;"	d
mpf_mul	mpf/mul.c	/^mpf_mul (mpf_ptr r, mpf_srcptr u, mpf_srcptr v)$/;"	f
mpf_mul_2exp	gmp.h	1371;"	d
mpf_mul_2exp	mpf/mul_2exp.c	/^mpf_mul_2exp (mpf_ptr r, mpf_srcptr u, mp_bitcnt_t exp)$/;"	f
mpf_mul_ui	gmp.h	1374;"	d
mpf_mul_ui	mpf/mul_ui.c	/^mpf_mul_ui (mpf_ptr r, mpf_srcptr u, unsigned long int v)$/;"	f
mpf_neg	gmp.h	1377;"	d
mpf_neg	mpf/neg.c	/^mpf_neg (mpf_ptr r, mpf_srcptr u)$/;"	f
mpf_out_str	gmp.h	1380;"	d
mpf_out_str	mpf/out_str.c	/^mpf_out_str (FILE *stream, int base, size_t n_digits, mpf_srcptr op)$/;"	f
mpf_pow_ui	gmp.h	1385;"	d
mpf_pow_ui	mpf/pow_ui.c	/^mpf_pow_ui (mpf_ptr r, mpf_srcptr b, unsigned long int e)$/;"	f
mpf_ptr	gmp.h	/^typedef __mpf_struct *mpf_ptr;$/;"	t
mpf_random2	gmp.h	1388;"	d
mpf_random2	mpf/random2.c	/^mpf_random2 (mpf_ptr x, mp_size_t xs, mp_exp_t exp)$/;"	f
mpf_reldiff	gmp.h	1391;"	d
mpf_reldiff	mpf/reldiff.c	/^mpf_reldiff (mpf_t rdiff, mpf_srcptr x, mpf_srcptr y)$/;"	f
mpf_set	gmp.h	1394;"	d
mpf_set	mpf/set.c	/^mpf_set (mpf_ptr r, mpf_srcptr u)$/;"	f
mpf_set_d	gmp.h	1397;"	d
mpf_set_d	mpf/set_d.c	/^mpf_set_d (mpf_ptr r, double d)$/;"	f
mpf_set_default_prec	gmp.h	1400;"	d
mpf_set_prec	gmp.h	1403;"	d
mpf_set_prec	mpf/set_prc.c	/^mpf_set_prec (mpf_ptr x, mp_bitcnt_t new_prec_in_bits)$/;"	f
mpf_set_prec_raw	gmp.h	1406;"	d
mpf_set_q	gmp.h	1409;"	d
mpf_set_q	mpf/set_q.c	/^mpf_set_q (mpf_t r, mpq_srcptr q)$/;"	f
mpf_set_si	gmp.h	1412;"	d
mpf_set_si	mpf/set_si.c	/^mpf_set_si (mpf_ptr dest, long val)$/;"	f
mpf_set_str	gmp.h	1415;"	d
mpf_set_str	mpf/set_str.c	/^mpf_set_str (mpf_ptr x, const char *str, int base)$/;"	f
mpf_set_str_or_abort	tests/misc.c	/^mpf_set_str_or_abort (mpf_ptr f, const char *str, int base)$/;"	f
mpf_set_ui	gmp.h	1418;"	d
mpf_set_ui	mpf/set_ui.c	/^mpf_set_ui (mpf_ptr f, unsigned long val)$/;"	f
mpf_set_z	gmp.h	1421;"	d
mpf_set_z	mpf/set_z.c	/^mpf_set_z (mpf_ptr r, mpz_srcptr u)$/;"	f
mpf_sgn	gmp.h	2239;"	d
mpf_size	gmp.h	1424;"	d
mpf_sqrt	gmp.h	1427;"	d
mpf_sqrt	mpf/sqrt.c	/^mpf_sqrt (mpf_ptr r, mpf_srcptr u)$/;"	f
mpf_sqrt_ui	gmp.h	1430;"	d
mpf_sqrt_ui	mpf/sqrt_ui.c	/^mpf_sqrt_ui (mpf_ptr r, unsigned long int u)$/;"	f
mpf_srcptr	gmp.h	/^typedef const __mpf_struct *mpf_srcptr;$/;"	t
mpf_sub	gmp.h	1433;"	d
mpf_sub	mpf/sub.c	/^mpf_sub (mpf_ptr r, mpf_srcptr u, mpf_srcptr v)$/;"	f
mpf_sub_ui	gmp.h	1436;"	d
mpf_sub_ui	mpf/sub_ui.c	/^mpf_sub_ui (mpf_ptr sum, mpf_srcptr u, unsigned long int v)$/;"	f
mpf_swap	gmp.h	1439;"	d
mpf_t	gmp.h	/^typedef __mpf_struct mpf_t[1];$/;"	t
mpf_trace	tests/trace.c	/^mpf_trace (const char *name, mpf_srcptr f)$/;"	f
mpf_trunc	gmp.h	1442;"	d
mpf_trunc	mpf/trunc.c	/^mpf_trunc (mpf_ptr r, mpf_srcptr u)$/;"	f
mpf_ui_div	gmp.h	1445;"	d
mpf_ui_div	mpf/ui_div.c	/^mpf_ui_div (mpf_ptr r, unsigned long int u, mpf_srcptr v)$/;"	f
mpf_ui_sub	gmp.h	1448;"	d
mpf_ui_sub	mpf/ui_sub.c	/^mpf_ui_sub (mpf_ptr r, unsigned long int u, mpf_srcptr v)$/;"	f
mpf_urandomb	gmp.h	1451;"	d
mpf_urandomb	mpf/urandomb.c	/^mpf_urandomb (mpf_t rop, gmp_randstate_t rstate, mp_bitcnt_t nbits)$/;"	f
mpn_add	gmp.h	/^mpn_add (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)$/;"	f
mpn_add	gmp.h	1459;"	d
mpn_add	mini-gmp/mini-gmp.c	/^mpn_add (mp_ptr rp, mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)$/;"	f
mpn_add_1	gmp.h	1464;"	d
mpn_add_1	mini-gmp/mini-gmp.c	/^mpn_add_1 (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t b)$/;"	f
mpn_add_err1_n	gmp-impl.h	1012;"	d
mpn_add_err1_n	mpn/add_err1_n.c	/^mpn_add_err1_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_add_err1_n	mpn/generic/add_err1_n.c	/^mpn_add_err1_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_add_err2_n	gmp-impl.h	1015;"	d
mpn_add_err2_n	mpn/add_err2_n.c	/^mpn_add_err2_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_add_err2_n	mpn/generic/add_err2_n.c	/^mpn_add_err2_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_add_err3_n	gmp-impl.h	1018;"	d
mpn_add_err3_n	mpn/add_err3_n.c	/^mpn_add_err3_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_add_err3_n	mpn/generic/add_err3_n.c	/^mpn_add_err3_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_add_n	gmp.h	1469;"	d
mpn_add_n	mini-gmp/mini-gmp.c	/^mpn_add_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f
mpn_add_n	mpn/add_n.c	/^mpn_add_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_add_n	mpn/cray/add_n.c	/^mpn_add_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_add_n	mpn/generic/add_n.c	/^mpn_add_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_add_n_sub_n	gmp-impl.h	1030;"	d
mpn_add_n_sub_n	mpn/add_n_sub_n.c	/^mpn_add_n_sub_n (mp_ptr r1p, mp_ptr r2p, mp_srcptr s1p, mp_srcptr s2p, mp_size_t n)$/;"	f
mpn_add_n_sub_n	mpn/generic/add_n_sub_n.c	/^mpn_add_n_sub_n (mp_ptr r1p, mp_ptr r2p, mp_srcptr s1p, mp_srcptr s2p, mp_size_t n)$/;"	f
mpn_add_n_sub_nc	gmp-impl.h	1033;"	d
mpn_add_nc	gmp-impl.h	/^mpn_add_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n, mp_limb_t ci)$/;"	f
mpn_add_nc	gmp-impl.h	4662;"	d
mpn_addaddmul_1msb0	gmp-impl.h	1036;"	d
mpn_addlsh1_n	gmp-impl.h	1574;"	d
mpn_addlsh1_n	gmp-impl.h	1575;"	d
mpn_addlsh1_n	gmp-impl.h	843;"	d
mpn_addlsh1_n_ip1	gmp-impl.h	849;"	d
mpn_addlsh1_n_ip1	gmp-impl.h	852;"	d
mpn_addlsh1_n_ip1_fun	tests/devel/try.c	/^mpn_addlsh1_n_ip1_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
mpn_addlsh1_n_ip2_fun	tests/devel/try.c	/^mpn_addlsh1_n_ip2_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
mpn_addlsh1_nc	gmp-impl.h	846;"	d
mpn_addlsh1_nc_ip1	gmp-impl.h	856;"	d
mpn_addlsh1_nc_ip1	gmp-impl.h	859;"	d
mpn_addlsh2_n	gmp-impl.h	1580;"	d
mpn_addlsh2_n	gmp-impl.h	1581;"	d
mpn_addlsh2_n	gmp-impl.h	866;"	d
mpn_addlsh2_n_ip1	gmp-impl.h	872;"	d
mpn_addlsh2_n_ip1	gmp-impl.h	875;"	d
mpn_addlsh2_n_ip1_fun	tests/devel/try.c	/^mpn_addlsh2_n_ip1_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
mpn_addlsh2_n_ip2_fun	tests/devel/try.c	/^mpn_addlsh2_n_ip2_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
mpn_addlsh2_nc	gmp-impl.h	869;"	d
mpn_addlsh2_nc_ip1	gmp-impl.h	879;"	d
mpn_addlsh2_nc_ip1	gmp-impl.h	882;"	d
mpn_addlsh_n	gmp-impl.h	888;"	d
mpn_addlsh_n_ip1	gmp-impl.h	893;"	d
mpn_addlsh_n_ip1	gmp-impl.h	896;"	d
mpn_addlsh_n_ip1_fun	tests/devel/try.c	/^mpn_addlsh_n_ip1_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size, unsigned int sh)$/;"	f
mpn_addlsh_n_ip2_fun	tests/devel/try.c	/^mpn_addlsh_n_ip2_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size, unsigned int sh)$/;"	f
mpn_addlsh_nc	gmp-impl.h	890;"	d
mpn_addlsh_nc_ip1	gmp-impl.h	900;"	d
mpn_addlsh_nc_ip1	gmp-impl.h	903;"	d
mpn_addmul_1	gmp.h	1472;"	d
mpn_addmul_1	mini-gmp/mini-gmp.c	/^mpn_addmul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_addmul_1	mpn/addmul_1.c	/^mpn_addmul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_addmul_1	mpn/cray/cfp/addmul_1.c	/^mpn_addmul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t limb)$/;"	f
mpn_addmul_1	mpn/cray/ieee/addmul_1.c	/^mpn_addmul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_addmul_1	mpn/generic/addmul_1.c	/^mpn_addmul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_addmul_1c	gmp-impl.h	810;"	d
mpn_addmul_2	gmp-impl.h	814;"	d
mpn_addmul_2	mpn/generic/redc_2.c	/^mpn_addmul_2 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_srcptr vp)$/;"	f	file:
mpn_addmul_2	mpn/generic/redc_2.c	47;"	d	file:
mpn_addmul_2	mpn/redc_2.c	/^mpn_addmul_2 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_srcptr vp)$/;"	f	file:
mpn_addmul_2	mpn/redc_2.c	47;"	d	file:
mpn_addmul_2s	gmp-impl.h	837;"	d
mpn_addmul_3	gmp-impl.h	818;"	d
mpn_addmul_4	gmp-impl.h	821;"	d
mpn_addmul_5	gmp-impl.h	824;"	d
mpn_addmul_6	gmp-impl.h	827;"	d
mpn_addmul_7	gmp-impl.h	830;"	d
mpn_addmul_8	gmp-impl.h	833;"	d
mpn_and_n	gmp-impl.h	2543;"	d
mpn_and_n	gmp-impl.h	2544;"	d
mpn_and_n	gmp.h	1615;"	d
mpn_and_n_fun	tests/devel/try.c	/^mpn_and_n_fun (mp_ptr rp, mp_srcptr s1, mp_srcptr s2, mp_size_t size)$/;"	f
mpn_andn_n	gmp-impl.h	2549;"	d
mpn_andn_n	gmp-impl.h	2550;"	d
mpn_andn_n	gmp.h	1617;"	d
mpn_andn_n_fun	tests/devel/try.c	/^mpn_andn_n_fun (mp_ptr rp, mp_srcptr s1, mp_srcptr s2, mp_size_t size)$/;"	f
mpn_aors_1_t	tests/mpn/t-aors_1.c	/^typedef mp_limb_t (*mpn_aors_1_t) (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);$/;"	t	file:
mpn_base_info	mini-gmp/mini-gmp.c	/^struct mpn_base_info$/;"	s	file:
mpn_base_power_of_two_p	mini-gmp/mini-gmp.c	/^mpn_base_power_of_two_p (unsigned b)$/;"	f	file:
mpn_bc_invertappr	mpn/generic/invertappr.c	/^mpn_bc_invertappr (mp_ptr ip, mp_srcptr dp, mp_size_t n, mp_ptr xp)$/;"	f	file:
mpn_bc_invertappr	mpn/invertappr.c	/^mpn_bc_invertappr (mp_ptr ip, mp_srcptr dp, mp_size_t n, mp_ptr xp)$/;"	f	file:
mpn_bc_mulmod_bnm1	gmp-impl.h	1168;"	d
mpn_bc_mulmod_bnm1	mpn/generic/mulmod_bnm1.c	/^mpn_bc_mulmod_bnm1 (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t rn,$/;"	f
mpn_bc_mulmod_bnm1	mpn/mulmod_bnm1.c	/^mpn_bc_mulmod_bnm1 (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t rn,$/;"	f
mpn_bc_mulmod_bnp1	mpn/generic/mulmod_bnm1.c	/^mpn_bc_mulmod_bnp1 (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t rn,$/;"	f	file:
mpn_bc_mulmod_bnp1	mpn/mulmod_bnm1.c	/^mpn_bc_mulmod_bnp1 (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t rn,$/;"	f	file:
mpn_bc_set_str	gmp-impl.h	4307;"	d
mpn_bc_set_str	mpn/generic/set_str.c	/^mpn_bc_set_str (mp_ptr rp, const unsigned char *str, size_t str_len, int base)$/;"	f
mpn_bc_set_str	mpn/set_str.c	/^mpn_bc_set_str (mp_ptr rp, const unsigned char *str, size_t str_len, int base)$/;"	f
mpn_bc_sqrmod_bnm1	mpn/generic/sqrmod_bnm1.c	/^mpn_bc_sqrmod_bnm1 (mp_ptr rp, mp_srcptr ap, mp_size_t rn, mp_ptr tp)$/;"	f	file:
mpn_bc_sqrmod_bnm1	mpn/sqrmod_bnm1.c	/^mpn_bc_sqrmod_bnm1 (mp_ptr rp, mp_srcptr ap, mp_size_t rn, mp_ptr tp)$/;"	f	file:
mpn_bc_sqrmod_bnp1	mpn/generic/sqrmod_bnm1.c	/^mpn_bc_sqrmod_bnp1 (mp_ptr rp, mp_srcptr ap, mp_size_t rn, mp_ptr tp)$/;"	f	file:
mpn_bc_sqrmod_bnp1	mpn/sqrmod_bnm1.c	/^mpn_bc_sqrmod_bnp1 (mp_ptr rp, mp_srcptr ap, mp_size_t rn, mp_ptr tp)$/;"	f	file:
mpn_bdiv_dbm1	gmp-impl.h	1554;"	d
mpn_bdiv_dbm1c	gmp-impl.h	1550;"	d
mpn_bdiv_dbm1c	mpn/bdiv_dbm1c.c	/^mpn_bdiv_dbm1c (mp_ptr qp, mp_srcptr ap, mp_size_t n, mp_limb_t bd, mp_limb_t h)$/;"	f
mpn_bdiv_dbm1c	mpn/generic/bdiv_dbm1c.c	/^mpn_bdiv_dbm1c (mp_ptr qp, mp_srcptr ap, mp_size_t n, mp_limb_t bd, mp_limb_t h)$/;"	f
mpn_bdiv_q	gmp-impl.h	1539;"	d
mpn_bdiv_q	mpn/bdiv_q.c	/^mpn_bdiv_q (mp_ptr qp,$/;"	f
mpn_bdiv_q	mpn/generic/bdiv_q.c	/^mpn_bdiv_q (mp_ptr qp,$/;"	f
mpn_bdiv_q_1	gmp-impl.h	1497;"	d
mpn_bdiv_q_1	mpn/bdiv_q_1.c	/^mpn_bdiv_q_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t d)$/;"	f
mpn_bdiv_q_1	mpn/generic/bdiv_q_1.c	/^mpn_bdiv_q_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t d)$/;"	f
mpn_bdiv_q_itch	gmp-impl.h	1541;"	d
mpn_bdiv_q_itch	mpn/bdiv_q.c	/^mpn_bdiv_q_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_bdiv_q_itch	mpn/generic/bdiv_q.c	/^mpn_bdiv_q_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_bdiv_qr	gmp-impl.h	1534;"	d
mpn_bdiv_qr	mpn/bdiv_qr.c	/^mpn_bdiv_qr (mp_ptr qp, mp_ptr rp,$/;"	f
mpn_bdiv_qr	mpn/generic/bdiv_qr.c	/^mpn_bdiv_qr (mp_ptr qp, mp_ptr rp,$/;"	f
mpn_bdiv_qr_itch	gmp-impl.h	1536;"	d
mpn_bdiv_qr_itch	mpn/bdiv_qr.c	/^mpn_bdiv_qr_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_bdiv_qr_itch	mpn/generic/bdiv_qr.c	/^mpn_bdiv_qr_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_bdiv_qr_wrap	mpn/generic/remove.c	/^mpn_bdiv_qr_wrap (mp_ptr qp, mp_ptr rp,$/;"	f	file:
mpn_bdiv_qr_wrap	mpn/remove.c	/^mpn_bdiv_qr_wrap (mp_ptr qp, mp_ptr rp,$/;"	f	file:
mpn_binvert	gmp-impl.h	1492;"	d
mpn_binvert	mpn/binvert.c	/^mpn_binvert (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_ptr scratch)$/;"	f
mpn_binvert	mpn/generic/binvert.c	/^mpn_binvert (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_ptr scratch)$/;"	f
mpn_binvert_itch	gmp-impl.h	1494;"	d
mpn_binvert_itch	mpn/binvert.c	/^mpn_binvert_itch (mp_size_t n)$/;"	f
mpn_binvert_itch	mpn/generic/binvert.c	/^mpn_binvert_itch (mp_size_t n)$/;"	f
mpn_broot	gmp-impl.h	1680;"	d
mpn_broot	mpn/broot.c	/^mpn_broot (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t k)$/;"	f
mpn_broot	mpn/generic/broot.c	/^mpn_broot (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t k)$/;"	f
mpn_broot_invm1	gmp-impl.h	1683;"	d
mpn_broot_invm1	mpn/broot.c	/^mpn_broot_invm1 (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t k)$/;"	f
mpn_broot_invm1	mpn/generic/broot.c	/^mpn_broot_invm1 (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t k)$/;"	f
mpn_brootinv	gmp-impl.h	1686;"	d
mpn_brootinv	mpn/brootinv.c	/^mpn_brootinv (mp_ptr rp, mp_srcptr yp, mp_size_t bn, mp_limb_t k, mp_ptr tp)$/;"	f
mpn_brootinv	mpn/generic/brootinv.c	/^mpn_brootinv (mp_ptr rp, mp_srcptr yp, mp_size_t bn, mp_limb_t k, mp_ptr tp)$/;"	f
mpn_bsqrt	gmp-impl.h	1689;"	d
mpn_bsqrt	mpn/bsqrt.c	/^mpn_bsqrt (mp_ptr rp, mp_srcptr ap, mp_bitcnt_t nb, mp_ptr tp)$/;"	f
mpn_bsqrt	mpn/generic/bsqrt.c	/^mpn_bsqrt (mp_ptr rp, mp_srcptr ap, mp_bitcnt_t nb, mp_ptr tp)$/;"	f
mpn_bsqrtinv	gmp-impl.h	1692;"	d
mpn_bsqrtinv	mpn/bsqrtinv.c	/^mpn_bsqrtinv (mp_ptr rp, mp_srcptr yp, mp_bitcnt_t bnb, mp_ptr tp)$/;"	f
mpn_bsqrtinv	mpn/generic/bsqrtinv.c	/^mpn_bsqrtinv (mp_ptr rp, mp_srcptr yp, mp_bitcnt_t bnb, mp_ptr tp)$/;"	f
mpn_cache_fill	tune/common.c	/^mpn_cache_fill (mp_srcptr ptr, mp_size_t size)$/;"	f
mpn_cache_fill_dummy	tune/noop.c	/^mpn_cache_fill_dummy (mp_limb_t n)$/;"	f
mpn_cache_fill_write	tune/common.c	/^mpn_cache_fill_write (mp_ptr ptr, mp_size_t size)$/;"	f
mpn_cmp	gmp.h	1475;"	d
mpn_cmp	mini-gmp/mini-gmp.c	/^mpn_cmp (mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f
mpn_cmp4	mini-gmp/mini-gmp.c	/^mpn_cmp4 (mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)$/;"	f	file:
mpn_cmp_twosizes_lt	mpz/aorsmul.c	36;"	d	file:
mpn_cnd_add_n	gmp.h	1639;"	d
mpn_cnd_add_n	mpn/cnd_add_n.c	/^mpn_cnd_add_n (mp_limb_t cnd, mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_cnd_add_n	mpn/generic/cnd_add_n.c	/^mpn_cnd_add_n (mp_limb_t cnd, mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_cnd_neg	mpn/generic/sec_invert.c	/^mpn_cnd_neg (int cnd, mp_limb_t *rp, const mp_limb_t *ap, mp_size_t n,$/;"	f	file:
mpn_cnd_neg	mpn/sec_invert.c	/^mpn_cnd_neg (int cnd, mp_limb_t *rp, const mp_limb_t *ap, mp_size_t n,$/;"	f	file:
mpn_cnd_sub_n	gmp.h	1641;"	d
mpn_cnd_sub_n	mpn/cnd_sub_n.c	/^mpn_cnd_sub_n (mp_limb_t cnd, mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_cnd_sub_n	mpn/generic/cnd_sub_n.c	/^mpn_cnd_sub_n (mp_limb_t cnd, mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_cnd_swap	gmp.h	1654;"	d
mpn_cnd_swap	mpn/cnd_swap.c	/^mpn_cnd_swap (mp_limb_t cnd, volatile mp_limb_t *ap, volatile mp_limb_t *bp,$/;"	f
mpn_cnd_swap	mpn/generic/cnd_swap.c	/^mpn_cnd_swap (mp_limb_t cnd, volatile mp_limb_t *ap, volatile mp_limb_t *bp,$/;"	f
mpn_com	gmp-impl.h	2506;"	d
mpn_com	gmp-impl.h	2507;"	d
mpn_com	gmp.h	1553;"	d
mpn_com	mini-gmp/mini-gmp.c	/^mpn_com (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_com	mpn/com.c	/^mpn_com (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_com	mpn/com.c	34;"	d	file:
mpn_com	mpn/com.c	35;"	d	file:
mpn_com	mpn/generic/com.c	/^mpn_com (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_com	mpn/generic/com.c	34;"	d	file:
mpn_com	mpn/generic/com.c	35;"	d	file:
mpn_com_fun	tests/devel/try.c	/^mpn_com_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
mpn_common_scan	mini-gmp/mini-gmp.c	/^mpn_common_scan (mp_limb_t limb, mp_size_t i, mp_srcptr up, mp_size_t un,$/;"	f	file:
mpn_copyd	gmp-impl.h	1760;"	d
mpn_copyd	gmp.h	1634;"	d
mpn_copyd	mini-gmp/mini-gmp.c	/^mpn_copyd (mp_ptr d, mp_srcptr s, mp_size_t n)$/;"	f
mpn_copyd	mpn/copyd.c	/^mpn_copyd (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_copyd	mpn/generic/copyd.c	/^mpn_copyd (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_copyi	gmp-impl.h	1707;"	d
mpn_copyi	gmp.h	1632;"	d
mpn_copyi	mini-gmp/mini-gmp.c	/^mpn_copyi (mp_ptr d, mp_srcptr s, mp_size_t n)$/;"	f
mpn_copyi	mpn/copyi.c	/^mpn_copyi (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_copyi	mpn/generic/copyi.c	/^mpn_copyi (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_dc_get_str	mpn/generic/get_str.c	/^mpn_dc_get_str (unsigned char *str, size_t len,$/;"	f	file:
mpn_dc_get_str	mpn/get_str.c	/^mpn_dc_get_str (unsigned char *str, size_t len,$/;"	f	file:
mpn_dc_get_str_itch	gmp-impl.h	4303;"	d
mpn_dc_get_str_powtab_alloc	gmp-impl.h	4302;"	d
mpn_dc_mullo_n	mpn/generic/mullo_n.c	/^mpn_dc_mullo_n (mp_ptr rp, mp_srcptr xp, mp_srcptr yp, mp_size_t n, mp_ptr tp)$/;"	f	file:
mpn_dc_mullo_n	mpn/mullo_n.c	/^mpn_dc_mullo_n (mp_ptr rp, mp_srcptr xp, mp_srcptr yp, mp_size_t n, mp_ptr tp)$/;"	f	file:
mpn_dc_set_str	gmp-impl.h	4305;"	d
mpn_dc_set_str	mpn/generic/set_str.c	/^mpn_dc_set_str (mp_ptr rp, const unsigned char *str, size_t str_len,$/;"	f
mpn_dc_set_str	mpn/set_str.c	/^mpn_dc_set_str (mp_ptr rp, const unsigned char *str, size_t str_len,$/;"	f
mpn_dc_set_str_itch	gmp-impl.h	4301;"	d
mpn_dc_set_str_powtab_alloc	gmp-impl.h	4300;"	d
mpn_dc_sqrlo	mpn/generic/sqrlo.c	/^mpn_dc_sqrlo (mp_ptr rp, mp_srcptr xp, mp_size_t n, mp_ptr tp)$/;"	f	file:
mpn_dc_sqrlo	mpn/sqrlo.c	/^mpn_dc_sqrlo (mp_ptr rp, mp_srcptr xp, mp_size_t n, mp_ptr tp)$/;"	f	file:
mpn_dc_sqrt	mpn/generic/sqrtrem.c	/^mpn_dc_sqrt (mp_ptr sp, mp_srcptr np, mp_size_t n, unsigned nsh, unsigned odd)$/;"	f	file:
mpn_dc_sqrt	mpn/sqrtrem.c	/^mpn_dc_sqrt (mp_ptr sp, mp_srcptr np, mp_size_t n, unsigned nsh, unsigned odd)$/;"	f	file:
mpn_dc_sqrtrem	mpn/generic/sqrtrem.c	/^mpn_dc_sqrtrem (mp_ptr sp, mp_ptr np, mp_size_t n, mp_limb_t approx, mp_ptr scratch)$/;"	f	file:
mpn_dc_sqrtrem	mpn/sqrtrem.c	/^mpn_dc_sqrtrem (mp_ptr sp, mp_ptr np, mp_size_t n, mp_limb_t approx, mp_ptr scratch)$/;"	f	file:
mpn_dcpi1_bdiv_q	gmp-impl.h	1516;"	d
mpn_dcpi1_bdiv_q	mpn/dcpi1_bdiv_q.c	/^mpn_dcpi1_bdiv_q (mp_ptr qp,$/;"	f
mpn_dcpi1_bdiv_q	mpn/generic/dcpi1_bdiv_q.c	/^mpn_dcpi1_bdiv_q (mp_ptr qp,$/;"	f
mpn_dcpi1_bdiv_q_n	gmp-impl.h	1519;"	d
mpn_dcpi1_bdiv_q_n	mpn/dcpi1_bdiv_q.c	/^mpn_dcpi1_bdiv_q_n (mp_ptr qp,$/;"	f
mpn_dcpi1_bdiv_q_n	mpn/generic/dcpi1_bdiv_q.c	/^mpn_dcpi1_bdiv_q_n (mp_ptr qp,$/;"	f
mpn_dcpi1_bdiv_q_n_itch	gmp-impl.h	1521;"	d
mpn_dcpi1_bdiv_q_n_itch	mpn/dcpi1_bdiv_q.c	/^mpn_dcpi1_bdiv_q_n_itch (mp_size_t n)$/;"	f
mpn_dcpi1_bdiv_q_n_itch	mpn/generic/dcpi1_bdiv_q.c	/^mpn_dcpi1_bdiv_q_n_itch (mp_size_t n)$/;"	f
mpn_dcpi1_bdiv_qr	gmp-impl.h	1509;"	d
mpn_dcpi1_bdiv_qr	mpn/dcpi1_bdiv_qr.c	/^mpn_dcpi1_bdiv_qr (mp_ptr qp, mp_ptr np, mp_size_t nn,$/;"	f
mpn_dcpi1_bdiv_qr	mpn/generic/dcpi1_bdiv_qr.c	/^mpn_dcpi1_bdiv_qr (mp_ptr qp, mp_ptr np, mp_size_t nn,$/;"	f
mpn_dcpi1_bdiv_qr_n	gmp-impl.h	1514;"	d
mpn_dcpi1_bdiv_qr_n	mpn/dcpi1_bdiv_qr.c	/^mpn_dcpi1_bdiv_qr_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n,$/;"	f
mpn_dcpi1_bdiv_qr_n	mpn/generic/dcpi1_bdiv_qr.c	/^mpn_dcpi1_bdiv_qr_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n,$/;"	f
mpn_dcpi1_bdiv_qr_n_itch	gmp-impl.h	1511;"	d
mpn_dcpi1_bdiv_qr_n_itch	mpn/dcpi1_bdiv_qr.c	/^mpn_dcpi1_bdiv_qr_n_itch (mp_size_t n)$/;"	f
mpn_dcpi1_bdiv_qr_n_itch	mpn/generic/dcpi1_bdiv_qr.c	/^mpn_dcpi1_bdiv_qr_n_itch (mp_size_t n)$/;"	f
mpn_dcpi1_div_q	gmp-impl.h	1444;"	d
mpn_dcpi1_div_q	mpn/dcpi1_div_q.c	/^mpn_dcpi1_div_q (mp_ptr qp, mp_ptr np, mp_size_t nn,$/;"	f
mpn_dcpi1_div_q	mpn/generic/dcpi1_div_q.c	/^mpn_dcpi1_div_q (mp_ptr qp, mp_ptr np, mp_size_t nn,$/;"	f
mpn_dcpi1_div_qr	gmp-impl.h	1439;"	d
mpn_dcpi1_div_qr	mpn/dcpi1_div_qr.c	/^mpn_dcpi1_div_qr (mp_ptr qp,$/;"	f
mpn_dcpi1_div_qr	mpn/generic/dcpi1_div_qr.c	/^mpn_dcpi1_div_qr (mp_ptr qp,$/;"	f
mpn_dcpi1_div_qr_n	gmp-impl.h	1441;"	d
mpn_dcpi1_div_qr_n	mpn/dcpi1_div_qr.c	/^mpn_dcpi1_div_qr_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n,$/;"	f
mpn_dcpi1_div_qr_n	mpn/generic/dcpi1_div_qr.c	/^mpn_dcpi1_div_qr_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n,$/;"	f
mpn_dcpi1_divappr_q	gmp-impl.h	1447;"	d
mpn_dcpi1_divappr_q	mpn/dcpi1_divappr_q.c	/^mpn_dcpi1_divappr_q (mp_ptr qp, mp_ptr np, mp_size_t nn,$/;"	f
mpn_dcpi1_divappr_q	mpn/generic/dcpi1_divappr_q.c	/^mpn_dcpi1_divappr_q (mp_ptr qp, mp_ptr np, mp_size_t nn,$/;"	f
mpn_dcpi1_divappr_q_n	gmp-impl.h	1449;"	d
mpn_dcpi1_divappr_q_n	mpn/dcpi1_divappr_q.c	/^mpn_dcpi1_divappr_q_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n,$/;"	f
mpn_dcpi1_divappr_q_n	mpn/generic/dcpi1_divappr_q.c	/^mpn_dcpi1_divappr_q_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n,$/;"	f
mpn_decr_u	gmp-impl.h	2704;"	d
mpn_decr_u	gmp-impl.h	2729;"	d
mpn_decr_u	gmp-impl.h	2782;"	d
mpn_diff_highest	tests/misc.c	/^mpn_diff_highest (mp_srcptr p1, mp_srcptr p2, mp_size_t size)$/;"	f
mpn_diff_lowest	tests/misc.c	/^mpn_diff_lowest (mp_srcptr p1, mp_srcptr p2, mp_size_t size)$/;"	f
mpn_div_q	gmp-impl.h	1479;"	d
mpn_div_q	mpn/div_q.c	/^mpn_div_q (mp_ptr qp,$/;"	f
mpn_div_q	mpn/generic/div_q.c	/^mpn_div_q (mp_ptr qp,$/;"	f
mpn_div_qr	mini-gmp/mini-gmp.c	/^mpn_div_qr (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn)$/;"	f	file:
mpn_div_qr_1	gmp.h	1506;"	d
mpn_div_qr_1	mini-gmp/mini-gmp.c	/^mpn_div_qr_1 (mp_ptr qp, mp_srcptr np, mp_size_t nn, mp_limb_t d)$/;"	f	file:
mpn_div_qr_1	mpn/div_qr_1.c	/^mpn_div_qr_1 (mp_ptr qp, mp_limb_t *qh, mp_srcptr up, mp_size_t n,$/;"	f
mpn_div_qr_1	mpn/generic/div_qr_1.c	/^mpn_div_qr_1 (mp_ptr qp, mp_limb_t *qh, mp_srcptr up, mp_size_t n,$/;"	f
mpn_div_qr_1	tune/div_qr_1_tune.c	44;"	d	file:
mpn_div_qr_1	tune/div_qr_1_tune.c	45;"	d	file:
mpn_div_qr_1_invert	mini-gmp/mini-gmp.c	/^mpn_div_qr_1_invert (struct gmp_div_inverse *inv, mp_limb_t d)$/;"	f	file:
mpn_div_qr_1_preinv	mini-gmp/mini-gmp.c	/^mpn_div_qr_1_preinv (mp_ptr qp, mp_srcptr np, mp_size_t nn,$/;"	f	file:
mpn_div_qr_1n_pi1	gmp-impl.h	1421;"	d
mpn_div_qr_1n_pi1	mpn/div_qr_1n_pi1.c	/^mpn_div_qr_1n_pi1 (mp_ptr qp, mp_srcptr up, mp_size_t n, mp_limb_t u1,$/;"	f
mpn_div_qr_1n_pi1	mpn/div_qr_1n_pi1.c	/^mpn_div_qr_1n_pi1 (mp_ptr qp, mp_srcptr up, mp_size_t n, mp_limb_t uh,$/;"	f
mpn_div_qr_1n_pi1	mpn/generic/div_qr_1n_pi1.c	/^mpn_div_qr_1n_pi1 (mp_ptr qp, mp_srcptr up, mp_size_t n, mp_limb_t u1,$/;"	f
mpn_div_qr_1n_pi1	mpn/generic/div_qr_1n_pi1.c	/^mpn_div_qr_1n_pi1 (mp_ptr qp, mp_srcptr up, mp_size_t n, mp_limb_t uh,$/;"	f
mpn_div_qr_1n_pi1	tune/div_qr_1n_pi1_1.c	36;"	d	file:
mpn_div_qr_1n_pi1	tune/div_qr_1n_pi1_1.c	37;"	d	file:
mpn_div_qr_1n_pi1	tune/div_qr_1n_pi1_2.c	36;"	d	file:
mpn_div_qr_1n_pi1	tune/div_qr_1n_pi1_2.c	37;"	d	file:
mpn_div_qr_1n_pi2	mpn/generic/div_qr_1n_pi2.c	/^mpn_div_qr_1n_pi2 (mp_ptr qp,$/;"	f
mpn_div_qr_1u_pi2	mpn/generic/div_qr_1u_pi2.c	/^mpn_div_qr_1u_pi2 (mp_ptr qp,$/;"	f
mpn_div_qr_2	gmp.h	1509;"	d
mpn_div_qr_2	mpn/div_qr_2.c	/^mpn_div_qr_2 (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,$/;"	f
mpn_div_qr_2	mpn/generic/div_qr_2.c	/^mpn_div_qr_2 (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,$/;"	f
mpn_div_qr_2_invert	mini-gmp/mini-gmp.c	/^mpn_div_qr_2_invert (struct gmp_div_inverse *inv,$/;"	f	file:
mpn_div_qr_2_preinv	mini-gmp/mini-gmp.c	/^mpn_div_qr_2_preinv (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,$/;"	f	file:
mpn_div_qr_2n_pi1	gmp-impl.h	1424;"	d
mpn_div_qr_2n_pi1	mpn/div_qr_2n_pi1.c	/^mpn_div_qr_2n_pi1 (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,$/;"	f
mpn_div_qr_2n_pi1	mpn/generic/div_qr_2n_pi1.c	/^mpn_div_qr_2n_pi1 (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,$/;"	f
mpn_div_qr_2n_pi2	mpn/div_qr_2.c	/^mpn_div_qr_2n_pi2 (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,$/;"	f	file:
mpn_div_qr_2n_pi2	mpn/generic/div_qr_2.c	/^mpn_div_qr_2n_pi2 (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,$/;"	f	file:
mpn_div_qr_2u_pi1	gmp-impl.h	1427;"	d
mpn_div_qr_2u_pi1	mpn/div_qr_2u_pi1.c	/^mpn_div_qr_2u_pi1 (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,$/;"	f
mpn_div_qr_2u_pi1	mpn/generic/div_qr_2u_pi1.c	/^mpn_div_qr_2u_pi1 (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,$/;"	f
mpn_div_qr_invert	mini-gmp/mini-gmp.c	/^mpn_div_qr_invert (struct gmp_div_inverse *inv,$/;"	f	file:
mpn_div_qr_pi1	mini-gmp/mini-gmp.c	/^mpn_div_qr_pi1 (mp_ptr qp,$/;"	f	file:
mpn_div_qr_preinv	mini-gmp/mini-gmp.c	/^mpn_div_qr_preinv (mp_ptr qp, mp_ptr np, mp_size_t nn,$/;"	f	file:
mpn_divappr_q	mpn/generic/sqrtrem.c	/^mpn_divappr_q (mp_ptr qp, mp_srcptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_ptr scratch)$/;"	f	file:
mpn_divappr_q	mpn/sqrtrem.c	/^mpn_divappr_q (mp_ptr qp, mp_srcptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_ptr scratch)$/;"	f	file:
mpn_divexact	gmp-impl.h	1544;"	d
mpn_divexact	mpn/divexact.c	/^mpn_divexact (mp_ptr qp,$/;"	f
mpn_divexact	mpn/generic/divexact.c	/^mpn_divexact (mp_ptr qp,$/;"	f
mpn_divexact_1	gmp.h	1485;"	d
mpn_divexact_1	mpn/alpha/dive_1.c	/^mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor)$/;"	f
mpn_divexact_1	mpn/dive_1.c	/^mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor)$/;"	f
mpn_divexact_1	mpn/generic/dive_1.c	/^mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor)$/;"	f
mpn_divexact_1	mpn/sparc64/dive_1.c	/^mpn_divexact_1 (mp_ptr dst, mp_srcptr src, mp_size_t size, mp_limb_t divisor)$/;"	f
mpn_divexact_by11	gmp-impl.h	1646;"	d
mpn_divexact_by13	gmp-impl.h	1651;"	d
mpn_divexact_by15	gmp-impl.h	1656;"	d
mpn_divexact_by15	mpn/generic/toom_interpolate_7pts.c	74;"	d	file:
mpn_divexact_by15	mpn/generic/toom_interpolate_7pts.c	76;"	d	file:
mpn_divexact_by15	mpn/toom_interpolate_7pts.c	74;"	d	file:
mpn_divexact_by15	mpn/toom_interpolate_7pts.c	76;"	d	file:
mpn_divexact_by255	mpn/generic/toom_interpolate_12pts.c	133;"	d	file:
mpn_divexact_by255	mpn/generic/toom_interpolate_12pts.c	137;"	d	file:
mpn_divexact_by255	mpn/generic/toom_interpolate_12pts.c	139;"	d	file:
mpn_divexact_by255	mpn/generic/toom_interpolate_16pts.c	152;"	d	file:
mpn_divexact_by255	mpn/generic/toom_interpolate_16pts.c	156;"	d	file:
mpn_divexact_by255	mpn/generic/toom_interpolate_16pts.c	158;"	d	file:
mpn_divexact_by255	mpn/toom_interpolate_12pts.c	133;"	d	file:
mpn_divexact_by255	mpn/toom_interpolate_12pts.c	137;"	d	file:
mpn_divexact_by255	mpn/toom_interpolate_12pts.c	139;"	d	file:
mpn_divexact_by255	mpn/toom_interpolate_16pts.c	152;"	d	file:
mpn_divexact_by255	mpn/toom_interpolate_16pts.c	156;"	d	file:
mpn_divexact_by255	mpn/toom_interpolate_16pts.c	158;"	d	file:
mpn_divexact_by255x182712915	mpn/generic/toom_interpolate_16pts.c	201;"	d	file:
mpn_divexact_by255x182712915	mpn/generic/toom_interpolate_16pts.c	207;"	d	file:
mpn_divexact_by255x182712915	mpn/generic/toom_interpolate_16pts.c	215;"	d	file:
mpn_divexact_by255x182712915	mpn/generic/toom_interpolate_16pts.c	218;"	d	file:
mpn_divexact_by255x182712915	mpn/toom_interpolate_16pts.c	201;"	d	file:
mpn_divexact_by255x182712915	mpn/toom_interpolate_16pts.c	207;"	d	file:
mpn_divexact_by255x182712915	mpn/toom_interpolate_16pts.c	215;"	d	file:
mpn_divexact_by255x182712915	mpn/toom_interpolate_16pts.c	218;"	d	file:
mpn_divexact_by255x188513325	mpn/generic/toom_interpolate_16pts.c	229;"	d	file:
mpn_divexact_by255x188513325	mpn/generic/toom_interpolate_16pts.c	235;"	d	file:
mpn_divexact_by255x188513325	mpn/generic/toom_interpolate_16pts.c	243;"	d	file:
mpn_divexact_by255x188513325	mpn/generic/toom_interpolate_16pts.c	246;"	d	file:
mpn_divexact_by255x188513325	mpn/toom_interpolate_16pts.c	229;"	d	file:
mpn_divexact_by255x188513325	mpn/toom_interpolate_16pts.c	235;"	d	file:
mpn_divexact_by255x188513325	mpn/toom_interpolate_16pts.c	243;"	d	file:
mpn_divexact_by255x188513325	mpn/toom_interpolate_16pts.c	246;"	d	file:
mpn_divexact_by255x4	mpn/generic/toom_interpolate_16pts.c	165;"	d	file:
mpn_divexact_by255x4	mpn/generic/toom_interpolate_16pts.c	167;"	d	file:
mpn_divexact_by255x4	mpn/toom_interpolate_16pts.c	165;"	d	file:
mpn_divexact_by255x4	mpn/toom_interpolate_16pts.c	167;"	d	file:
mpn_divexact_by2835x4	mpn/generic/toom_interpolate_12pts.c	162;"	d	file:
mpn_divexact_by2835x4	mpn/generic/toom_interpolate_12pts.c	164;"	d	file:
mpn_divexact_by2835x4	mpn/toom_interpolate_12pts.c	162;"	d	file:
mpn_divexact_by2835x4	mpn/toom_interpolate_12pts.c	164;"	d	file:
mpn_divexact_by2835x64	mpn/generic/toom_interpolate_16pts.c	189;"	d	file:
mpn_divexact_by2835x64	mpn/generic/toom_interpolate_16pts.c	191;"	d	file:
mpn_divexact_by2835x64	mpn/toom_interpolate_16pts.c	189;"	d	file:
mpn_divexact_by2835x64	mpn/toom_interpolate_16pts.c	191;"	d	file:
mpn_divexact_by3	gmp-impl.h	1619;"	d
mpn_divexact_by3	gmp-impl.h	1620;"	d
mpn_divexact_by3	gmp.h	1488;"	d
mpn_divexact_by3	mpn/generic/toom_interpolate_6pts.c	43;"	d	file:
mpn_divexact_by3	mpn/generic/toom_interpolate_6pts.c	45;"	d	file:
mpn_divexact_by3	mpn/generic/toom_interpolate_7pts.c	58;"	d	file:
mpn_divexact_by3	mpn/generic/toom_interpolate_7pts.c	60;"	d	file:
mpn_divexact_by3	mpn/generic/toom_interpolate_8pts.c	49;"	d	file:
mpn_divexact_by3	mpn/generic/toom_interpolate_8pts.c	51;"	d	file:
mpn_divexact_by3	mpn/toom_interpolate_6pts.c	43;"	d	file:
mpn_divexact_by3	mpn/toom_interpolate_6pts.c	45;"	d	file:
mpn_divexact_by3	mpn/toom_interpolate_7pts.c	58;"	d	file:
mpn_divexact_by3	mpn/toom_interpolate_7pts.c	60;"	d	file:
mpn_divexact_by3	mpn/toom_interpolate_8pts.c	49;"	d	file:
mpn_divexact_by3	mpn/toom_interpolate_8pts.c	51;"	d	file:
mpn_divexact_by3_fun	tests/devel/try.c	/^mpn_divexact_by3_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
mpn_divexact_by3c	gmp.h	1491;"	d
mpn_divexact_by3c	mpn/diveby3.c	/^mpn_divexact_by3c (mp_ptr restrict rp, mp_srcptr restrict up, mp_size_t un, mp_limb_t c)$/;"	f
mpn_divexact_by3c	mpn/diveby3.c	/^mpn_divexact_by3c (mp_ptr restrict rp, mp_srcptr restrict up, mp_size_t un, mp_limb_t cy)$/;"	f
mpn_divexact_by3c	mpn/diveby3.c	/^mpn_divexact_by3c (mp_ptr rp, mp_srcptr up, mp_size_t un, mp_limb_t c)$/;"	f
mpn_divexact_by3c	mpn/generic/diveby3.c	/^mpn_divexact_by3c (mp_ptr restrict rp, mp_srcptr restrict up, mp_size_t un, mp_limb_t c)$/;"	f
mpn_divexact_by3c	mpn/generic/diveby3.c	/^mpn_divexact_by3c (mp_ptr restrict rp, mp_srcptr restrict up, mp_size_t un, mp_limb_t cy)$/;"	f
mpn_divexact_by3c	mpn/generic/diveby3.c	/^mpn_divexact_by3c (mp_ptr rp, mp_srcptr up, mp_size_t un, mp_limb_t c)$/;"	f
mpn_divexact_by42525	mpn/generic/toom_interpolate_12pts.c	154;"	d	file:
mpn_divexact_by42525	mpn/generic/toom_interpolate_12pts.c	156;"	d	file:
mpn_divexact_by42525	mpn/toom_interpolate_12pts.c	154;"	d	file:
mpn_divexact_by42525	mpn/toom_interpolate_12pts.c	156;"	d	file:
mpn_divexact_by42525x16	mpn/generic/toom_interpolate_16pts.c	181;"	d	file:
mpn_divexact_by42525x16	mpn/generic/toom_interpolate_16pts.c	183;"	d	file:
mpn_divexact_by42525x16	mpn/toom_interpolate_16pts.c	181;"	d	file:
mpn_divexact_by42525x16	mpn/toom_interpolate_16pts.c	183;"	d	file:
mpn_divexact_by45	mpn/generic/toom_interpolate_8pts.c	57;"	d	file:
mpn_divexact_by45	mpn/generic/toom_interpolate_8pts.c	61;"	d	file:
mpn_divexact_by45	mpn/generic/toom_interpolate_8pts.c	63;"	d	file:
mpn_divexact_by45	mpn/toom_interpolate_8pts.c	57;"	d	file:
mpn_divexact_by45	mpn/toom_interpolate_8pts.c	61;"	d	file:
mpn_divexact_by45	mpn/toom_interpolate_8pts.c	63;"	d	file:
mpn_divexact_by5	gmp-impl.h	1631;"	d
mpn_divexact_by7	gmp-impl.h	1636;"	d
mpn_divexact_by9	gmp-impl.h	1641;"	d
mpn_divexact_by9	mpn/generic/toom_interpolate_7pts.c	66;"	d	file:
mpn_divexact_by9	mpn/generic/toom_interpolate_7pts.c	68;"	d	file:
mpn_divexact_by9	mpn/toom_interpolate_7pts.c	66;"	d	file:
mpn_divexact_by9	mpn/toom_interpolate_7pts.c	68;"	d	file:
mpn_divexact_by9x16	mpn/generic/toom_interpolate_16pts.c	173;"	d	file:
mpn_divexact_by9x16	mpn/generic/toom_interpolate_16pts.c	175;"	d	file:
mpn_divexact_by9x16	mpn/toom_interpolate_16pts.c	173;"	d	file:
mpn_divexact_by9x16	mpn/toom_interpolate_16pts.c	175;"	d	file:
mpn_divexact_by9x4	mpn/generic/toom_interpolate_12pts.c	146;"	d	file:
mpn_divexact_by9x4	mpn/generic/toom_interpolate_12pts.c	148;"	d	file:
mpn_divexact_by9x4	mpn/toom_interpolate_12pts.c	146;"	d	file:
mpn_divexact_by9x4	mpn/toom_interpolate_12pts.c	148;"	d	file:
mpn_divexact_itch	gmp-impl.h	1546;"	d
mpn_divexact_itch	mpn/divexact.c	/^mpn_divexact_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_divexact_itch	mpn/generic/divexact.c	/^mpn_divexact_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_divisible_p	gmp-impl.h	1674;"	d
mpn_divisible_p	mpn/divis.c	/^mpn_divisible_p (mp_srcptr ap, mp_size_t an,$/;"	f
mpn_divisible_p	mpn/generic/divis.c	/^mpn_divisible_p (mp_srcptr ap, mp_size_t an,$/;"	f
mpn_divmod	gmp.h	2288;"	d
mpn_divmod_1	gmp.h	1494;"	d
mpn_divrem	gmp.h	1497;"	d
mpn_divrem	mpn/divrem.c	/^mpn_divrem (mp_ptr qp, mp_size_t qxn,$/;"	f
mpn_divrem	mpn/generic/divrem.c	/^mpn_divrem (mp_ptr qp, mp_size_t qxn,$/;"	f
mpn_divrem_1	gmp.h	1500;"	d
mpn_divrem_1	mpn/divrem_1.c	/^mpn_divrem_1 (mp_ptr qp, mp_size_t qxn,$/;"	f
mpn_divrem_1	mpn/generic/divrem_1.c	/^mpn_divrem_1 (mp_ptr qp, mp_size_t qxn,$/;"	f
mpn_divrem_1	mpn/sparc64/divrem_1.c	/^mpn_divrem_1 (mp_ptr qp_limbptr, mp_size_t xsize_limbs,$/;"	f
mpn_divrem_1c	gmp-impl.h	1039;"	d
mpn_divrem_2	gmp.h	1503;"	d
mpn_divrem_2	mpn/divrem_2.c	/^mpn_divrem_2 (mp_ptr qp, mp_size_t qxn,$/;"	f
mpn_divrem_2	mpn/generic/divrem_2.c	/^mpn_divrem_2 (mp_ptr qp, mp_size_t qxn,$/;"	f
mpn_dump	gmp-impl.h	1042;"	d
mpn_dump	mpn/dump.c	/^mpn_dump (mp_srcptr p, mp_size_t n)$/;"	f
mpn_dump	mpn/dump.c	/^mpn_dump (mp_srcptr ptr, mp_size_t n)$/;"	f
mpn_dump	mpn/generic/dump.c	/^mpn_dump (mp_srcptr p, mp_size_t n)$/;"	f
mpn_dump	mpn/generic/dump.c	/^mpn_dump (mp_srcptr ptr, mp_size_t n)$/;"	f
mpn_fft_add_modF	mpn/generic/mul_fft.c	/^mpn_fft_add_modF (mp_ptr r, mp_srcptr a, mp_srcptr b, mp_size_t n)$/;"	f	file:
mpn_fft_add_modF	mpn/mul_fft.c	/^mpn_fft_add_modF (mp_ptr r, mp_srcptr a, mp_srcptr b, mp_size_t n)$/;"	f	file:
mpn_fft_best_k	gmp-impl.h	1406;"	d
mpn_fft_best_k	mpn/generic/mul_fft.c	/^mpn_fft_best_k (mp_size_t n, int sqr)$/;"	f
mpn_fft_best_k	mpn/mul_fft.c	/^mpn_fft_best_k (mp_size_t n, int sqr)$/;"	f
mpn_fft_div_2exp_modF	mpn/generic/mul_fft.c	/^mpn_fft_div_2exp_modF (mp_ptr r, mp_srcptr a, mp_bitcnt_t k, mp_size_t n)$/;"	f	file:
mpn_fft_div_2exp_modF	mpn/mul_fft.c	/^mpn_fft_div_2exp_modF (mp_ptr r, mp_srcptr a, mp_bitcnt_t k, mp_size_t n)$/;"	f	file:
mpn_fft_fft	mpn/generic/mul_fft.c	/^mpn_fft_fft (mp_ptr *Ap, mp_size_t K, int **ll,$/;"	f	file:
mpn_fft_fft	mpn/mul_fft.c	/^mpn_fft_fft (mp_ptr *Ap, mp_size_t K, int **ll,$/;"	f	file:
mpn_fft_fftinv	mpn/generic/mul_fft.c	/^mpn_fft_fftinv (mp_ptr *Ap, mp_size_t K, mp_size_t omega, mp_size_t n, mp_ptr tp)$/;"	f	file:
mpn_fft_fftinv	mpn/mul_fft.c	/^mpn_fft_fftinv (mp_ptr *Ap, mp_size_t K, mp_size_t omega, mp_size_t n, mp_ptr tp)$/;"	f	file:
mpn_fft_initl	mpn/generic/mul_fft.c	/^mpn_fft_initl (int **l, int k)$/;"	f	file:
mpn_fft_initl	mpn/mul_fft.c	/^mpn_fft_initl (int **l, int k)$/;"	f	file:
mpn_fft_mul	gmp-impl.h	5184;"	d
mpn_fft_mul_2exp_modF	mpn/generic/mul_fft.c	/^mpn_fft_mul_2exp_modF (mp_ptr r, mp_srcptr a, mp_bitcnt_t d, mp_size_t n)$/;"	f	file:
mpn_fft_mul_2exp_modF	mpn/mul_fft.c	/^mpn_fft_mul_2exp_modF (mp_ptr r, mp_srcptr a, mp_bitcnt_t d, mp_size_t n)$/;"	f	file:
mpn_fft_mul_modF_K	mpn/generic/mul_fft.c	/^mpn_fft_mul_modF_K (mp_ptr *ap, mp_ptr *bp, mp_size_t n, mp_size_t K)$/;"	f	file:
mpn_fft_mul_modF_K	mpn/mul_fft.c	/^mpn_fft_mul_modF_K (mp_ptr *ap, mp_ptr *bp, mp_size_t n, mp_size_t K)$/;"	f	file:
mpn_fft_next_size	gmp-impl.h	1418;"	d
mpn_fft_next_size	mpn/generic/mul_fft.c	/^mpn_fft_next_size (mp_size_t pl, int k)$/;"	f
mpn_fft_next_size	mpn/mul_fft.c	/^mpn_fft_next_size (mp_size_t pl, int k)$/;"	f
mpn_fft_norm_modF	mpn/generic/mul_fft.c	/^mpn_fft_norm_modF (mp_ptr rp, mp_size_t n, mp_ptr ap, mp_size_t an)$/;"	f	file:
mpn_fft_norm_modF	mpn/mul_fft.c	/^mpn_fft_norm_modF (mp_ptr rp, mp_size_t n, mp_ptr ap, mp_size_t an)$/;"	f	file:
mpn_fft_normalize	mpn/generic/mul_fft.c	/^mpn_fft_normalize (mp_ptr ap, mp_size_t n)$/;"	f	file:
mpn_fft_normalize	mpn/mul_fft.c	/^mpn_fft_normalize (mp_ptr ap, mp_size_t n)$/;"	f	file:
mpn_fft_sub_modF	mpn/generic/mul_fft.c	/^mpn_fft_sub_modF (mp_ptr r, mp_srcptr a, mp_srcptr b, mp_size_t n)$/;"	f	file:
mpn_fft_sub_modF	mpn/mul_fft.c	/^mpn_fft_sub_modF (mp_ptr r, mp_srcptr a, mp_srcptr b, mp_size_t n)$/;"	f	file:
mpn_fft_table	mpn/generic/mul_fft.c	/^FFT_TABLE_ATTRS mp_size_t mpn_fft_table[2][MPN_FFT_TABLE_SIZE] =$/;"	v
mpn_fft_table	mpn/mul_fft.c	/^FFT_TABLE_ATTRS mp_size_t mpn_fft_table[2][MPN_FFT_TABLE_SIZE] =$/;"	v
mpn_fft_table3	mpn/generic/mul_fft.c	/^FFT_TABLE_ATTRS struct fft_table_nk mpn_fft_table3[2][FFT_TABLE3_SIZE] =$/;"	v	typeref:struct:fft_table_nk
mpn_fft_table3	mpn/mul_fft.c	/^FFT_TABLE_ATTRS struct fft_table_nk mpn_fft_table3[2][FFT_TABLE3_SIZE] =$/;"	v	typeref:struct:fft_table_nk
mpn_fib2_ui	gmp-impl.h	1045;"	d
mpn_fib2_ui	mpn/fib2_ui.c	/^mpn_fib2_ui (mp_ptr fp, mp_ptr f1p, unsigned long int n)$/;"	f
mpn_fib2_ui	mpn/generic/fib2_ui.c	/^mpn_fib2_ui (mp_ptr fp, mp_ptr f1p, unsigned long int n)$/;"	f
mpn_gcd	gmp.h	1512;"	d
mpn_gcd	mpn/gcd.c	/^mpn_gcd (mp_ptr gp, mp_ptr up, mp_size_t usize, mp_ptr vp, mp_size_t n)$/;"	f
mpn_gcd	mpn/generic/gcd.c	/^mpn_gcd (mp_ptr gp, mp_ptr up, mp_size_t usize, mp_ptr vp, mp_size_t n)$/;"	f
mpn_gcd_1	gmp.h	1515;"	d
mpn_gcd_1	mpn/gcd_1.c	/^mpn_gcd_1 (mp_srcptr up, mp_size_t size, mp_limb_t vlimb)$/;"	f
mpn_gcd_1	mpn/generic/gcd_1.c	/^mpn_gcd_1 (mp_srcptr up, mp_size_t size, mp_limb_t vlimb)$/;"	f
mpn_gcd_11	mini-gmp/mini-gmp.c	/^mpn_gcd_11 (mp_limb_t u, mp_limb_t v)$/;"	f	file:
mpn_gcd_subdiv_step	gmp-impl.h	4243;"	d
mpn_gcd_subdiv_step	mpn/gcd_subdiv_step.c	/^mpn_gcd_subdiv_step (mp_ptr ap, mp_ptr bp, mp_size_t n, mp_size_t s,$/;"	f
mpn_gcd_subdiv_step	mpn/generic/gcd_subdiv_step.c	/^mpn_gcd_subdiv_step (mp_ptr ap, mp_ptr bp, mp_size_t n, mp_size_t s,$/;"	f
mpn_gcdext	gmp.h	1521;"	d
mpn_gcdext	mpn/gcdext.c	/^mpn_gcdext (mp_ptr gp, mp_ptr up, mp_size_t *usizep,$/;"	f
mpn_gcdext	mpn/generic/gcdext.c	/^mpn_gcdext (mp_ptr gp, mp_ptr up, mp_size_t *usizep,$/;"	f
mpn_gcdext_1	gmp.h	1518;"	d
mpn_gcdext_1	mpn/gcdext_1.c	/^mpn_gcdext_1 (mp_limb_signed_t *sp, mp_limb_signed_t *tp,$/;"	f
mpn_gcdext_1	mpn/gcdext_1.c	/^mpn_gcdext_1 (mp_limb_signed_t *up, mp_limb_signed_t *vp,$/;"	f
mpn_gcdext_1	mpn/generic/gcdext_1.c	/^mpn_gcdext_1 (mp_limb_signed_t *sp, mp_limb_signed_t *tp,$/;"	f
mpn_gcdext_1	mpn/generic/gcdext_1.c	/^mpn_gcdext_1 (mp_limb_signed_t *up, mp_limb_signed_t *vp,$/;"	f
mpn_gcdext_hook	gmp-impl.h	/^gcd_subdiv_step_hook mpn_gcdext_hook;$/;"	v
mpn_gcdext_hook	gmp-impl.h	4259;"	d
mpn_gcdext_hook	mpn/gcdext_lehmer.c	/^mpn_gcdext_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f
mpn_gcdext_hook	mpn/generic/gcdext_lehmer.c	/^mpn_gcdext_hook (void *p, mp_srcptr gp, mp_size_t gn,$/;"	f
mpn_gcdext_lehmer_n	gmp-impl.h	4264;"	d
mpn_gcdext_lehmer_n	mpn/gcdext_lehmer.c	/^mpn_gcdext_lehmer_n (mp_ptr gp, mp_ptr up, mp_size_t *usize,$/;"	f
mpn_gcdext_lehmer_n	mpn/generic/gcdext_lehmer.c	/^mpn_gcdext_lehmer_n (mp_ptr gp, mp_ptr up, mp_size_t *usize,$/;"	f
mpn_get_base_info	mini-gmp/mini-gmp.c	/^mpn_get_base_info (struct mpn_base_info *info, mp_limb_t b)$/;"	f	file:
mpn_get_d	gmp-impl.h	3805;"	d
mpn_get_d	mpn/generic/get_d.c	/^mpn_get_d (mp_srcptr up, mp_size_t size, mp_size_t sign, long exp)$/;"	f
mpn_get_d	mpn/get_d.c	/^mpn_get_d (mp_srcptr up, mp_size_t size, mp_size_t sign, long exp)$/;"	f
mpn_get_str	gmp.h	1524;"	d
mpn_get_str	mini-gmp/mini-gmp.c	/^mpn_get_str (unsigned char *sp, int base, mp_ptr up, mp_size_t un)$/;"	f
mpn_get_str	mpn/generic/get_str.c	/^mpn_get_str (unsigned char *str, int base, mp_ptr up, mp_size_t un)$/;"	f
mpn_get_str	mpn/get_str.c	/^mpn_get_str (unsigned char *str, int base, mp_ptr up, mp_size_t un)$/;"	f
mpn_get_str_bits	mini-gmp/mini-gmp.c	/^mpn_get_str_bits (unsigned char *sp, unsigned bits, mp_srcptr up, mp_size_t un)$/;"	f	file:
mpn_get_str_other	mini-gmp/mini-gmp.c	/^mpn_get_str_other (unsigned char *sp,$/;"	f	file:
mpn_hamdist	gmp.h	1527;"	d
mpn_hamdist	mpn/cray/hamdist.c	/^mpn_hamdist (mp_srcptr p1, mp_srcptr p2, mp_size_t n)$/;"	f
mpn_hgcd	gmp-impl.h	4226;"	d
mpn_hgcd	mpn/generic/hgcd.c	/^mpn_hgcd (mp_ptr ap, mp_ptr bp, mp_size_t n,$/;"	f
mpn_hgcd	mpn/hgcd.c	/^mpn_hgcd (mp_ptr ap, mp_ptr bp, mp_size_t n,$/;"	f
mpn_hgcd2	gmp-impl.h	4178;"	d
mpn_hgcd2	mpn/generic/hgcd2.c	/^mpn_hgcd2 (mp_limb_t ah, mp_limb_t al, mp_limb_t bh, mp_limb_t bl,$/;"	f
mpn_hgcd2	mpn/hgcd2.c	/^mpn_hgcd2 (mp_limb_t ah, mp_limb_t al, mp_limb_t bh, mp_limb_t bl,$/;"	f
mpn_hgcd2_jacobi	gmp-impl.h	4187;"	d
mpn_hgcd2_jacobi	mpn/generic/hgcd2_jacobi.c	/^mpn_hgcd2_jacobi (mp_limb_t ah, mp_limb_t al, mp_limb_t bh, mp_limb_t bl,$/;"	f
mpn_hgcd2_jacobi	mpn/hgcd2_jacobi.c	/^mpn_hgcd2_jacobi (mp_limb_t ah, mp_limb_t al, mp_limb_t bh, mp_limb_t bl,$/;"	f
mpn_hgcd_appr	gmp-impl.h	4232;"	d
mpn_hgcd_appr	mpn/generic/hgcd_appr.c	/^mpn_hgcd_appr (mp_ptr ap, mp_ptr bp, mp_size_t n,$/;"	f
mpn_hgcd_appr	mpn/hgcd_appr.c	/^mpn_hgcd_appr (mp_ptr ap, mp_ptr bp, mp_size_t n,$/;"	f
mpn_hgcd_appr_itch	gmp-impl.h	4229;"	d
mpn_hgcd_appr_itch	mpn/generic/hgcd_appr.c	/^mpn_hgcd_appr_itch (mp_size_t n)$/;"	f
mpn_hgcd_appr_itch	mpn/hgcd_appr.c	/^mpn_hgcd_appr_itch (mp_size_t n)$/;"	f
mpn_hgcd_itch	gmp-impl.h	4223;"	d
mpn_hgcd_itch	mpn/generic/hgcd.c	/^mpn_hgcd_itch (mp_size_t n)$/;"	f
mpn_hgcd_itch	mpn/hgcd.c	/^mpn_hgcd_itch (mp_size_t n)$/;"	f
mpn_hgcd_jacobi	gmp-impl.h	4235;"	d
mpn_hgcd_jacobi	mpn/generic/hgcd_jacobi.c	/^mpn_hgcd_jacobi (mp_ptr ap, mp_ptr bp, mp_size_t n,$/;"	f
mpn_hgcd_jacobi	mpn/hgcd_jacobi.c	/^mpn_hgcd_jacobi (mp_ptr ap, mp_ptr bp, mp_size_t n,$/;"	f
mpn_hgcd_matrix_adjust	gmp-impl.h	4211;"	d
mpn_hgcd_matrix_adjust	mpn/generic/hgcd_matrix.c	/^mpn_hgcd_matrix_adjust (const struct hgcd_matrix *M,$/;"	f
mpn_hgcd_matrix_adjust	mpn/hgcd_matrix.c	/^mpn_hgcd_matrix_adjust (const struct hgcd_matrix *M,$/;"	f
mpn_hgcd_matrix_init	gmp-impl.h	4199;"	d
mpn_hgcd_matrix_init	mpn/generic/hgcd_matrix.c	/^mpn_hgcd_matrix_init (struct hgcd_matrix *M, mp_size_t n, mp_ptr p)$/;"	f
mpn_hgcd_matrix_init	mpn/hgcd_matrix.c	/^mpn_hgcd_matrix_init (struct hgcd_matrix *M, mp_size_t n, mp_ptr p)$/;"	f
mpn_hgcd_matrix_mul	gmp-impl.h	4208;"	d
mpn_hgcd_matrix_mul	mpn/generic/hgcd_matrix.c	/^mpn_hgcd_matrix_mul (struct hgcd_matrix *M, const struct hgcd_matrix *M1,$/;"	f
mpn_hgcd_matrix_mul	mpn/hgcd_matrix.c	/^mpn_hgcd_matrix_mul (struct hgcd_matrix *M, const struct hgcd_matrix *M1,$/;"	f
mpn_hgcd_matrix_mul_1	gmp-impl.h	4205;"	d
mpn_hgcd_matrix_mul_1	mpn/generic/hgcd_matrix.c	/^mpn_hgcd_matrix_mul_1 (struct hgcd_matrix *M, const struct hgcd_matrix1 *M1,$/;"	f
mpn_hgcd_matrix_mul_1	mpn/hgcd_matrix.c	/^mpn_hgcd_matrix_mul_1 (struct hgcd_matrix *M, const struct hgcd_matrix1 *M1,$/;"	f
mpn_hgcd_matrix_update_q	gmp-impl.h	4202;"	d
mpn_hgcd_matrix_update_q	mpn/generic/hgcd_matrix.c	/^mpn_hgcd_matrix_update_q (struct hgcd_matrix *M, mp_srcptr qp, mp_size_t qn,$/;"	f
mpn_hgcd_matrix_update_q	mpn/hgcd_matrix.c	/^mpn_hgcd_matrix_update_q (struct hgcd_matrix *M, mp_srcptr qp, mp_size_t qn,$/;"	f
mpn_hgcd_mul_matrix1_vector	gmp-impl.h	4181;"	d
mpn_hgcd_mul_matrix1_vector	mpn/generic/hgcd2.c	/^mpn_hgcd_mul_matrix1_vector (const struct hgcd_matrix1 *M,$/;"	f
mpn_hgcd_mul_matrix1_vector	mpn/hgcd2.c	/^mpn_hgcd_mul_matrix1_vector (const struct hgcd_matrix1 *M,$/;"	f
mpn_hgcd_reduce	gmp-impl.h	4217;"	d
mpn_hgcd_reduce	mpn/generic/hgcd_reduce.c	/^mpn_hgcd_reduce (struct hgcd_matrix *M,$/;"	f
mpn_hgcd_reduce	mpn/hgcd_reduce.c	/^mpn_hgcd_reduce (struct hgcd_matrix *M,$/;"	f
mpn_hgcd_reduce_itch	gmp-impl.h	4220;"	d
mpn_hgcd_reduce_itch	mpn/generic/hgcd_reduce.c	/^mpn_hgcd_reduce_itch (mp_size_t n, mp_size_t p)$/;"	f
mpn_hgcd_reduce_itch	mpn/hgcd_reduce.c	/^mpn_hgcd_reduce_itch (mp_size_t n, mp_size_t p)$/;"	f
mpn_hgcd_step	gmp-impl.h	4214;"	d
mpn_hgcd_step	mpn/generic/hgcd_step.c	/^mpn_hgcd_step (mp_size_t n, mp_ptr ap, mp_ptr bp, mp_size_t s,$/;"	f
mpn_hgcd_step	mpn/hgcd_step.c	/^mpn_hgcd_step (mp_size_t n, mp_ptr ap, mp_ptr bp, mp_size_t s,$/;"	f
mpn_incr_u	gmp-impl.h	2703;"	d
mpn_incr_u	gmp-impl.h	2709;"	d
mpn_incr_u	gmp-impl.h	2752;"	d
mpn_invert	gmp-impl.h	1482;"	d
mpn_invert	mpn/generic/invert.c	/^mpn_invert (mp_ptr ip, mp_srcptr dp, mp_size_t n, mp_ptr scratch)$/;"	f
mpn_invert	mpn/invert.c	/^mpn_invert (mp_ptr ip, mp_srcptr dp, mp_size_t n, mp_ptr scratch)$/;"	f
mpn_invert_3by2	mini-gmp/mini-gmp.c	/^mpn_invert_3by2 (mp_limb_t u1, mp_limb_t u0)$/;"	f
mpn_invert_itch	gmp-impl.h	1484;"	d
mpn_invert_limb	gmp-impl.h	2999;"	d
mpn_invert_limb	mini-gmp/mini-gmp.h	117;"	d
mpn_invert_limb	mpn/cray/ieee/invert_limb.c	/^mpn_invert_limb (mp_limb_t d)$/;"	f
mpn_invert_limb_table	mpn/x86_64/invert_limb_table.asm	/^mpn_invert_limb_table:$/;"	l
mpn_invertappr	gmp-impl.h	1488;"	d
mpn_invertappr	mpn/generic/invertappr.c	/^mpn_invertappr (mp_ptr ip, mp_srcptr dp, mp_size_t n, mp_ptr scratch)$/;"	f
mpn_invertappr	mpn/invertappr.c	/^mpn_invertappr (mp_ptr ip, mp_srcptr dp, mp_size_t n, mp_ptr scratch)$/;"	f
mpn_invertappr_itch	gmp-impl.h	1490;"	d
mpn_ior_n	gmp-impl.h	2561;"	d
mpn_ior_n	gmp-impl.h	2562;"	d
mpn_ior_n	gmp.h	1621;"	d
mpn_ior_n_fun	tests/devel/try.c	/^mpn_ior_n_fun (mp_ptr rp, mp_srcptr s1, mp_srcptr s2, mp_size_t size)$/;"	f
mpn_iorn_n	gmp-impl.h	2567;"	d
mpn_iorn_n	gmp-impl.h	2568;"	d
mpn_iorn_n	gmp.h	1623;"	d
mpn_iorn_n_fun	tests/devel/try.c	/^mpn_iorn_n_fun (mp_ptr rp, mp_srcptr s1, mp_srcptr s2, mp_size_t size)$/;"	f
mpn_jacobi_2	gmp-impl.h	1055;"	d
mpn_jacobi_2	mpn/generic/jacobi_2.c	/^mpn_jacobi_2 (mp_srcptr ap, mp_srcptr bp, unsigned bit)$/;"	f
mpn_jacobi_2	mpn/jacobi_2.c	/^mpn_jacobi_2 (mp_srcptr ap, mp_srcptr bp, unsigned bit)$/;"	f
mpn_jacobi_base	gmp-impl.h	1052;"	d
mpn_jacobi_base	mpn/generic/jacbase.c	/^mpn_jacobi_base (mp_limb_t a, mp_limb_t b, int bit)$/;"	f
mpn_jacobi_base	mpn/generic/jacbase.c	/^mpn_jacobi_base (mp_limb_t a, mp_limb_t b, int result_bit1)$/;"	f
mpn_jacobi_base	mpn/jacbase.c	/^mpn_jacobi_base (mp_limb_t a, mp_limb_t b, int bit)$/;"	f
mpn_jacobi_base	mpn/jacbase.c	/^mpn_jacobi_base (mp_limb_t a, mp_limb_t b, int result_bit1)$/;"	f
mpn_jacobi_finish	gmp-impl.h	/^mpn_jacobi_finish (unsigned bits)$/;"	f
mpn_jacobi_init	gmp-impl.h	/^mpn_jacobi_init (unsigned a, unsigned b, unsigned s)$/;"	f
mpn_jacobi_n	gmp-impl.h	1058;"	d
mpn_jacobi_n	mpn/generic/jacobi.c	/^mpn_jacobi_n (mp_ptr ap, mp_ptr bp, mp_size_t n, unsigned bits)$/;"	f
mpn_jacobi_n	mpn/jacobi.c	/^mpn_jacobi_n (mp_ptr ap, mp_ptr bp, mp_size_t n, unsigned bits)$/;"	f
mpn_jacobi_update	gmp-impl.h	/^mpn_jacobi_update (unsigned bits, unsigned denominator, unsigned q)$/;"	f
mpn_limb_get_str	mini-gmp/mini-gmp.c	/^mpn_limb_get_str (unsigned char *sp, mp_limb_t w,$/;"	f	file:
mpn_limb_size_in_base_2	mini-gmp/mini-gmp.c	/^mpn_limb_size_in_base_2 (mp_limb_t u)$/;"	f	file:
mpn_local_sqr	mpn/generic/sec_powm.c	131;"	d	file:
mpn_local_sqr	mpn/generic/sec_powm.c	134;"	d	file:
mpn_local_sqr	mpn/sec_powm.c	131;"	d	file:
mpn_local_sqr	mpn/sec_powm.c	134;"	d	file:
mpn_lshift	gmp.h	1530;"	d
mpn_lshift	mini-gmp/mini-gmp.c	/^mpn_lshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_lshift	mpn/cray/lshift.c	/^mpn_lshift (mp_ptr wp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_lshift	mpn/generic/lshift.c	/^mpn_lshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_lshift	mpn/lshift.c	/^mpn_lshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_lshiftc	gmp-impl.h	1008;"	d
mpn_lshiftc	mpn/generic/lshiftc.c	/^mpn_lshiftc (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_lshiftc	mpn/lshiftc.c	/^mpn_lshiftc (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_matrix22_mul	gmp-impl.h	4136;"	d
mpn_matrix22_mul	mpn/generic/matrix22_mul.c	/^mpn_matrix22_mul (mp_ptr r0, mp_ptr r1, mp_ptr r2, mp_ptr r3, mp_size_t rn,$/;"	f
mpn_matrix22_mul	mpn/matrix22_mul.c	/^mpn_matrix22_mul (mp_ptr r0, mp_ptr r1, mp_ptr r2, mp_ptr r3, mp_size_t rn,$/;"	f
mpn_matrix22_mul1_inverse_vector	gmp-impl.h	4184;"	d
mpn_matrix22_mul1_inverse_vector	mpn/generic/matrix22_mul1_inverse_vector.c	/^mpn_matrix22_mul1_inverse_vector (const struct hgcd_matrix1 *M,$/;"	f
mpn_matrix22_mul1_inverse_vector	mpn/matrix22_mul1_inverse_vector.c	/^mpn_matrix22_mul1_inverse_vector (const struct hgcd_matrix1 *M,$/;"	f
mpn_matrix22_mul_itch	gmp-impl.h	4140;"	d
mpn_matrix22_mul_itch	mpn/generic/matrix22_mul.c	/^mpn_matrix22_mul_itch (mp_size_t rn, mp_size_t mn)$/;"	f
mpn_matrix22_mul_itch	mpn/matrix22_mul.c	/^mpn_matrix22_mul_itch (mp_size_t rn, mp_size_t mn)$/;"	f
mpn_matrix22_mul_strassen	gmp-impl.h	4138;"	d
mpn_matrix22_mul_strassen	mpn/generic/matrix22_mul.c	/^mpn_matrix22_mul_strassen (mp_ptr r0, mp_ptr r1, mp_ptr r2, mp_ptr r3, mp_size_t rn,$/;"	f
mpn_matrix22_mul_strassen	mpn/matrix22_mul.c	/^mpn_matrix22_mul_strassen (mp_ptr r0, mp_ptr r1, mp_ptr r2, mp_ptr r3, mp_size_t rn,$/;"	f
mpn_mod_1	gmp.h	1533;"	d
mpn_mod_1	mpn/generic/mod_1.c	/^mpn_mod_1 (mp_srcptr ap, mp_size_t n, mp_limb_t b)$/;"	f
mpn_mod_1	mpn/mod_1.c	/^mpn_mod_1 (mp_srcptr ap, mp_size_t n, mp_limb_t b)$/;"	f
mpn_mod_1	mpn/sparc64/mod_1.c	/^mpn_mod_1 (mp_srcptr ap, mp_size_t n, mp_limb_t b)$/;"	f
mpn_mod_1_1p	gmp-impl.h	1137;"	d
mpn_mod_1_1p	mpn/generic/mod_1.c	80;"	d	file:
mpn_mod_1_1p	mpn/generic/mod_1.c	81;"	d	file:
mpn_mod_1_1p	mpn/generic/mod_1_1.c	/^mpn_mod_1_1p (mp_srcptr ap, mp_size_t n, mp_limb_t b, const mp_limb_t bmodb[4])$/;"	f
mpn_mod_1_1p	mpn/mod_1.c	80;"	d	file:
mpn_mod_1_1p	mpn/mod_1.c	81;"	d	file:
mpn_mod_1_1p	mpn/mod_1_1.c	/^mpn_mod_1_1p (mp_srcptr ap, mp_size_t n, mp_limb_t b, const mp_limb_t bmodb[4])$/;"	f
mpn_mod_1_1p	tune/mod_1_1-1.c	36;"	d	file:
mpn_mod_1_1p	tune/mod_1_1-1.c	38;"	d	file:
mpn_mod_1_1p	tune/mod_1_1-2.c	36;"	d	file:
mpn_mod_1_1p	tune/mod_1_1-2.c	38;"	d	file:
mpn_mod_1_1p_cps	gmp-impl.h	1133;"	d
mpn_mod_1_1p_cps	mpn/generic/mod_1.c	86;"	d	file:
mpn_mod_1_1p_cps	mpn/generic/mod_1.c	87;"	d	file:
mpn_mod_1_1p_cps	mpn/generic/mod_1_1.c	/^mpn_mod_1_1p_cps (mp_limb_t cps[4], mp_limb_t b)$/;"	f
mpn_mod_1_1p_cps	mpn/mod_1.c	86;"	d	file:
mpn_mod_1_1p_cps	mpn/mod_1.c	87;"	d	file:
mpn_mod_1_1p_cps	mpn/mod_1_1.c	/^mpn_mod_1_1p_cps (mp_limb_t cps[4], mp_limb_t b)$/;"	f
mpn_mod_1_1p_cps	tune/mod_1_1-1.c	37;"	d	file:
mpn_mod_1_1p_cps	tune/mod_1_1-1.c	39;"	d	file:
mpn_mod_1_1p_cps	tune/mod_1_1-2.c	37;"	d	file:
mpn_mod_1_1p_cps	tune/mod_1_1-2.c	39;"	d	file:
mpn_mod_1_anynorm	mpn/sparc64/mod_1.c	/^mpn_mod_1_anynorm (mp_srcptr src_limbptr, mp_size_t size_limbs, mp_limb_t d_limb)$/;"	f	file:
mpn_mod_1_norm	mpn/generic/mod_1.c	/^mpn_mod_1_norm (mp_srcptr up, mp_size_t un, mp_limb_t d)$/;"	f	file:
mpn_mod_1_norm	mpn/mod_1.c	/^mpn_mod_1_norm (mp_srcptr up, mp_size_t un, mp_limb_t d)$/;"	f	file:
mpn_mod_1_unnorm	mpn/generic/mod_1.c	/^mpn_mod_1_unnorm (mp_srcptr up, mp_size_t un, mp_limb_t d)$/;"	f	file:
mpn_mod_1_unnorm	mpn/mod_1.c	/^mpn_mod_1_unnorm (mp_srcptr up, mp_size_t un, mp_limb_t d)$/;"	f	file:
mpn_mod_1c	gmp-impl.h	1061;"	d
mpn_mod_1s_2p	gmp-impl.h	1146;"	d
mpn_mod_1s_2p	mpn/generic/mod_1_2.c	/^mpn_mod_1s_2p (mp_srcptr ap, mp_size_t n, mp_limb_t b, const mp_limb_t cps[5])$/;"	f
mpn_mod_1s_2p	mpn/mod_1_2.c	/^mpn_mod_1s_2p (mp_srcptr ap, mp_size_t n, mp_limb_t b, const mp_limb_t cps[5])$/;"	f
mpn_mod_1s_2p_cps	gmp-impl.h	1142;"	d
mpn_mod_1s_2p_cps	mpn/generic/mod_1_2.c	/^mpn_mod_1s_2p_cps (mp_limb_t cps[5], mp_limb_t b)$/;"	f
mpn_mod_1s_2p_cps	mpn/mod_1_2.c	/^mpn_mod_1s_2p_cps (mp_limb_t cps[5], mp_limb_t b)$/;"	f
mpn_mod_1s_3p	gmp-impl.h	1155;"	d
mpn_mod_1s_3p	mpn/generic/mod_1_3.c	/^mpn_mod_1s_3p (mp_srcptr ap, mp_size_t n, mp_limb_t b, const mp_limb_t cps[6])$/;"	f
mpn_mod_1s_3p	mpn/mod_1_3.c	/^mpn_mod_1s_3p (mp_srcptr ap, mp_size_t n, mp_limb_t b, const mp_limb_t cps[6])$/;"	f
mpn_mod_1s_3p_cps	gmp-impl.h	1151;"	d
mpn_mod_1s_3p_cps	mpn/generic/mod_1_3.c	/^mpn_mod_1s_3p_cps (mp_limb_t cps[6], mp_limb_t b)$/;"	f
mpn_mod_1s_3p_cps	mpn/mod_1_3.c	/^mpn_mod_1s_3p_cps (mp_limb_t cps[6], mp_limb_t b)$/;"	f
mpn_mod_1s_4p	gmp-impl.h	1164;"	d
mpn_mod_1s_4p	mpn/generic/mod_1_4.c	/^mpn_mod_1s_4p (mp_srcptr ap, mp_size_t n, mp_limb_t b, const mp_limb_t cps[7])$/;"	f
mpn_mod_1s_4p	mpn/mod_1_4.c	/^mpn_mod_1s_4p (mp_srcptr ap, mp_size_t n, mp_limb_t b, const mp_limb_t cps[7])$/;"	f
mpn_mod_1s_4p	mpn/sparc64/mod_1_4.c	/^mpn_mod_1s_4p (mp_srcptr ap, mp_size_t n, mp_limb_t b, const mp_limb_t cps[7])$/;"	f
mpn_mod_1s_4p_cps	gen-trialdivtab.c	/^mpn_mod_1s_4p_cps (mpz_t cps[7], mpz_t bparm)$/;"	f
mpn_mod_1s_4p_cps	gmp-impl.h	1160;"	d
mpn_mod_1s_4p_cps	mpn/generic/mod_1_4.c	/^mpn_mod_1s_4p_cps (mp_limb_t cps[7], mp_limb_t b)$/;"	f
mpn_mod_1s_4p_cps	mpn/mod_1_4.c	/^mpn_mod_1s_4p_cps (mp_limb_t cps[7], mp_limb_t b)$/;"	f
mpn_mod_1s_4p_cps	mpn/sparc64/mod_1_4.c	/^mpn_mod_1s_4p_cps (mp_limb_t cps[7], mp_limb_t b)$/;"	f
mpn_mod_34lsub1	gmp-impl.h	3190;"	d
mpn_mod_34lsub1	mpn/generic/mod_34lsub1.c	/^mpn_mod_34lsub1 (mp_srcptr p, mp_size_t n)$/;"	f
mpn_mod_34lsub1	mpn/mod_34lsub1.c	/^mpn_mod_34lsub1 (mp_srcptr p, mp_size_t n)$/;"	f
mpn_modexact_1_odd	gmp-impl.h	3224;"	d
mpn_modexact_1_odd	gmp-impl.h	3227;"	d
mpn_modexact_1_odd_fun	tests/devel/try.c	/^mpn_modexact_1_odd_fun (mp_srcptr ptr, mp_size_t size, mp_limb_t divisor)$/;"	f
mpn_modexact_1c_odd	gmp-impl.h	3219;"	d
mpn_modexact_1c_odd	mpn/generic/mode1o.c	/^mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size, mp_limb_t d,$/;"	f
mpn_modexact_1c_odd	mpn/mode1o.c	/^mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size, mp_limb_t d,$/;"	f
mpn_modexact_1c_odd	mpn/sparc64/mode1o.c	/^mpn_modexact_1c_odd (mp_srcptr src, mp_size_t size, mp_limb_t d, mp_limb_t orig_c)$/;"	f
mpn_mu_bdiv_q	gmp-impl.h	1529;"	d
mpn_mu_bdiv_q	mpn/generic/mu_bdiv_q.c	/^mpn_mu_bdiv_q (mp_ptr qp,$/;"	f
mpn_mu_bdiv_q	mpn/mu_bdiv_q.c	/^mpn_mu_bdiv_q (mp_ptr qp,$/;"	f
mpn_mu_bdiv_q_itch	gmp-impl.h	1531;"	d
mpn_mu_bdiv_q_itch	mpn/generic/mu_bdiv_q.c	/^mpn_mu_bdiv_q_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_mu_bdiv_q_itch	mpn/mu_bdiv_q.c	/^mpn_mu_bdiv_q_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_mu_bdiv_qr	gmp-impl.h	1524;"	d
mpn_mu_bdiv_qr	mpn/generic/mu_bdiv_qr.c	/^mpn_mu_bdiv_qr (mp_ptr qp,$/;"	f
mpn_mu_bdiv_qr	mpn/mu_bdiv_qr.c	/^mpn_mu_bdiv_qr (mp_ptr qp,$/;"	f
mpn_mu_bdiv_qr_itch	gmp-impl.h	1526;"	d
mpn_mu_bdiv_qr_itch	mpn/generic/mu_bdiv_qr.c	/^mpn_mu_bdiv_qr_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_mu_bdiv_qr_itch	mpn/mu_bdiv_qr.c	/^mpn_mu_bdiv_qr_itch (mp_size_t nn, mp_size_t dn)$/;"	f
mpn_mu_div_q	gmp-impl.h	1474;"	d
mpn_mu_div_q	mpn/generic/mu_div_q.c	/^mpn_mu_div_q (mp_ptr qp,$/;"	f
mpn_mu_div_q	mpn/mu_div_q.c	/^mpn_mu_div_q (mp_ptr qp,$/;"	f
mpn_mu_div_q_itch	gmp-impl.h	1476;"	d
mpn_mu_div_q_itch	mpn/generic/mu_div_q.c	/^mpn_mu_div_q_itch (mp_size_t nn, mp_size_t dn, int mua_k)$/;"	f
mpn_mu_div_q_itch	mpn/mu_div_q.c	/^mpn_mu_div_q_itch (mp_size_t nn, mp_size_t dn, int mua_k)$/;"	f
mpn_mu_div_qr	gmp-impl.h	1452;"	d
mpn_mu_div_qr	mpn/generic/mu_div_qr.c	/^mpn_mu_div_qr (mp_ptr qp,$/;"	f
mpn_mu_div_qr	mpn/mu_div_qr.c	/^mpn_mu_div_qr (mp_ptr qp,$/;"	f
mpn_mu_div_qr2	mpn/generic/mu_div_qr.c	/^mpn_mu_div_qr2 (mp_ptr qp,$/;"	f	file:
mpn_mu_div_qr2	mpn/mu_div_qr.c	/^mpn_mu_div_qr2 (mp_ptr qp,$/;"	f	file:
mpn_mu_div_qr_choose_in	gmp-impl.h	1456;"	d
mpn_mu_div_qr_choose_in	mpn/generic/mu_div_qr.c	/^mpn_mu_div_qr_choose_in (mp_size_t qn, mp_size_t dn, int k)$/;"	f
mpn_mu_div_qr_choose_in	mpn/mu_div_qr.c	/^mpn_mu_div_qr_choose_in (mp_size_t qn, mp_size_t dn, int k)$/;"	f
mpn_mu_div_qr_itch	gmp-impl.h	1454;"	d
mpn_mu_div_qr_itch	mpn/generic/mu_div_qr.c	/^mpn_mu_div_qr_itch (mp_size_t nn, mp_size_t dn, int mua_k)$/;"	f
mpn_mu_div_qr_itch	mpn/mu_div_qr.c	/^mpn_mu_div_qr_itch (mp_size_t nn, mp_size_t dn, int mua_k)$/;"	f
mpn_mu_divappr_q	gmp-impl.h	1464;"	d
mpn_mu_divappr_q	mpn/generic/mu_divappr_q.c	/^mpn_mu_divappr_q (mp_ptr qp,$/;"	f
mpn_mu_divappr_q	mpn/mu_divappr_q.c	/^mpn_mu_divappr_q (mp_ptr qp,$/;"	f
mpn_mu_divappr_q_choose_in	gmp-impl.h	1468;"	d
mpn_mu_divappr_q_choose_in	mpn/generic/mu_divappr_q.c	/^mpn_mu_divappr_q_choose_in (mp_size_t qn, mp_size_t dn, int k)$/;"	f
mpn_mu_divappr_q_choose_in	mpn/mu_divappr_q.c	/^mpn_mu_divappr_q_choose_in (mp_size_t qn, mp_size_t dn, int k)$/;"	f
mpn_mu_divappr_q_itch	gmp-impl.h	1466;"	d
mpn_mu_divappr_q_itch	mpn/generic/mu_divappr_q.c	/^mpn_mu_divappr_q_itch (mp_size_t nn, mp_size_t dn, int mua_k)$/;"	f
mpn_mu_divappr_q_itch	mpn/mu_divappr_q.c	/^mpn_mu_divappr_q_itch (mp_size_t nn, mp_size_t dn, int mua_k)$/;"	f
mpn_mul	gmp.h	1536;"	d
mpn_mul	mini-gmp/mini-gmp.c	/^mpn_mul (mp_ptr rp, mp_srcptr up, mp_size_t un, mp_srcptr vp, mp_size_t vn)$/;"	f
mpn_mul	mpn/generic/mul.c	/^mpn_mul (mp_ptr prodp,$/;"	f
mpn_mul	mpn/mul.c	/^mpn_mul (mp_ptr prodp,$/;"	f
mpn_mul_1	gmp.h	1539;"	d
mpn_mul_1	mini-gmp/mini-gmp.c	/^mpn_mul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_mul_1	mpn/cray/cfp/mul_1.c	/^mpn_mul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t limb)$/;"	f
mpn_mul_1	mpn/cray/ieee/mul_1.c	/^mpn_mul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_mul_1	mpn/generic/mul_1.c	/^mpn_mul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_mul_1	mpn/mul_1.c	/^mpn_mul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_mul_1c	gmp-impl.h	1064;"	d
mpn_mul_2	gmp-impl.h	1067;"	d
mpn_mul_3	gmp-impl.h	1070;"	d
mpn_mul_4	gmp-impl.h	1073;"	d
mpn_mul_5	gmp-impl.h	1076;"	d
mpn_mul_6	gmp-impl.h	1079;"	d
mpn_mul_basecase	gmp-impl.h	1083;"	d
mpn_mul_basecase	mpn/cray/ieee/mul_basecase.c	/^mpn_mul_basecase (mp_ptr rp,$/;"	f
mpn_mul_basecase	mpn/generic/mul_basecase.c	/^mpn_mul_basecase (mp_ptr rp,$/;"	f
mpn_mul_basecase	mpn/mul_basecase.c	/^mpn_mul_basecase (mp_ptr rp,$/;"	f
mpn_mul_fft	gmp-impl.h	1409;"	d
mpn_mul_fft	mpn/generic/mul_fft.c	/^mpn_mul_fft (mp_ptr op, mp_size_t pl,$/;"	f
mpn_mul_fft	mpn/mul_fft.c	/^mpn_mul_fft (mp_ptr op, mp_size_t pl,$/;"	f
mpn_mul_fft_decompose	mpn/generic/mul_fft.c	/^mpn_mul_fft_decompose (mp_ptr A, mp_ptr *Ap, mp_size_t K, mp_size_t nprime,$/;"	f	file:
mpn_mul_fft_decompose	mpn/mul_fft.c	/^mpn_mul_fft_decompose (mp_ptr A, mp_ptr *Ap, mp_size_t K, mp_size_t nprime,$/;"	f	file:
mpn_mul_fft_full	gmp-impl.h	1412;"	d
mpn_mul_fft_full	mpn/generic/mul_fft.c	/^mpn_mul_fft_full (mp_ptr op,$/;"	f
mpn_mul_fft_full	mpn/mul_fft.c	/^mpn_mul_fft_full (mp_ptr op,$/;"	f
mpn_mul_fft_internal	mpn/generic/mul_fft.c	/^mpn_mul_fft_internal (mp_ptr op, mp_size_t pl, int k,$/;"	f	file:
mpn_mul_fft_internal	mpn/mul_fft.c	/^mpn_mul_fft_internal (mp_ptr op, mp_size_t pl, int k,$/;"	f	file:
mpn_mul_fft_lcm	mpn/generic/mul_fft.c	/^mpn_mul_fft_lcm (mp_bitcnt_t a, int k)$/;"	f	file:
mpn_mul_fft_lcm	mpn/mul_fft.c	/^mpn_mul_fft_lcm (mp_bitcnt_t a, int k)$/;"	f	file:
mpn_mul_fft_lcm	tune/tuneup.c	/^mpn_mul_fft_lcm (size_t a, unsigned int k)$/;"	f	file:
mpn_mul_n	gmp.h	1542;"	d
mpn_mul_n	mini-gmp/mini-gmp.c	/^mpn_mul_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f
mpn_mul_n	mpn/generic/mul_n.c	/^mpn_mul_n (mp_ptr p, mp_srcptr a, mp_srcptr b, mp_size_t n)$/;"	f
mpn_mul_n	mpn/mul_n.c	/^mpn_mul_n (mp_ptr p, mp_srcptr a, mp_srcptr b, mp_size_t n)$/;"	f
mpn_mullo_basecase	gmp-impl.h	1091;"	d
mpn_mullo_basecase	mpn/generic/mullo_basecase.c	/^mpn_mullo_basecase (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_mullo_basecase	mpn/mullo_basecase.c	/^mpn_mullo_basecase (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_mullo_itch	tests/mpn/t-mullo.c	64;"	d	file:
mpn_mullo_n	gmp-impl.h	1087;"	d
mpn_mullo_n	mpn/generic/mullo_n.c	/^mpn_mullo_n (mp_ptr rp, mp_srcptr xp, mp_srcptr yp, mp_size_t n)$/;"	f
mpn_mullo_n	mpn/mullo_n.c	/^mpn_mullo_n (mp_ptr rp, mp_srcptr xp, mp_srcptr yp, mp_size_t n)$/;"	f
mpn_mullo_n_itch	mpn/generic/mullo_n.c	/^mpn_mullo_n_itch (mp_size_t n)$/;"	f	file:
mpn_mullo_n_itch	mpn/mullo_n.c	/^mpn_mullo_n_itch (mp_size_t n)$/;"	f	file:
mpn_mulmid	gmp-impl.h	1112;"	d
mpn_mulmid	mpn/generic/mulmid.c	/^mpn_mulmid (mp_ptr rp,$/;"	f
mpn_mulmid	mpn/mulmid.c	/^mpn_mulmid (mp_ptr rp,$/;"	f
mpn_mulmid_basecase	gmp-impl.h	1106;"	d
mpn_mulmid_basecase	mpn/generic/mulmid_basecase.c	/^mpn_mulmid_basecase (mp_ptr rp,$/;"	f
mpn_mulmid_basecase	mpn/mulmid_basecase.c	/^mpn_mulmid_basecase (mp_ptr rp,$/;"	f
mpn_mulmid_n	gmp-impl.h	1109;"	d
mpn_mulmid_n	mpn/generic/mulmid_n.c	/^mpn_mulmid_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f
mpn_mulmid_n	mpn/mulmid_n.c	/^mpn_mulmid_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f
mpn_mulmod_bnm1	gmp-impl.h	1170;"	d
mpn_mulmod_bnm1	mpn/generic/mulmod_bnm1.c	/^mpn_mulmod_bnm1 (mp_ptr rp, mp_size_t rn, mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn, mp_ptr tp)$/;"	f
mpn_mulmod_bnm1	mpn/mulmod_bnm1.c	/^mpn_mulmod_bnm1 (mp_ptr rp, mp_size_t rn, mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn, mp_ptr tp)$/;"	f
mpn_mulmod_bnm1_itch	gmp-impl.h	/^mpn_mulmod_bnm1_itch (mp_size_t rn, mp_size_t an, mp_size_t bn) {$/;"	f
mpn_mulmod_bnm1_next_size	gmp-impl.h	1172;"	d
mpn_mulmod_bnm1_next_size	mpn/generic/mulmod_bnm1.c	/^mpn_mulmod_bnm1_next_size (mp_size_t n)$/;"	f
mpn_mulmod_bnm1_next_size	mpn/mulmod_bnm1.c	/^mpn_mulmod_bnm1_next_size (mp_size_t n)$/;"	f
mpn_nand_n	gmp-impl.h	2555;"	d
mpn_nand_n	gmp-impl.h	2556;"	d
mpn_nand_n	gmp.h	1619;"	d
mpn_nand_n_fun	tests/devel/try.c	/^mpn_nand_n_fun (mp_ptr rp, mp_srcptr s1, mp_srcptr s2, mp_size_t size)$/;"	f
mpn_neg	gmp.h	/^mpn_neg (mp_ptr __gmp_rp, mp_srcptr __gmp_up, mp_size_t __gmp_n)$/;"	f
mpn_neg	gmp.h	1548;"	d
mpn_neg	mini-gmp/mini-gmp.c	/^mpn_neg (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_ni_invertappr	gmp-impl.h	1486;"	d
mpn_ni_invertappr	mpn/generic/invertappr.c	/^mpn_ni_invertappr (mp_ptr ip, mp_srcptr dp, mp_size_t n, mp_ptr scratch)$/;"	f
mpn_ni_invertappr	mpn/invertappr.c	/^mpn_ni_invertappr (mp_ptr ip, mp_srcptr dp, mp_size_t n, mp_ptr scratch)$/;"	f
mpn_nior_n	gmp-impl.h	2573;"	d
mpn_nior_n	gmp-impl.h	2574;"	d
mpn_nior_n	gmp.h	1625;"	d
mpn_nior_n_fun	tests/devel/try.c	/^mpn_nior_n_fun (mp_ptr rp, mp_srcptr s1, mp_srcptr s2, mp_size_t size)$/;"	f
mpn_normalized_size	mini-gmp/mini-gmp.c	/^mpn_normalized_size (mp_srcptr xp, mp_size_t n)$/;"	f	file:
mpn_nussbaumer_mul	gmp-impl.h	1415;"	d
mpn_nussbaumer_mul	mpn/generic/nussbaumer_mul.c	/^mpn_nussbaumer_mul (mp_ptr pp,$/;"	f
mpn_nussbaumer_mul	mpn/nussbaumer_mul.c	/^mpn_nussbaumer_mul (mp_ptr pp,$/;"	f
mpn_perfect_power_p	gmp.h	1559;"	d
mpn_perfect_power_p	mpn/generic/perfpow.c	/^mpn_perfect_power_p (mp_srcptr np, mp_size_t n)$/;"	f
mpn_perfect_power_p	mpn/perfpow.c	/^mpn_perfect_power_p (mp_srcptr np, mp_size_t n)$/;"	f
mpn_perfect_square_p	gmp.h	1556;"	d
mpn_perfect_square_p	mini-gmp/mini-gmp.c	/^mpn_perfect_square_p (mp_srcptr p, mp_size_t n)$/;"	f
mpn_perfect_square_p	mpn/generic/perfsqr.c	/^mpn_perfect_square_p (mp_srcptr up, mp_size_t usize)$/;"	f
mpn_perfect_square_p	mpn/perfsqr.c	/^mpn_perfect_square_p (mp_srcptr up, mp_size_t usize)$/;"	f
mpn_pi1_bdiv_q_1	gmp-impl.h	1500;"	d
mpn_pi1_bdiv_q_1	mpn/bdiv_q_1.c	/^mpn_pi1_bdiv_q_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t d,$/;"	f
mpn_pi1_bdiv_q_1	mpn/generic/bdiv_q_1.c	/^mpn_pi1_bdiv_q_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t d,$/;"	f
mpn_popcount	gmp.h	1562;"	d
mpn_popcount	mini-gmp/mini-gmp.c	/^mpn_popcount (mp_srcptr p, mp_size_t n)$/;"	f
mpn_popcount	mpn/cray/popcount.c	/^mpn_popcount (mp_srcptr p, mp_size_t n)$/;"	f
mpn_pow_1	gmp.h	1565;"	d
mpn_pow_1	mpn/generic/pow_1.c	/^mpn_pow_1 (mp_ptr rp, mp_srcptr bp, mp_size_t bn, mp_limb_t exp, mp_ptr tp)$/;"	f
mpn_pow_1	mpn/pow_1.c	/^mpn_pow_1 (mp_ptr rp, mp_srcptr bp, mp_size_t bn, mp_limb_t exp, mp_ptr tp)$/;"	f
mpn_pow_1_highpart	mpf/get_str.c	/^mpn_pow_1_highpart (mp_ptr rp, mp_size_t *ignp,$/;"	f	file:
mpn_pow_1_highpart	mpf/set_str.c	/^mpn_pow_1_highpart (mp_ptr rp, mp_size_t *ignp,$/;"	f	file:
mpn_powlo	gmp-impl.h	1559;"	d
mpn_powlo	mpn/generic/powlo.c	/^mpn_powlo (mp_ptr rp, mp_srcptr bp,$/;"	f
mpn_powlo	mpn/powlo.c	/^mpn_powlo (mp_ptr rp, mp_srcptr bp,$/;"	f
mpn_powm	gmp-impl.h	1557;"	d
mpn_powm	mpn/generic/powm.c	/^mpn_powm (mp_ptr rp, mp_srcptr bp, mp_size_t bn,$/;"	f
mpn_powm	mpn/powm.c	/^mpn_powm (mp_ptr rp, mp_srcptr bp, mp_size_t bn,$/;"	f
mpn_pre_set_str	tune/set_strp.c	/^mpn_pre_set_str (mp_ptr wp, unsigned char *str, size_t str_len, powers_t *powtab, mp_ptr tp)$/;"	f
mpn_preinv_divrem_1	gmp-impl.h	3157;"	d
mpn_preinv_divrem_1	mpn/generic/pre_divrem_1.c	/^mpn_preinv_divrem_1 (mp_ptr qp, mp_size_t xsize,$/;"	f
mpn_preinv_divrem_1	mpn/pre_divrem_1.c	/^mpn_preinv_divrem_1 (mp_ptr qp, mp_size_t xsize,$/;"	f
mpn_preinv_mod_1	gmp.h	1569;"	d
mpn_preinv_mod_1	mpn/generic/pre_mod_1.c	/^mpn_preinv_mod_1 (mp_srcptr up, mp_size_t un, mp_limb_t d, mp_limb_t dinv)$/;"	f
mpn_preinv_mod_1	mpn/pre_mod_1.c	/^mpn_preinv_mod_1 (mp_srcptr up, mp_size_t un, mp_limb_t d, mp_limb_t dinv)$/;"	f
mpn_preinv_mu_div_qr	gmp-impl.h	1459;"	d
mpn_preinv_mu_div_qr	mpn/generic/mu_div_qr.c	/^mpn_preinv_mu_div_qr (mp_ptr qp,$/;"	f
mpn_preinv_mu_div_qr	mpn/mu_div_qr.c	/^mpn_preinv_mu_div_qr (mp_ptr qp,$/;"	f
mpn_preinv_mu_div_qr_itch	gmp-impl.h	1461;"	d
mpn_preinv_mu_div_qr_itch	mpn/generic/mu_div_qr.c	/^mpn_preinv_mu_div_qr_itch (mp_size_t nn, mp_size_t dn, mp_size_t in)$/;"	f
mpn_preinv_mu_div_qr_itch	mpn/mu_div_qr.c	/^mpn_preinv_mu_div_qr_itch (mp_size_t nn, mp_size_t dn, mp_size_t in)$/;"	f
mpn_preinv_mu_divappr_q	gmp-impl.h	1471;"	d
mpn_preinv_mu_divappr_q	mpn/generic/mu_divappr_q.c	/^mpn_preinv_mu_divappr_q (mp_ptr qp,$/;"	f
mpn_preinv_mu_divappr_q	mpn/mu_divappr_q.c	/^mpn_preinv_mu_divappr_q (mp_ptr qp,$/;"	f
mpn_print	tests/devel/anymul_1.c	/^mpn_print (mp_ptr p, mp_size_t size)$/;"	f	file:
mpn_print	tests/devel/aors_n.c	/^mpn_print (mp_ptr p, mp_size_t size)$/;"	f	file:
mpn_print	tests/devel/copy.c	/^mpn_print (mp_ptr p, mp_size_t size)$/;"	f	file:
mpn_print	tests/devel/divmod_1.c	/^mpn_print (mp_ptr p, mp_size_t size)$/;"	f	file:
mpn_print	tests/devel/logops_n.c	/^mpn_print (mp_ptr p, mp_size_t size)$/;"	f	file:
mpn_print	tests/devel/shift.c	/^mpn_print (mp_ptr p, mp_size_t size)$/;"	f	file:
mpn_random	gmp.h	1572;"	d
mpn_random	mpn/generic/random.c	/^mpn_random (mp_ptr ptr, mp_size_t size)$/;"	f
mpn_random	mpn/random.c	/^mpn_random (mp_ptr ptr, mp_size_t size)$/;"	f
mpn_random2	gmp.h	1575;"	d
mpn_random2	mpn/generic/random2.c	/^mpn_random2 (mp_ptr rp, mp_size_t n)$/;"	f
mpn_random2	mpn/random2.c	/^mpn_random2 (mp_ptr rp, mp_size_t n)$/;"	f
mpn_recdump	mpn/dump.c	/^mpn_recdump (mp_ptr p, mp_size_t n)$/;"	f	file:
mpn_recdump	mpn/generic/dump.c	/^mpn_recdump (mp_ptr p, mp_size_t n)$/;"	f	file:
mpn_redc_1	gmp-impl.h	1119;"	d
mpn_redc_1	mpn/generic/redc_1.c	/^mpn_redc_1 (mp_ptr rp, mp_ptr up, mp_srcptr mp, mp_size_t n, mp_limb_t invm)$/;"	f
mpn_redc_1	mpn/redc_1.c	/^mpn_redc_1 (mp_ptr rp, mp_ptr up, mp_srcptr mp, mp_size_t n, mp_limb_t invm)$/;"	f
mpn_redc_2	gmp-impl.h	1124;"	d
mpn_redc_2	mpn/generic/redc_2.c	/^mpn_redc_2 (mp_ptr rp, mp_ptr up, mp_srcptr mp, mp_size_t n, mp_srcptr mip)$/;"	f
mpn_redc_2	mpn/redc_2.c	/^mpn_redc_2 (mp_ptr rp, mp_ptr up, mp_srcptr mp, mp_size_t n, mp_srcptr mip)$/;"	f
mpn_redc_n	gmp-impl.h	1128;"	d
mpn_redc_n	mpn/generic/redc_n.c	/^mpn_redc_n (mp_ptr rp, mp_ptr up, mp_srcptr mp, mp_size_t n, mp_srcptr ip)$/;"	f
mpn_redc_n	mpn/redc_n.c	/^mpn_redc_n (mp_ptr rp, mp_ptr up, mp_srcptr mp, mp_size_t n, mp_srcptr ip)$/;"	f
mpn_remove	gmp-impl.h	2593;"	d
mpn_remove	mpn/generic/remove.c	/^mpn_remove (mp_ptr wp, mp_size_t *wn,$/;"	f
mpn_remove	mpn/remove.c	/^mpn_remove (mp_ptr wp, mp_size_t *wn,$/;"	f
mpn_rootrem	gmp-impl.h	1677;"	d
mpn_rootrem	mpn/generic/rootrem.c	/^mpn_rootrem (mp_ptr rootp, mp_ptr remp,$/;"	f
mpn_rootrem	mpn/rootrem.c	/^mpn_rootrem (mp_ptr rootp, mp_ptr remp,$/;"	f
mpn_rootrem_internal	mpn/generic/rootrem.c	/^mpn_rootrem_internal (mp_ptr rootp, mp_ptr remp, mp_srcptr up, mp_size_t un,$/;"	f	file:
mpn_rootrem_internal	mpn/rootrem.c	/^mpn_rootrem_internal (mp_ptr rootp, mp_ptr remp, mp_srcptr up, mp_size_t un,$/;"	f	file:
mpn_rsblsh1_n	gmp-impl.h	1598;"	d
mpn_rsblsh1_n	gmp-impl.h	1599;"	d
mpn_rsblsh1_n	gmp-impl.h	932;"	d
mpn_rsblsh1_nc	gmp-impl.h	934;"	d
mpn_rsblsh2_n	gmp-impl.h	1604;"	d
mpn_rsblsh2_n	gmp-impl.h	1605;"	d
mpn_rsblsh2_n	gmp-impl.h	979;"	d
mpn_rsblsh2_nc	gmp-impl.h	981;"	d
mpn_rsblsh_n	gmp-impl.h	986;"	d
mpn_rsblsh_nc	gmp-impl.h	988;"	d
mpn_rsh1add_n	gmp-impl.h	993;"	d
mpn_rsh1add_nc	gmp-impl.h	995;"	d
mpn_rsh1sub_n	gmp-impl.h	1002;"	d
mpn_rsh1sub_nc	gmp-impl.h	1004;"	d
mpn_rshift	gmp.h	1578;"	d
mpn_rshift	mini-gmp/mini-gmp.c	/^mpn_rshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_rshift	mpn/cray/rshift.c	/^mpn_rshift (mp_ptr wp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_rshift	mpn/generic/rshift.c	/^mpn_rshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_rshift	mpn/rshift.c	/^mpn_rshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)$/;"	f
mpn_sb_get_str	mpn/generic/get_str.c	/^mpn_sb_get_str (unsigned char *str, size_t len,$/;"	f	file:
mpn_sb_get_str	mpn/get_str.c	/^mpn_sb_get_str (unsigned char *str, size_t len,$/;"	f	file:
mpn_sbpi1_bdiv_q	gmp-impl.h	1506;"	d
mpn_sbpi1_bdiv_q	mpn/generic/sbpi1_bdiv_q.c	/^mpn_sbpi1_bdiv_q (mp_ptr qp,$/;"	f
mpn_sbpi1_bdiv_q	mpn/sbpi1_bdiv_q.c	/^mpn_sbpi1_bdiv_q (mp_ptr qp,$/;"	f
mpn_sbpi1_bdiv_qr	gmp-impl.h	1503;"	d
mpn_sbpi1_bdiv_qr	mpn/generic/sbpi1_bdiv_qr.c	/^mpn_sbpi1_bdiv_qr (mp_ptr qp,$/;"	f
mpn_sbpi1_bdiv_qr	mpn/sbpi1_bdiv_qr.c	/^mpn_sbpi1_bdiv_qr (mp_ptr qp,$/;"	f
mpn_sbpi1_div_q	gmp-impl.h	1433;"	d
mpn_sbpi1_div_q	mpn/generic/sbpi1_div_q.c	/^mpn_sbpi1_div_q (mp_ptr qp,$/;"	f
mpn_sbpi1_div_q	mpn/sbpi1_div_q.c	/^mpn_sbpi1_div_q (mp_ptr qp,$/;"	f
mpn_sbpi1_div_qr	gmp-impl.h	1430;"	d
mpn_sbpi1_div_qr	mpn/generic/sbpi1_div_qr.c	/^mpn_sbpi1_div_qr (mp_ptr qp,$/;"	f
mpn_sbpi1_div_qr	mpn/sbpi1_div_qr.c	/^mpn_sbpi1_div_qr (mp_ptr qp,$/;"	f
mpn_sbpi1_divappr_q	gmp-impl.h	1436;"	d
mpn_sbpi1_divappr_q	mpn/generic/sbpi1_divappr_q.c	/^mpn_sbpi1_divappr_q (mp_ptr qp,$/;"	f
mpn_sbpi1_divappr_q	mpn/sbpi1_divappr_q.c	/^mpn_sbpi1_divappr_q (mp_ptr qp,$/;"	f
mpn_scan0	gmp.h	1581;"	d
mpn_scan0	mini-gmp/mini-gmp.c	/^mpn_scan0 (mp_srcptr ptr, mp_bitcnt_t bit)$/;"	f
mpn_scan0	mpn/generic/scan0.c	/^mpn_scan0 (mp_srcptr up, mp_bitcnt_t starting_bit)$/;"	f
mpn_scan0	mpn/scan0.c	/^mpn_scan0 (mp_srcptr up, mp_bitcnt_t starting_bit)$/;"	f
mpn_scan1	gmp.h	1584;"	d
mpn_scan1	mini-gmp/mini-gmp.c	/^mpn_scan1 (mp_srcptr ptr, mp_bitcnt_t bit)$/;"	f
mpn_scan1	mpn/generic/scan1.c	/^mpn_scan1 (mp_srcptr up, mp_bitcnt_t starting_bit)$/;"	f
mpn_scan1	mpn/scan1.c	/^mpn_scan1 (mp_srcptr up, mp_bitcnt_t starting_bit)$/;"	f
mpn_sec_add_1	gmp.h	1644;"	d
mpn_sec_add_1_itch	gmp.h	1646;"	d
mpn_sec_div_qr	gmp.h	1675;"	d
mpn_sec_div_qr_itch	gmp.h	1677;"	d
mpn_sec_div_r	gmp.h	1679;"	d
mpn_sec_div_r_itch	gmp.h	1681;"	d
mpn_sec_eq_ui	mpn/generic/sec_invert.c	/^mpn_sec_eq_ui (mp_srcptr ap, mp_size_t n, mp_limb_t b)$/;"	f	file:
mpn_sec_eq_ui	mpn/sec_invert.c	/^mpn_sec_eq_ui (mp_srcptr ap, mp_size_t n, mp_limb_t b)$/;"	f	file:
mpn_sec_invert	gmp.h	1684;"	d
mpn_sec_invert	mpn/generic/sec_invert.c	/^mpn_sec_invert (mp_ptr vp, mp_ptr ap, mp_srcptr mp,$/;"	f
mpn_sec_invert	mpn/sec_invert.c	/^mpn_sec_invert (mp_ptr vp, mp_ptr ap, mp_srcptr mp,$/;"	f
mpn_sec_invert_itch	gmp.h	1686;"	d
mpn_sec_invert_itch	mpn/generic/sec_invert.c	/^mpn_sec_invert_itch (mp_size_t n)$/;"	f
mpn_sec_invert_itch	mpn/sec_invert.c	/^mpn_sec_invert_itch (mp_size_t n)$/;"	f
mpn_sec_mul	gmp.h	1657;"	d
mpn_sec_mul	mpn/generic/sec_mul.c	/^mpn_sec_mul (mp_ptr rp,$/;"	f
mpn_sec_mul	mpn/sec_mul.c	/^mpn_sec_mul (mp_ptr rp,$/;"	f
mpn_sec_mul_itch	gmp.h	1659;"	d
mpn_sec_mul_itch	mpn/generic/sec_mul.c	/^mpn_sec_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_sec_mul_itch	mpn/sec_mul.c	/^mpn_sec_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_sec_pi1_div_qr	gmp-impl.h	1562;"	d
mpn_sec_pi1_div_r	gmp-impl.h	1564;"	d
mpn_sec_powm	gmp.h	1667;"	d
mpn_sec_powm	mpn/generic/sec_powm.c	/^mpn_sec_powm (mp_ptr rp, mp_srcptr bp, mp_size_t bn,$/;"	f
mpn_sec_powm	mpn/sec_powm.c	/^mpn_sec_powm (mp_ptr rp, mp_srcptr bp, mp_size_t bn,$/;"	f
mpn_sec_powm_itch	gmp.h	1669;"	d
mpn_sec_powm_itch	mpn/generic/sec_powm.c	/^mpn_sec_powm_itch (mp_size_t bn, mp_bitcnt_t enb, mp_size_t n)$/;"	f
mpn_sec_powm_itch	mpn/sec_powm.c	/^mpn_sec_powm_itch (mp_size_t bn, mp_bitcnt_t enb, mp_size_t n)$/;"	f
mpn_sec_sqr	gmp.h	1662;"	d
mpn_sec_sqr	mpn/generic/sec_sqr.c	/^mpn_sec_sqr (mp_ptr rp,$/;"	f
mpn_sec_sqr	mpn/sec_sqr.c	/^mpn_sec_sqr (mp_ptr rp,$/;"	f
mpn_sec_sqr_itch	gmp.h	1664;"	d
mpn_sec_sqr_itch	mpn/generic/sec_sqr.c	/^mpn_sec_sqr_itch (mp_size_t an)$/;"	f
mpn_sec_sqr_itch	mpn/sec_sqr.c	/^mpn_sec_sqr_itch (mp_size_t an)$/;"	f
mpn_sec_sub_1	gmp.h	1649;"	d
mpn_sec_sub_1_itch	gmp.h	1651;"	d
mpn_sec_tabselect	gmp.h	1672;"	d
mpn_sec_tabselect	mpn/generic/sec_tabselect.c	/^mpn_sec_tabselect (volatile mp_limb_t *rp, volatile const mp_limb_t *tab,$/;"	f
mpn_sec_tabselect	mpn/sec_tabselect.c	/^mpn_sec_tabselect (volatile mp_limb_t *rp, volatile const mp_limb_t *tab,$/;"	f
mpn_set_str	gmp.h	1587;"	d
mpn_set_str	mini-gmp/mini-gmp.c	/^mpn_set_str (mp_ptr rp, const unsigned char *sp, size_t sn, int base)$/;"	f
mpn_set_str	mpn/generic/set_str.c	/^mpn_set_str (mp_ptr rp, const unsigned char *str, size_t str_len, int base)$/;"	f
mpn_set_str	mpn/set_str.c	/^mpn_set_str (mp_ptr rp, const unsigned char *str, size_t str_len, int base)$/;"	f
mpn_set_str_bits	mini-gmp/mini-gmp.c	/^mpn_set_str_bits (mp_ptr rp, const unsigned char *sp, size_t sn,$/;"	f	file:
mpn_set_str_compute_powtab	gmp-impl.h	4309;"	d
mpn_set_str_compute_powtab	mpn/generic/set_str.c	/^mpn_set_str_compute_powtab (powers_t *powtab, mp_ptr powtab_mem, mp_size_t un, int base)$/;"	f
mpn_set_str_compute_powtab	mpn/set_str.c	/^mpn_set_str_compute_powtab (powers_t *powtab, mp_ptr powtab_mem, mp_size_t un, int base)$/;"	f
mpn_set_str_other	mini-gmp/mini-gmp.c	/^mpn_set_str_other (mp_ptr rp, const unsigned char *sp, size_t sn,$/;"	f	file:
mpn_sizeinbase	gmp.h	1590;"	d
mpn_sizeinbase	mpn/generic/sizeinbase.c	/^mpn_sizeinbase (mp_srcptr xp, mp_size_t xsize, int base)$/;"	f
mpn_sizeinbase	mpn/sizeinbase.c	/^mpn_sizeinbase (mp_srcptr xp, mp_size_t xsize, int base)$/;"	f
mpn_sqr	gmp.h	1545;"	d
mpn_sqr	mini-gmp/mini-gmp.c	/^mpn_sqr (mp_ptr rp, mp_srcptr ap, mp_size_t n)$/;"	f
mpn_sqr	mpn/generic/sqr.c	/^mpn_sqr (mp_ptr p, mp_srcptr a, mp_size_t n)$/;"	f
mpn_sqr	mpn/sqr.c	/^mpn_sqr (mp_ptr p, mp_srcptr a, mp_size_t n)$/;"	f
mpn_sqr_basecase	gmp-impl.h	1096;"	d
mpn_sqr_basecase	mpn/cray/ieee/sqr_basecase.c	/^mpn_sqr_basecase (mp_ptr rp,$/;"	f
mpn_sqr_basecase	mpn/generic/sqr_basecase.c	/^mpn_sqr_basecase (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_sqr_basecase	mpn/sqr_basecase.c	/^mpn_sqr_basecase (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_sqr_diag_addlsh1	gmp-impl.h	1305;"	d
mpn_sqr_diagonal	gmp-impl.h	1302;"	d
mpn_sqrlo	gmp-impl.h	1100;"	d
mpn_sqrlo	mpn/generic/sqrlo.c	/^mpn_sqrlo (mp_ptr rp, mp_srcptr xp, mp_size_t n)$/;"	f
mpn_sqrlo	mpn/sqrlo.c	/^mpn_sqrlo (mp_ptr rp, mp_srcptr xp, mp_size_t n)$/;"	f
mpn_sqrlo_basecase	gmp-impl.h	1103;"	d
mpn_sqrlo_basecase	mpn/generic/sqrlo_basecase.c	/^mpn_sqrlo_basecase (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_sqrlo_basecase	mpn/sqrlo_basecase.c	/^mpn_sqrlo_basecase (mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
mpn_sqrlo_itch	mpn/generic/sqrlo.c	/^mpn_sqrlo_itch (mp_size_t n)$/;"	f	file:
mpn_sqrlo_itch	mpn/sqrlo.c	/^mpn_sqrlo_itch (mp_size_t n)$/;"	f	file:
mpn_sqrlo_itch	tests/mpn/t-sqrlo.c	64;"	d	file:
mpn_sqrmod_bnm1	gmp-impl.h	1183;"	d
mpn_sqrmod_bnm1	mpn/generic/sqrmod_bnm1.c	/^mpn_sqrmod_bnm1 (mp_ptr rp, mp_size_t rn, mp_srcptr ap, mp_size_t an, mp_ptr tp)$/;"	f
mpn_sqrmod_bnm1	mpn/sqrmod_bnm1.c	/^mpn_sqrmod_bnm1 (mp_ptr rp, mp_size_t rn, mp_srcptr ap, mp_size_t an, mp_ptr tp)$/;"	f
mpn_sqrmod_bnm1_itch	gmp-impl.h	/^mpn_sqrmod_bnm1_itch (mp_size_t rn, mp_size_t an) {$/;"	f
mpn_sqrmod_bnm1_next_size	gmp-impl.h	1185;"	d
mpn_sqrmod_bnm1_next_size	mpn/generic/sqrmod_bnm1.c	/^mpn_sqrmod_bnm1_next_size (mp_size_t n)$/;"	f
mpn_sqrmod_bnm1_next_size	mpn/sqrmod_bnm1.c	/^mpn_sqrmod_bnm1_next_size (mp_size_t n)$/;"	f
mpn_sqrt_fun	tests/devel/try.c	/^mpn_sqrt_fun (mp_ptr dst, mp_srcptr src, mp_size_t size)$/;"	f
mpn_sqrtrem	gmp.h	1593;"	d
mpn_sqrtrem	mini-gmp/mini-gmp.c	/^mpn_sqrtrem (mp_ptr sp, mp_ptr rp, mp_srcptr p, mp_size_t n)$/;"	f
mpn_sqrtrem	mpn/generic/sqrtrem.c	/^mpn_sqrtrem (mp_ptr sp, mp_ptr rp, mp_srcptr np, mp_size_t nn)$/;"	f
mpn_sqrtrem	mpn/sqrtrem.c	/^mpn_sqrtrem (mp_ptr sp, mp_ptr rp, mp_srcptr np, mp_size_t nn)$/;"	f
mpn_sqrtrem1	mpn/generic/sqrtrem.c	/^mpn_sqrtrem1 (mp_ptr rp, mp_limb_t a0)$/;"	f	file:
mpn_sqrtrem1	mpn/sqrtrem.c	/^mpn_sqrtrem1 (mp_ptr rp, mp_limb_t a0)$/;"	f	file:
mpn_sqrtrem2	mpn/generic/sqrtrem.c	/^mpn_sqrtrem2 (mp_ptr sp, mp_ptr rp, mp_srcptr np)$/;"	f	file:
mpn_sqrtrem2	mpn/sqrtrem.c	/^mpn_sqrtrem2 (mp_ptr sp, mp_ptr rp, mp_srcptr np)$/;"	f	file:
mpn_sub	gmp.h	/^mpn_sub (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)$/;"	f
mpn_sub	gmp.h	1596;"	d
mpn_sub	mini-gmp/mini-gmp.c	/^mpn_sub (mp_ptr rp, mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)$/;"	f
mpn_sub_1	gmp.h	1601;"	d
mpn_sub_1	mini-gmp/mini-gmp.c	/^mpn_sub_1 (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t b)$/;"	f
mpn_sub_err1_n	gmp-impl.h	1021;"	d
mpn_sub_err1_n	mpn/generic/sub_err1_n.c	/^mpn_sub_err1_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_sub_err1_n	mpn/sub_err1_n.c	/^mpn_sub_err1_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_sub_err2_n	gmp-impl.h	1024;"	d
mpn_sub_err2_n	mpn/generic/sub_err2_n.c	/^mpn_sub_err2_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_sub_err2_n	mpn/sub_err2_n.c	/^mpn_sub_err2_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_sub_err3_n	gmp-impl.h	1027;"	d
mpn_sub_err3_n	mpn/generic/sub_err3_n.c	/^mpn_sub_err3_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_sub_err3_n	mpn/sub_err3_n.c	/^mpn_sub_err3_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
mpn_sub_n	gmp.h	1606;"	d
mpn_sub_n	mini-gmp/mini-gmp.c	/^mpn_sub_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)$/;"	f
mpn_sub_n	mpn/cray/sub_n.c	/^mpn_sub_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_sub_n	mpn/generic/sub_n.c	/^mpn_sub_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_sub_n	mpn/sub_n.c	/^mpn_sub_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
mpn_sub_nc	gmp-impl.h	/^mpn_sub_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n, mp_limb_t ci)$/;"	f
mpn_sub_nc	gmp-impl.h	4677;"	d
mpn_sublsh1_n	gmp-impl.h	1586;"	d
mpn_sublsh1_n	gmp-impl.h	1587;"	d
mpn_sublsh1_n	gmp-impl.h	910;"	d
mpn_sublsh1_n_ip1	gmp-impl.h	916;"	d
mpn_sublsh1_n_ip1	gmp-impl.h	919;"	d
mpn_sublsh1_n_ip1_fun	tests/devel/try.c	/^mpn_sublsh1_n_ip1_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
mpn_sublsh1_nc	gmp-impl.h	913;"	d
mpn_sublsh1_nc_ip1	gmp-impl.h	923;"	d
mpn_sublsh1_nc_ip1	gmp-impl.h	926;"	d
mpn_sublsh2_n	gmp-impl.h	1592;"	d
mpn_sublsh2_n	gmp-impl.h	1593;"	d
mpn_sublsh2_n	gmp-impl.h	939;"	d
mpn_sublsh2_n_ip1	gmp-impl.h	944;"	d
mpn_sublsh2_n_ip1	gmp-impl.h	947;"	d
mpn_sublsh2_n_ip1_fun	tests/devel/try.c	/^mpn_sublsh2_n_ip1_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
mpn_sublsh2_nc	gmp-impl.h	941;"	d
mpn_sublsh2_nc_ip1	gmp-impl.h	951;"	d
mpn_sublsh2_nc_ip1	gmp-impl.h	954;"	d
mpn_sublsh_n	gmp-impl.h	960;"	d
mpn_sublsh_n_ip1	gmp-impl.h	963;"	d
mpn_sublsh_n_ip1	gmp-impl.h	966;"	d
mpn_sublsh_n_ip1_fun	tests/devel/try.c	/^mpn_sublsh_n_ip1_fun (mp_ptr rp, mp_srcptr sp, mp_size_t size, unsigned int sh)$/;"	f
mpn_sublsh_nc_ip1	gmp-impl.h	970;"	d
mpn_sublsh_nc_ip1	gmp-impl.h	973;"	d
mpn_submul_1	gmp.h	1609;"	d
mpn_submul_1	mini-gmp/mini-gmp.c	/^mpn_submul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_submul_1	mpn/cray/cfp/submul_1.c	/^mpn_submul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t limb)$/;"	f
mpn_submul_1	mpn/cray/ieee/submul_1.c	/^mpn_submul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_submul_1	mpn/generic/submul_1.c	/^mpn_submul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_submul_1	mpn/submul_1.c	/^mpn_submul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)$/;"	f
mpn_submul_1c	gmp-impl.h	1115;"	d
mpn_tdiv_qr	gmp.h	1612;"	d
mpn_tdiv_qr	mpn/generic/tdiv_qr.c	/^mpn_tdiv_qr (mp_ptr qp, mp_ptr rp, mp_size_t qxn,$/;"	f
mpn_tdiv_qr	mpn/tdiv_qr.c	/^mpn_tdiv_qr (mp_ptr qp, mp_ptr rp, mp_size_t qxn,$/;"	f
mpn_toom22_mul	gmp-impl.h	1349;"	d
mpn_toom22_mul	mpn/generic/toom22_mul.c	/^mpn_toom22_mul (mp_ptr pp,$/;"	f
mpn_toom22_mul	mpn/toom22_mul.c	/^mpn_toom22_mul (mp_ptr pp,$/;"	f
mpn_toom22_mul_fun	tests/devel/try.c	/^mpn_toom22_mul_fun (mp_ptr dst, mp_srcptr src1, mp_srcptr src2, mp_size_t size)$/;"	f
mpn_toom22_mul_itch	gmp-impl.h	5056;"	d
mpn_toom2_sqr	gmp-impl.h	1364;"	d
mpn_toom2_sqr	mpn/generic/toom2_sqr.c	/^mpn_toom2_sqr (mp_ptr pp,$/;"	f
mpn_toom2_sqr	mpn/toom2_sqr.c	/^mpn_toom2_sqr (mp_ptr pp,$/;"	f
mpn_toom2_sqr_fun	tests/devel/try.c	/^mpn_toom2_sqr_fun (mp_ptr dst, mp_srcptr src, mp_size_t size)$/;"	f
mpn_toom2_sqr_itch	gmp-impl.h	5058;"	d
mpn_toom32_mul	gmp-impl.h	1352;"	d
mpn_toom32_mul	mpn/generic/toom32_mul.c	/^mpn_toom32_mul (mp_ptr pp,$/;"	f
mpn_toom32_mul	mpn/toom32_mul.c	/^mpn_toom32_mul (mp_ptr pp,$/;"	f
mpn_toom32_mul_itch	gmp-impl.h	/^mpn_toom32_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_toom33_mul	gmp-impl.h	1367;"	d
mpn_toom33_mul	mpn/generic/toom33_mul.c	/^mpn_toom33_mul (mp_ptr pp,$/;"	f
mpn_toom33_mul	mpn/toom33_mul.c	/^mpn_toom33_mul (mp_ptr pp,$/;"	f
mpn_toom33_mul_fun	tests/devel/try.c	/^mpn_toom33_mul_fun (mp_ptr dst, mp_srcptr src1, mp_srcptr src2, mp_size_t size)$/;"	f
mpn_toom33_mul_itch	gmp-impl.h	5064;"	d
mpn_toom3_sqr	gmp-impl.h	1382;"	d
mpn_toom3_sqr	mpn/generic/toom3_sqr.c	/^mpn_toom3_sqr (mp_ptr pp,$/;"	f
mpn_toom3_sqr	mpn/toom3_sqr.c	/^mpn_toom3_sqr (mp_ptr pp,$/;"	f
mpn_toom3_sqr_fun	tests/devel/try.c	/^mpn_toom3_sqr_fun (mp_ptr dst, mp_srcptr src, mp_size_t size)$/;"	f
mpn_toom3_sqr_itch	gmp-impl.h	5066;"	d
mpn_toom42_mul	gmp-impl.h	1355;"	d
mpn_toom42_mul	mpn/generic/toom42_mul.c	/^mpn_toom42_mul (mp_ptr pp,$/;"	f
mpn_toom42_mul	mpn/toom42_mul.c	/^mpn_toom42_mul (mp_ptr pp,$/;"	f
mpn_toom42_mul_itch	gmp-impl.h	/^mpn_toom42_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_toom42_mulmid	gmp-impl.h	1403;"	d
mpn_toom42_mulmid	mpn/generic/toom42_mulmid.c	/^mpn_toom42_mulmid (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n,$/;"	f
mpn_toom42_mulmid	mpn/toom42_mulmid.c	/^mpn_toom42_mulmid (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n,$/;"	f
mpn_toom42_mulmid_fun	tests/devel/try.c	/^mpn_toom42_mulmid_fun (mp_ptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	f
mpn_toom42_mulmid_itch	gmp-impl.h	5178;"	d
mpn_toom43_mul	gmp-impl.h	1370;"	d
mpn_toom43_mul	mpn/generic/toom43_mul.c	/^mpn_toom43_mul (mp_ptr pp,$/;"	f
mpn_toom43_mul	mpn/toom43_mul.c	/^mpn_toom43_mul (mp_ptr pp,$/;"	f
mpn_toom43_mul_itch	gmp-impl.h	/^mpn_toom43_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_toom44_mul	gmp-impl.h	1385;"	d
mpn_toom44_mul	mpn/generic/toom44_mul.c	/^mpn_toom44_mul (mp_ptr pp,$/;"	f
mpn_toom44_mul	mpn/toom44_mul.c	/^mpn_toom44_mul (mp_ptr pp,$/;"	f
mpn_toom44_mul_fun	tests/devel/try.c	/^mpn_toom44_mul_fun (mp_ptr dst, mp_srcptr src1, mp_srcptr src2, mp_size_t size)$/;"	f
mpn_toom44_mul_itch	gmp-impl.h	5072;"	d
mpn_toom4_sqr	gmp-impl.h	1388;"	d
mpn_toom4_sqr	mpn/generic/toom4_sqr.c	/^mpn_toom4_sqr (mp_ptr pp,$/;"	f
mpn_toom4_sqr	mpn/toom4_sqr.c	/^mpn_toom4_sqr (mp_ptr pp,$/;"	f
mpn_toom4_sqr_fun	tests/devel/try.c	/^mpn_toom4_sqr_fun (mp_ptr dst, mp_srcptr src, mp_size_t size)$/;"	f
mpn_toom4_sqr_itch	gmp-impl.h	5074;"	d
mpn_toom52_mul	gmp-impl.h	1358;"	d
mpn_toom52_mul	mpn/generic/toom52_mul.c	/^mpn_toom52_mul (mp_ptr pp,$/;"	f
mpn_toom52_mul	mpn/toom52_mul.c	/^mpn_toom52_mul (mp_ptr pp,$/;"	f
mpn_toom52_mul_itch	gmp-impl.h	/^mpn_toom52_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_toom53_mul	gmp-impl.h	1373;"	d
mpn_toom53_mul	mpn/generic/toom53_mul.c	/^mpn_toom53_mul (mp_ptr pp,$/;"	f
mpn_toom53_mul	mpn/toom53_mul.c	/^mpn_toom53_mul (mp_ptr pp,$/;"	f
mpn_toom53_mul_itch	gmp-impl.h	/^mpn_toom53_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_toom54_mul	gmp-impl.h	1376;"	d
mpn_toom54_mul	mpn/generic/toom54_mul.c	/^mpn_toom54_mul (mp_ptr pp,$/;"	f
mpn_toom54_mul	mpn/toom54_mul.c	/^mpn_toom54_mul (mp_ptr pp,$/;"	f
mpn_toom54_mul_itch	gmp-impl.h	/^mpn_toom54_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_toom62_mul	gmp-impl.h	1361;"	d
mpn_toom62_mul	mpn/generic/toom62_mul.c	/^mpn_toom62_mul (mp_ptr pp,$/;"	f
mpn_toom62_mul	mpn/toom62_mul.c	/^mpn_toom62_mul (mp_ptr pp,$/;"	f
mpn_toom62_mul_itch	gmp-impl.h	/^mpn_toom62_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_toom63_mul	gmp-impl.h	1379;"	d
mpn_toom63_mul	mpn/generic/toom63_mul.c	/^mpn_toom63_mul (mp_ptr pp,$/;"	f
mpn_toom63_mul	mpn/toom63_mul.c	/^mpn_toom63_mul (mp_ptr pp,$/;"	f
mpn_toom63_mul_itch	gmp-impl.h	/^mpn_toom63_mul_itch (mp_size_t an, mp_size_t bn)$/;"	f
mpn_toom6_mul_n_itch	gmp-impl.h	5085;"	d
mpn_toom6_sqr	gmp-impl.h	1394;"	d
mpn_toom6_sqr	mpn/generic/toom6_sqr.c	/^mpn_toom6_sqr  (mp_ptr pp, mp_srcptr ap, mp_size_t an, mp_ptr scratch)$/;"	f
mpn_toom6_sqr	mpn/toom6_sqr.c	/^mpn_toom6_sqr  (mp_ptr pp, mp_srcptr ap, mp_size_t an, mp_ptr scratch)$/;"	f
mpn_toom6_sqr_itch	gmp-impl.h	5077;"	d
mpn_toom6h_mul	gmp-impl.h	1391;"	d
mpn_toom6h_mul	mpn/generic/toom6h_mul.c	/^mpn_toom6h_mul   (mp_ptr pp,$/;"	f
mpn_toom6h_mul	mpn/toom6h_mul.c	/^mpn_toom6h_mul   (mp_ptr pp,$/;"	f
mpn_toom6h_mul_itch	gmp-impl.h	/^mpn_toom6h_mul_itch (mp_size_t an, mp_size_t bn) {$/;"	f
mpn_toom8_mul_n_itch	gmp-impl.h	5105;"	d
mpn_toom8_sqr	gmp-impl.h	1400;"	d
mpn_toom8_sqr	mpn/generic/toom8_sqr.c	/^mpn_toom8_sqr  (mp_ptr pp, mp_srcptr ap, mp_size_t an, mp_ptr scratch)$/;"	f
mpn_toom8_sqr	mpn/toom8_sqr.c	/^mpn_toom8_sqr  (mp_ptr pp, mp_srcptr ap, mp_size_t an, mp_ptr scratch)$/;"	f
mpn_toom8_sqr_itch	gmp-impl.h	5097;"	d
mpn_toom8h_mul	gmp-impl.h	1397;"	d
mpn_toom8h_mul	mpn/generic/toom8h_mul.c	/^mpn_toom8h_mul   (mp_ptr pp,$/;"	f
mpn_toom8h_mul	mpn/toom8h_mul.c	/^mpn_toom8h_mul   (mp_ptr pp,$/;"	f
mpn_toom8h_mul_itch	gmp-impl.h	/^mpn_toom8h_mul_itch (mp_size_t an, mp_size_t bn) {$/;"	f
mpn_toomMN_mul	tests/mpn/t-toom22.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom32.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom33.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom42.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom43.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom44.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom52.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom53.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom54.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom62.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom63.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom6h.c	1;"	d	file:
mpn_toomMN_mul	tests/mpn/t-toom8h.c	1;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom22.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom32.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom33.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom42.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom43.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom44.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom52.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom53.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom54.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom62.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom63.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom6h.c	2;"	d	file:
mpn_toomMN_mul_itch	tests/mpn/t-toom8h.c	2;"	d	file:
mpn_toomN_sqr	tests/mpn/t-toom2-sqr.c	1;"	d	file:
mpn_toomN_sqr	tests/mpn/t-toom3-sqr.c	1;"	d	file:
mpn_toomN_sqr	tests/mpn/t-toom4-sqr.c	1;"	d	file:
mpn_toomN_sqr	tests/mpn/t-toom6-sqr.c	1;"	d	file:
mpn_toomN_sqr	tests/mpn/t-toom8-sqr.c	1;"	d	file:
mpn_toomN_sqr_itch	tests/mpn/t-toom2-sqr.c	2;"	d	file:
mpn_toomN_sqr_itch	tests/mpn/t-toom3-sqr.c	2;"	d	file:
mpn_toomN_sqr_itch	tests/mpn/t-toom4-sqr.c	2;"	d	file:
mpn_toomN_sqr_itch	tests/mpn/t-toom6-sqr.c	2;"	d	file:
mpn_toomN_sqr_itch	tests/mpn/t-toom8-sqr.c	2;"	d	file:
mpn_toom_couple_handling	gmp-impl.h	1328;"	d
mpn_toom_couple_handling	mpn/generic/toom_couple_handling.c	/^mpn_toom_couple_handling (mp_ptr pp, mp_size_t n, mp_ptr np,$/;"	f
mpn_toom_couple_handling	mpn/toom_couple_handling.c	/^mpn_toom_couple_handling (mp_ptr pp, mp_size_t n, mp_ptr np,$/;"	f
mpn_toom_eval_dgr3_pm1	gmp-impl.h	1331;"	d
mpn_toom_eval_dgr3_pm1	mpn/generic/toom_eval_dgr3_pm1.c	/^mpn_toom_eval_dgr3_pm1 (mp_ptr xp1, mp_ptr xm1,$/;"	f
mpn_toom_eval_dgr3_pm1	mpn/toom_eval_dgr3_pm1.c	/^mpn_toom_eval_dgr3_pm1 (mp_ptr xp1, mp_ptr xm1,$/;"	f
mpn_toom_eval_dgr3_pm2	gmp-impl.h	1334;"	d
mpn_toom_eval_dgr3_pm2	mpn/generic/toom_eval_dgr3_pm2.c	/^mpn_toom_eval_dgr3_pm2 (mp_ptr xp2, mp_ptr xm2,$/;"	f
mpn_toom_eval_dgr3_pm2	mpn/toom_eval_dgr3_pm2.c	/^mpn_toom_eval_dgr3_pm2 (mp_ptr xp2, mp_ptr xm2,$/;"	f
mpn_toom_eval_pm1	gmp-impl.h	1337;"	d
mpn_toom_eval_pm1	mpn/generic/toom_eval_pm1.c	/^mpn_toom_eval_pm1 (mp_ptr xp1, mp_ptr xm1, unsigned k,$/;"	f
mpn_toom_eval_pm1	mpn/toom_eval_pm1.c	/^mpn_toom_eval_pm1 (mp_ptr xp1, mp_ptr xm1, unsigned k,$/;"	f
mpn_toom_eval_pm2	gmp-impl.h	1340;"	d
mpn_toom_eval_pm2	mpn/generic/toom_eval_pm2.c	/^mpn_toom_eval_pm2 (mp_ptr xp2, mp_ptr xm2, unsigned k,$/;"	f
mpn_toom_eval_pm2	mpn/toom_eval_pm2.c	/^mpn_toom_eval_pm2 (mp_ptr xp2, mp_ptr xm2, unsigned k,$/;"	f
mpn_toom_eval_pm2exp	gmp-impl.h	1343;"	d
mpn_toom_eval_pm2exp	mpn/generic/toom_eval_pm2exp.c	/^mpn_toom_eval_pm2exp (mp_ptr xp2, mp_ptr xm2, unsigned k,$/;"	f
mpn_toom_eval_pm2exp	mpn/toom_eval_pm2exp.c	/^mpn_toom_eval_pm2exp (mp_ptr xp2, mp_ptr xm2, unsigned k,$/;"	f
mpn_toom_eval_pm2rexp	gmp-impl.h	1346;"	d
mpn_toom_eval_pm2rexp	mpn/generic/toom_eval_pm2rexp.c	/^mpn_toom_eval_pm2rexp (mp_ptr rp, mp_ptr rm,$/;"	f
mpn_toom_eval_pm2rexp	mpn/toom_eval_pm2rexp.c	/^mpn_toom_eval_pm2rexp (mp_ptr rp, mp_ptr rm,$/;"	f
mpn_toom_interpolate_12pts	gmp-impl.h	1322;"	d
mpn_toom_interpolate_12pts	mpn/generic/toom_interpolate_12pts.c	/^mpn_toom_interpolate_12pts (mp_ptr pp, mp_ptr r1, mp_ptr r3, mp_ptr r5,$/;"	f
mpn_toom_interpolate_12pts	mpn/toom_interpolate_12pts.c	/^mpn_toom_interpolate_12pts (mp_ptr pp, mp_ptr r1, mp_ptr r3, mp_ptr r5,$/;"	f
mpn_toom_interpolate_16pts	gmp-impl.h	1325;"	d
mpn_toom_interpolate_16pts	mpn/generic/toom_interpolate_16pts.c	/^mpn_toom_interpolate_16pts (mp_ptr pp, mp_ptr r1, mp_ptr r3, mp_ptr r5, mp_ptr r7,$/;"	f
mpn_toom_interpolate_16pts	mpn/toom_interpolate_16pts.c	/^mpn_toom_interpolate_16pts (mp_ptr pp, mp_ptr r1, mp_ptr r3, mp_ptr r5, mp_ptr r7,$/;"	f
mpn_toom_interpolate_5pts	gmp-impl.h	1308;"	d
mpn_toom_interpolate_5pts	mpn/generic/toom_interpolate_5pts.c	/^mpn_toom_interpolate_5pts (mp_ptr c, mp_ptr v2, mp_ptr vm1,$/;"	f
mpn_toom_interpolate_5pts	mpn/toom_interpolate_5pts.c	/^mpn_toom_interpolate_5pts (mp_ptr c, mp_ptr v2, mp_ptr vm1,$/;"	f
mpn_toom_interpolate_6pts	gmp-impl.h	1312;"	d
mpn_toom_interpolate_6pts	mpn/generic/toom_interpolate_6pts.c	/^mpn_toom_interpolate_6pts (mp_ptr pp, mp_size_t n, enum toom6_flags flags,$/;"	f
mpn_toom_interpolate_6pts	mpn/toom_interpolate_6pts.c	/^mpn_toom_interpolate_6pts (mp_ptr pp, mp_size_t n, enum toom6_flags flags,$/;"	f
mpn_toom_interpolate_7pts	gmp-impl.h	1316;"	d
mpn_toom_interpolate_7pts	mpn/generic/toom_interpolate_7pts.c	/^mpn_toom_interpolate_7pts (mp_ptr rp, mp_size_t n, enum toom7_flags flags,$/;"	f
mpn_toom_interpolate_7pts	mpn/toom_interpolate_7pts.c	/^mpn_toom_interpolate_7pts (mp_ptr rp, mp_size_t n, enum toom7_flags flags,$/;"	f
mpn_toom_interpolate_8pts	gmp-impl.h	1319;"	d
mpn_toom_interpolate_8pts	mpn/generic/toom_interpolate_8pts.c	/^mpn_toom_interpolate_8pts (mp_ptr pp, mp_size_t n,$/;"	f
mpn_toom_interpolate_8pts	mpn/toom_interpolate_8pts.c	/^mpn_toom_interpolate_8pts (mp_ptr pp, mp_size_t n,$/;"	f
mpn_trace	tests/trace.c	/^mpn_trace (const char *name, mp_srcptr ptr, mp_size_t size)$/;"	f
mpn_trace_file	tests/trace.c	/^mpn_trace_file (const char *filename, mp_srcptr ptr, mp_size_t size)$/;"	f
mpn_tracea	tests/trace.c	/^mpn_tracea (const char *name, const mp_ptr *a, int count, mp_size_t size)$/;"	f
mpn_tracea_file	tests/trace.c	/^mpn_tracea_file (const char *filename,$/;"	f
mpn_tracen	tests/trace.c	/^mpn_tracen (const char *name, int num, mp_srcptr ptr, mp_size_t size)$/;"	f
mpn_trialdiv	gmp-impl.h	2590;"	d
mpn_trialdiv	mpn/generic/trialdiv.c	/^mpn_trialdiv (mp_srcptr tp, mp_size_t tn, mp_size_t nprimes, int *where)$/;"	f
mpn_trialdiv	mpn/trialdiv.c	/^mpn_trialdiv (mp_srcptr tp, mp_size_t tn, mp_size_t nprimes, int *where)$/;"	f
mpn_udiv_qrnnd	longlong.h	1952;"	d
mpn_udiv_qrnnd_r	longlong.h	1966;"	d
mpn_udiv_w_sdiv	gmp-impl.h	1050;"	d
mpn_udiv_w_sdiv	mpn/generic/udiv_w_sdiv.c	/^mpn_udiv_w_sdiv (mp_limb_t *rp, mp_limb_t a1, mp_limb_t a0, mp_limb_t d)$/;"	f
mpn_umul_ppmm	longlong.h	1926;"	d
mpn_umul_ppmm_r	longlong.h	1939;"	d
mpn_xnor_n	gmp-impl.h	2585;"	d
mpn_xnor_n	gmp-impl.h	2586;"	d
mpn_xnor_n	gmp.h	1629;"	d
mpn_xnor_n_fun	tests/devel/try.c	/^mpn_xnor_n_fun (mp_ptr rp, mp_srcptr s1, mp_srcptr s2, mp_size_t size)$/;"	f
mpn_xor_n	gmp-impl.h	2579;"	d
mpn_xor_n	gmp-impl.h	2580;"	d
mpn_xor_n	gmp.h	1627;"	d
mpn_xor_n_fun	tests/devel/try.c	/^mpn_xor_n_fun (mp_ptr rp, mp_srcptr s1, mp_srcptr s2, mp_size_t size)$/;"	f
mpn_zero	gmp.h	1636;"	d
mpn_zero	mini-gmp/mini-gmp.c	/^mpn_zero (mp_ptr rp, mp_size_t n)$/;"	f
mpn_zero	mpn/generic/zero.c	/^mpn_zero (mp_ptr rp, mp_size_t n)$/;"	f
mpn_zero	mpn/zero.c	/^mpn_zero (mp_ptr rp, mp_size_t n)$/;"	f
mpn_zero_p	gmp.h	1480;"	d
mpn_zero_p	mini-gmp/mini-gmp.c	/^mpn_zero_p(mp_srcptr rp, mp_size_t n)$/;"	f
mpq_abs	gmp.h	/^mpq_abs (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)$/;"	f
mpq_abs	gmp.h	1131;"	d
mpq_abs	mpq/abs.c	/^mpq_abs (mpq_ptr dst, mpq_srcptr src)$/;"	f
mpq_add	gmp.h	1136;"	d
mpq_add	mpq/aors.c	/^mpq_add (mpq_ptr rop, mpq_srcptr op1, mpq_srcptr op2)$/;"	f
mpq_aors	mpq/aors.c	/^mpq_aors (mpq_ptr rop, mpq_srcptr op1, mpq_srcptr op2,$/;"	f	file:
mpq_aors	mpq/aors.c	37;"	d	file:
mpq_canonicalize	gmp.h	1139;"	d
mpq_canonicalize	mpq/canonicalize.c	/^mpq_canonicalize (mpq_t op)$/;"	f
mpq_class	gmpxx.h	/^typedef __gmp_expr<mpq_t, mpq_t> mpq_class;$/;"	t
mpq_clear	gmp.h	1142;"	d
mpq_clear	mpq/clear.c	/^mpq_clear (mpq_t x)$/;"	f
mpq_clears	gmp.h	1145;"	d
mpq_clears	mpq/clears.c	/^mpq_clears (mpq_ptr x, ...)$/;"	f
mpq_cmp	gmp.h	1148;"	d
mpq_cmp	mpq/cmp.c	/^mpq_cmp (mpq_srcptr op1, mpq_srcptr op2)$/;"	f
mpq_cmp_numden	mpq/cmp.c	/^mpq_cmp_numden (mpq_srcptr op1, mpz_srcptr num_op2, mpz_srcptr den_op2)$/;"	f	file:
mpq_cmp_si	gmp.h	2256;"	d
mpq_cmp_si	gmp.h	2264;"	d
mpq_cmp_ui	gmp.h	2251;"	d
mpq_cmp_ui	gmp.h	2263;"	d
mpq_cmp_z	gmp.h	1157;"	d
mpq_cmp_z	mpq/cmp.c	/^mpq_cmp_z (mpq_srcptr op1, mpz_srcptr op2)$/;"	f
mpq_denref	gmp.h	464;"	d
mpq_div	gmp.h	1160;"	d
mpq_div	mpq/div.c	/^mpq_div (mpq_ptr quot, mpq_srcptr op1, mpq_srcptr op2)$/;"	f
mpq_div_2exp	gmp.h	1163;"	d
mpq_div_2exp	mpq/md_2exp.c	/^mpq_div_2exp (mpq_ptr dst, mpq_srcptr src, mp_bitcnt_t n)$/;"	f
mpq_equal	gmp.h	1166;"	d
mpq_expr	demos/expr/exprq.c	/^mpq_expr (mpq_ptr res, int base, const char *e, ...)$/;"	f
mpq_expr_a	demos/expr/exprqa.c	/^mpq_expr_a (const struct mpexpr_operator_t *table,$/;"	f
mpq_expr_standard_table	demos/expr/exprq.c	/^const struct mpexpr_operator_t * const mpq_expr_standard_table$/;"	v
mpq_get_d	gmp.h	1175;"	d
mpq_get_d	mpq/get_d.c	/^mpq_get_d (mpq_srcptr src)$/;"	f
mpq_get_den	gmp.h	1172;"	d
mpq_get_den	mpq/get_den.c	/^mpq_get_den (mpz_ptr den, mpq_srcptr src)$/;"	f
mpq_get_num	gmp.h	1169;"	d
mpq_get_num	mpq/get_num.c	/^mpq_get_num (mpz_ptr num, mpq_srcptr src)$/;"	f
mpq_get_str	gmp.h	1178;"	d
mpq_get_str	mpq/get_str.c	/^mpq_get_str (char *str, int base, mpq_srcptr q)$/;"	f
mpq_init	gmp.h	1181;"	d
mpq_init	mpq/init.c	/^mpq_init (mpq_t x)$/;"	f
mpq_inits	gmp.h	1184;"	d
mpq_inits	mpq/inits.c	/^mpq_inits (mpq_ptr x, ...)$/;"	f
mpq_inp_str	gmp.h	1187;"	d
mpq_inp_str	mpq/inp_str.c	/^mpq_inp_str (mpq_ptr q, FILE *fp, int base)$/;"	f
mpq_integer_p	tests/cxx/t-ostream.cc	215;"	d	file:
mpq_inv	gmp.h	1192;"	d
mpq_inv	mpq/inv.c	/^mpq_inv (mpq_ptr dest, mpq_srcptr src)$/;"	f
mpq_mul	gmp.h	1195;"	d
mpq_mul	mpq/mul.c	/^mpq_mul (mpq_ptr prod, mpq_srcptr op1, mpq_srcptr op2)$/;"	f
mpq_mul_2exp	gmp.h	1198;"	d
mpq_mul_2exp	mpq/md_2exp.c	/^mpq_mul_2exp (mpq_ptr dst, mpq_srcptr src, mp_bitcnt_t n)$/;"	f
mpq_neg	gmp.h	/^mpq_neg (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)$/;"	f
mpq_neg	gmp.h	1201;"	d
mpq_neg	mpq/neg.c	/^mpq_neg (mpq_ptr dst, mpq_srcptr src)$/;"	f
mpq_numref	gmp.h	463;"	d
mpq_out_str	gmp.h	1206;"	d
mpq_out_str	mpq/out_str.c	/^mpq_out_str (FILE *stream, int base, mpq_srcptr q)$/;"	f
mpq_ptr	gmp.h	/^typedef __mpq_struct *mpq_ptr;$/;"	t
mpq_set	gmp.h	1211;"	d
mpq_set	mpq/set.c	/^mpq_set (mpq_ptr dest, mpq_srcptr src)$/;"	f
mpq_set_d	gmp.h	1214;"	d
mpq_set_d	mpq/set_d.c	/^mpq_set_d (mpq_ptr dest, double d)$/;"	f
mpq_set_den	gmp.h	1217;"	d
mpq_set_den	mpq/set_den.c	/^mpq_set_den (mpq_ptr dest, mpz_srcptr den)$/;"	f
mpq_set_f	gmp.h	1220;"	d
mpq_set_f	mpq/set_f.c	/^mpq_set_f (mpq_ptr q, mpf_srcptr f)$/;"	f
mpq_set_num	gmp.h	1223;"	d
mpq_set_num	mpq/set_num.c	/^mpq_set_num (mpq_ptr dest, mpz_srcptr num)$/;"	f
mpq_set_si	gmp.h	1226;"	d
mpq_set_si	mpq/set_si.c	/^mpq_set_si (mpq_t dest, signed long int num, unsigned long int den)$/;"	f
mpq_set_str	gmp.h	1229;"	d
mpq_set_str	mpq/set_str.c	/^mpq_set_str (mpq_ptr q, const char *str, int base)$/;"	f
mpq_set_str_or_abort	tests/misc.c	/^mpq_set_str_or_abort (mpq_ptr q, const char *str, int base)$/;"	f
mpq_set_ui	gmp.h	1232;"	d
mpq_set_ui	mpq/set_ui.c	/^mpq_set_ui (mpq_t dest, unsigned long int num, unsigned long int den)$/;"	f
mpq_set_z	gmp.h	1235;"	d
mpq_set_z	mpq/set_z.c	/^mpq_set_z (mpq_ptr dest, mpz_srcptr src)$/;"	f
mpq_sgn	gmp.h	2240;"	d
mpq_srcptr	gmp.h	/^typedef const __mpq_struct *mpq_srcptr;$/;"	t
mpq_sub	gmp.h	1238;"	d
mpq_sub	mpq/aors.c	/^mpq_sub (mpq_ptr rop, mpq_srcptr op1, mpq_srcptr op2)$/;"	f
mpq_swap	gmp.h	1241;"	d
mpq_t	gmp.h	/^typedef __mpq_struct mpq_t[1];$/;"	t
mpq_trace	tests/trace.c	/^mpq_trace (const char *name, mpq_srcptr q)$/;"	f
mprotect_maybe	tests/devel/try.c	/^mprotect_maybe (void *addr, size_t len, int prot)$/;"	f
mprotect_region	tests/devel/try.c	/^mprotect_region (const struct region_t *r, int prot)$/;"	f
mpz_2fac_ui	gmp.h	744;"	d
mpz_2fac_ui	mpz/2fac_ui.c	/^mpz_2fac_ui (mpz_ptr x, unsigned long n)$/;"	f
mpz_2multiswing_1	mpz/oddfac_1.c	/^mpz_2multiswing_1 (mpz_ptr x, mp_limb_t n, mp_ptr sieve, mp_ptr factors)$/;"	f	file:
mpz_abs	gmp.h	/^mpz_abs (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)$/;"	f
mpz_abs	gmp.h	619;"	d
mpz_abs	mini-gmp/mini-gmp.c	/^mpz_abs (mpz_t r, const mpz_t u)$/;"	f
mpz_abs	mpz/abs.c	/^mpz_abs (mpz_ptr w, mpz_srcptr u)$/;"	f
mpz_abs_add	mini-gmp/mini-gmp.c	/^mpz_abs_add (mpz_t r, const mpz_t a, const mpz_t b)$/;"	f	file:
mpz_abs_add_bit	mini-gmp/mini-gmp.c	/^mpz_abs_add_bit (mpz_t d, mp_bitcnt_t bit_index)$/;"	f	file:
mpz_abs_add_ui	mini-gmp/mini-gmp.c	/^mpz_abs_add_ui (mpz_t r, const mpz_t a, unsigned long b)$/;"	f	file:
mpz_abs_sub	mini-gmp/mini-gmp.c	/^mpz_abs_sub (mpz_t r, const mpz_t a, const mpz_t b)$/;"	f	file:
mpz_abs_sub_bit	mini-gmp/mini-gmp.c	/^mpz_abs_sub_bit (mpz_t d, mp_bitcnt_t bit_index)$/;"	f	file:
mpz_abs_sub_ui	mini-gmp/mini-gmp.c	/^mpz_abs_sub_ui (mpz_t r, const mpz_t a, unsigned long b)$/;"	f	file:
mpz_add	gmp.h	624;"	d
mpz_add	mini-gmp/mini-gmp.c	/^mpz_add (mpz_t r, const mpz_t a, const mpz_t b)$/;"	f
mpz_add_ui	gmp.h	627;"	d
mpz_add_ui	mini-gmp/mini-gmp.c	/^mpz_add_ui (mpz_t r, const mpz_t a, unsigned long b)$/;"	f
mpz_addmul	gmp.h	630;"	d
mpz_addmul	mini-gmp/mini-gmp.c	/^mpz_addmul (mpz_t r, const mpz_t u, const mpz_t v)$/;"	f
mpz_addmul	mpz/aorsmul.c	/^mpz_addmul (mpz_ptr w, mpz_srcptr u, mpz_srcptr v)$/;"	f
mpz_addmul_ui	gmp.h	633;"	d
mpz_addmul_ui	mini-gmp/mini-gmp.c	/^mpz_addmul_ui (mpz_t r, const mpz_t u, unsigned long int v)$/;"	f
mpz_addmul_ui	mpz/aorsmul_i.c	/^mpz_addmul_ui (mpz_ptr w, mpz_srcptr x, unsigned long y)$/;"	f
mpz_and	gmp.h	636;"	d
mpz_and	mini-gmp/mini-gmp.c	/^mpz_and (mpz_t r, const mpz_t u, const mpz_t v)$/;"	f
mpz_and	mpz/and.c	/^mpz_and (mpz_ptr res, mpz_srcptr op1, mpz_srcptr op2)$/;"	f
mpz_aorsmul	mpz/aorsmul.c	/^mpz_aorsmul (mpz_ptr w, mpz_srcptr x, mpz_srcptr y, mp_size_t sub)$/;"	f	file:
mpz_aorsmul	mpz/aorsmul.c	49;"	d	file:
mpz_aorsmul_1	gmp-impl.h	804;"	d
mpz_aorsmul_1	mpz/aorsmul_i.c	/^mpz_aorsmul_1 (mpz_ptr w, mpz_srcptr x, mp_limb_t y, mp_size_t sub)$/;"	f
mpz_array_init	gmp.h	639;"	d
mpz_array_init	mpz/array_init.c	/^mpz_array_init (mpz_ptr arr, mp_size_t arr_size, mp_size_t nbits)$/;"	f
mpz_bdiv_bin_uiui	mpz/bin_uiui.c	/^mpz_bdiv_bin_uiui (mpz_ptr r, unsigned long int n, unsigned long int k)$/;"	f	file:
mpz_bin_ui	gmp.h	642;"	d
mpz_bin_ui	mpz/bin_ui.c	/^mpz_bin_ui (mpz_ptr r, mpz_srcptr n, unsigned long int k)$/;"	f
mpz_bin_uiui	gmp.h	645;"	d
mpz_bin_uiui	mini-gmp/mini-gmp.c	/^mpz_bin_uiui (mpz_t r, unsigned long n, unsigned long k)$/;"	f
mpz_bin_uiui	mpz/bin_uiui.c	/^mpz_bin_uiui (mpz_ptr r, unsigned long int n, unsigned long int k)$/;"	f
mpz_cdiv_q	gmp.h	648;"	d
mpz_cdiv_q	mini-gmp/mini-gmp.c	/^mpz_cdiv_q (mpz_t q, const mpz_t n, const mpz_t d)$/;"	f
mpz_cdiv_q	mpz/cdiv_q.c	/^mpz_cdiv_q (mpz_ptr quot, mpz_srcptr dividend, mpz_srcptr divisor)$/;"	f
mpz_cdiv_q_2exp	gmp.h	651;"	d
mpz_cdiv_q_2exp	mini-gmp/mini-gmp.c	/^mpz_cdiv_q_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)$/;"	f
mpz_cdiv_q_2exp	mpz/cfdiv_q_2exp.c	/^mpz_cdiv_q_2exp (mpz_ptr w, mpz_srcptr u, mp_bitcnt_t cnt)$/;"	f
mpz_cdiv_q_ui	gmp.h	654;"	d
mpz_cdiv_q_ui	mini-gmp/mini-gmp.c	/^mpz_cdiv_q_ui (mpz_t q, const mpz_t n, unsigned long d)$/;"	f
mpz_cdiv_q_ui	mpz/cdiv_q_ui.c	/^mpz_cdiv_q_ui (mpz_ptr quot, mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_cdiv_qr	gmp.h	657;"	d
mpz_cdiv_qr	mini-gmp/mini-gmp.c	/^mpz_cdiv_qr (mpz_t q, mpz_t r, const mpz_t n, const mpz_t d)$/;"	f
mpz_cdiv_qr	mpz/cdiv_qr.c	/^mpz_cdiv_qr (mpz_ptr quot, mpz_ptr rem, mpz_srcptr dividend, mpz_srcptr divisor)$/;"	f
mpz_cdiv_qr_ui	gmp.h	660;"	d
mpz_cdiv_qr_ui	mini-gmp/mini-gmp.c	/^mpz_cdiv_qr_ui (mpz_t q, mpz_t r, const mpz_t n, unsigned long d)$/;"	f
mpz_cdiv_qr_ui	mpz/cdiv_qr_ui.c	/^mpz_cdiv_qr_ui (mpz_ptr quot, mpz_ptr rem, mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_cdiv_r	gmp.h	663;"	d
mpz_cdiv_r	mini-gmp/mini-gmp.c	/^mpz_cdiv_r (mpz_t r, const mpz_t n, const mpz_t d)$/;"	f
mpz_cdiv_r	mpz/cdiv_r.c	/^mpz_cdiv_r (mpz_ptr rem, mpz_srcptr dividend, mpz_srcptr divisor)$/;"	f
mpz_cdiv_r_2exp	gmp.h	666;"	d
mpz_cdiv_r_2exp	mini-gmp/mini-gmp.c	/^mpz_cdiv_r_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)$/;"	f
mpz_cdiv_r_2exp	mpz/cfdiv_r_2exp.c	/^mpz_cdiv_r_2exp (mpz_ptr w, mpz_srcptr u, mp_bitcnt_t cnt)$/;"	f
mpz_cdiv_r_ui	gmp.h	669;"	d
mpz_cdiv_r_ui	mini-gmp/mini-gmp.c	/^mpz_cdiv_r_ui (mpz_t r, const mpz_t n, unsigned long d)$/;"	f
mpz_cdiv_r_ui	mpz/cdiv_r_ui.c	/^mpz_cdiv_r_ui (mpz_ptr rem, mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_cdiv_ui	gmp.h	672;"	d
mpz_cdiv_ui	mini-gmp/mini-gmp.c	/^mpz_cdiv_ui (const mpz_t n, unsigned long d)$/;"	f
mpz_cdiv_ui	mpz/cdiv_ui.c	/^mpz_cdiv_ui (mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_check_format	mini-gmp/tests/t-reuse.c	/^mpz_check_format (const mpz_t x)$/;"	f
mpz_class	gmpxx.h	/^typedef __gmp_expr<mpz_t, mpz_t> mpz_class;$/;"	t
mpz_clear	gmp.h	675;"	d
mpz_clear	mini-gmp/mini-gmp.c	/^mpz_clear (mpz_t r)$/;"	f
mpz_clear	mpz/clear.c	/^mpz_clear (mpz_ptr x)$/;"	f
mpz_clears	gmp.h	678;"	d
mpz_clears	mpz/clears.c	/^mpz_clears (mpz_ptr x, ...)$/;"	f
mpz_clrbit	gmp.h	681;"	d
mpz_clrbit	mini-gmp/mini-gmp.c	/^mpz_clrbit (mpz_t d, mp_bitcnt_t bit_index)$/;"	f
mpz_clrbit	mpz/clrbit.c	/^mpz_clrbit (mpz_ptr d, mp_bitcnt_t bit_idx)$/;"	f
mpz_cmp	gmp.h	684;"	d
mpz_cmp	mini-gmp/mini-gmp.c	/^mpz_cmp (const mpz_t a, const mpz_t b)$/;"	f
mpz_cmp_d	gmp.h	687;"	d
mpz_cmp_d	mini-gmp/mini-gmp.c	/^mpz_cmp_d (const mpz_t x, double d)$/;"	f
mpz_cmp_d	mpz/cmp_d.c	/^mpz_cmp_d (mpz_srcptr z, double d)$/;"	f
mpz_cmp_si	gmp.h	2247;"	d
mpz_cmp_si	gmp.h	2262;"	d
mpz_cmp_si	mini-gmp/mini-gmp.c	/^mpz_cmp_si (const mpz_t u, long v)$/;"	f
mpz_cmp_ui	gmp.h	2244;"	d
mpz_cmp_ui	gmp.h	2261;"	d
mpz_cmp_ui	mini-gmp/mini-gmp.c	/^mpz_cmp_ui (const mpz_t u, unsigned long v)$/;"	f
mpz_cmpabs	gmp.h	696;"	d
mpz_cmpabs	mini-gmp/mini-gmp.c	/^mpz_cmpabs (const mpz_t u, const mpz_t v)$/;"	f
mpz_cmpabs_d	gmp.h	699;"	d
mpz_cmpabs_d	mini-gmp/mini-gmp.c	/^mpz_cmpabs_d (const mpz_t x, double d)$/;"	f
mpz_cmpabs_d	mpz/cmpabs_d.c	/^mpz_cmpabs_d (mpz_srcptr z, double d)$/;"	f
mpz_cmpabs_ui	gmp.h	702;"	d
mpz_cmpabs_ui	mini-gmp/mini-gmp.c	/^mpz_cmpabs_ui (const mpz_t u, unsigned long v)$/;"	f
mpz_com	gmp.h	705;"	d
mpz_com	mini-gmp/mini-gmp.c	/^mpz_com (mpz_t r, const mpz_t u)$/;"	f
mpz_com	mpz/com.c	/^mpz_com (mpz_ptr dst, mpz_srcptr src)$/;"	f
mpz_combit	gmp.h	708;"	d
mpz_combit	mini-gmp/mini-gmp.c	/^mpz_combit (mpz_t d, mp_bitcnt_t bit_index)$/;"	f
mpz_combit	mpz/combit.c	/^mpz_combit (mpz_ptr d, mp_bitcnt_t bit_index)$/;"	f
mpz_congruent_2exp_p	gmp.h	714;"	d
mpz_congruent_p	gmp.h	711;"	d
mpz_congruent_p	mini-gmp/mini-gmp.c	/^mpz_congruent_p (const mpz_t a, const mpz_t b, const mpz_t m)$/;"	f
mpz_congruent_p	mpz/cong.c	/^mpz_congruent_p (mpz_srcptr a, mpz_srcptr c, mpz_srcptr d)$/;"	f
mpz_congruent_ui_p	gmp.h	717;"	d
mpz_congruent_ui_p	mpz/cong_ui.c	/^mpz_congruent_ui_p (mpz_srcptr a, unsigned long cu, unsigned long du)$/;"	f
mpz_div	gmp.h	2302;"	d
mpz_div_2exp	gmp.h	2306;"	d
mpz_div_q_2exp	mini-gmp/mini-gmp.c	/^mpz_div_q_2exp (mpz_t q, const mpz_t u, mp_bitcnt_t bit_index,$/;"	f	file:
mpz_div_qr	mini-gmp/mini-gmp.c	/^mpz_div_qr (mpz_t q, mpz_t r,$/;"	f	file:
mpz_div_qr_ui	mini-gmp/mini-gmp.c	/^mpz_div_qr_ui (mpz_t q, mpz_t r,$/;"	f	file:
mpz_div_r_2exp	mini-gmp/mini-gmp.c	/^mpz_div_r_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t bit_index,$/;"	f	file:
mpz_div_round_mode	mini-gmp/mini-gmp.c	/^enum mpz_div_round_mode { GMP_DIV_FLOOR, GMP_DIV_CEIL, GMP_DIV_TRUNC };$/;"	g	file:
mpz_div_ui	gmp.h	2304;"	d
mpz_divexact	gmp.h	720;"	d
mpz_divexact	mini-gmp/mini-gmp.c	/^mpz_divexact (mpz_t q, const mpz_t n, const mpz_t d)$/;"	f
mpz_divexact	mpz/divexact.c	/^mpz_divexact (mpz_ptr quot, mpz_srcptr num, mpz_srcptr den)$/;"	f
mpz_divexact_by3	mpz/divegcd.c	/^mpz_divexact_by3 (mpz_ptr q, mpz_srcptr a)$/;"	f	file:
mpz_divexact_by5	mpz/divegcd.c	/^mpz_divexact_by5 (mpz_ptr q, mpz_srcptr a)$/;"	f	file:
mpz_divexact_gcd	gmp-impl.h	1660;"	d
mpz_divexact_gcd	mpz/divegcd.c	/^mpz_divexact_gcd (mpz_ptr q, mpz_srcptr a, mpz_srcptr d)$/;"	f
mpz_divexact_limb	mpz/divegcd.c	/^mpz_divexact_limb (mpz_ptr q, mpz_srcptr a, mp_limb_t d)$/;"	f	file:
mpz_divexact_ui	gmp.h	723;"	d
mpz_divexact_ui	mini-gmp/mini-gmp.c	/^mpz_divexact_ui (mpz_t q, const mpz_t n, unsigned long d)$/;"	f
mpz_divexact_ui	mpz/dive_ui.c	/^mpz_divexact_ui (mpz_ptr dst, mpz_srcptr src, unsigned long divisor)$/;"	f
mpz_divisible_2exp_p	gmp.h	732;"	d
mpz_divisible_p	gmp.h	726;"	d
mpz_divisible_p	mini-gmp/mini-gmp.c	/^mpz_divisible_p (const mpz_t n, const mpz_t d)$/;"	f
mpz_divisible_p	mpz/divis.c	/^mpz_divisible_p (mpz_srcptr a, mpz_srcptr d)$/;"	f
mpz_divisible_ui_p	gmp.h	729;"	d
mpz_divisible_ui_p	mini-gmp/mini-gmp.c	/^mpz_divisible_ui_p (const mpz_t n, unsigned long d)$/;"	f
mpz_divisible_ui_p	mpz/divis_ui.c	/^mpz_divisible_ui_p (mpz_srcptr a, unsigned long d)$/;"	f
mpz_divmod	gmp.h	2303;"	d
mpz_divmod_ui	gmp.h	2305;"	d
mpz_dump	gmp.h	735;"	d
mpz_dump	mpz/dump.c	/^mpz_dump (mpz_srcptr u)$/;"	f
mpz_eor	gmp.h	1109;"	d
mpz_eq_mpn	tests/mpn/t-minvert.c	/^mpz_eq_mpn (mp_ptr ap, mp_size_t an, const mpz_t b)$/;"	f
mpz_erandomb	tests/misc.c	/^mpz_erandomb (mpz_ptr rop, gmp_randstate_t rstate, unsigned long nbits)$/;"	f
mpz_erandomb_nonzero	tests/misc.c	/^mpz_erandomb_nonzero (mpz_ptr rop, gmp_randstate_t rstate, unsigned long nbits)$/;"	f
mpz_errandomb	tests/misc.c	/^mpz_errandomb (mpz_ptr rop, gmp_randstate_t rstate, unsigned long nbits)$/;"	f
mpz_errandomb_nonzero	tests/misc.c	/^mpz_errandomb_nonzero (mpz_ptr rop, gmp_randstate_t rstate, unsigned long nbits)$/;"	f
mpz_eval_expr	demos/pexpr.c	/^mpz_eval_expr (mpz_ptr r, expr_t e)$/;"	f
mpz_eval_mod_expr	demos/pexpr.c	/^mpz_eval_mod_expr (mpz_ptr r, expr_t e, mpz_ptr mod)$/;"	f
mpz_even_p	gmp.h	2272;"	d
mpz_even_p	mini-gmp/mini-gmp.h	127;"	d
mpz_export	gmp.h	738;"	d
mpz_export	mini-gmp/mini-gmp.c	/^mpz_export (void *r, size_t *countp, int order, size_t size, int endian,$/;"	f
mpz_export	mpz/export.c	/^mpz_export (void *data, size_t *countp, int order,$/;"	f
mpz_expr	demos/expr/exprz.c	/^mpz_expr (mpz_ptr res, int base, const char *e, ...)$/;"	f
mpz_expr_a	demos/expr/exprza.c	/^mpz_expr_a (const struct mpexpr_operator_t *table,$/;"	f
mpz_expr_standard_table	demos/expr/exprz.c	/^const struct mpexpr_operator_t * const mpz_expr_standard_table$/;"	v
mpz_fac_ui	gmp.h	741;"	d
mpz_fac_ui	mini-gmp/mini-gmp.c	/^mpz_fac_ui (mpz_t x, unsigned long n)$/;"	f
mpz_fac_ui	mpz/fac_ui.c	/^mpz_fac_ui (mpz_ptr x, unsigned long n)$/;"	f
mpz_fdiv_q	demos/pexpr.c	80;"	d	file:
mpz_fdiv_q	gmp.h	753;"	d
mpz_fdiv_q	mini-gmp/mini-gmp.c	/^mpz_fdiv_q (mpz_t q, const mpz_t n, const mpz_t d)$/;"	f
mpz_fdiv_q	mpz/fdiv_q.c	/^mpz_fdiv_q (mpz_ptr quot, mpz_srcptr dividend, mpz_srcptr divisor)$/;"	f
mpz_fdiv_q_2exp	gmp.h	756;"	d
mpz_fdiv_q_2exp	mini-gmp/mini-gmp.c	/^mpz_fdiv_q_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)$/;"	f
mpz_fdiv_q_2exp	mpz/cfdiv_q_2exp.c	/^mpz_fdiv_q_2exp (mpz_ptr w, mpz_srcptr u, mp_bitcnt_t cnt)$/;"	f
mpz_fdiv_q_ui	gmp.h	759;"	d
mpz_fdiv_q_ui	mini-gmp/mini-gmp.c	/^mpz_fdiv_q_ui (mpz_t q, const mpz_t n, unsigned long d)$/;"	f
mpz_fdiv_q_ui	mpz/fdiv_q_ui.c	/^mpz_fdiv_q_ui (mpz_ptr quot, mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_fdiv_qr	gmp.h	762;"	d
mpz_fdiv_qr	mini-gmp/mini-gmp.c	/^mpz_fdiv_qr (mpz_t q, mpz_t r, const mpz_t n, const mpz_t d)$/;"	f
mpz_fdiv_qr	mpz/fdiv_qr.c	/^mpz_fdiv_qr (mpz_ptr quot, mpz_ptr rem, mpz_srcptr dividend, mpz_srcptr divisor)$/;"	f
mpz_fdiv_qr_ui	gmp.h	765;"	d
mpz_fdiv_qr_ui	mini-gmp/mini-gmp.c	/^mpz_fdiv_qr_ui (mpz_t q, mpz_t r, const mpz_t n, unsigned long d)$/;"	f
mpz_fdiv_qr_ui	mpz/fdiv_qr_ui.c	/^mpz_fdiv_qr_ui (mpz_ptr quot, mpz_ptr rem, mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_fdiv_r	demos/pexpr.c	81;"	d	file:
mpz_fdiv_r	gmp.h	768;"	d
mpz_fdiv_r	mini-gmp/mini-gmp.c	/^mpz_fdiv_r (mpz_t r, const mpz_t n, const mpz_t d)$/;"	f
mpz_fdiv_r	mpz/fdiv_r.c	/^mpz_fdiv_r (mpz_ptr rem, mpz_srcptr dividend, mpz_srcptr divisor)$/;"	f
mpz_fdiv_r_2exp	gmp.h	771;"	d
mpz_fdiv_r_2exp	mini-gmp/mini-gmp.c	/^mpz_fdiv_r_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)$/;"	f
mpz_fdiv_r_2exp	mpz/cfdiv_r_2exp.c	/^mpz_fdiv_r_2exp (mpz_ptr w, mpz_srcptr u, mp_bitcnt_t cnt)$/;"	f
mpz_fdiv_r_ui	gmp.h	774;"	d
mpz_fdiv_r_ui	mini-gmp/mini-gmp.c	/^mpz_fdiv_r_ui (mpz_t r, const mpz_t n, unsigned long d)$/;"	f
mpz_fdiv_r_ui	mpz/fdiv_r_ui.c	/^mpz_fdiv_r_ui (mpz_ptr rem, mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_fdiv_ui	gmp.h	777;"	d
mpz_fdiv_ui	mini-gmp/mini-gmp.c	/^mpz_fdiv_ui (const mpz_t n, unsigned long d)$/;"	f
mpz_fdiv_ui	mpz/fdiv_ui.c	/^mpz_fdiv_ui (mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_fib2_ui	gmp.h	783;"	d
mpz_fib2_ui	mpz/fib2_ui.c	/^mpz_fib2_ui (mpz_ptr fn, mpz_ptr fnsub1, unsigned long n)$/;"	f
mpz_fib_ui	gmp.h	780;"	d
mpz_fib_ui	mpz/fib_ui.c	/^mpz_fib_ui (mpz_ptr fn, unsigned long n)$/;"	f
mpz_fits_sint_p	gmp.h	786;"	d
mpz_fits_slong_p	gmp.h	789;"	d
mpz_fits_slong_p	mini-gmp/mini-gmp.c	/^mpz_fits_slong_p (const mpz_t u)$/;"	f
mpz_fits_sshort_p	gmp.h	792;"	d
mpz_fits_uint_p	gmp.h	795;"	d
mpz_fits_ulimb_p	tests/mpz/t-jac.c	/^mpz_fits_ulimb_p (mpz_srcptr z)$/;"	f
mpz_fits_ulong_p	gmp.h	800;"	d
mpz_fits_ulong_p	mini-gmp/mini-gmp.c	/^mpz_fits_ulong_p (const mpz_t u)$/;"	f
mpz_fits_ushort_p	gmp.h	805;"	d
mpz_freqt	tests/rand/statlib.c	/^mpz_freqt (mpf_t V,$/;"	f
mpz_gcd	gmp.h	810;"	d
mpz_gcd	mini-gmp/mini-gmp.c	/^mpz_gcd (mpz_t g, const mpz_t u, const mpz_t v)$/;"	f
mpz_gcd	mpz/gcd.c	/^mpz_gcd (mpz_ptr g, mpz_srcptr u, mpz_srcptr v)$/;"	f
mpz_gcd_ui	gmp.h	813;"	d
mpz_gcd_ui	mini-gmp/mini-gmp.c	/^mpz_gcd_ui (mpz_t g, const mpz_t u, unsigned long v)$/;"	f
mpz_gcd_ui	mpz/gcd_ui.c	/^mpz_gcd_ui (mpz_ptr w, mpz_srcptr u, unsigned long int v)$/;"	f
mpz_gcdext	gmp.h	816;"	d
mpz_gcdext	mini-gmp/mini-gmp.c	/^mpz_gcdext (mpz_t g, mpz_t s, mpz_t t, const mpz_t u, const mpz_t v)$/;"	f
mpz_gcdext	mpz/gcdext.c	/^mpz_gcdext (mpz_ptr g, mpz_ptr s, mpz_ptr t, mpz_srcptr a, mpz_srcptr b)$/;"	f
mpz_get_d	gmp.h	819;"	d
mpz_get_d	mini-gmp/mini-gmp.c	/^mpz_get_d (const mpz_t u)$/;"	f
mpz_get_d	mpz/get_d.c	/^mpz_get_d (mpz_srcptr z)$/;"	f
mpz_get_d_2exp	gmp.h	822;"	d
mpz_get_d_2exp	mpz/get_d_2exp.c	/^mpz_get_d_2exp (signed long int *exp2, mpz_srcptr src)$/;"	f
mpz_get_si	gmp.h	825;"	d
mpz_get_si	mini-gmp/mini-gmp.c	/^mpz_get_si (const mpz_t u)$/;"	f
mpz_get_str	gmp.h	828;"	d
mpz_get_str	mini-gmp/mini-gmp.c	/^mpz_get_str (char *sp, int base, const mpz_t u)$/;"	f
mpz_get_str	mpz/get_str.c	/^mpz_get_str (char *res_str, int base, mpz_srcptr x)$/;"	f
mpz_get_ui	gmp.h	831;"	d
mpz_get_ui	mini-gmp/mini-gmp.c	/^mpz_get_ui (const mpz_t u)$/;"	f
mpz_get_ulimb	tests/mpz/t-jac.c	/^mpz_get_ulimb (mpz_srcptr z)$/;"	f
mpz_getlimbn	gmp.h	836;"	d
mpz_getlimbn	mini-gmp/mini-gmp.c	/^mpz_getlimbn (const mpz_t u, mp_size_t n)$/;"	f
mpz_goetgheluck_bin_uiui	mpz/bin_uiui.c	/^mpz_goetgheluck_bin_uiui (mpz_ptr r, unsigned long int n, unsigned long int k)$/;"	f	file:
mpz_hamdist	gmp.h	841;"	d
mpz_hamdist	mini-gmp/mini-gmp.c	/^mpz_hamdist (const mpz_t u, const mpz_t v)$/;"	f
mpz_import	gmp.h	844;"	d
mpz_import	mini-gmp/mini-gmp.c	/^mpz_import (mpz_t r, size_t count, int order, size_t size, int endian,$/;"	f
mpz_import	mpz/import.c	/^mpz_import (mpz_ptr z, size_t count, int order,$/;"	f
mpz_init	gmp.h	847;"	d
mpz_init	mini-gmp/mini-gmp.c	/^mpz_init (mpz_t r)$/;"	f
mpz_init	mpz/init.c	/^mpz_init (mpz_ptr x)$/;"	f
mpz_init2	gmp.h	850;"	d
mpz_init2	mini-gmp/mini-gmp.c	/^mpz_init2 (mpz_t r, mp_bitcnt_t bits)$/;"	f
mpz_init2	mpz/init2.c	/^mpz_init2 (mpz_ptr x, mp_bitcnt_t bits)$/;"	f
mpz_init_set	gmp.h	856;"	d
mpz_init_set	mini-gmp/mini-gmp.c	/^mpz_init_set (mpz_t r, const mpz_t x)$/;"	f
mpz_init_set	mpz/iset.c	/^mpz_init_set (mpz_ptr w, mpz_srcptr u)$/;"	f
mpz_init_set_d	gmp.h	859;"	d
mpz_init_set_d	mini-gmp/mini-gmp.c	/^mpz_init_set_d (mpz_t r, double x)$/;"	f
mpz_init_set_d	mpz/iset_d.c	/^mpz_init_set_d (mpz_ptr dest, double val)$/;"	f
mpz_init_set_n	tests/misc.c	/^mpz_init_set_n (mpz_ptr z, mp_srcptr p, mp_size_t size)$/;"	f
mpz_init_set_si	gmp.h	862;"	d
mpz_init_set_si	mini-gmp/mini-gmp.c	/^mpz_init_set_si (mpz_t r, signed long int x)$/;"	f
mpz_init_set_si	mpz/iset_si.c	/^mpz_init_set_si (mpz_ptr dest, signed long int val)$/;"	f
mpz_init_set_str	gmp.h	865;"	d
mpz_init_set_str	mini-gmp/mini-gmp.c	/^mpz_init_set_str (mpz_t r, const char *sp, int base)$/;"	f
mpz_init_set_str	mpz/iset_str.c	/^mpz_init_set_str (mpz_ptr x, const char *str, int base)$/;"	f
mpz_init_set_ui	gmp.h	868;"	d
mpz_init_set_ui	mini-gmp/mini-gmp.c	/^mpz_init_set_ui (mpz_t r, unsigned long int x)$/;"	f
mpz_init_set_ui	mpz/iset_ui.c	/^mpz_init_set_ui (mpz_ptr dest, unsigned long int val)$/;"	f
mpz_inits	gmp.h	853;"	d
mpz_inits	mpz/inits.c	/^mpz_inits (mpz_ptr x, ...)$/;"	f
mpz_inp_raw	gmp.h	871;"	d
mpz_inp_raw	mpz/inp_raw.c	/^mpz_inp_raw (mpz_ptr x, FILE *fp)$/;"	f
mpz_inp_str	gmp.h	876;"	d
mpz_inp_str	mpz/inp_str.c	/^mpz_inp_str (mpz_ptr x, FILE *stream, int base)$/;"	f
mpz_inp_str_nowhite	gmp-impl.h	1669;"	d
mpz_inp_str_nowhite	mpz/inp_str.c	/^mpz_inp_str_nowhite (mpz_ptr x, FILE *stream, int base, int c, size_t nread)$/;"	f
mpz_invert	gmp.h	881;"	d
mpz_invert	mini-gmp/mini-gmp.c	/^mpz_invert (mpz_t r, const mpz_t u, const mpz_t m)$/;"	f
mpz_invert	mpz/invert.c	/^mpz_invert (mpz_ptr inverse, mpz_srcptr x, mpz_srcptr n)$/;"	f
mpz_invert_2exp	bootstrap.c	/^mpz_invert_2exp (mpz_t r, mpz_t a, unsigned long n)$/;"	f
mpz_invert_ui_2exp	bootstrap.c	/^mpz_invert_ui_2exp (mpz_t r, unsigned long a, unsigned long n)$/;"	f
mpz_ior	gmp.h	884;"	d
mpz_ior	mini-gmp/mini-gmp.c	/^mpz_ior (mpz_t r, const mpz_t u, const mpz_t v)$/;"	f
mpz_ior	mpz/ior.c	/^mpz_ior (mpz_ptr res, mpz_srcptr op1, mpz_srcptr op2)$/;"	f
mpz_jacobi	gmp.h	887;"	d
mpz_jacobi	mpz/jacobi.c	/^mpz_jacobi (mpz_srcptr a, mpz_srcptr b)$/;"	f
mpz_kronecker	gmp.h	890;"	d
mpz_kronecker_si	gmp.h	892;"	d
mpz_kronecker_si	mpz/kronzs.c	/^mpz_kronecker_si (mpz_srcptr a, long b)$/;"	f
mpz_kronecker_ui	gmp.h	895;"	d
mpz_kronecker_ui	mpz/kronzu.c	/^mpz_kronecker_ui (mpz_srcptr a, unsigned long b)$/;"	f
mpz_lcm	gmp.h	904;"	d
mpz_lcm	mini-gmp/mini-gmp.c	/^mpz_lcm (mpz_t r, const mpz_t u, const mpz_t v)$/;"	f
mpz_lcm	mpz/lcm.c	/^mpz_lcm (mpz_ptr r, mpz_srcptr u, mpz_srcptr v)$/;"	f
mpz_lcm_ui	gmp.h	907;"	d
mpz_lcm_ui	mini-gmp/mini-gmp.c	/^mpz_lcm_ui (mpz_t r, const mpz_t u, unsigned long v)$/;"	f
mpz_lcm_ui	mpz/lcm_ui.c	/^mpz_lcm_ui (mpz_ptr r, mpz_srcptr u, unsigned long v)$/;"	f
mpz_legendre	gmp.h	910;"	d
mpz_limbs_finish	gmp.h	1121;"	d
mpz_limbs_finish	mini-gmp/mini-gmp.c	/^mpz_limbs_finish (mpz_t x, mp_size_t xs)$/;"	f
mpz_limbs_finish	mpz/limbs_finish.c	/^mpz_limbs_finish (mpz_ptr x, mp_size_t xs)$/;"	f
mpz_limbs_modify	gmp.h	1118;"	d
mpz_limbs_modify	mini-gmp/mini-gmp.c	/^mpz_limbs_modify (mpz_t x, mp_size_t n)$/;"	f
mpz_limbs_modify	mpz/limbs_modify.c	/^mpz_limbs_modify (mpz_ptr x, mp_size_t n)$/;"	f
mpz_limbs_read	gmp.h	1112;"	d
mpz_limbs_read	mini-gmp/mini-gmp.c	/^mpz_limbs_read (mpz_srcptr x)$/;"	f
mpz_limbs_read	mpz/limbs_read.c	/^mpz_limbs_read (mpz_srcptr x)$/;"	f
mpz_limbs_write	gmp.h	1115;"	d
mpz_limbs_write	mini-gmp/mini-gmp.c	/^mpz_limbs_write (mpz_t x, mp_size_t n)$/;"	f
mpz_limbs_write	mpz/limbs_write.c	/^mpz_limbs_write (mpz_ptr x, mp_size_t n)$/;"	f
mpz_log2	gen-trialdivtab.c	/^mpz_log2 (mpz_t x)$/;"	f
mpz_lucnum2_ui	gmp.h	915;"	d
mpz_lucnum2_ui	mpz/lucnum2_ui.c	/^mpz_lucnum2_ui (mpz_ptr ln, mpz_ptr lnsub1, unsigned long n)$/;"	f
mpz_lucnum_ui	gmp.h	912;"	d
mpz_lucnum_ui	mpz/lucnum_ui.c	/^mpz_lucnum_ui (mpz_ptr ln, unsigned long n)$/;"	f
mpz_make_odd	mini-gmp/mini-gmp.c	/^mpz_make_odd (mpz_t r)$/;"	f	file:
mpz_mdiv	gmp.h	2292;"	d
mpz_mdiv_ui	gmp.h	2295;"	d
mpz_mdivmod	gmp.h	2293;"	d
mpz_mdivmod_ui	gmp.h	2296;"	d
mpz_mfac_uiui	gmp.h	747;"	d
mpz_mfac_uiui	mpz/mfac_uiui.c	/^mpz_mfac_uiui (mpz_ptr x, unsigned long n, unsigned long m)$/;"	f
mpz_millerrabin	gmp.h	918;"	d
mpz_millerrabin	mpz/millerrabin.c	/^mpz_millerrabin (mpz_srcptr n, int reps)$/;"	f
mpz_mmod	gmp.h	2294;"	d
mpz_mmod_ui	gmp.h	2298;"	d
mpz_mod	gmp.h	921;"	d
mpz_mod	mini-gmp/mini-gmp.c	/^mpz_mod (mpz_t r, const mpz_t n, const mpz_t d)$/;"	f
mpz_mod	mpz/mod.c	/^mpz_mod (mpz_ptr rem, mpz_srcptr dividend, mpz_srcptr divisor)$/;"	f
mpz_mod4	tests/mpz/t-jac.c	/^mpz_mod4 (mpz_srcptr z)$/;"	f
mpz_mod_2exp	gmp.h	2307;"	d
mpz_mod_ui	gmp.h	924;"	d
mpz_mod_ui	mini-gmp/mini-gmp.c	/^mpz_mod_ui (mpz_t r, const mpz_t n, unsigned long d)$/;"	f
mpz_mpn_equal	tests/mpn/t-hgcd.c	/^mpz_mpn_equal (const mpz_t a, mp_srcptr bp, mp_size_t bsize)$/;"	f	file:
mpz_mpn_sqrtrem	mini-gmp/tests/t-sqrt.c	/^mpz_mpn_sqrtrem (mpz_t s, mpz_t r, const mpz_t u)$/;"	f
mpz_mul	gmp.h	926;"	d
mpz_mul	mini-gmp/mini-gmp.c	/^mpz_mul (mpz_t r, const mpz_t u, const mpz_t v)$/;"	f
mpz_mul	mpz/mul.c	/^mpz_mul (mpz_ptr w, mpz_srcptr u, mpz_srcptr v)$/;"	f
mpz_mul_2exp	gmp.h	929;"	d
mpz_mul_2exp	mini-gmp/mini-gmp.c	/^mpz_mul_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t bits)$/;"	f
mpz_mul_2exp	mpz/mul_2exp.c	/^mpz_mul_2exp (mpz_ptr r, mpz_srcptr u, mp_bitcnt_t cnt)$/;"	f
mpz_mul_si	gmp.h	932;"	d
mpz_mul_si	mini-gmp/mini-gmp.c	/^mpz_mul_si (mpz_t r, const mpz_t u, long int v)$/;"	f
mpz_mul_ui	gmp.h	935;"	d
mpz_mul_ui	mini-gmp/mini-gmp.c	/^mpz_mul_ui (mpz_t r, const mpz_t u, unsigned long int v)$/;"	f
mpz_n_pow_ui	gmp-impl.h	806;"	d
mpz_n_pow_ui	mpz/n_pow_ui.c	/^mpz_n_pow_ui (mpz_ptr r, mp_srcptr bp, mp_size_t bsize, unsigned long int e)$/;"	f
mpz_neg	gmp.h	/^mpz_neg (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)$/;"	f
mpz_neg	gmp.h	938;"	d
mpz_neg	mini-gmp/mini-gmp.c	/^mpz_neg (mpz_t r, const mpz_t u)$/;"	f
mpz_neg	mpz/neg.c	/^mpz_neg (mpz_ptr w, mpz_srcptr u)$/;"	f
mpz_negrandom	tests/misc.c	/^mpz_negrandom (mpz_ptr rop, gmp_randstate_t rstate)$/;"	f
mpz_nextprime	gmp.h	943;"	d
mpz_nextprime	mpz/nextprime.c	/^mpz_nextprime (mpz_ptr p, mpz_srcptr n)$/;"	f
mpz_odd_p	gmp.h	2271;"	d
mpz_odd_p	mini-gmp/mini-gmp.h	126;"	d
mpz_oddfac_1	gmp-impl.h	1666;"	d
mpz_oddfac_1	mpz/oddfac_1.c	/^mpz_oddfac_1 (mpz_ptr x, mp_limb_t n, unsigned flag)$/;"	f
mpz_out_raw	gmp.h	946;"	d
mpz_out_raw	mpz/out_raw.c	/^mpz_out_raw (FILE *fp, mpz_srcptr x)$/;"	f
mpz_out_str	gmp.h	951;"	d
mpz_out_str	mini-gmp/mini-gmp.c	/^mpz_out_str (FILE *stream, int base, const mpz_t x)$/;"	f
mpz_out_str	mpz/out_str.c	/^mpz_out_str (FILE *stream, int base, mpz_srcptr x)$/;"	f
mpz_perfect_power_p	gmp.h	956;"	d
mpz_perfect_power_p	mpz/perfpow.c	/^mpz_perfect_power_p (mpz_srcptr u)$/;"	f
mpz_perfect_square_p	gmp.h	/^mpz_perfect_square_p (mpz_srcptr __gmp_a)$/;"	f
mpz_perfect_square_p	gmp.h	959;"	d
mpz_perfect_square_p	mini-gmp/mini-gmp.c	/^mpz_perfect_square_p (const mpz_t u)$/;"	f
mpz_popcount	gmp.h	964;"	d
mpz_popcount	mini-gmp/mini-gmp.c	/^mpz_popcount (const mpz_t u)$/;"	f
mpz_pow2abs_p	tests/misc.c	/^mpz_pow2abs_p (mpz_srcptr z)$/;"	f
mpz_pow_ui	gmp.h	969;"	d
mpz_pow_ui	mini-gmp/mini-gmp.c	/^mpz_pow_ui (mpz_t r, const mpz_t b, unsigned long e)$/;"	f
mpz_pow_ui	mpz/pow_ui.c	/^mpz_pow_ui (mpz_ptr r, mpz_srcptr b, unsigned long int e)$/;"	f
mpz_powm	gmp.h	972;"	d
mpz_powm	mini-gmp/mini-gmp.c	/^mpz_powm (mpz_t r, const mpz_t b, const mpz_t e, const mpz_t m)$/;"	f
mpz_powm	mpz/powm.c	/^mpz_powm (mpz_ptr r, mpz_srcptr b, mpz_srcptr e, mpz_srcptr m)$/;"	f
mpz_powm_sec	gmp.h	975;"	d
mpz_powm_sec	mpz/powm_sec.c	/^mpz_powm_sec (mpz_ptr r, mpz_srcptr b, mpz_srcptr e, mpz_srcptr m)$/;"	f
mpz_powm_ui	gmp.h	978;"	d
mpz_powm_ui	mini-gmp/mini-gmp.c	/^mpz_powm_ui (mpz_t r, const mpz_t b, unsigned long elimb, const mpz_t m)$/;"	f
mpz_powm_ui	mpz/powm_ui.c	/^mpz_powm_ui (mpz_ptr r, mpz_srcptr b, unsigned long int el, mpz_srcptr m)$/;"	f
mpz_preinv_invert	bootstrap.c	/^mpz_preinv_invert (mpz_t inv, mpz_t d, int numb_bits)$/;"	f
mpz_primorial_ui	gmp.h	750;"	d
mpz_primorial_ui	mpz/primorial_ui.c	/^mpz_primorial_ui (mpz_ptr x, unsigned long n)$/;"	f
mpz_probab_prime_p	gmp.h	981;"	d
mpz_probab_prime_p	mini-gmp/mini-gmp.c	/^mpz_probab_prime_p (const mpz_t n, int reps)$/;"	f
mpz_probab_prime_p	mpz/pprime_p.c	/^mpz_probab_prime_p (mpz_srcptr n, int reps)$/;"	f
mpz_prodlimbs	gmp-impl.h	1663;"	d
mpz_prodlimbs	mpz/prodlimbs.c	/^mpz_prodlimbs (mpz_ptr x, mp_ptr factors, mp_size_t j)$/;"	f
mpz_ptr	demos/pexpr.c	/^typedef __mpz_struct *mpz_ptr;$/;"	t	file:
mpz_ptr	gmp.h	/^typedef __mpz_struct *mpz_ptr;$/;"	t
mpz_ptr	mini-gmp/mini-gmp.h	/^typedef __mpz_struct *mpz_ptr;$/;"	t
mpz_random	gmp.h	984;"	d
mpz_random	mpz/random.c	/^mpz_random (mpz_ptr x, mp_size_t size)$/;"	f
mpz_random2	gmp.h	987;"	d
mpz_random2	mpz/random2.c	/^mpz_random2 (mpz_ptr x, mp_size_t size)$/;"	f
mpz_realloc	gmp.h	616;"	d
mpz_realloc	mini-gmp/mini-gmp.c	/^mpz_realloc (mpz_t r, mp_size_t size)$/;"	f	file:
mpz_realloc2	gmp.h	990;"	d
mpz_realloc2	mini-gmp/mini-gmp.c	/^mpz_realloc2 (mpz_t x, mp_bitcnt_t n)$/;"	f
mpz_realloc2	mpz/realloc2.c	/^mpz_realloc2 (mpz_ptr m, mp_bitcnt_t bits)$/;"	f
mpz_refremove	tests/mpz/t-remove.c	/^mpz_refremove (mpz_t dest, const mpz_t src, const mpz_t f)$/;"	f
mpz_remove	gmp.h	993;"	d
mpz_remove	mpz/remove.c	/^mpz_remove (mpz_ptr dest, mpz_srcptr src, mpz_srcptr f)$/;"	f
mpz_remove_twos	gen-fac.c	/^mpz_remove_twos (mpz_t x)$/;"	f
mpz_roinit_n	gmp.h	1124;"	d
mpz_roinit_n	mini-gmp/mini-gmp.c	/^mpz_roinit_n (mpz_t x, mp_srcptr xp, mp_size_t xs)$/;"	f
mpz_roinit_n	mpz/roinit_n.c	/^mpz_roinit_n (mpz_ptr x, mp_srcptr xp, mp_size_t xs)$/;"	f
mpz_root	gmp.h	996;"	d
mpz_root	mini-gmp/mini-gmp.c	/^mpz_root (mpz_t x, const mpz_t y, unsigned long z)$/;"	f
mpz_root	mpz/root.c	/^mpz_root (mpz_ptr root, mpz_srcptr u, unsigned long int nth)$/;"	f
mpz_rootrem	gmp.h	999;"	d
mpz_rootrem	mini-gmp/mini-gmp.c	/^mpz_rootrem (mpz_t x, mpz_t r, const mpz_t y, unsigned long z)$/;"	f
mpz_rootrem	mpz/rootrem.c	/^mpz_rootrem (mpz_ptr root, mpz_ptr rem, mpz_srcptr u, unsigned long int nth)$/;"	f
mpz_rrandomb	gmp.h	1002;"	d
mpz_rrandomb	mpz/rrandomb.c	/^mpz_rrandomb (mpz_ptr x, gmp_randstate_t rstate, mp_bitcnt_t nbits)$/;"	f
mpz_scan0	gmp.h	1005;"	d
mpz_scan0	mini-gmp/mini-gmp.c	/^mpz_scan0 (const mpz_t u, mp_bitcnt_t starting_bit)$/;"	f
mpz_scan1	gmp.h	1008;"	d
mpz_scan1	mini-gmp/mini-gmp.c	/^mpz_scan1 (const mpz_t u, mp_bitcnt_t starting_bit)$/;"	f
mpz_set	gmp.h	1011;"	d
mpz_set	mini-gmp/mini-gmp.c	/^mpz_set (mpz_t r, const mpz_t x)$/;"	f
mpz_set	mpz/set.c	/^mpz_set (mpz_ptr w, mpz_srcptr u)$/;"	f
mpz_set_d	gmp.h	1014;"	d
mpz_set_d	mini-gmp/mini-gmp.c	/^mpz_set_d (mpz_t r, double x)$/;"	f
mpz_set_d	mpz/set_d.c	/^mpz_set_d (mpz_ptr r, double d)$/;"	f
mpz_set_f	gmp.h	1017;"	d
mpz_set_f	mpz/set_f.c	/^mpz_set_f (mpz_ptr w, mpf_srcptr u)$/;"	f
mpz_set_n	tests/misc.c	/^mpz_set_n (mpz_ptr z, mp_srcptr p, mp_size_t size)$/;"	f
mpz_set_q	gmp.h	/^mpz_set_q (mpz_ptr __gmp_w, mpq_srcptr __gmp_u)$/;"	f
mpz_set_q	gmp.h	1020;"	d
mpz_set_si	gmp.h	1025;"	d
mpz_set_si	mini-gmp/mini-gmp.c	/^mpz_set_si (mpz_t r, signed long int x)$/;"	f
mpz_set_si	mpz/set_si.c	/^mpz_set_si (mpz_ptr dest, signed long int val)$/;"	f
mpz_set_str	gmp.h	1028;"	d
mpz_set_str	mini-gmp/mini-gmp.c	/^mpz_set_str (mpz_t r, const char *sp, int base)$/;"	f
mpz_set_str	mpz/set_str.c	/^mpz_set_str (mpz_ptr x, const char *str, int base)$/;"	f
mpz_set_str_or_abort	mini-gmp/tests/testutils.c	/^mpz_set_str_or_abort (mpz_ptr z, const char *str, int base)$/;"	f
mpz_set_str_or_abort	tests/misc.c	/^mpz_set_str_or_abort (mpz_ptr z, const char *str, int base)$/;"	f
mpz_set_ui	gmp.h	1031;"	d
mpz_set_ui	mini-gmp/mini-gmp.c	/^mpz_set_ui (mpz_t r, unsigned long int x)$/;"	f
mpz_set_ui	mpz/set_ui.c	/^mpz_set_ui (mpz_ptr dest, unsigned long int val)$/;"	f
mpz_setbit	gmp.h	1034;"	d
mpz_setbit	mini-gmp/mini-gmp.c	/^mpz_setbit (mpz_t d, mp_bitcnt_t bit_index)$/;"	f
mpz_setbit	mpz/setbit.c	/^mpz_setbit (mpz_ptr d, mp_bitcnt_t bit_idx)$/;"	f
mpz_sgn	demos/pexpr.c	83;"	d	file:
mpz_sgn	gmp.h	2238;"	d
mpz_sgn	mini-gmp/mini-gmp.c	/^mpz_sgn (const mpz_t u)$/;"	f
mpz_si_kronecker	gmp.h	898;"	d
mpz_si_kronecker	mpz/kronsz.c	/^mpz_si_kronecker (long a, mpz_srcptr b)$/;"	f
mpz_size	gmp.h	1037;"	d
mpz_size	mini-gmp/mini-gmp.c	/^mpz_size (const mpz_t u)$/;"	f
mpz_sizeinbase	gmp.h	1042;"	d
mpz_sizeinbase	mini-gmp/mini-gmp.c	/^mpz_sizeinbase (const mpz_t u, int base)$/;"	f
mpz_smallk_bin_uiui	mpz/bin_uiui.c	/^mpz_smallk_bin_uiui (mpz_ptr r, unsigned long int n, unsigned long int k)$/;"	f	file:
mpz_smallkdc_bin_uiui	mpz/bin_uiui.c	/^mpz_smallkdc_bin_uiui (mpz_ptr r, unsigned long int n, unsigned long int k)$/;"	f	file:
mpz_sqrt	gmp.h	1045;"	d
mpz_sqrt	mini-gmp/mini-gmp.c	/^mpz_sqrt (mpz_t s, const mpz_t u)$/;"	f
mpz_sqrt	mpz/sqrt.c	/^mpz_sqrt (mpz_ptr root, mpz_srcptr op)$/;"	f
mpz_sqrtrem	gmp.h	1048;"	d
mpz_sqrtrem	mini-gmp/mini-gmp.c	/^mpz_sqrtrem (mpz_t s, mpz_t r, const mpz_t u)$/;"	f
mpz_sqrtrem	mpz/sqrtrem.c	/^mpz_sqrtrem (mpz_ptr root, mpz_ptr rem, mpz_srcptr op)$/;"	f
mpz_srcptr	gmp.h	/^typedef const __mpz_struct *mpz_srcptr;$/;"	t
mpz_srcptr	mini-gmp/mini-gmp.h	/^typedef const __mpz_struct *mpz_srcptr;$/;"	t
mpz_sub	gmp.h	1051;"	d
mpz_sub	mini-gmp/mini-gmp.c	/^mpz_sub (mpz_t r, const mpz_t a, const mpz_t b)$/;"	f
mpz_sub_ui	gmp.h	1054;"	d
mpz_sub_ui	mini-gmp/mini-gmp.c	/^mpz_sub_ui (mpz_t r, const mpz_t a, unsigned long b)$/;"	f
mpz_submul	gmp.h	1060;"	d
mpz_submul	mini-gmp/mini-gmp.c	/^mpz_submul (mpz_t r, const mpz_t u, const mpz_t v)$/;"	f
mpz_submul	mpz/aorsmul.c	/^mpz_submul (mpz_ptr w, mpz_srcptr u, mpz_srcptr v)$/;"	f
mpz_submul_ui	gmp.h	1063;"	d
mpz_submul_ui	mini-gmp/mini-gmp.c	/^mpz_submul_ui (mpz_t r, const mpz_t u, unsigned long int v)$/;"	f
mpz_submul_ui	mpz/aorsmul_i.c	/^mpz_submul_ui (mpz_ptr w, mpz_srcptr x, unsigned long y)$/;"	f
mpz_swap	demos/pexpr.c	88;"	d	file:
mpz_swap	gmp.h	1066;"	d
mpz_swap	mini-gmp/mini-gmp.c	/^mpz_swap (mpz_t u, mpz_t v)$/;"	f
mpz_t	demos/pexpr.c	/^typedef __mpz_struct mpz_t[1];$/;"	t	file:
mpz_t	gmp.h	/^typedef __mpz_struct mpz_t[1];$/;"	t
mpz_t	mini-gmp/mini-gmp.h	/^typedef __mpz_struct mpz_t[1];$/;"	t
mpz_tdiv_q	gmp.h	1072;"	d
mpz_tdiv_q	mini-gmp/mini-gmp.c	/^mpz_tdiv_q (mpz_t q, const mpz_t n, const mpz_t d)$/;"	f
mpz_tdiv_q	mpz/tdiv_q.c	/^mpz_tdiv_q (mpz_ptr quot, mpz_srcptr num, mpz_srcptr den)$/;"	f
mpz_tdiv_q_2exp	demos/pexpr.c	82;"	d	file:
mpz_tdiv_q_2exp	gmp.h	1075;"	d
mpz_tdiv_q_2exp	mini-gmp/mini-gmp.c	/^mpz_tdiv_q_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)$/;"	f
mpz_tdiv_q_2exp	mpz/tdiv_q_2exp.c	/^mpz_tdiv_q_2exp (mpz_ptr r, mpz_srcptr u, mp_bitcnt_t cnt)$/;"	f
mpz_tdiv_q_ui	gmp.h	1078;"	d
mpz_tdiv_q_ui	mini-gmp/mini-gmp.c	/^mpz_tdiv_q_ui (mpz_t q, const mpz_t n, unsigned long d)$/;"	f
mpz_tdiv_q_ui	mpz/tdiv_q_ui.c	/^mpz_tdiv_q_ui (mpz_ptr quot, mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_tdiv_qr	gmp.h	1081;"	d
mpz_tdiv_qr	mini-gmp/mini-gmp.c	/^mpz_tdiv_qr (mpz_t q, mpz_t r, const mpz_t n, const mpz_t d)$/;"	f
mpz_tdiv_qr	mpz/tdiv_qr.c	/^mpz_tdiv_qr (mpz_ptr quot, mpz_ptr rem, mpz_srcptr num, mpz_srcptr den)$/;"	f
mpz_tdiv_qr_ui	gmp.h	1084;"	d
mpz_tdiv_qr_ui	mini-gmp/mini-gmp.c	/^mpz_tdiv_qr_ui (mpz_t q, mpz_t r, const mpz_t n, unsigned long d)$/;"	f
mpz_tdiv_qr_ui	mpz/tdiv_qr_ui.c	/^mpz_tdiv_qr_ui (mpz_ptr quot, mpz_ptr rem, mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_tdiv_r	gmp.h	1087;"	d
mpz_tdiv_r	mini-gmp/mini-gmp.c	/^mpz_tdiv_r (mpz_t r, const mpz_t n, const mpz_t d)$/;"	f
mpz_tdiv_r	mpz/tdiv_r.c	/^mpz_tdiv_r (mpz_ptr rem, mpz_srcptr num, mpz_srcptr den)$/;"	f
mpz_tdiv_r_2exp	gmp.h	1090;"	d
mpz_tdiv_r_2exp	mini-gmp/mini-gmp.c	/^mpz_tdiv_r_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)$/;"	f
mpz_tdiv_r_2exp	mpz/tdiv_r_2exp.c	/^mpz_tdiv_r_2exp (mpz_ptr res, mpz_srcptr in, mp_bitcnt_t cnt)$/;"	f
mpz_tdiv_r_ui	gmp.h	1093;"	d
mpz_tdiv_r_ui	mini-gmp/mini-gmp.c	/^mpz_tdiv_r_ui (mpz_t r, const mpz_t n, unsigned long d)$/;"	f
mpz_tdiv_r_ui	mpz/tdiv_r_ui.c	/^mpz_tdiv_r_ui (mpz_ptr rem, mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_tdiv_ui	gmp.h	1069;"	d
mpz_tdiv_ui	mini-gmp/mini-gmp.c	/^mpz_tdiv_ui (const mpz_t n, unsigned long d)$/;"	f
mpz_tdiv_ui	mpz/tdiv_ui.c	/^mpz_tdiv_ui (mpz_srcptr dividend, unsigned long int divisor)$/;"	f
mpz_to_mpn	tests/mpn/t-minvert.c	/^mpz_to_mpn (mp_ptr ap, mp_size_t an, const mpz_t b)$/;"	f	file:
mpz_trace	tests/trace.c	/^mpz_trace (const char *name, mpz_srcptr z)$/;"	f
mpz_tracen	tests/trace.c	/^mpz_tracen (const char *name, int num, mpz_srcptr z)$/;"	f
mpz_true_random	tests/rand/findlc.c	/^mpz_true_random (mpz_t s, unsigned long int nbits)$/;"	f
mpz_tstbit	gmp.h	1096;"	d
mpz_tstbit	mini-gmp/mini-gmp.c	/^mpz_tstbit (const mpz_t d, mp_bitcnt_t bit_index)$/;"	f
mpz_ui_kronecker	gmp.h	901;"	d
mpz_ui_kronecker	mpz/kronuz.c	/^mpz_ui_kronecker (unsigned long a, mpz_srcptr b)$/;"	f
mpz_ui_pow_ui	gmp.h	1099;"	d
mpz_ui_pow_ui	mini-gmp/mini-gmp.c	/^mpz_ui_pow_ui (mpz_t r, unsigned long blimb, unsigned long e)$/;"	f
mpz_ui_pow_ui	mpz/ui_pow_ui.c	/^mpz_ui_pow_ui (mpz_ptr r, unsigned long b, unsigned long e)$/;"	f
mpz_ui_sub	gmp.h	1057;"	d
mpz_ui_sub	mini-gmp/mini-gmp.c	/^mpz_ui_sub (mpz_t r, unsigned long a, const mpz_t b)$/;"	f
mpz_ui_sub	mpz/ui_sub.c	/^mpz_ui_sub (mpz_ptr w, unsigned long int uval, mpz_srcptr v)$/;"	f
mpz_urandomb	gmp.h	1102;"	d
mpz_urandomb	mpz/urandomb.c	/^mpz_urandomb (mpz_ptr rop, gmp_randstate_t rstate, mp_bitcnt_t nbits)$/;"	f
mpz_urandomm	gmp.h	1105;"	d
mpz_urandomm	mpz/urandomm.c	/^mpz_urandomm (mpz_ptr rop, gmp_randstate_t rstate, mpz_srcptr n)$/;"	f
mpz_xinvert	mini-gmp/tests/t-reuse.c	/^mpz_xinvert (mpz_t r, const mpz_t a, const mpz_t b)$/;"	f
mpz_xinvert	tests/mpz/reuse.c	/^mpz_xinvert (mpz_ptr r, mpz_srcptr a, mpz_srcptr b)$/;"	f
mpz_xor	gmp.h	1108;"	d
mpz_xor	mini-gmp/mini-gmp.c	/^mpz_xor (mpz_t r, const mpz_t u, const mpz_t v)$/;"	f
mpz_xor	mpz/xor.c	/^mpz_xor (mpz_ptr res, mpz_srcptr op1, mpz_srcptr op2)$/;"	f
msize	tests/devel/try.c	/^  mp_size_t  msize;$/;"	m	struct:try_t	file:
mt	rand/randmt.h	/^  gmp_uint_least32_t mt[N];    \/* State array.  *\/$/;"	m	struct:__anon26
mti	rand/randmt.h	/^  int mti;                     \/* Index of current value.  *\/$/;"	m	struct:__anon26
mu_bdiv_q_threshold	tune/tuneup.c	/^mp_size_t  mu_bdiv_q_threshold          = MP_SIZE_T_MAX;$/;"	v
mu_bdiv_qr_threshold	tune/tuneup.c	/^mp_size_t  mu_bdiv_qr_threshold         = MP_SIZE_T_MAX;$/;"	v
mu_div_q_threshold	tune/tuneup.c	/^mp_size_t  mu_div_q_threshold           = MP_SIZE_T_MAX;$/;"	v
mu_div_qr_threshold	tune/tuneup.c	/^mp_size_t  mu_div_qr_threshold          = MP_SIZE_T_MAX;$/;"	v
mu_divappr_q_threshold	tune/tuneup.c	/^mp_size_t  mu_divappr_q_threshold       = MP_SIZE_T_MAX;$/;"	v
mul1	mpz/bin_uiui.c	/^mul1 (mp_limb_t m)$/;"	f	file:
mul2	mpz/bin_uiui.c	/^mul2 (mp_limb_t m)$/;"	f	file:
mul3	mpz/bin_uiui.c	/^mul3 (mp_limb_t m)$/;"	f	file:
mul4	mpz/bin_uiui.c	/^mul4 (mp_limb_t m)$/;"	f	file:
mul5	mpz/bin_uiui.c	/^mul5 (mp_limb_t m)$/;"	f	file:
mul6	mpz/bin_uiui.c	/^mul6 (mp_limb_t m)$/;"	f	file:
mul7	mpz/bin_uiui.c	/^mul7 (mp_limb_t m)$/;"	f	file:
mul8	mpz/bin_uiui.c	/^mul8 (mp_limb_t m)$/;"	f	file:
mul_2exp_mod	gen-psqr.c	/^mul_2exp_mod (int n, int p, int m)$/;"	f
mul_fft_modf_threshold	tune/tuneup.c	/^mp_size_t  mul_fft_modf_threshold       = MP_SIZE_T_MAX;$/;"	v
mul_fft_threshold	tune/tuneup.c	/^mp_size_t  mul_fft_threshold            = MP_SIZE_T_MAX;$/;"	v
mul_function	tune/tuneup.c	/^  speed_function_t  mul_function;$/;"	m	struct:fft_param_t	file:
mul_modf_function	tune/tuneup.c	/^  speed_function_t  mul_modf_function;$/;"	m	struct:fft_param_t	file:
mul_toom22_threshold	gmp-impl.h	/^  mp_size_t            mul_toom22_threshold;$/;"	m	struct:cpuvec_t
mul_toom22_threshold	tune/tuneup.c	/^mp_size_t  mul_toom22_threshold         = MP_SIZE_T_MAX;$/;"	v
mul_toom32_to_toom43_threshold	tune/tuneup.c	/^mp_size_t  mul_toom32_to_toom43_threshold = MP_SIZE_T_MAX;$/;"	v
mul_toom32_to_toom53_threshold	tune/tuneup.c	/^mp_size_t  mul_toom32_to_toom53_threshold = MP_SIZE_T_MAX;$/;"	v
mul_toom33_threshold	gmp-impl.h	/^  mp_size_t            mul_toom33_threshold;$/;"	m	struct:cpuvec_t
mul_toom33_threshold	tune/tuneup.c	/^mp_size_t  mul_toom33_threshold         = MUL_TOOM33_THRESHOLD_LIMIT;$/;"	v
mul_toom42_to_toom53_threshold	tune/tuneup.c	/^mp_size_t  mul_toom42_to_toom53_threshold = MP_SIZE_T_MAX;$/;"	v
mul_toom42_to_toom63_threshold	tune/tuneup.c	/^mp_size_t  mul_toom42_to_toom63_threshold = MP_SIZE_T_MAX;$/;"	v
mul_toom43_to_toom54_threshold	tune/tuneup.c	/^mp_size_t  mul_toom43_to_toom54_threshold = MP_SIZE_T_MAX;$/;"	v
mul_toom44_threshold	tune/tuneup.c	/^mp_size_t  mul_toom44_threshold         = MUL_TOOM44_THRESHOLD_LIMIT;$/;"	v
mul_toom6h_threshold	tune/tuneup.c	/^mp_size_t  mul_toom6h_threshold         = MUL_TOOM6H_THRESHOLD_LIMIT;$/;"	v
mul_toom8h_threshold	tune/tuneup.c	/^mp_size_t  mul_toom8h_threshold         = MUL_TOOM8H_THRESHOLD_LIMIT;$/;"	v
mulfunc	mpz/bin_uiui.c	/^static const mulfunc_t mulfunc[] = {mul1,mul2,mul3,mul4,mul5,mul6,mul7,mul8};$/;"	v	file:
mulfunc_t	mpz/bin_uiui.c	/^typedef mp_limb_t (* mulfunc_t) (mp_limb_t);$/;"	t	file:
mullo_basecase_threshold	tune/tuneup.c	/^mp_size_t  mullo_basecase_threshold     = MP_SIZE_T_MAX;$/;"	v
mullo_dc_threshold	tune/tuneup.c	/^mp_size_t  mullo_dc_threshold           = MP_SIZE_T_MAX;$/;"	v
mullo_mul_n_threshold	tune/tuneup.c	/^mp_size_t  mullo_mul_n_threshold        = MP_SIZE_T_MAX;$/;"	v
mulmid_toom42_threshold	tune/tuneup.c	/^mp_size_t  mulmid_toom42_threshold      = MP_SIZE_T_MAX;$/;"	v
mulmod_bnm1_threshold	tune/tuneup.c	/^mp_size_t  mulmod_bnm1_threshold        = MP_SIZE_T_MAX;$/;"	v
multiplicity	gen-psqr.c	/^  int     multiplicity;$/;"	m	struct:rawfactor_t	file:
multiplier	tests/devel/try.c	/^  char  multiplier;$/;"	m	struct:try_t	file:
multiplier	tests/devel/try.c	/^mp_limb_t       multiplier;$/;"	v
multiplier_N	tests/devel/try.c	/^mp_limb_t       multiplier_N[8];$/;"	v
multiplier_array	tests/devel/try.c	/^mp_limb_t  multiplier_array[] = {$/;"	v
multiplier_index	tests/devel/try.c	/^int        multiplier_index;$/;"	v
mupi_div_qr_threshold	tune/tuneup.c	/^mp_size_t  mupi_div_qr_threshold        = MP_SIZE_T_MAX;$/;"	v
my_ldexp	tests/mpq/t-get_d.c	/^my_ldexp (double d, int e)$/;"	f
my_mpz_mul	mini-gmp/tests/t-limbs.c	/^my_mpz_mul (mpz_t r, mpz_srcptr a,  mpz_srcptr b)$/;"	f
my_numpunct	tests/cxx/t-locale.cc	/^  explicit my_numpunct (size_t r = 0) : numpunct<char>(r) { }$/;"	f	class:my_numpunct
my_numpunct	tests/cxx/t-locale.cc	/^class my_numpunct : public numpunct<char> {$/;"	c	file:
n	gmp-impl.h	/^  gmp_uint_least32_t n:27;$/;"	m	struct:fft_table_nk
n	gmp-impl.h	/^  mp_size_t n;			\/* # of limbs at p *\/$/;"	m	struct:powers
n	gmp-impl.h	/^  mp_size_t n;$/;"	m	struct:hgcd_matrix
n	tests/mpn/t-matrix22.c	/^  mp_size_t n;$/;"	m	struct:matrix	file:
n	tune/tune-gcd-p.c	/^  mp_size_t n;$/;"	m	struct:bench_data	file:
n	tune/tuneup.c	/^  mp_size_t n;$/;"	m	struct:fft_cache	file:
n_primes	demos/primes.c	/^unsigned long n_primes;$/;"	v
n_to_bit	mpz/bin_uiui.c	/^n_to_bit (mp_limb_t n) { return ((n-5)|1)\/3U; }$/;"	f	file:
n_to_bit	mpz/oddfac_1.c	/^n_to_bit (mp_limb_t n) { return ((n-5)|1)\/3U; }$/;"	f	file:
n_to_bit	mpz/primorial_ui.c	/^n_to_bit (mp_limb_t n) { return ((n-5)|1)\/3U; }$/;"	f	file:
n_to_bit	primesieve.c	/^n_to_bit (mp_limb_t n) { return ((n-5)|1)\/3U; }$/;"	f	file:
name	demos/calc/calc-common.h	/^  char  *name;$/;"	m	struct:calc_keywords_t
name	demos/expr/expr.h	/^  const char   *name;$/;"	m	struct:mpexpr_operator_t
name	mpn/x86/fat/fat.c	/^  const char  *name;$/;"	m	struct:__anon21	file:
name	mpn/x86_64/fat/fat.c	/^  const char  *name;$/;"	m	struct:__anon22	file:
name	tests/devel/try.c	/^  const char  *name;$/;"	m	struct:choice_t	file:
name	tests/devel/try.c	/^  const char  *name;$/;"	m	struct:each_t	file:
name	tests/mpn/t-instrument.c	/^const char     *name = "<none>";$/;"	v
name	tune/speed.c	/^  const char              *name;$/;"	m	struct:choice_t	file:
name	tune/speed.c	/^  const char        *name;$/;"	m	struct:routine_t	file:
name	tune/tuneup.c	/^  const char        *name;$/;"	m	struct:param_t	file:
nbits	tests/rand/t-rand.c	/^  int nbits;$/;"	m	struct:rt	file:
ncall	tests/mpn/t-instrument.c	/^int  ncall;$/;"	v
ndat	tune/tuneup.c	/^int  ndat = 0;$/;"	v
neg_mod	gen-psqr.c	/^neg_mod (int n, int m)$/;"	f
negl	mpn/m68k/aors_n.asm	/^	negl	d0$/;"	d
newline	demos/pexpr.c	/^char *newline = "";$/;"	v
next	gmp-impl.h	/^  struct tmp_debug_entry_t  *next;$/;"	m	struct:tmp_debug_entry_t	typeref:struct:tmp_debug_entry_t::tmp_debug_entry_t
next	gmp-impl.h	/^  struct tmp_reentrant_t  *next;$/;"	m	struct:tmp_reentrant_t	typeref:struct:tmp_reentrant_t::tmp_reentrant_t
next	tests/memory.c	/^  struct header  *next;$/;"	m	struct:header	typeref:struct:header::header	file:
next_scratch	mpn/generic/toom42_mulmid.c	89;"	d	file:
next_scratch	mpn/toom42_mulmid.c	89;"	d	file:
nfactor	gen-psqr.c	/^int              nfactor;       \/* entries in use in factor array *\/$/;"	v
nfactors	demos/factorize.c	/^  long nfactors;$/;"	m	struct:factors	file:
nn	mpn/generic/sec_div.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
nn	mpn/generic/sec_pi1_div.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
nn	mpn/sec_div_qr.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
nn	mpn/sec_div_r.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
nn	mpn/sec_pi1_div_qr.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
nn	mpn/sec_pi1_div_r.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
no_time	tune/speed.c	/^  int                     no_time;$/;"	m	struct:choice_t	file:
nonneg	tests/mpz/reuse.c	/^  int nonneg;$/;"	m	struct:__anon36	file:
noop	tune/noop.c	/^noop (void)$/;"	f
noop_1	tune/noop.c	/^noop_1 (mp_limb_t n)$/;"	f
noop_wxs	tune/noop.c	/^noop_wxs (mp_ptr wp, mp_srcptr xp, mp_size_t size)$/;"	f
noop_wxys	tune/noop.c	/^noop_wxys (mp_ptr wp, mp_srcptr xp, mp_srcptr yp, mp_size_t size)$/;"	f
noprint	tune/tuneup.c	/^  int               noprint;$/;"	m	struct:param_t	file:
norm_cnt	mpn/generic/div_qr_1n_pi2.c	/^  int norm_cnt;$/;"	m	struct:precomp_div_1_pi2	file:
norm_cnt	mpn/generic/div_qr_1u_pi2.c	/^  int norm_cnt;$/;"	m	struct:precomp_div_1_pi2	file:
normalization_steps	gen-bases.c	/^int    normalization_steps;$/;"	v
notdead	tests/mpn/t-instrument.c	/^unsigned long  notdead;$/;"	v
np	mpn/generic/sec_div.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
np	mpn/generic/sec_pi1_div.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
np	mpn/generic/trialdiv.c	/^  gmp_uint_least32_t np :8;	\/* number of primes related to this entry *\/$/;"	m	struct:gmp_primes_ptab	file:
np	mpn/sec_div_qr.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
np	mpn/sec_div_r.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
np	mpn/sec_pi1_div_qr.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
np	mpn/sec_pi1_div_r.c	/^       mp_ptr np, mp_size_t nn,$/;"	v
np	mpn/trialdiv.c	/^  gmp_uint_least32_t np :8;	\/* number of primes related to this entry *\/$/;"	m	struct:gmp_primes_ptab	file:
nrawfactor	gen-psqr.c	/^int                 nrawfactor;$/;"	v
nrtrial	mpn/generic/perfpow.c	/^static const unsigned short nrtrial[] = { 100, 500, 1000 };$/;"	v	file:
nrtrial	mpn/perfpow.c	/^static const unsigned short nrtrial[] = { 100, 500, 1000 };$/;"	v	file:
nsq_res_0x100	gen-psqr.c	/^int    nsq_res_0x100;          \/* elements in sq_res_0x100 array *\/$/;"	v
num	demos/expr/t-expr.c	/^  int                  num;$/;"	m	struct:datalist_t	file:
num	tests/mpq/t-md_2exp.c	/^  const char     *num;$/;"	m	struct:pair_t	file:
num_as_str	tests/mpz/t-perfpow.c	/^  const char *num_as_str;$/;"	m	struct:__anon37	file:
num_choices	tune/speed.c	/^int  num_choices = 0;$/;"	v
numberof	demos/calc/calc.c	120;"	d	file:
numberof	demos/expr/t-expr.c	48;"	d	file:
numberof	gmp-impl.h	540;"	d
numberof	mini-gmp/tests/testutils.h	25;"	d
numeric_limits	gmpxx.h	/^  template <> class numeric_limits<mpf_class>$/;"	c	namespace:std
numeric_limits	gmpxx.h	/^  template <> class numeric_limits<mpq_class>$/;"	c	namespace:std
numeric_limits	gmpxx.h	/^  template <> class numeric_limits<mpz_class>$/;"	c	namespace:std
numhead0  #1	doc/texinfo.tex	/^\\outer\\parseargdef\\chapter{\\numhead0{#1}} % normally numhead0 calls chapterzzz$/;"	c
obase	demos/calc/calc.c	/^int  obase = 10;$/;"	v
obstack_chunk_alloc	tests/misc/t-printf.c	37;"	d	file:
obstack_chunk_free	tests/misc/t-printf.c	38;"	d	file:
old_ncall	tests/mpn/t-instrument.c	/^int  old_ncall;$/;"	v
one	tests/mpf/t-int_p.c	/^one (mpf_srcptr f, int want)$/;"	f
one	tests/mpz/t-mul.c	/^one (int i, mpz_t multiplicand, mpz_t multiplier)$/;"	f
one	tests/t-modlinv.c	/^one (mp_limb_t n)$/;"	f
one	tune/tuneup.c	/^one (mp_size_t *threshold, struct param_t *param)$/;"	f
one_test	tests/mpn/t-hgcd.c	/^one_test (mpz_t a, mpz_t b, int i)$/;"	f	file:
one_test	tests/mpn/t-hgcd_appr.c	/^one_test (mpz_t a, mpz_t b, int i)$/;"	f	file:
one_test	tests/mpn/t-matrix22.c	/^one_test (const struct matrix *A, const struct matrix *B, int i)$/;"	f	file:
one_test	tests/mpz/t-gcd.c	/^one_test (mpz_t op1, mpz_t op2, mpz_t ref, int i)$/;"	f
op	demos/expr/expr-impl.h	/^  const struct mpexpr_operator_t  *op;$/;"	m	struct:mpexpr_control_t	typeref:struct:mpexpr_control_t::mpexpr_operator_t
op	demos/pexpr.c	/^  enum op_t op;$/;"	m	struct:expr	typeref:enum:expr::op_t	file:
op	demos/pexpr.c	/^  enum op_t op;$/;"	m	struct:functions	typeref:enum:functions::op_t	file:
op_t	demos/pexpr.c	/^enum op_t {NOP, LIT, NEG, NOT, PLUS, MINUS, MULT, DIV, MOD, REM, INVMOD, POW,$/;"	g	file:
operands	demos/pexpr.c	/^  } operands;$/;"	m	struct:expr	typeref:union:expr::__anon1	file:
operator <<	cxx/osmpf.cc	/^operator<< (ostream &o, mpf_srcptr f)$/;"	f
operator <<	cxx/osmpq.cc	/^operator<< (ostream &o, mpq_srcptr q)$/;"	f
operator <<	cxx/osmpz.cc	/^operator<< (ostream &o, mpz_srcptr z)$/;"	f
operator <<	gmpxx.h	/^inline std::ostream & operator<<$/;"	f
operator =	gmpxx.h	/^  __gmp_expr & operator=(const __gmp_expr &f)$/;"	f	class:__gmp_expr
operator =	gmpxx.h	/^  __gmp_expr & operator=(const __gmp_expr &q)$/;"	f	class:__gmp_expr
operator =	gmpxx.h	/^  __gmp_expr & operator=(const __gmp_expr &z)$/;"	f	class:__gmp_expr
operator =	gmpxx.h	/^  __gmp_expr & operator=(const char *s)$/;"	f	class:__gmp_expr
operator =	gmpxx.h	/^  __gmp_expr & operator=(const std::string &s)$/;"	f	class:__gmp_expr
operator =	gmpxx.h	/^  __gmp_expr<value_type, value_type> & operator=(const __gmp_expr<T, U> &expr)$/;"	f	class:__gmp_expr
operator >>	cxx/ismpf.cc	/^operator>> (istream &i, mpf_ptr f)$/;"	f
operator >>	cxx/ismpq.cc	/^operator>> (istream &i, mpq_ptr q)$/;"	f
operator >>	cxx/ismpz.cc	/^operator>> (istream &i, mpz_ptr z)$/;"	f
operator >>	gmpxx.h	/^inline std::istream & operator>>(std::istream &i, __gmp_expr<T, T> &expr)$/;"	f
operator bool	gmpxx.h	/^  explicit operator bool() const { return mp->_mp_size != 0; }$/;"	f	class:__gmp_expr
operator bool	gmpxx.h	/^  explicit operator bool() const { return mpq_numref(mp)->_mp_size != 0; }$/;"	f	class:__gmp_expr
ops	demos/pexpr.c	/^    struct {struct expr *lhs, *rhs;} ops;$/;"	m	union:expr::__anon1	typeref:struct:expr::__anon1::__anon2	file:
option_check_printf	tests/misc/t-printf.c	/^int   option_check_printf = 0;$/;"	v
option_cmp	tune/speed.c	/^int  option_cmp = CMP_ABSOLUTE;$/;"	v
option_data	tests/devel/try.c	/^int  option_data = DATA_TRAND;$/;"	v
option_data	tune/speed.c	/^int  option_data = DATA_RANDOM;$/;"	v
option_factor	tune/speed.c	/^double     option_factor = 0.0;$/;"	v
option_fft_max_size	tune/tuneup.c	/^mp_size_t  option_fft_max_size = 0;$/;"	v
option_fft_max_size	tune/tuneup.c	/^mp_size_t  option_fft_max_size = 50000;  \/* limbs *\/$/;"	v
option_fft_trace	tune/tuneup.c	/^int        option_fft_trace = 0;$/;"	v
option_firstsize	tests/devel/try.c	/^int  option_firstsize = 0;$/;"	v
option_firstsize2	tests/devel/try.c	/^int  option_firstsize2 = 0;$/;"	v
option_gnuplot	tune/speed.c	/^int        option_gnuplot = 0;$/;"	v
option_gnuplot_basename	tune/speed.c	/^char      *option_gnuplot_basename;$/;"	v
option_lastsize	tests/devel/try.c	/^int  option_lastsize = 500;$/;"	v
option_libc_scanf	tests/misc/t-scanf.c	/^int   option_libc_scanf = 0;$/;"	v
option_pari	tests/mpz/t-jac.c	/^int option_pari = 0;$/;"	v
option_print	tests/devel/try.c	/^int  option_print = 0;$/;"	v
option_redzones	tests/devel/try.c	/^int  option_redzones = 1;$/;"	v
option_repetitions	tests/devel/try.c	/^int  option_repetitions = DEFAULT_REPETITIONS;$/;"	v
option_resource_usage	tune/speed.c	/^int        option_resource_usage = 0;$/;"	v
option_seed	tune/speed.c	/^long       option_seed = 123456789;$/;"	v
option_spinner	tests/devel/try.c	/^int  option_spinner = 1;$/;"	v
option_square	tune/speed.c	/^int        option_square = 0;$/;"	v
option_step	tune/speed.c	/^mp_size_t  option_step = 1;$/;"	v
option_trace	demos/expr/t-expr.c	/^int  option_trace = 0;$/;"	v
option_trace	tune/tuneup.c	/^int        option_trace = 0;$/;"	v
option_unit	tune/speed.c	/^int  option_unit = UNIT_SECONDS;$/;"	v
ostringstream	tests/tests.h	/^ostringstream : public std::ostrstream {$/;"	c
other	tests/amd64check.c	/^  int  other[4];$/;"	m	struct:__anon29	file:
other	tests/x86check.c	/^  unsigned  other[4];$/;"	m	struct:__anon30	file:
overlap	tests/devel/try.c	/^  char  overlap;$/;"	m	struct:try_t	file:
overlap	tests/devel/try.c	/^struct overlap_t  *overlap, *overlap_limit;$/;"	v	typeref:struct:overlap_t
overlap_array	tests/devel/try.c	/^} overlap_array[] = {$/;"	v	typeref:struct:overlap_t
overlap_limit	tests/devel/try.c	/^struct overlap_t  *overlap, *overlap_limit;$/;"	v	typeref:struct:
overlap_t	tests/devel/try.c	/^struct overlap_t {$/;"	s	file:
overload_string	demos/perl/GMP/Mpf.pm	/^sub overload_string {$/;"	s
p	demos/factorize.c	/^  mpz_t         *p;$/;"	m	struct:factors	file:
p	gmp-impl.h	/^  char       *p;$/;"	m	union:tmp_align_t
p	gmp-impl.h	/^  mp_ptr p;			\/* actual power value *\/$/;"	m	struct:powers
p	gmp-impl.h	/^  mp_ptr p[2][2];$/;"	m	struct:hgcd_matrix
p	tests/devel/try.c	/^  mp_ptr     p;$/;"	m	struct:dest_each_t	file:
p	tests/devel/try.c	/^  mp_ptr     p;$/;"	m	struct:source_each_t	file:
p	tests/devel/try.c	/^  mp_ptr     p;$/;"	m	struct:source_t	file:
p	tune/speed.c	/^  const struct routine_t  *p;$/;"	m	struct:choice_t	typeref:struct:choice_t::routine_t	file:
p0	mpn/generic/toom42_mulmid.c	86;"	d	file:
p0	mpn/toom42_mulmid.c	86;"	d	file:
p1	mpn/generic/toom42_mulmid.c	87;"	d	file:
p1	mpn/toom42_mulmid.c	87;"	d	file:
p2	mpn/generic/toom42_mulmid.c	88;"	d	file:
p2	mpn/toom42_mulmid.c	88;"	d	file:
p_limit	demos/qcn.c	/^unsigned long  p_limit = 132000;$/;"	v
p_modf_threshold	tune/tuneup.c	/^  mp_size_t         *p_modf_threshold;$/;"	m	struct:fft_param_t	file:
p_table	mpn/gcd.c	/^mp_size_t p_table[P_TABLE_SIZE];$/;"	v
p_table	mpn/generic/gcd.c	/^mp_size_t p_table[P_TABLE_SIZE];$/;"	v
p_threshold	tune/tuneup.c	/^  mp_size_t         *p_threshold;$/;"	m	struct:fft_param_t	file:
pagesize	tests/devel/try.c	/^mp_size_t  pagesize;$/;"	v
pair_t	tests/mpq/t-md_2exp.c	/^struct pair_t {$/;"	s	file:
param	tests/devel/try.c	/^struct try_t  param[TYPE_EXTRA];$/;"	v	typeref:struct:try_t
param_init	configure	/^param_init ()$/;"	f
param_init	tests/devel/try.c	/^param_init (void)$/;"	f
param_t	tune/tuneup.c	/^struct param_t {$/;"	s	file:
parseargusing filenamecatcodes includezzz	doc/texinfo.tex	/^\\def\\include{\\parseargusing\\filenamecatcodes\\includezzz}$/;"	i
partzzz  #1	doc/texinfo.tex	/^\\outer\\parseargdef\\part{\\partzzz{#1}}$/;"	p
pentium_wbinvd	tune/common.c	/^pentium_wbinvd(void)$/;"	f
perfpow	mpn/generic/perfpow.c	/^perfpow (mp_srcptr np, mp_size_t n,$/;"	f	file:
perfpow	mpn/perfpow.c	/^perfpow (mp_srcptr np, mp_size_t n,$/;"	f	file:
point_string	tests/cxx/t-locale.cc	/^  char point_string[2];$/;"	v
pointer_setup	tests/devel/try.c	/^pointer_setup (struct each_t *e)$/;"	f
popc_limb	gmp-impl.h	3617;"	d
popc_limb	gmp-impl.h	3625;"	d
popc_limb	gmp-impl.h	3633;"	d
popc_limb	gmp-impl.h	3649;"	d
popc_limb	gmp-impl.h	3660;"	d
popc_limb	gmp-impl.h	3672;"	d
popc_limb	gmp-impl.h	3685;"	d
post	tests/mpn/t-instrument.c	/^post (void)$/;"	f
pow_equals	mpn/generic/perfpow.c	/^pow_equals (mp_srcptr np, mp_size_t n,$/;"	f	file:
pow_equals	mpn/perfpow.c	/^pow_equals (mp_srcptr np, mp_size_t n,$/;"	f	file:
power	demos/pexpr.c	/^power (char *str, expr_t *e)$/;"	f
powers	gmp-impl.h	/^struct powers$/;"	s
powers_t	gmp-impl.h	/^typedef struct powers powers_t;$/;"	t	typeref:struct:powers
powlimb	mpn/broot.c	/^powlimb (mp_limb_t a, mp_limb_t e)$/;"	f	file:
powlimb	mpn/brootinv.c	/^powlimb (mp_limb_t a, mp_limb_t e)$/;"	f	file:
powlimb	mpn/generic/broot.c	/^powlimb (mp_limb_t a, mp_limb_t e)$/;"	f	file:
powlimb	mpn/generic/brootinv.c	/^powlimb (mp_limb_t a, mp_limb_t e)$/;"	f	file:
pp	gen-psqr.c	/^mpz_t   pp;                \/* product of primes, or 0 if mod_34lsub1 used *\/$/;"	v
pp_inverted	gen-psqr.c	/^mpz_t   pp_inverted;       \/* invert_limb style inverse *\/$/;"	v
pp_norm	gen-psqr.c	/^mpz_t   pp_norm;           \/* pp shifted so NUMB high bit set *\/$/;"	v
ppp	mpn/generic/trialdiv.c	/^  mp_limb_t ppp;	\/* primes, multiplied together *\/$/;"	m	struct:gmp_primes_ptab	file:
ppp	mpn/trialdiv.c	/^  mp_limb_t ppp;	\/* primes, multiplied together *\/$/;"	m	struct:gmp_primes_ptab	file:
pre	tests/mpn/t-instrument.c	/^pre (const char *str)$/;"	f
prec	demos/expr/expr-impl.h	/^  unsigned long                   prec;$/;"	m	struct:mpexpr_parse_t
prec	gmp-impl.h	/^  int         prec;          \/* prec field, or -1 for all digits *\/$/;"	m	struct:doprnt_params_t
precedence	demos/expr/expr.h	/^  int          precedence;$/;"	m	struct:mpexpr_operator_t
precomp_div_1_pi2	mpn/generic/div_qr_1n_pi2.c	/^struct precomp_div_1_pi2$/;"	s	file:
precomp_div_1_pi2	mpn/generic/div_qr_1u_pi2.c	/^struct precomp_div_1_pi2$/;"	s	file:
preinv_mod_1_to_mod_1_threshold	tune/tuneup.c	/^mp_size_t  preinv_mod_1_to_mod_1_threshold = MP_SIZE_T_MAX;$/;"	v
prev	tal-notreent.c	/^  struct tmp_stack *prev;$/;"	m	struct:tmp_stack	typeref:struct:tmp_stack::tmp_stack	file:
prev_time	tune/speed.c	/^  double                  prev_time;$/;"	m	struct:choice_t	file:
prime	demos/primes.c	/^  unsigned int prime;$/;"	m	struct:primes	file:
prime_p	demos/qcn.c	/^prime_p (unsigned long n)$/;"	f
primegap	mpz/nextprime.c	/^static const unsigned char primegap[] =$/;"	v	file:
primes	demos/primes.c	/^struct primes *primes;$/;"	v	typeref:struct:primes
primes	demos/primes.c	/^struct primes$/;"	s	file:
primes_diff	demos/factorize.c	/^static unsigned char primes_diff[] = {$/;"	v	file:
primesieve_size	mpz/bin_uiui.c	/^primesieve_size (mp_limb_t n) { return n_to_bit(n) \/ GMP_LIMB_BITS + 1; }$/;"	f	file:
primesieve_size	mpz/oddfac_1.c	/^primesieve_size (mp_limb_t n) { return n_to_bit(n) \/ GMP_LIMB_BITS + 1; }$/;"	f	file:
primesieve_size	mpz/primorial_ui.c	/^primesieve_size (mp_limb_t n) { return n_to_bit(n) \/ GMP_LIMB_BITS + 1; }$/;"	f	file:
print	gen-psqr.c	/^print (int limb_bits, int nail_bits)$/;"	f
print_all	tests/devel/try.c	/^print_all (void)$/;"	f
print_ansi2knr	tune/many.pl	/^sub print_ansi2knr {$/;"	s
print_define	tune/tuneup.c	/^print_define (const char *name, mp_size_t value)$/;"	f
print_define_end	tune/tuneup.c	/^print_define_end (const char *name, mp_size_t value)$/;"	f
print_define_end_remark	tune/tuneup.c	/^print_define_end_remark (const char *name, mp_size_t value, const char *remark)$/;"	f
print_define_remark	tune/tuneup.c	/^print_define_remark (const char *name, mp_size_t value, const char *remark)$/;"	f
print_define_start	tune/tuneup.c	/^print_define_start (const char *name)$/;"	f
print_each	tests/devel/try.c	/^print_each (const struct each_t *e)$/;"	f
print_ks_results	tests/rand/stat.c	/^print_ks_results (mpf_t f_p, mpf_t f_p_prob,$/;"	f	file:
print_posneg	tests/devel/anymul_1.c	/^print_posneg (mp_limb_t d)$/;"	f	file:
print_posneg	tests/devel/aors_n.c	/^print_posneg (mp_limb_t d)$/;"	f	file:
print_posneg	tests/devel/copy.c	/^print_posneg (mp_limb_t d)$/;"	f	file:
print_posneg	tests/devel/shift.c	/^print_posneg (mp_limb_t d)$/;"	f	file:
print_timing	demos/pexpr.c	/^int print_timing = 0;$/;"	v
print_usage	test-driver	/^print_usage ()$/;"	f
print_usage_and_exit	demos/isprime.c	/^print_usage_and_exit ()$/;"	f
print_x2_table	tests/rand/stat.c	/^print_x2_table (unsigned int v, FILE *fp)$/;"	f	file:
printf	demos/perl/GMP.pm	/^sub printf {$/;"	s
process	mpn/x86/t-zdisp2.pl	/^sub process {$/;"	s
process_asm	mpn/x86/t-zdisp2.pl	/^sub process_asm {$/;"	s
process_mparam	mpn/x86/t-zdisp2.pl	/^sub process_mparam {$/;"	s
progname	demos/isprime.c	/^char *progname;$/;"	v
program_details	missing	/^program_details ()$/;"	f
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
ptr	tests/devel/try.c	/^  mp_ptr     ptr;$/;"	m	struct:region_t	file:
ptr	tests/memory.c	/^  void           *ptr;$/;"	m	struct:header	file:
ptr	tune/speed.h	/^    mp_ptr    ptr;$/;"	m	struct:speed_params::__anon39
ptr_type	gmpxx.h	/^  typedef mpf_ptr ptr_type;$/;"	t	struct:__gmp_resolve_expr
ptr_type	gmpxx.h	/^  typedef mpq_ptr ptr_type;$/;"	t	struct:__gmp_resolve_expr
ptr_type	gmpxx.h	/^  typedef mpz_ptr ptr_type;$/;"	t	struct:__gmp_resolve_expr
putback_tellg_works	tests/cxx/t-istream.cc	/^bool putback_tellg_works = true;$/;"	v
q	demos/expr/expr-impl.h	/^  mpq_t   q;$/;"	m	union:mpX_t
q1	mpn/generic/div_qr_1n_pi2.c	126;"	d	file:
q1	mpn/generic/div_qr_1n_pi2.c	194;"	d	file:
q1	mpn/generic/div_qr_1u_pi2.c	126;"	d	file:
q1	mpn/generic/div_qr_1u_pi2.c	227;"	d	file:
q2	mpn/generic/div_qr_1n_pi2.c	125;"	d	file:
q2	mpn/generic/div_qr_1n_pi2.c	193;"	d	file:
q2	mpn/generic/div_qr_1u_pi2.c	125;"	d	file:
q2	mpn/generic/div_qr_1u_pi2.c	226;"	d	file:
q3	mpn/generic/div_qr_1n_pi2.c	124;"	d	file:
q3	mpn/generic/div_qr_1n_pi2.c	192;"	d	file:
q3	mpn/generic/div_qr_1u_pi2.c	124;"	d	file:
q3	mpn/generic/div_qr_1u_pi2.c	225;"	d	file:
qcn_estimate	demos/qcn.c	/^qcn_estimate (mpz_t d)$/;"	f
qcn_str	demos/qcn.c	/^qcn_str (char *num)$/;"	f
qsort_function_t	tune/speed.h	/^typedef int (*qsort_function_t) (const void *, const void *);$/;"	t
quiet_NaN	gmpxx.h	/^    static mpf_class quiet_NaN() { return mpf_class(); }$/;"	f	class:std::numeric_limits
quiet_NaN	gmpxx.h	/^    static mpq_class quiet_NaN() { return mpq_class(); }$/;"	f	class:std::numeric_limits
quiet_NaN	gmpxx.h	/^    static mpz_class quiet_NaN() { return mpz_class(); }$/;"	f	class:std::numeric_limits
quote_for_sed	ylwrap	/^quote_for_sed ()$/;"	f
r	tune/speed.c	/^  mp_limb_t               r;$/;"	m	struct:choice_t	file:
r	tune/speed.h	/^  mp_limb_t  r;		\/* user supplied parameter *\/$/;"	m	struct:speed_params
r0	mpn/generic/toom6_sqr.c	115;"	d	file:
r0	mpn/generic/toom6_sqr.c	167;"	d	file:
r0	mpn/generic/toom6h_mul.c	172;"	d	file:
r0	mpn/generic/toom6h_mul.c	249;"	d	file:
r0	mpn/generic/toom8_sqr.c	143;"	d	file:
r0	mpn/generic/toom8_sqr.c	208;"	d	file:
r0	mpn/generic/toom8h_mul.c	197;"	d	file:
r0	mpn/generic/toom8h_mul.c	290;"	d	file:
r0	mpn/generic/toom_interpolate_12pts.c	208;"	d	file:
r0	mpn/generic/toom_interpolate_12pts.c	358;"	d	file:
r0	mpn/generic/toom_interpolate_16pts.c	296;"	d	file:
r0	mpn/generic/toom_interpolate_16pts.c	523;"	d	file:
r0	mpn/toom6_sqr.c	115;"	d	file:
r0	mpn/toom6_sqr.c	167;"	d	file:
r0	mpn/toom6h_mul.c	172;"	d	file:
r0	mpn/toom6h_mul.c	249;"	d	file:
r0	mpn/toom8_sqr.c	143;"	d	file:
r0	mpn/toom8_sqr.c	208;"	d	file:
r0	mpn/toom8h_mul.c	197;"	d	file:
r0	mpn/toom8h_mul.c	290;"	d	file:
r0	mpn/toom_interpolate_12pts.c	208;"	d	file:
r0	mpn/toom_interpolate_12pts.c	358;"	d	file:
r0	mpn/toom_interpolate_16pts.c	296;"	d	file:
r0	mpn/toom_interpolate_16pts.c	523;"	d	file:
r1	mpn/generic/toom54_mul.c	133;"	d	file:
r1	mpn/generic/toom54_mul.c	92;"	d	file:
r1	mpn/generic/toom63_mul.c	133;"	d	file:
r1	mpn/generic/toom63_mul.c	222;"	d	file:
r1	mpn/generic/toom6_sqr.c	118;"	d	file:
r1	mpn/generic/toom6_sqr.c	168;"	d	file:
r1	mpn/generic/toom6h_mul.c	175;"	d	file:
r1	mpn/generic/toom6h_mul.c	250;"	d	file:
r1	mpn/generic/toom8_sqr.c	147;"	d	file:
r1	mpn/generic/toom8_sqr.c	209;"	d	file:
r1	mpn/generic/toom8h_mul.c	201;"	d	file:
r1	mpn/generic/toom8h_mul.c	291;"	d	file:
r1	mpn/toom54_mul.c	133;"	d	file:
r1	mpn/toom54_mul.c	92;"	d	file:
r1	mpn/toom63_mul.c	133;"	d	file:
r1	mpn/toom63_mul.c	222;"	d	file:
r1	mpn/toom6_sqr.c	118;"	d	file:
r1	mpn/toom6_sqr.c	168;"	d	file:
r1	mpn/toom6h_mul.c	175;"	d	file:
r1	mpn/toom6h_mul.c	250;"	d	file:
r1	mpn/toom8_sqr.c	147;"	d	file:
r1	mpn/toom8_sqr.c	209;"	d	file:
r1	mpn/toom8h_mul.c	201;"	d	file:
r1	mpn/toom8h_mul.c	291;"	d	file:
r2	mpn/generic/toom6_sqr.c	114;"	d	file:
r2	mpn/generic/toom6_sqr.c	169;"	d	file:
r2	mpn/generic/toom6h_mul.c	171;"	d	file:
r2	mpn/generic/toom6h_mul.c	251;"	d	file:
r2	mpn/generic/toom8_sqr.c	142;"	d	file:
r2	mpn/generic/toom8_sqr.c	210;"	d	file:
r2	mpn/generic/toom8h_mul.c	196;"	d	file:
r2	mpn/generic/toom8h_mul.c	292;"	d	file:
r2	mpn/generic/toom_interpolate_12pts.c	207;"	d	file:
r2	mpn/generic/toom_interpolate_12pts.c	359;"	d	file:
r2	mpn/generic/toom_interpolate_16pts.c	295;"	d	file:
r2	mpn/generic/toom_interpolate_16pts.c	524;"	d	file:
r2	mpn/toom6_sqr.c	114;"	d	file:
r2	mpn/toom6_sqr.c	169;"	d	file:
r2	mpn/toom6h_mul.c	171;"	d	file:
r2	mpn/toom6h_mul.c	251;"	d	file:
r2	mpn/toom8_sqr.c	142;"	d	file:
r2	mpn/toom8_sqr.c	210;"	d	file:
r2	mpn/toom8h_mul.c	196;"	d	file:
r2	mpn/toom8h_mul.c	292;"	d	file:
r2	mpn/toom_interpolate_12pts.c	207;"	d	file:
r2	mpn/toom_interpolate_12pts.c	359;"	d	file:
r2	mpn/toom_interpolate_16pts.c	295;"	d	file:
r2	mpn/toom_interpolate_16pts.c	524;"	d	file:
r3	mpn/generic/toom54_mul.c	134;"	d	file:
r3	mpn/generic/toom54_mul.c	91;"	d	file:
r3	mpn/generic/toom63_mul.c	132;"	d	file:
r3	mpn/generic/toom63_mul.c	223;"	d	file:
r3	mpn/generic/toom6_sqr.c	117;"	d	file:
r3	mpn/generic/toom6_sqr.c	170;"	d	file:
r3	mpn/generic/toom6h_mul.c	174;"	d	file:
r3	mpn/generic/toom6h_mul.c	252;"	d	file:
r3	mpn/generic/toom8_sqr.c	146;"	d	file:
r3	mpn/generic/toom8_sqr.c	211;"	d	file:
r3	mpn/generic/toom8h_mul.c	200;"	d	file:
r3	mpn/generic/toom8h_mul.c	293;"	d	file:
r3	mpn/toom54_mul.c	134;"	d	file:
r3	mpn/toom54_mul.c	91;"	d	file:
r3	mpn/toom63_mul.c	132;"	d	file:
r3	mpn/toom63_mul.c	223;"	d	file:
r3	mpn/toom6_sqr.c	117;"	d	file:
r3	mpn/toom6_sqr.c	170;"	d	file:
r3	mpn/toom6h_mul.c	174;"	d	file:
r3	mpn/toom6h_mul.c	252;"	d	file:
r3	mpn/toom8_sqr.c	146;"	d	file:
r3	mpn/toom8_sqr.c	211;"	d	file:
r3	mpn/toom8h_mul.c	200;"	d	file:
r3	mpn/toom8h_mul.c	293;"	d	file:
r4	mpn/generic/toom6_sqr.c	113;"	d	file:
r4	mpn/generic/toom6_sqr.c	171;"	d	file:
r4	mpn/generic/toom6h_mul.c	170;"	d	file:
r4	mpn/generic/toom6h_mul.c	253;"	d	file:
r4	mpn/generic/toom8_sqr.c	141;"	d	file:
r4	mpn/generic/toom8_sqr.c	212;"	d	file:
r4	mpn/generic/toom8h_mul.c	195;"	d	file:
r4	mpn/generic/toom8h_mul.c	294;"	d	file:
r4	mpn/generic/toom_interpolate_12pts.c	206;"	d	file:
r4	mpn/generic/toom_interpolate_12pts.c	360;"	d	file:
r4	mpn/generic/toom_interpolate_16pts.c	294;"	d	file:
r4	mpn/generic/toom_interpolate_16pts.c	525;"	d	file:
r4	mpn/toom6_sqr.c	113;"	d	file:
r4	mpn/toom6_sqr.c	171;"	d	file:
r4	mpn/toom6h_mul.c	170;"	d	file:
r4	mpn/toom6h_mul.c	253;"	d	file:
r4	mpn/toom8_sqr.c	141;"	d	file:
r4	mpn/toom8_sqr.c	212;"	d	file:
r4	mpn/toom8h_mul.c	195;"	d	file:
r4	mpn/toom8h_mul.c	294;"	d	file:
r4	mpn/toom_interpolate_12pts.c	206;"	d	file:
r4	mpn/toom_interpolate_12pts.c	360;"	d	file:
r4	mpn/toom_interpolate_16pts.c	294;"	d	file:
r4	mpn/toom_interpolate_16pts.c	525;"	d	file:
r5	mpn/generic/toom54_mul.c	135;"	d	file:
r5	mpn/generic/toom54_mul.c	86;"	d	file:
r5	mpn/generic/toom63_mul.c	127;"	d	file:
r5	mpn/generic/toom63_mul.c	224;"	d	file:
r5	mpn/generic/toom6_sqr.c	116;"	d	file:
r5	mpn/generic/toom6_sqr.c	172;"	d	file:
r5	mpn/generic/toom6h_mul.c	173;"	d	file:
r5	mpn/generic/toom6h_mul.c	254;"	d	file:
r5	mpn/generic/toom8_sqr.c	145;"	d	file:
r5	mpn/generic/toom8_sqr.c	213;"	d	file:
r5	mpn/generic/toom8h_mul.c	199;"	d	file:
r5	mpn/generic/toom8h_mul.c	295;"	d	file:
r5	mpn/toom54_mul.c	135;"	d	file:
r5	mpn/toom54_mul.c	86;"	d	file:
r5	mpn/toom63_mul.c	127;"	d	file:
r5	mpn/toom63_mul.c	224;"	d	file:
r5	mpn/toom6_sqr.c	116;"	d	file:
r5	mpn/toom6_sqr.c	172;"	d	file:
r5	mpn/toom6h_mul.c	173;"	d	file:
r5	mpn/toom6h_mul.c	254;"	d	file:
r5	mpn/toom8_sqr.c	145;"	d	file:
r5	mpn/toom8_sqr.c	213;"	d	file:
r5	mpn/toom8h_mul.c	199;"	d	file:
r5	mpn/toom8h_mul.c	295;"	d	file:
r6	mpn/generic/toom8_sqr.c	140;"	d	file:
r6	mpn/generic/toom8_sqr.c	214;"	d	file:
r6	mpn/generic/toom8h_mul.c	194;"	d	file:
r6	mpn/generic/toom8h_mul.c	296;"	d	file:
r6	mpn/generic/toom_interpolate_16pts.c	293;"	d	file:
r6	mpn/generic/toom_interpolate_16pts.c	526;"	d	file:
r6	mpn/toom8_sqr.c	140;"	d	file:
r6	mpn/toom8_sqr.c	214;"	d	file:
r6	mpn/toom8h_mul.c	194;"	d	file:
r6	mpn/toom8h_mul.c	296;"	d	file:
r6	mpn/toom_interpolate_16pts.c	293;"	d	file:
r6	mpn/toom_interpolate_16pts.c	526;"	d	file:
r7	mpn/generic/toom54_mul.c	140;"	d	file:
r7	mpn/generic/toom54_mul.c	85;"	d	file:
r7	mpn/generic/toom63_mul.c	126;"	d	file:
r7	mpn/generic/toom63_mul.c	229;"	d	file:
r7	mpn/generic/toom8_sqr.c	144;"	d	file:
r7	mpn/generic/toom8h_mul.c	198;"	d	file:
r7	mpn/toom54_mul.c	140;"	d	file:
r7	mpn/toom54_mul.c	85;"	d	file:
r7	mpn/toom63_mul.c	126;"	d	file:
r7	mpn/toom63_mul.c	229;"	d	file:
r7	mpn/toom8_sqr.c	144;"	d	file:
r7	mpn/toom8h_mul.c	198;"	d	file:
r8	mpn/generic/toom54_mul.c	141;"	d	file:
r8	mpn/generic/toom54_mul.c	84;"	d	file:
r8	mpn/generic/toom63_mul.c	125;"	d	file:
r8	mpn/generic/toom63_mul.c	230;"	d	file:
r8	mpn/toom54_mul.c	141;"	d	file:
r8	mpn/toom54_mul.c	84;"	d	file:
r8	mpn/toom63_mul.c	125;"	d	file:
r8	mpn/toom63_mul.c	230;"	d	file:
r_string	tune/speed.c	/^r_string (const char *s)$/;"	f
radix	gmpxx.h	/^    static const int radix = 2;$/;"	m	class:std::numeric_limits
raise	invalid.c	51;"	d	file:
randclear_fn	gmp-impl.h	/^  void (*randclear_fn) (gmp_randstate_t);$/;"	m	struct:__anon13
randclear_lc	rand/randlc2x.c	/^randclear_lc (gmp_randstate_t rstate)$/;"	f	file:
randget_fn	gmp-impl.h	/^  void (*randget_fn) (gmp_randstate_t, mp_ptr, unsigned long int);$/;"	m	struct:__anon13
randget_lc	rand/randlc2x.c	/^randget_lc (gmp_randstate_t rstate, mp_ptr rp, unsigned long int nbits)$/;"	f	file:
randiset_fn	gmp-impl.h	/^  void (*randiset_fn) (gmp_randstate_ptr, gmp_randstate_srcptr);$/;"	m	struct:__anon13
randiset_lc	rand/randlc2x.c	/^randiset_lc (gmp_randstate_ptr dst, gmp_randstate_srcptr src)$/;"	f	file:
randlimb_half	tune/tuneup.c	/^randlimb_half (void)$/;"	f
randlimb_norm	tune/tuneup.c	/^randlimb_norm (void)$/;"	f
random_word	tests/mpn/t-bdiv.c	/^random_word (gmp_randstate_ptr rs)$/;"	f
randomwalk	tests/mpz/t-bin.c	/^randomwalk (int count)$/;"	f
randseed_fn	gmp-impl.h	/^  void (*randseed_fn) (gmp_randstate_t, mpz_srcptr);$/;"	m	struct:__anon13
randseed_lc	rand/randlc2x.c	/^randseed_lc (gmp_randstate_t rstate, mpz_srcptr seed)$/;"	f	file:
randseed_mt	rand/randmts.c	/^randseed_mt (gmp_randstate_t rstate, mpz_srcptr seed)$/;"	f	file:
range	gmpxx.h	/^  mpz_class range;$/;"	m	class:__gmp_expr
rawfactor	gen-psqr.c	/^struct rawfactor_t  *rawfactor;$/;"	v	typeref:struct:rawfactor_t
rawfactor_t	gen-psqr.c	/^struct rawfactor_t {$/;"	s	file:
read_real_time	tune/time.c	323;"	d	file:
redc_1_to_redc_2_threshold	tune/tuneup.c	/^mp_size_t  redc_1_to_redc_2_threshold   = MP_SIZE_T_MAX;$/;"	v
redc_1_to_redc_n_threshold	tune/tuneup.c	/^mp_size_t  redc_1_to_redc_n_threshold   = MP_SIZE_T_MAX;$/;"	v
redc_2_to_redc_n_threshold	tune/tuneup.c	/^mp_size_t  redc_2_to_redc_n_threshold   = MP_SIZE_T_MAX;$/;"	v
redcify	mpn/generic/powm.c	/^redcify (mp_ptr rp, mp_srcptr up, mp_size_t un, mp_srcptr mp, mp_size_t n)$/;"	f	file:
redcify	mpn/generic/sec_powm.c	/^redcify (mp_ptr rp, mp_srcptr up, mp_size_t un, mp_srcptr mp, mp_size_t n, mp_ptr tp)$/;"	f	file:
redcify	mpn/powm.c	/^redcify (mp_ptr rp, mp_srcptr up, mp_size_t un, mp_srcptr mp, mp_size_t n)$/;"	f	file:
redcify	mpn/sec_powm.c	/^redcify (mp_ptr rp, mp_srcptr up, mp_size_t un, mp_srcptr mp, mp_size_t n, mp_ptr tp)$/;"	f	file:
reduce	mpz/powm_ui.c	/^reduce (mp_ptr tp, mp_srcptr ap, mp_size_t an, mp_srcptr mp, mp_size_t mn, gmp_pi1_t *dinv)$/;"	f	file:
ref	tests/devel/try.c	/^struct each_t  ref = { "Ref" };$/;"	v	typeref:struct:each_t
ref_addc_limb	tests/refmpn.c	/^ref_addc_limb (mp_limb_t *w, mp_limb_t x, mp_limb_t y)$/;"	f
ref_bswap_limb	tests/refmpn.c	/^ref_bswap_limb (mp_limb_t src)$/;"	f
ref_jacobi	tests/mpz/t-jac.c	/^ref_jacobi (mpz_srcptr a, mpz_srcptr b, unsigned nprime,$/;"	f
ref_matrix22_mul	tests/mpn/t-matrix22.c	/^ref_matrix22_mul (struct matrix *R,$/;"	f	file:
ref_mpq_cmp	tests/mpq/t-cmp.c	/^ref_mpq_cmp (mpq_t a, mpq_t b)$/;"	f
ref_mpq_cmp_ui	tests/mpq/t-cmp_ui.c	/^ref_mpq_cmp_ui (mpq_t a, unsigned long int bn, unsigned long int bd)$/;"	f
ref_mpq_cmp_z	tests/mpq/t-cmp_z.c	/^ref_mpq_cmp_z (mpq_t a, mpz_t b)$/;"	f
ref_mulmod_bnm1	tests/mpn/t-mulmod_bnm1.c	/^ref_mulmod_bnm1 (mp_ptr rp, mp_size_t rn, mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)$/;"	f	file:
ref_popc_limb	tests/refmpn.c	/^ref_popc_limb (mp_limb_t src)$/;"	f
ref_sqrmod_bnm1	tests/mpn/t-sqrmod_bnm1.c	/^ref_sqrmod_bnm1 (mp_ptr rp, mp_size_t rn, mp_srcptr ap, mp_size_t an)$/;"	f	file:
ref_subc_limb	tests/refmpn.c	/^ref_subc_limb (mp_limb_t *w, mp_limb_t x, mp_limb_t y)$/;"	f
ref_type	gmpxx.h	/^  typedef T ref_type;$/;"	t	struct:__gmp_resolve_ref
ref_type	gmpxx.h	/^  typedef const __gmp_expr<T, U> & ref_type;$/;"	t	struct:__gmp_resolve_ref
reference	tests/devel/try.c	/^  tryfun_t    reference;$/;"	m	struct:try_t	file:
reference_name	tests/devel/try.c	/^  const char  *reference_name;$/;"	m	struct:try_t	file:
reffunc	tests/devel/anymul_1.c	29;"	d	file:
reffunc	tests/devel/anymul_1.c	35;"	d	file:
reffunc	tests/devel/anymul_1.c	41;"	d	file:
reffunc	tests/devel/aors_n.c	28;"	d	file:
reffunc	tests/devel/aors_n.c	34;"	d	file:
reffunc	tests/devel/aors_n.c	40;"	d	file:
reffunc	tests/devel/aors_n.c	46;"	d	file:
reffunc	tests/devel/aors_n.c	52;"	d	file:
reffunc	tests/devel/aors_n.c	58;"	d	file:
reffunc	tests/devel/copy.c	28;"	d	file:
reffunc	tests/devel/copy.c	34;"	d	file:
reffunc	tests/devel/logops_n.c	27;"	d	file:
reffunc	tests/devel/logops_n.c	33;"	d	file:
reffunc	tests/devel/logops_n.c	39;"	d	file:
reffunc	tests/devel/logops_n.c	45;"	d	file:
reffunc	tests/devel/logops_n.c	51;"	d	file:
reffunc	tests/devel/logops_n.c	57;"	d	file:
reffunc	tests/devel/logops_n.c	63;"	d	file:
reffunc	tests/devel/logops_n.c	69;"	d	file:
reffunc	tests/devel/shift.c	29;"	d	file:
reffunc	tests/devel/shift.c	35;"	d	file:
refmpf_add	tests/refmpf.c	/^refmpf_add (mpf_ptr w, mpf_srcptr u, mpf_srcptr v)$/;"	f
refmpf_add_ulp	tests/refmpf.c	/^refmpf_add_ulp (mpf_ptr f)$/;"	f
refmpf_fill	tests/refmpf.c	/^refmpf_fill (mpf_ptr f, mp_size_t size, mp_limb_t value)$/;"	f
refmpf_normalize	tests/refmpf.c	/^refmpf_normalize (mpf_ptr f)$/;"	f
refmpf_set_overlap	tests/refmpf.c	/^refmpf_set_overlap (mpf_ptr dst, mpf_srcptr src)$/;"	f
refmpf_set_prec_limbs	tests/refmpf.c	/^refmpf_set_prec_limbs (mpf_ptr f, unsigned long prec)$/;"	f
refmpf_sub	tests/refmpf.c	/^refmpf_sub (mpf_ptr w, mpf_srcptr u, mpf_srcptr v)$/;"	f
refmpf_validate	tests/refmpf.c	/^refmpf_validate (const char *name, mpf_srcptr got, mpf_srcptr want)$/;"	f
refmpf_validate_division	tests/refmpf.c	/^refmpf_validate_division (const char *name, mpf_srcptr got,$/;"	f
refmpn_add	tests/refmpn.c	/^refmpn_add (mp_ptr rp,$/;"	f
refmpn_add_1	tests/refmpn.c	/^refmpn_add_1 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_limb_t n)$/;"	f
refmpn_add_err1_n	tests/refmpn.c	/^refmpn_add_err1_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p,$/;"	f
refmpn_add_err2_n	tests/refmpn.c	/^refmpn_add_err2_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p,$/;"	f
refmpn_add_err3_n	tests/refmpn.c	/^refmpn_add_err3_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p,$/;"	f
refmpn_add_n	tests/refmpn.c	/^refmpn_add_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_add_n_sub_n	tests/refmpn.c	/^refmpn_add_n_sub_n (mp_ptr r1p, mp_ptr r2p,$/;"	f
refmpn_add_n_sub_nc	tests/refmpn.c	/^refmpn_add_n_sub_nc (mp_ptr r1p, mp_ptr r2p,$/;"	f
refmpn_add_nc	tests/refmpn.c	/^refmpn_add_nc (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size,$/;"	f
refmpn_addlsh1_n	tests/refmpn.c	/^refmpn_addlsh1_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_addlsh1_n_ip1	tests/refmpn.c	/^refmpn_addlsh1_n_ip1 (mp_ptr rp, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_addlsh1_n_ip2	tests/refmpn.c	/^refmpn_addlsh1_n_ip2 (mp_ptr rp, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_addlsh1_nc	tests/refmpn.c	/^refmpn_addlsh1_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n, mp_limb_t carry)$/;"	f
refmpn_addlsh2_n	tests/refmpn.c	/^refmpn_addlsh2_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_addlsh2_n_ip1	tests/refmpn.c	/^refmpn_addlsh2_n_ip1 (mp_ptr rp, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_addlsh2_n_ip2	tests/refmpn.c	/^refmpn_addlsh2_n_ip2 (mp_ptr rp, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_addlsh2_nc	tests/refmpn.c	/^refmpn_addlsh2_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n, mp_limb_t carry)$/;"	f
refmpn_addlsh_n	tests/refmpn.c	/^refmpn_addlsh_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
refmpn_addlsh_n_ip1	tests/refmpn.c	/^refmpn_addlsh_n_ip1 (mp_ptr rp, mp_srcptr vp, mp_size_t n, unsigned int s)$/;"	f
refmpn_addlsh_n_ip2	tests/refmpn.c	/^refmpn_addlsh_n_ip2 (mp_ptr rp, mp_srcptr vp, mp_size_t n, unsigned int s)$/;"	f
refmpn_addlsh_nc	tests/refmpn.c	/^refmpn_addlsh_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
refmpn_addmul_1	tests/refmpn.c	/^refmpn_addmul_1 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_limb_t multiplier)$/;"	f
refmpn_addmul_1c	tests/refmpn.c	/^refmpn_addmul_1c (mp_ptr rp, mp_srcptr sp, mp_size_t size,$/;"	f
refmpn_addmul_2	tests/refmpn.c	/^refmpn_addmul_2 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_addmul_3	tests/refmpn.c	/^refmpn_addmul_3 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_addmul_4	tests/refmpn.c	/^refmpn_addmul_4 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_addmul_5	tests/refmpn.c	/^refmpn_addmul_5 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_addmul_6	tests/refmpn.c	/^refmpn_addmul_6 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_addmul_7	tests/refmpn.c	/^refmpn_addmul_7 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_addmul_8	tests/refmpn.c	/^refmpn_addmul_8 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_addmul_N	tests/refmpn.c	/^refmpn_addmul_N (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	f
refmpn_and_n	tests/refmpn.c	/^refmpn_and_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_andn_n	tests/refmpn.c	/^refmpn_andn_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_big_base	tests/refmpn.c	/^refmpn_big_base (int base)$/;"	f
refmpn_binvert	tests/refmpn.c	/^refmpn_binvert (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_ptr scratch)$/;"	f
refmpn_chars_per_limb	tests/refmpn.c	/^refmpn_chars_per_limb (int base)$/;"	f
refmpn_clrbit	tests/refmpn.c	/^refmpn_clrbit (mp_ptr ptr, unsigned long bit)$/;"	f
refmpn_cmp	tests/refmpn.c	/^refmpn_cmp (mp_srcptr xp, mp_srcptr yp, mp_size_t size)$/;"	f
refmpn_cmp_allowzero	tests/refmpn.c	/^refmpn_cmp_allowzero (mp_srcptr xp, mp_srcptr yp, mp_size_t size)$/;"	f
refmpn_cmp_twosizes	tests/refmpn.c	/^refmpn_cmp_twosizes (mp_srcptr xp, mp_size_t xsize,$/;"	f
refmpn_cnd_add_n	tests/refmpn.c	/^refmpn_cnd_add_n (mp_limb_t cnd, mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_cnd_sub_n	tests/refmpn.c	/^refmpn_cnd_sub_n (mp_limb_t cnd, mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_com	tests/refmpn.c	/^refmpn_com (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
refmpn_copy	tests/refmpn.c	/^refmpn_copy (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
refmpn_copy_extend	tests/refmpn.c	/^refmpn_copy_extend (mp_ptr wp, mp_size_t wsize, mp_srcptr xp, mp_size_t xsize)$/;"	f
refmpn_copyd	tests/refmpn.c	/^refmpn_copyd (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
refmpn_copyi	tests/refmpn.c	/^refmpn_copyi (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
refmpn_count_leading_zeros	tests/refmpn.c	/^refmpn_count_leading_zeros (mp_limb_t x)$/;"	f
refmpn_count_trailing_zeros	tests/refmpn.c	/^refmpn_count_trailing_zeros (mp_limb_t x)$/;"	f
refmpn_divexact_by3	tests/refmpn.c	/^refmpn_divexact_by3 (mp_ptr rp, mp_srcptr sp, mp_size_t size)$/;"	f
refmpn_divexact_by3c	tests/refmpn.c	/^refmpn_divexact_by3c (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_limb_t carry)$/;"	f
refmpn_divmod_1	tests/refmpn.c	/^refmpn_divmod_1 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_limb_t divisor)$/;"	f
refmpn_divmod_1c	tests/refmpn.c	/^refmpn_divmod_1c (mp_ptr rp, mp_srcptr sp, mp_size_t size,$/;"	f
refmpn_divmod_1c_workaround	tests/refmpn.c	/^refmpn_divmod_1c_workaround (mp_ptr rp, mp_srcptr sp, mp_size_t size,$/;"	f	file:
refmpn_divrem_1	tests/refmpn.c	/^refmpn_divrem_1 (mp_ptr rp, mp_size_t xsize,$/;"	f
refmpn_divrem_1c	tests/refmpn.c	/^refmpn_divrem_1c (mp_ptr rp, mp_size_t xsize,$/;"	f
refmpn_divrem_2	tests/refmpn.c	/^refmpn_divrem_2 (mp_ptr qp, mp_size_t qxn,$/;"	f
refmpn_equal_anynail	tests/refmpn.c	/^refmpn_equal_anynail (mp_srcptr xp, mp_srcptr yp, mp_size_t size)$/;"	f
refmpn_fill	tests/refmpn.c	/^refmpn_fill (mp_ptr ptr, mp_size_t size, mp_limb_t value)$/;"	f
refmpn_free_limbs	tests/refmpn.c	/^refmpn_free_limbs (mp_ptr p)$/;"	f
refmpn_gcd	tests/refmpn.c	/^refmpn_gcd (mp_ptr gp, mp_ptr xp, mp_size_t xsize, mp_ptr yp, mp_size_t ysize)$/;"	f
refmpn_gcd_1	tests/refmpn.c	/^refmpn_gcd_1 (mp_srcptr xp, mp_size_t xsize, mp_limb_t y)$/;"	f
refmpn_get_str	tests/refmpn.c	/^refmpn_get_str (unsigned char *dst, int base, mp_ptr src, mp_size_t size)$/;"	f
refmpn_hamdist	tests/refmpn.c	/^refmpn_hamdist (mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_invert	tests/refmpn.c	/^refmpn_invert (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_ptr scratch)$/;"	f
refmpn_invert_limb	tests/refmpn.c	/^refmpn_invert_limb (mp_limb_t d)$/;"	f
refmpn_ior_n	tests/refmpn.c	/^refmpn_ior_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_iorn_n	tests/refmpn.c	/^refmpn_iorn_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_lshift	tests/refmpn.c	/^refmpn_lshift (mp_ptr rp, mp_srcptr sp, mp_size_t size, unsigned shift)$/;"	f
refmpn_lshift_or_copy	tests/refmpn.c	/^refmpn_lshift_or_copy (mp_ptr rp, mp_srcptr sp, mp_size_t size, unsigned shift)$/;"	f
refmpn_lshift_or_copy_any	tests/refmpn.c	/^refmpn_lshift_or_copy_any (mp_ptr rp, mp_srcptr sp, mp_size_t size,$/;"	f
refmpn_lshiftc	tests/refmpn.c	/^refmpn_lshiftc (mp_ptr rp, mp_srcptr sp, mp_size_t size, unsigned shift)$/;"	f
refmpn_malloc_limbs	tests/refmpn.c	/^refmpn_malloc_limbs (mp_size_t size)$/;"	f
refmpn_malloc_limbs_aligned	tests/refmpn.c	/^refmpn_malloc_limbs_aligned (mp_size_t n, size_t m)$/;"	f
refmpn_memdup_limbs	tests/refmpn.c	/^refmpn_memdup_limbs (mp_srcptr ptr, mp_size_t size)$/;"	f
refmpn_mod2	tests/refmpn.c	/^refmpn_mod2 (mp_limb_t r[2], const mp_limb_t a[2], const mp_limb_t d[2])$/;"	f
refmpn_mod_1	tests/refmpn.c	/^refmpn_mod_1 (mp_srcptr sp, mp_size_t size, mp_limb_t divisor)$/;"	f
refmpn_mod_1c	tests/refmpn.c	/^refmpn_mod_1c (mp_srcptr sp, mp_size_t size, mp_limb_t divisor,$/;"	f
refmpn_mod_34lsub1	tests/refmpn.c	/^refmpn_mod_34lsub1 (mp_srcptr p, mp_size_t n)$/;"	f
refmpn_msbone	tests/refmpn.c	/^refmpn_msbone (mp_limb_t x)$/;"	f
refmpn_msbone_mask	tests/refmpn.c	/^refmpn_msbone_mask (mp_limb_t x)$/;"	f
refmpn_mul	tests/refmpn.c	/^refmpn_mul (mp_ptr wp, mp_srcptr up, mp_size_t un, mp_srcptr vp, mp_size_t vn)$/;"	f
refmpn_mul_1	tests/refmpn.c	/^refmpn_mul_1 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_limb_t multiplier)$/;"	f
refmpn_mul_1c	tests/refmpn.c	/^refmpn_mul_1c (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_limb_t multiplier,$/;"	f
refmpn_mul_2	tests/refmpn.c	/^refmpn_mul_2 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_mul_3	tests/refmpn.c	/^refmpn_mul_3 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_mul_4	tests/refmpn.c	/^refmpn_mul_4 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_mul_5	tests/refmpn.c	/^refmpn_mul_5 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_mul_6	tests/refmpn.c	/^refmpn_mul_6 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_srcptr mult)$/;"	f
refmpn_mul_N	tests/refmpn.c	/^refmpn_mul_N (mp_ptr dst, mp_srcptr src, mp_size_t size,$/;"	f
refmpn_mul_any	tests/refmpn.c	/^refmpn_mul_any (mp_ptr prodp,$/;"	f
refmpn_mul_basecase	tests/refmpn.c	/^refmpn_mul_basecase (mp_ptr prodp,$/;"	f
refmpn_mul_n	tests/refmpn.c	/^refmpn_mul_n (mp_ptr prodp, mp_srcptr up, mp_srcptr vp, mp_size_t size)$/;"	f
refmpn_mullo_n	tests/refmpn.c	/^refmpn_mullo_n (mp_ptr prodp, mp_srcptr up, mp_srcptr vp, mp_size_t size)$/;"	f
refmpn_mulmid	tests/refmpn.c	/^refmpn_mulmid (mp_ptr rp, mp_srcptr up, mp_size_t un,$/;"	f
refmpn_mulmid_basecase	tests/refmpn.c	/^refmpn_mulmid_basecase (mp_ptr rp,$/;"	f
refmpn_mulmid_n	tests/refmpn.c	/^refmpn_mulmid_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_nand_n	tests/refmpn.c	/^refmpn_nand_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_neg	tests/refmpn.c	/^refmpn_neg (mp_ptr dst, mp_srcptr src, mp_size_t size)$/;"	f
refmpn_nior_n	tests/refmpn.c	/^refmpn_nior_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_normalize	tests/refmpn.c	/^refmpn_normalize (mp_srcptr ptr, mp_size_t size)$/;"	f
refmpn_overlap_fullonly_p	tests/refmpn.c	/^refmpn_overlap_fullonly_p (mp_srcptr dst, mp_srcptr src, mp_size_t size)$/;"	f
refmpn_overlap_fullonly_two_p	tests/refmpn.c	/^refmpn_overlap_fullonly_two_p (mp_srcptr dst, mp_srcptr src1, mp_srcptr src2,$/;"	f
refmpn_overlap_high_to_low_p	tests/refmpn.c	/^refmpn_overlap_high_to_low_p (mp_srcptr dst, mp_srcptr src, mp_size_t size)$/;"	f
refmpn_overlap_low_to_high_p	tests/refmpn.c	/^refmpn_overlap_low_to_high_p (mp_srcptr dst, mp_srcptr src, mp_size_t size)$/;"	f
refmpn_overlap_p	tests/refmpn.c	/^refmpn_overlap_p (mp_srcptr xp, mp_size_t xsize, mp_srcptr yp, mp_size_t ysize)$/;"	f
refmpn_popcount	tests/refmpn.c	/^refmpn_popcount (mp_srcptr sp, mp_size_t size)$/;"	f
refmpn_preinv_divrem_1	tests/refmpn.c	/^refmpn_preinv_divrem_1 (mp_ptr rp, mp_size_t xsize,$/;"	f
refmpn_preinv_mod_1	tests/refmpn.c	/^refmpn_preinv_mod_1 (mp_srcptr sp, mp_size_t size, mp_limb_t divisor,$/;"	f
refmpn_random	tests/refmpn.c	/^refmpn_random (mp_ptr ptr, mp_size_t size)$/;"	f
refmpn_random2	tests/refmpn.c	/^refmpn_random2 (mp_ptr ptr, mp_size_t size)$/;"	f
refmpn_random_half	tests/refmpn.c	/^refmpn_random_half (void)$/;"	f
refmpn_random_limb	tests/refmpn.c	/^refmpn_random_limb (void)$/;"	f
refmpn_random_seed	tests/refmpn.c	/^mp_limb_t  refmpn_random_seed;$/;"	v
refmpn_redc_1	tests/refmpn.c	/^refmpn_redc_1 (mp_ptr rp, mp_ptr up, mp_srcptr mp, mp_size_t n, mp_limb_t invm)$/;"	f
refmpn_rsblsh1_n	tests/refmpn.c	/^refmpn_rsblsh1_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_rsblsh1_nc	tests/refmpn.c	/^refmpn_rsblsh1_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n, mp_limb_signed_t carry)$/;"	f
refmpn_rsblsh2_n	tests/refmpn.c	/^refmpn_rsblsh2_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_rsblsh2_nc	tests/refmpn.c	/^refmpn_rsblsh2_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n, mp_limb_signed_t carry)$/;"	f
refmpn_rsblsh_n	tests/refmpn.c	/^refmpn_rsblsh_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
refmpn_rsblsh_nc	tests/refmpn.c	/^refmpn_rsblsh_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
refmpn_rsh1add_n	tests/refmpn.c	/^refmpn_rsh1add_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_rsh1sub_n	tests/refmpn.c	/^refmpn_rsh1sub_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_rshift	tests/refmpn.c	/^refmpn_rshift (mp_ptr rp, mp_srcptr sp, mp_size_t size, unsigned shift)$/;"	f
refmpn_rshift_or_copy	tests/refmpn.c	/^refmpn_rshift_or_copy (mp_ptr rp, mp_srcptr sp, mp_size_t size, unsigned shift)$/;"	f
refmpn_rshift_or_copy_any	tests/refmpn.c	/^refmpn_rshift_or_copy_any (mp_ptr rp, mp_srcptr sp, mp_size_t size,$/;"	f
refmpn_sb_div_qr	tests/refmpn.c	/^refmpn_sb_div_qr (mp_ptr qp,$/;"	f
refmpn_scan0	tests/refmpn.c	/^refmpn_scan0 (mp_srcptr ptr, unsigned long bit)$/;"	f
refmpn_scan1	tests/refmpn.c	/^refmpn_scan1 (mp_srcptr ptr, unsigned long bit)$/;"	f
refmpn_setbit	tests/refmpn.c	/^refmpn_setbit (mp_ptr ptr, unsigned long bit)$/;"	f
refmpn_sqr	tests/refmpn.c	/^refmpn_sqr (mp_ptr dst, mp_srcptr src, mp_size_t size)$/;"	f
refmpn_sqrlo	tests/refmpn.c	/^refmpn_sqrlo (mp_ptr dst, mp_srcptr src, mp_size_t size)$/;"	f
refmpn_sqrtrem	tests/refmpn.c	/^refmpn_sqrtrem (mp_ptr sp, mp_ptr rp, mp_srcptr np, mp_size_t nsize)$/;"	f
refmpn_strip_twos	tests/refmpn.c	/^refmpn_strip_twos (mp_ptr p, mp_size_t size)$/;"	f
refmpn_sub	tests/refmpn.c	/^refmpn_sub (mp_ptr rp,$/;"	f
refmpn_sub_1	tests/refmpn.c	/^refmpn_sub_1 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_limb_t n)$/;"	f
refmpn_sub_ddmmss	tests/refmpn.c	/^refmpn_sub_ddmmss (mp_limb_t *dh, mp_limb_t *dl,$/;"	f
refmpn_sub_err1_n	tests/refmpn.c	/^refmpn_sub_err1_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p,$/;"	f
refmpn_sub_err2_n	tests/refmpn.c	/^refmpn_sub_err2_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p,$/;"	f
refmpn_sub_err3_n	tests/refmpn.c	/^refmpn_sub_err3_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p,$/;"	f
refmpn_sub_n	tests/refmpn.c	/^refmpn_sub_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_sub_nc	tests/refmpn.c	/^refmpn_sub_nc (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size,$/;"	f
refmpn_sublsh1_n	tests/refmpn.c	/^refmpn_sublsh1_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_sublsh1_n_ip1	tests/refmpn.c	/^refmpn_sublsh1_n_ip1 (mp_ptr rp, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_sublsh1_n_ip2	tests/refmpn.c	/^refmpn_sublsh1_n_ip2 (mp_ptr rp, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_sublsh1_nc	tests/refmpn.c	/^refmpn_sublsh1_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n, mp_limb_t carry)$/;"	f
refmpn_sublsh2_n	tests/refmpn.c	/^refmpn_sublsh2_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_sublsh2_n_ip1	tests/refmpn.c	/^refmpn_sublsh2_n_ip1 (mp_ptr rp, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_sublsh2_n_ip2	tests/refmpn.c	/^refmpn_sublsh2_n_ip2 (mp_ptr rp, mp_srcptr vp, mp_size_t n)$/;"	f
refmpn_sublsh2_nc	tests/refmpn.c	/^refmpn_sublsh2_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n, mp_limb_t carry)$/;"	f
refmpn_sublsh_n	tests/refmpn.c	/^refmpn_sublsh_n (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
refmpn_sublsh_n_ip1	tests/refmpn.c	/^refmpn_sublsh_n_ip1 (mp_ptr rp, mp_srcptr vp, mp_size_t n, unsigned int s)$/;"	f
refmpn_sublsh_n_ip2	tests/refmpn.c	/^refmpn_sublsh_n_ip2 (mp_ptr rp, mp_srcptr vp, mp_size_t n, unsigned int s)$/;"	f
refmpn_sublsh_nc	tests/refmpn.c	/^refmpn_sublsh_nc (mp_ptr rp, mp_srcptr up, mp_srcptr vp,$/;"	f
refmpn_submul_1	tests/refmpn.c	/^refmpn_submul_1 (mp_ptr rp, mp_srcptr sp, mp_size_t size, mp_limb_t multiplier)$/;"	f
refmpn_submul_1c	tests/refmpn.c	/^refmpn_submul_1c (mp_ptr rp, mp_srcptr sp, mp_size_t size,$/;"	f
refmpn_tdiv_qr	tests/refmpn.c	/^refmpn_tdiv_qr (mp_ptr qp, mp_ptr rp, mp_size_t qxn,$/;"	f
refmpn_toom42_mulmid	tests/refmpn.c	/^refmpn_toom42_mulmid (mp_ptr rp, mp_srcptr up, mp_srcptr vp, mp_size_t n,$/;"	f
refmpn_tstbit	tests/refmpn.c	/^refmpn_tstbit (mp_srcptr ptr, unsigned long bit)$/;"	f
refmpn_udiv_qrnnd	tests/refmpn.c	/^refmpn_udiv_qrnnd (mp_limb_t *rp, mp_limb_t h, mp_limb_t l, mp_limb_t d)$/;"	f
refmpn_udiv_qrnnd_r	tests/refmpn.c	/^refmpn_udiv_qrnnd_r (mp_limb_t h, mp_limb_t l, mp_limb_t d, mp_limb_t *rp)$/;"	f
refmpn_umul_ppmm	tests/refmpn.c	/^refmpn_umul_ppmm (mp_limb_t *lo, mp_limb_t x, mp_limb_t y)$/;"	f
refmpn_umul_ppmm_r	tests/refmpn.c	/^refmpn_umul_ppmm_r (mp_limb_t x, mp_limb_t y, mp_limb_t *lo)$/;"	f
refmpn_xnor_n	tests/refmpn.c	/^refmpn_xnor_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_xor_n	tests/refmpn.c	/^refmpn_xor_n (mp_ptr rp, mp_srcptr s1p, mp_srcptr s2p, mp_size_t size)$/;"	f
refmpn_zero	tests/refmpn.c	/^refmpn_zero (mp_ptr ptr, mp_size_t size)$/;"	f
refmpn_zero_extend	tests/refmpn.c	/^refmpn_zero_extend (mp_ptr ptr, mp_size_t oldsize, mp_size_t newsize)$/;"	f
refmpn_zero_p	tests/refmpn.c	/^refmpn_zero_p (mp_srcptr ptr, mp_size_t size)$/;"	f
refmpq_add	tests/refmpq.c	/^refmpq_add (mpq_ptr w, mpq_srcptr x, mpq_srcptr y)$/;"	f
refmpq_sub	tests/refmpq.c	/^refmpq_sub (mpq_ptr w, mpq_srcptr x, mpq_srcptr y)$/;"	f
refmpz_combit	tests/refmpz.c	/^refmpz_combit (mpz_ptr r, unsigned long bit)$/;"	f
refmpz_hamdist	tests/refmpz.c	/^refmpz_hamdist (mpz_srcptr x, mpz_srcptr y)$/;"	f
refmpz_jacobi	tests/refmpz.c	/^refmpz_jacobi (mpz_srcptr a, mpz_srcptr b)$/;"	f
refmpz_kronecker	tests/refmpz.c	/^refmpz_kronecker (mpz_srcptr a_orig, mpz_srcptr b_orig)$/;"	f
refmpz_kronecker_si	tests/refmpz.c	/^refmpz_kronecker_si (mpz_srcptr a, long b)$/;"	f
refmpz_kronecker_ui	tests/refmpz.c	/^refmpz_kronecker_ui (mpz_srcptr a, unsigned long b)$/;"	f
refmpz_legendre	tests/refmpz.c	/^refmpz_legendre (mpz_srcptr a, mpz_srcptr p)$/;"	f
refmpz_mul	tests/mpz/t-mul.c	/^refmpz_mul (mpz_t w, const mpz_t u, const mpz_t v)$/;"	f	file:
refmpz_nextprime	tests/mpz/t-nextprime.c	/^refmpz_nextprime (mpz_ptr p, mpz_srcptr t)$/;"	f
refmpz_popcount	tests/mpz/t-popcount.c	/^refmpz_popcount (mpz_t arg)$/;"	f
refmpz_pow_ui	tests/refmpz.c	/^refmpz_pow_ui (mpz_ptr w, mpz_srcptr b, unsigned long e)$/;"	f
refmpz_scan	tests/mpz/t-scan.c	/^refmpz_scan (mpz_srcptr z, unsigned long i, int sought)$/;"	f
refmpz_scan0	tests/mpz/t-scan.c	/^refmpz_scan0 (mpz_srcptr z, unsigned long starting_bit)$/;"	f
refmpz_scan1	tests/mpz/t-scan.c	/^refmpz_scan1 (mpz_srcptr z, unsigned long starting_bit)$/;"	f
refmpz_si_kronecker	tests/refmpz.c	/^refmpz_si_kronecker (long a, mpz_srcptr b)$/;"	f
refmpz_ui_kronecker	tests/refmpz.c	/^refmpz_ui_kronecker (unsigned long a, mpz_srcptr b)$/;"	f
region	tests/devel/try.c	/^  struct region_t  region;$/;"	m	struct:dest_each_t	typeref:struct:dest_each_t::region_t	file:
region	tests/devel/try.c	/^  struct region_t  region;$/;"	m	struct:source_t	typeref:struct:source_t::region_t	file:
region_t	tests/devel/try.c	/^struct region_t {$/;"	s	file:
regname	tests/amd64check.c	/^const char *regname[6] = {"rbx", "rbp", "r12", "r13", "r14", "r15"};$/;"	v
regname	tests/x86check.c	/^const char *regname[] = {"ebx", "ebp", "esi", "edi"};$/;"	v
rem	demos/primes.c	/^  int rem;$/;"	m	struct:primes	file:
replacement_works	tests/cxx/t-locale.cc	/^replacement_works (void)$/;"	f
report	demos/primes.c	/^report (mpz_t prime)$/;"	f
reps	gmp-impl.h	/^  doprnt_reps_t    reps;$/;"	m	struct:doprnt_funs_t
reps	tune/speed.h	/^  unsigned   reps;	\/* how many times to run the routine *\/$/;"	m	struct:speed_params
res	demos/expr/expr-impl.h	/^  mpX_ptr                         res;$/;"	m	struct:mpexpr_parse_t
res	tests/mpn/t-hgcd.c	/^struct value { int res; const char *a; const char *b; };$/;"	m	struct:value	file:
res_ptr	mpn/m88k/mc88110/add_n.S	/^#define res_ptr	r2$/;"	d
res_ptr	mpn/m88k/mc88110/sub_n.S	/^#define res_ptr	r2$/;"	d
restrict	config.h	629;"	d
result	gmp-impl.h	/^  char    **result;$/;"	m	struct:gmp_asprintf_t
retval	tests/devel/try.c	/^  char  retval;$/;"	m	struct:try_t	file:
retval	tests/devel/try.c	/^  mp_limb_t  retval;$/;"	m	struct:each_t	file:
rhs	demos/pexpr.c	/^    struct {struct expr *lhs, *rhs;} ops;$/;"	m	struct:expr::__anon1::__anon2	typeref:struct:expr::__anon1::__anon2::	file:
rootrem_valid_p	mini-gmp/tests/t-root.c	/^rootrem_valid_p (const mpz_t u, const mpz_t s, const mpz_t r, unsigned long z)$/;"	f	file:
round_error	gmpxx.h	/^    static mpf_class round_error() { return mpf_class(); }$/;"	f	class:std::numeric_limits
round_error	gmpxx.h	/^    static mpq_class round_error() { return mpq_class(); }$/;"	f	class:std::numeric_limits
round_error	gmpxx.h	/^    static mpz_class round_error() { return mpz_class(); }$/;"	f	class:std::numeric_limits
round_style	gmpxx.h	/^    static const float_round_style round_style = round_indeterminate;$/;"	m	class:std::numeric_limits
round_style	gmpxx.h	/^    static const float_round_style round_style = round_toward_zero;$/;"	m	class:std::numeric_limits
round_up_multiple	tests/devel/try.c	/^round_up_multiple (size_t a, size_t m)$/;"	f
routine	tune/speed.c	/^} routine[] = {$/;"	v	typeref:struct:routine_t
routine_find	tune/speed.c	/^routine_find (struct choice_t *c, const char *s_orig)$/;"	f
routine_t	tune/speed.c	/^const struct routine_t {$/;"	s	file:
rp	mpn/generic/mu_bdiv_q.c	185;"	d	file:
rp	mpn/generic/mu_bdiv_q.c	93;"	d	file:
rp	mpn/generic/mu_divappr_q.c	174;"	d	file:
rp	mpn/mu_bdiv_q.c	185;"	d	file:
rp	mpn/mu_bdiv_q.c	93;"	d	file:
rp	mpn/mu_divappr_q.c	174;"	d	file:
rsb	mpn/arm/udiv.asm	/^	rsb	d, lr, d, lsl #1	C restore orig d value$/;"	d
rshift_make	tests/refmpn.c	/^rshift_make (mp_limb_t hi, mp_limb_t lo, unsigned shift)$/;"	f
rshift_rhlc	longlong.h	1045;"	d
rshift_rhlc	longlong.h	1088;"	d
rstate	demos/pexpr.c	/^gmp_randstate_t rstate;$/;"	v
rt	tests/rand/t-rand.c	/^struct rt$/;"	s	file:
ru_utime	tune/time.c	/^  struct_timeval ru_utime;$/;"	m	struct:rusage_dummy	file:
run	tests/mpz/t-nextprime.c	/^run (const char *start, int reps, const char *end, short diffs[])$/;"	f
run_all	tune/speed.c	/^run_all (FILE *fp)$/;"	f
run_expr	demos/expr/run-expr.c	/^run_expr (int type, int base, unsigned long prec, char *str)$/;"	f
run_gnuplot	tune/speed.c	/^run_gnuplot (int argc, char *argv[])$/;"	f
run_one	tune/speed.c	/^run_one (FILE *fp, struct speed_params *s, mp_size_t prev_size)$/;"	f
rusage_diff_secs	tune/time.c	/^rusage_diff_secs (const struct_rusage *end, const struct_rusage *start)$/;"	f
rusage_dummy	tune/time.c	/^struct rusage_dummy {$/;"	s	file:
rusage_tv_sec	tune/freq.c	712;"	d	file:
rusage_tv_sec	tune/time.c	652;"	d	file:
rusage_tv_usec	tune/freq.c	713;"	d	file:
rusage_tv_usec	tune/time.c	653;"	d	file:
s	gmp-impl.h	/^    } s;$/;"	m	union:double_extract	typeref:struct:double_extract::__anon18
s	gmp-impl.h	/^    } s;$/;"	m	union:ieee_double_extract	typeref:struct:ieee_double_extract::__anon15
s	gmp-impl.h	/^    } s;$/;"	m	union:ieee_double_extract	typeref:struct:ieee_double_extract::__anon16
s	gmp-impl.h	/^    } s;$/;"	m	union:ieee_double_extract	typeref:struct:ieee_double_extract::__anon17
s	gmp-impl.h	/^  unsigned char s[SIEVESIZE + 1];  \/* sieve table *\/$/;"	m	struct:__anon14
s	mini-gmp/tests/t-double.c	/^  const char *s;$/;"	m	struct:__anon20	file:
s	mpn/generic/toom42_mulmid.c	84;"	d	file:
s	mpn/toom42_mulmid.c	84;"	d	file:
s	tests/devel/try.c	/^  int  s[NUM_SOURCES];$/;"	m	struct:overlap_t	file:
s	tests/devel/try.c	/^  struct source_each_t  s[NUM_SOURCES];$/;"	m	struct:each_t	typeref:struct:each_t::source_each_t	file:
s	tests/devel/try.c	/^struct source_t  s[NUM_SOURCES];$/;"	v	typeref:struct:source_t
s	tests/mpz/t-gcd.c	/^mpz_t gcd1, gcd2, s, temp1, temp2, temp3;$/;"	v
s	tests/rand/t-rand.c	/^  const char **s;$/;"	m	struct:rt	file:
s	tune/tuneup.c	/^struct speed_params  s;$/;"	v	typeref:struct:speed_params
s0	gmp-impl.h	/^  unsigned long s0;		   \/* number corresponding to s[0] *\/$/;"	m	struct:__anon14
s1_ptr	mpn/m88k/mc88110/add_n.S	/^#define s1_ptr	r3$/;"	d
s1_ptr	mpn/m88k/mc88110/sub_n.S	/^#define s1_ptr	r3$/;"	d
s2_ptr	mpn/m88k/mc88110/add_n.S	/^#define s2_ptr	r4$/;"	d
s2_ptr	mpn/m88k/mc88110/sub_n.S	/^#define s2_ptr	r4$/;"	d
samples	tests/mpz/t-bin.c	/^samples (void)$/;"	f
sbb	tests/refmpn.c	/^sbb (mp_limb_t *w, mp_limb_t x, mp_limb_t y, mp_limb_t c)$/;"	f
scale	tune/speed.c	/^  double                  scale;$/;"	m	struct:choice_t	file:
scan	gmp-impl.h	/^  gmp_doscan_scan_t   scan;$/;"	m	struct:gmp_doscan_funs_t
scan	scanf/sscanffuns.c	/^scan (const char **sp, const char *fmt, ...)$/;"	f	file:
scratch_out	mpn/generic/mu_bdiv_q.c	187;"	d	file:
scratch_out	mpn/generic/mu_bdiv_q.c	196;"	d	file:
scratch_out	mpn/generic/mu_bdiv_q.c	224;"	d	file:
scratch_out	mpn/generic/mu_bdiv_q.c	95;"	d	file:
scratch_out	mpn/generic/mu_bdiv_qr.c	180;"	d	file:
scratch_out	mpn/generic/mu_bdiv_qr.c	189;"	d	file:
scratch_out	mpn/generic/mu_bdiv_qr.c	242;"	d	file:
scratch_out	mpn/generic/mu_bdiv_qr.c	94;"	d	file:
scratch_out	mpn/generic/mu_div_qr.c	250;"	d	file:
scratch_out	mpn/generic/mu_divappr_q.c	176;"	d	file:
scratch_out	mpn/generic/toom22_mul.c	177;"	d	file:
scratch_out	mpn/generic/toom2_sqr.c	116;"	d	file:
scratch_out	mpn/generic/toom32_mul.c	102;"	d	file:
scratch_out	mpn/generic/toom33_mul.c	254;"	d	file:
scratch_out	mpn/generic/toom3_sqr.c	166;"	d	file:
scratch_out	mpn/generic/toom42_mul.c	189;"	d	file:
scratch_out	mpn/generic/toom53_mul.c	249;"	d	file:
scratch_out	mpn/generic/toom62_mul.c	251;"	d	file:
scratch_out	mpn/mu_bdiv_q.c	187;"	d	file:
scratch_out	mpn/mu_bdiv_q.c	196;"	d	file:
scratch_out	mpn/mu_bdiv_q.c	224;"	d	file:
scratch_out	mpn/mu_bdiv_q.c	95;"	d	file:
scratch_out	mpn/mu_bdiv_qr.c	180;"	d	file:
scratch_out	mpn/mu_bdiv_qr.c	189;"	d	file:
scratch_out	mpn/mu_bdiv_qr.c	242;"	d	file:
scratch_out	mpn/mu_bdiv_qr.c	94;"	d	file:
scratch_out	mpn/mu_div_qr.c	250;"	d	file:
scratch_out	mpn/mu_divappr_q.c	176;"	d	file:
scratch_out	mpn/toom22_mul.c	177;"	d	file:
scratch_out	mpn/toom2_sqr.c	116;"	d	file:
scratch_out	mpn/toom32_mul.c	102;"	d	file:
scratch_out	mpn/toom33_mul.c	254;"	d	file:
scratch_out	mpn/toom3_sqr.c	166;"	d	file:
scratch_out	mpn/toom42_mul.c	189;"	d	file:
scratch_out	mpn/toom53_mul.c	249;"	d	file:
scratch_out	mpn/toom62_mul.c	251;"	d	file:
sdiv_qr	tests/mpn/t-hgcd.c	/^sdiv_qr (mpz_t q, mpz_t r, mp_size_t s, const mpz_t a, const mpz_t b)$/;"	f	file:
sdiv_qr	tests/mpn/t-hgcd_appr.c	/^sdiv_qr (mpz_t q, mpz_t r, mp_size_t s, const mpz_t a, const mpz_t b)$/;"	f	file:
sdiv_qrnnd	longlong.h	1128;"	d
sdiv_qrnnd	longlong.h	1395;"	d
sdiv_qrnnd	longlong.h	1845;"	d
sdiv_qrnnd	longlong.h	797;"	d
search	tune/tune-gcd-p.c	/^search (double *minp, double (*f)(void *, int), void *ctx, int start, int end)$/;"	f	file:
seed	gmpxx.h	/^  void seed(const mpz_class &z) { gmp_randseed(state, z.get_mpz_t()); }$/;"	f	class:gmp_randclass
seed	gmpxx.h	/^  void seed(unsigned long int s) { gmp_randseed_ui(state, s); }$/;"	f	class:gmp_randclass
set_point	tests/cxx/t-locale.cc	/^set_point (char c)$/;"	f
set_prec	gmpxx.h	/^  void set_prec(mp_bitcnt_t prec) { mpf_set_prec(mp, prec); }$/;"	f	class:__gmp_expr
set_prec_raw	gmpxx.h	/^  void set_prec_raw(mp_bitcnt_t prec) { mpf_set_prec_raw(mp, prec); }$/;"	f	class:__gmp_expr
set_str	gmpxx.h	/^  int set_str(const char *s, int base)$/;"	f	class:__gmp_expr
set_str	gmpxx.h	/^  int set_str(const std::string &s, int base)$/;"	f	class:__gmp_expr
set_str	mini-gmp/tests/mini-random.c	/^set_str (mpz_t r, const char *s)$/;"	f	file:
set_str_dc_threshold	tune/tuneup.c	/^mp_size_t  set_str_dc_threshold         = MP_SIZE_T_MAX;$/;"	v
set_str_precompute_threshold	tune/tuneup.c	/^mp_size_t  set_str_precompute_threshold = MP_SIZE_T_MAX;$/;"	v
setup_error_handler	demos/pexpr.c	/^setup_error_handler (void)$/;"	f
sgi_addr	tune/time.c	/^volatile unsigned  *sgi_addr;$/;"	v
sgi_unittime	tune/time.c	/^static double  sgi_unittime;$/;"	v	file:
sgi_works_p	tune/time.c	/^sgi_works_p (void)$/;"	f
sh_status	tests/rand/findlc.c	/^sh_status (int sig)$/;"	f	file:
shift	gmp-impl.h	/^  mp_size_t shift;		\/* weight of lowest limb, in limb base B *\/$/;"	m	struct:powers
shift	mini-gmp/mini-gmp.c	/^  unsigned shift;$/;"	m	struct:gmp_div_inverse	file:
shift	tests/devel/try.c	/^  char  shift;$/;"	m	struct:try_t	file:
shift	tests/devel/try.c	/^unsigned long   shift;$/;"	v
short	demos/calc/calc.c	348;"	d	file:
showbase	gmp-impl.h	/^  int         showbase;      \/* choices above *\/$/;"	m	struct:doprnt_params_t
showpoint	gmp-impl.h	/^  int         showpoint;     \/* if radix point always shown *\/$/;"	m	struct:doprnt_params_t
showtrailing	gmp-impl.h	/^  int         showtrailing;  \/* if trailing zeros wanted *\/$/;"	m	struct:doprnt_params_t
shrt_max_def	tests/t-constants.c	/^const char *shrt_max_def = "defined";$/;"	v
shrt_max_def	tests/t-constants.c	/^const char *shrt_max_def = "not defined";$/;"	v
sieve_region	demos/primes.c	/^sieve_region (unsigned char *s, mpz_t fr, unsigned long rsize)$/;"	f
sig	gmp-impl.h	/^      gmp_uint_least32_t sig:1;$/;"	m	struct:double_extract::__anon18
sig	gmp-impl.h	/^      gmp_uint_least32_t sig:1;$/;"	m	struct:ieee_double_extract::__anon15
sig	gmp-impl.h	/^      gmp_uint_least32_t sig:1;$/;"	m	struct:ieee_double_extract::__anon16
sig	gmp-impl.h	/^      gmp_uint_least32_t sig:1;$/;"	m	struct:ieee_double_extract::__anon17
sign	gmp-impl.h	/^  char        sign;          \/* '+', ' ', or '\\0' *\/$/;"	m	struct:doprnt_params_t
signal	tests/spinner.c	40;"	d	file:
signaling_NaN	gmpxx.h	/^    static mpf_class signaling_NaN() { return mpf_class(); }$/;"	f	class:std::numeric_limits
signaling_NaN	gmpxx.h	/^    static mpq_class signaling_NaN() { return mpq_class(); }$/;"	f	class:std::numeric_limits
signaling_NaN	gmpxx.h	/^    static mpz_class signaling_NaN() { return mpz_class(); }$/;"	f	class:std::numeric_limits
size	gmp-impl.h	/^  size_t		  size;	  \/* bytes, including header *\/$/;"	m	struct:tmp_reentrant_t
size	gmp-impl.h	/^  size_t                    size;$/;"	m	struct:tmp_debug_entry_t
size	gmp-impl.h	/^  size_t  size;$/;"	m	struct:gmp_asprintf_t
size	gmp-impl.h	/^  size_t  size;$/;"	m	struct:gmp_snprintf_t
size	mpn/m88k/mc88110/add_n.S	/^#define size	r5$/;"	d
size	mpn/m88k/mc88110/sub_n.S	/^#define size	r5$/;"	d
size	tests/devel/try.c	/^  char  size;$/;"	m	struct:try_t	file:
size	tests/devel/try.c	/^  mp_size_t  size;$/;"	m	struct:dest_t	file:
size	tests/devel/try.c	/^  mp_size_t  size;$/;"	m	struct:region_t	file:
size	tests/devel/try.c	/^mp_size_t       size;$/;"	v
size	tests/memory.c	/^  size_t         size;$/;"	m	struct:header	file:
size	tune/speed.h	/^    mp_size_t size;$/;"	m	struct:speed_params::__anon39
size	tune/speed.h	/^  mp_size_t  size;	\/* size of both arguments *\/$/;"	m	struct:speed_params
size	tune/tuneup.c	/^  mp_size_t  size;$/;"	m	struct:dat_t	file:
size2	tests/devel/try.c	/^  char  size2;$/;"	m	struct:try_t	file:
size2	tests/devel/try.c	/^mp_size_t       size2;$/;"	v
size_allocnum	tune/speed.c	/^mp_size_t  size_allocnum = 0;$/;"	v
size_array	tune/speed.c	/^} *size_array = NULL;$/;"	v	typeref:struct:size_array_t
size_array_t	tune/speed.c	/^struct size_array_t {$/;"	s	file:
size_extra	tune/tuneup.c	/^  mp_size_t         size_extra;$/;"	m	struct:param_t	file:
size_num	tune/speed.c	/^mp_size_t  size_num = 0;$/;"	v
sizes_test	tests/mpq/t-cmp_z.c	/^sizes_test (int m)$/;"	f
skip_white	scanf/doscan.c	/^skip_white (const struct gmp_doscan_funs_t *funs, void *data)$/;"	f	file:
skipspace	demos/pexpr.c	/^skipspace (char *str)$/;"	f
small_prec	tests/cxx/t-prec.cc	/^small_prec = 64, medium_prec = 128, large_prec = 192, very_large_prec = 256;$/;"	v
smallexaustive	tests/mpz/t-bin.c	/^smallexaustive (unsigned int count)$/;"	f
smul_ppmm	longlong.h	1382;"	d
smul_ppmm	longlong.h	1392;"	d
smul_ppmm	longlong.h	1505;"	d
smul_ppmm	longlong.h	1548;"	d
smul_ppmm	longlong.h	1835;"	d
smul_ppmm	longlong.h	2056;"	d
smul_ppmm	longlong.h	522;"	d
smul_ppmm	longlong.h	573;"	d
smul_ppmm	longlong.h	599;"	d
smul_ppmm	longlong.h	786;"	d
some	tests/t-modlinv.c	/^some (void)$/;"	f
source_each_t	tests/devel/try.c	/^struct source_each_t {$/;"	s	file:
source_t	tests/devel/try.c	/^struct source_t {$/;"	s	file:
sp	demos/calc/calc.c	/^mpz_ptr  sp = stack[0];$/;"	v
sp	tune/speed.c	/^struct speed_params  sp;$/;"	v	typeref:struct:speed_params
sp1	mpn/generic/mulmod_bnm1.c	156;"	d	file:
sp1	mpn/generic/mulmod_bnm1.c	333;"	d	file:
sp1	mpn/generic/sqrmod_bnm1.c	142;"	d	file:
sp1	mpn/generic/sqrmod_bnm1.c	291;"	d	file:
sp1	mpn/mulmod_bnm1.c	156;"	d	file:
sp1	mpn/mulmod_bnm1.c	333;"	d	file:
sp1	mpn/sqrmod_bnm1.c	142;"	d	file:
sp1	mpn/sqrmod_bnm1.c	291;"	d	file:
spectral_test	tests/rand/statlib.c	/^spectral_test (mpf_t rop[], unsigned int T, mpz_t a, mpz_t m)$/;"	f
speed_MPN_COPY	tune/common.c	/^speed_MPN_COPY (struct speed_params *s)$/;"	f
speed_MPN_COPY_DECR	tune/common.c	/^speed_MPN_COPY_DECR (struct speed_params *s)$/;"	f
speed_MPN_COPY_INCR	tune/common.c	/^speed_MPN_COPY_INCR (struct speed_params *s)$/;"	f
speed_MPN_ZERO	tune/common.c	/^speed_MPN_ZERO (struct speed_params *s)$/;"	f
speed_binvert_limb	tune/common.c	/^speed_binvert_limb (struct speed_params *s)$/;"	f
speed_binvert_limb_arith	tune/modlinv.c	/^speed_binvert_limb_arith (struct speed_params *s)$/;"	f
speed_binvert_limb_cond	tune/modlinv.c	/^speed_binvert_limb_cond (struct speed_params *s)$/;"	f
speed_binvert_limb_loop	tune/modlinv.c	/^speed_binvert_limb_loop (struct speed_params *s)$/;"	f
speed_binvert_limb_mul1	tune/modlinv.c	/^speed_binvert_limb_mul1 (struct speed_params *s)$/;"	f
speed_cache_fill	tune/common.c	/^speed_cache_fill (struct speed_params *s)$/;"	f
speed_count_leading_zeros	tune/common.c	/^speed_count_leading_zeros (struct speed_params *s)$/;"	f
speed_count_trailing_zeros	tune/common.c	/^speed_count_trailing_zeros (struct speed_params *s)$/;"	f
speed_cyclecounter	tune/time.c	257;"	d	file:
speed_cyclecounter_diff	tune/time.c	/^speed_cyclecounter_diff (const unsigned end[2], const unsigned start[2])$/;"	f
speed_cycletime	tune/time.c	/^double  speed_cycletime = 0.0;$/;"	v
speed_cycletime_fail	tune/freq.c	/^speed_cycletime_fail (const char *str)$/;"	f
speed_cycletime_init	tune/freq.c	/^speed_cycletime_init (void)$/;"	f
speed_cycletime_need_cycles	tune/freq.c	/^speed_cycletime_need_cycles (void)$/;"	f
speed_cycletime_need_seconds	tune/freq.c	/^speed_cycletime_need_seconds (void)$/;"	f
speed_endtime	tune/time.c	/^speed_endtime (void)$/;"	f
speed_function_t	tune/speed.h	/^typedef double (*speed_function_t) (struct speed_params *);$/;"	t
speed_gmp_allocate_free	tune/common.c	/^speed_gmp_allocate_free (struct speed_params *s)$/;"	f
speed_gmp_allocate_reallocate_free	tune/common.c	/^speed_gmp_allocate_reallocate_free (struct speed_params *s)$/;"	f
speed_gmp_randseed	tune/common.c	/^speed_gmp_randseed (struct speed_params *s)$/;"	f
speed_gmp_randseed_ui	tune/common.c	/^speed_gmp_randseed_ui (struct speed_params *s)$/;"	f
speed_invert_limb	tune/common.c	/^speed_invert_limb (struct speed_params *s)$/;"	f
speed_malloc_free	tune/common.c	/^speed_malloc_free (struct speed_params *s)$/;"	f
speed_malloc_realloc_free	tune/common.c	/^speed_malloc_realloc_free (struct speed_params *s)$/;"	f
speed_mean_calls	tune/speed-ext.c	/^speed_mean_calls (struct speed_params *s)$/;"	f
speed_mean_open	tune/speed-ext.c	/^speed_mean_open (struct speed_params *s)$/;"	f
speed_mean_open2	tune/speed-ext.c	/^speed_mean_open2 (struct speed_params *s)$/;"	f
speed_measure	tune/common.c	/^speed_measure (double (*fun) (struct speed_params *s), struct speed_params *s)$/;"	f
speed_memcpy	tune/common.c	/^speed_memcpy (struct speed_params *s)$/;"	f
speed_mftb_diff	tune/time.c	/^speed_mftb_diff (const unsigned end[2], const unsigned start[2])$/;"	f
speed_mpf_init_clear	tune/common.c	/^speed_mpf_init_clear (struct speed_params *s)$/;"	f
speed_mpn_add_1	tune/common.c	/^speed_mpn_add_1 (struct speed_params *s)$/;"	f
speed_mpn_add_1_inplace	tune/common.c	/^speed_mpn_add_1_inplace (struct speed_params *s)$/;"	f
speed_mpn_add_err1_n	tune/common.c	/^speed_mpn_add_err1_n (struct speed_params *s)$/;"	f
speed_mpn_add_err2_n	tune/common.c	/^speed_mpn_add_err2_n (struct speed_params *s)$/;"	f
speed_mpn_add_err3_n	tune/common.c	/^speed_mpn_add_err3_n (struct speed_params *s)$/;"	f
speed_mpn_add_n	tune/common.c	/^speed_mpn_add_n (struct speed_params *s)$/;"	f
speed_mpn_add_n_sub_n	tune/common.c	/^speed_mpn_add_n_sub_n (struct speed_params *s)$/;"	f
speed_mpn_addlsh1_n	tune/common.c	/^speed_mpn_addlsh1_n (struct speed_params *s)$/;"	f
speed_mpn_addlsh1_n_ip1	tune/common.c	/^speed_mpn_addlsh1_n_ip1 (struct speed_params *s)$/;"	f
speed_mpn_addlsh1_n_ip2	tune/common.c	/^speed_mpn_addlsh1_n_ip2 (struct speed_params *s)$/;"	f
speed_mpn_addlsh2_n	tune/common.c	/^speed_mpn_addlsh2_n (struct speed_params *s)$/;"	f
speed_mpn_addlsh2_n_ip1	tune/common.c	/^speed_mpn_addlsh2_n_ip1 (struct speed_params *s)$/;"	f
speed_mpn_addlsh2_n_ip2	tune/common.c	/^speed_mpn_addlsh2_n_ip2 (struct speed_params *s)$/;"	f
speed_mpn_addlsh_n	tune/common.c	/^speed_mpn_addlsh_n (struct speed_params *s)$/;"	f
speed_mpn_addlsh_n_ip1	tune/common.c	/^speed_mpn_addlsh_n_ip1 (struct speed_params *s)$/;"	f
speed_mpn_addlsh_n_ip2	tune/common.c	/^speed_mpn_addlsh_n_ip2 (struct speed_params *s)$/;"	f
speed_mpn_addmul_1	tune/common.c	/^speed_mpn_addmul_1 (struct speed_params *s)$/;"	f
speed_mpn_addmul_2	tune/common.c	/^speed_mpn_addmul_2 (struct speed_params *s)$/;"	f
speed_mpn_addmul_3	tune/common.c	/^speed_mpn_addmul_3 (struct speed_params *s)$/;"	f
speed_mpn_addmul_4	tune/common.c	/^speed_mpn_addmul_4 (struct speed_params *s)$/;"	f
speed_mpn_addmul_5	tune/common.c	/^speed_mpn_addmul_5 (struct speed_params *s)$/;"	f
speed_mpn_addmul_6	tune/common.c	/^speed_mpn_addmul_6 (struct speed_params *s)$/;"	f
speed_mpn_addmul_7	tune/common.c	/^speed_mpn_addmul_7 (struct speed_params *s)$/;"	f
speed_mpn_addmul_8	tune/common.c	/^speed_mpn_addmul_8 (struct speed_params *s)$/;"	f
speed_mpn_and_n	tune/common.c	/^speed_mpn_and_n (struct speed_params *s)$/;"	f
speed_mpn_andn_n	tune/common.c	/^speed_mpn_andn_n (struct speed_params *s)$/;"	f
speed_mpn_bc_mulmod_bnm1	tune/common.c	/^speed_mpn_bc_mulmod_bnm1 (struct speed_params *s)$/;"	f
speed_mpn_bc_set_str	tune/common.c	/^speed_mpn_bc_set_str (struct speed_params *s)$/;"	f
speed_mpn_bdiv_dbm1c	tune/common.c	/^speed_mpn_bdiv_dbm1c (struct speed_params *s)$/;"	f
speed_mpn_bdiv_q_1	tune/common.c	/^speed_mpn_bdiv_q_1 (struct speed_params *s)$/;"	f
speed_mpn_binvert	tune/common.c	/^speed_mpn_binvert (struct speed_params *s)$/;"	f
speed_mpn_broot	tune/common.c	/^speed_mpn_broot (struct speed_params *s)$/;"	f
speed_mpn_broot_invm1	tune/common.c	/^speed_mpn_broot_invm1 (struct speed_params *s)$/;"	f
speed_mpn_brootinv	tune/common.c	/^speed_mpn_brootinv (struct speed_params *s)$/;"	f
speed_mpn_cnd_add_n	tune/common.c	/^speed_mpn_cnd_add_n (struct speed_params *s)$/;"	f
speed_mpn_cnd_sub_n	tune/common.c	/^speed_mpn_cnd_sub_n (struct speed_params *s)$/;"	f
speed_mpn_com	tune/common.c	/^speed_mpn_com (struct speed_params *s)$/;"	f
speed_mpn_copyd	tune/common.c	/^speed_mpn_copyd (struct speed_params *s)$/;"	f
speed_mpn_copyi	tune/common.c	/^speed_mpn_copyi (struct speed_params *s)$/;"	f
speed_mpn_dcpi1_bdiv_q	tune/common.c	/^speed_mpn_dcpi1_bdiv_q (struct speed_params *s)$/;"	f
speed_mpn_dcpi1_bdiv_qr	tune/common.c	/^speed_mpn_dcpi1_bdiv_qr (struct speed_params *s)$/;"	f
speed_mpn_dcpi1_div_qr	tune/common.c	/^speed_mpn_dcpi1_div_qr (struct speed_params *s)$/;"	f
speed_mpn_dcpi1_divappr_q	tune/common.c	/^speed_mpn_dcpi1_divappr_q (struct speed_params *s)$/;"	f
speed_mpn_div_qr_1	tune/common.c	/^speed_mpn_div_qr_1 (struct speed_params *s)$/;"	f
speed_mpn_div_qr_1_tune	tune/tuneup.c	/^speed_mpn_div_qr_1_tune (struct speed_params *s)$/;"	f
speed_mpn_div_qr_1n_pi1	tune/common.c	/^speed_mpn_div_qr_1n_pi1 (struct speed_params *s)$/;"	f
speed_mpn_div_qr_1n_pi1_1	tune/common.c	/^speed_mpn_div_qr_1n_pi1_1 (struct speed_params *s)$/;"	f
speed_mpn_div_qr_1n_pi1_2	tune/common.c	/^speed_mpn_div_qr_1n_pi1_2 (struct speed_params *s)$/;"	f
speed_mpn_div_qr_2n	tune/common.c	/^speed_mpn_div_qr_2n (struct speed_params *s)$/;"	f
speed_mpn_div_qr_2u	tune/common.c	/^speed_mpn_div_qr_2u (struct speed_params *s)$/;"	f
speed_mpn_divexact_1	tune/common.c	/^speed_mpn_divexact_1 (struct speed_params *s)$/;"	f
speed_mpn_divexact_by3	tune/common.c	/^speed_mpn_divexact_by3 (struct speed_params *s)$/;"	f
speed_mpn_divrem_1	tune/common.c	/^speed_mpn_divrem_1 (struct speed_params *s)$/;"	f
speed_mpn_divrem_1_div	tune/common.c	/^speed_mpn_divrem_1_div (struct speed_params *s)$/;"	f
speed_mpn_divrem_1_inv	tune/common.c	/^speed_mpn_divrem_1_inv (struct speed_params *s)$/;"	f
speed_mpn_divrem_1_tune	tune/tuneup.c	/^speed_mpn_divrem_1_tune (struct speed_params *s)$/;"	f
speed_mpn_divrem_1c	tune/common.c	/^speed_mpn_divrem_1c (struct speed_params *s)$/;"	f
speed_mpn_divrem_1cf	tune/common.c	/^speed_mpn_divrem_1cf (struct speed_params *s)$/;"	f
speed_mpn_divrem_1f	tune/common.c	/^speed_mpn_divrem_1f (struct speed_params *s)$/;"	f
speed_mpn_divrem_1f_div	tune/common.c	/^speed_mpn_divrem_1f_div (struct speed_params *s)$/;"	f
speed_mpn_divrem_1f_inv	tune/common.c	/^speed_mpn_divrem_1f_inv (struct speed_params *s)$/;"	f
speed_mpn_divrem_2	tune/common.c	/^speed_mpn_divrem_2 (struct speed_params *s)$/;"	f
speed_mpn_divrem_2_div	tune/common.c	/^speed_mpn_divrem_2_div (struct speed_params *s)$/;"	f
speed_mpn_divrem_2_inv	tune/common.c	/^speed_mpn_divrem_2_inv (struct speed_params *s)$/;"	f
speed_mpn_fft_mul	tune/common.c	/^speed_mpn_fft_mul (struct speed_params *s)$/;"	f
speed_mpn_fft_sqr	tune/common.c	/^speed_mpn_fft_sqr (struct speed_params *s)$/;"	f
speed_mpn_fib2_ui	tune/common.c	/^speed_mpn_fib2_ui (struct speed_params *s)$/;"	f
speed_mpn_gcd	tune/common.c	/^speed_mpn_gcd (struct speed_params *s)$/;"	f
speed_mpn_gcd_1	tune/common.c	/^speed_mpn_gcd_1 (struct speed_params *s)$/;"	f
speed_mpn_gcd_1N	tune/common.c	/^speed_mpn_gcd_1N (struct speed_params *s)$/;"	f
speed_mpn_gcdext	tune/common.c	/^speed_mpn_gcdext (struct speed_params *s)$/;"	f
speed_mpn_gcdext_double	tune/common.c	/^speed_mpn_gcdext_double (struct speed_params *s)$/;"	f
speed_mpn_gcdext_one_double	tune/common.c	/^speed_mpn_gcdext_one_double (struct speed_params *s)$/;"	f
speed_mpn_gcdext_one_single	tune/common.c	/^speed_mpn_gcdext_one_single (struct speed_params *s)$/;"	f
speed_mpn_gcdext_single	tune/common.c	/^speed_mpn_gcdext_single (struct speed_params *s)$/;"	f
speed_mpn_get_str	tune/common.c	/^speed_mpn_get_str (struct speed_params *s)$/;"	f
speed_mpn_hamdist	tune/common.c	/^speed_mpn_hamdist (struct speed_params *s)$/;"	f
speed_mpn_hgcd	tune/common.c	/^speed_mpn_hgcd (struct speed_params *s)$/;"	f
speed_mpn_hgcd_appr	tune/common.c	/^speed_mpn_hgcd_appr (struct speed_params *s)$/;"	f
speed_mpn_hgcd_appr_lehmer	tune/common.c	/^speed_mpn_hgcd_appr_lehmer (struct speed_params *s)$/;"	f
speed_mpn_hgcd_lehmer	tune/common.c	/^speed_mpn_hgcd_lehmer (struct speed_params *s)$/;"	f
speed_mpn_hgcd_reduce	tune/common.c	/^speed_mpn_hgcd_reduce (struct speed_params *s)$/;"	f
speed_mpn_hgcd_reduce_1	tune/common.c	/^speed_mpn_hgcd_reduce_1 (struct speed_params *s)$/;"	f
speed_mpn_hgcd_reduce_2	tune/common.c	/^speed_mpn_hgcd_reduce_2 (struct speed_params *s)$/;"	f
speed_mpn_invert	tune/common.c	/^speed_mpn_invert (struct speed_params *s)$/;"	f
speed_mpn_invertappr	tune/common.c	/^speed_mpn_invertappr (struct speed_params *s)$/;"	f
speed_mpn_ior_n	tune/common.c	/^speed_mpn_ior_n (struct speed_params *s)$/;"	f
speed_mpn_iorn_n	tune/common.c	/^speed_mpn_iorn_n (struct speed_params *s)$/;"	f
speed_mpn_jacobi_base	tune/common.c	/^speed_mpn_jacobi_base (struct speed_params *s)$/;"	f
speed_mpn_jacobi_base_1	tune/common.c	/^speed_mpn_jacobi_base_1 (struct speed_params *s)$/;"	f
speed_mpn_jacobi_base_2	tune/common.c	/^speed_mpn_jacobi_base_2 (struct speed_params *s)$/;"	f
speed_mpn_jacobi_base_3	tune/common.c	/^speed_mpn_jacobi_base_3 (struct speed_params *s)$/;"	f
speed_mpn_jacobi_base_4	tune/common.c	/^speed_mpn_jacobi_base_4 (struct speed_params *s)$/;"	f
speed_mpn_lshift	tune/common.c	/^speed_mpn_lshift (struct speed_params *s)$/;"	f
speed_mpn_lshiftc	tune/common.c	/^speed_mpn_lshiftc (struct speed_params *s)$/;"	f
speed_mpn_matrix22_mul	tune/common.c	/^speed_mpn_matrix22_mul (struct speed_params *s)$/;"	f
speed_mpn_mod_1	tune/common.c	/^speed_mpn_mod_1 (struct speed_params *s)$/;"	f
speed_mpn_mod_1_1	tune/common.c	/^speed_mpn_mod_1_1 (struct speed_params *s)$/;"	f
speed_mpn_mod_1_1_1	tune/common.c	/^speed_mpn_mod_1_1_1 (struct speed_params *s)$/;"	f
speed_mpn_mod_1_1_2	tune/common.c	/^speed_mpn_mod_1_1_2 (struct speed_params *s)$/;"	f
speed_mpn_mod_1_2	tune/common.c	/^speed_mpn_mod_1_2 (struct speed_params *s)$/;"	f
speed_mpn_mod_1_3	tune/common.c	/^speed_mpn_mod_1_3 (struct speed_params *s)$/;"	f
speed_mpn_mod_1_4	tune/common.c	/^speed_mpn_mod_1_4 (struct speed_params *s)$/;"	f
speed_mpn_mod_1_div	tune/common.c	/^speed_mpn_mod_1_div (struct speed_params *s)$/;"	f
speed_mpn_mod_1_inv	tune/common.c	/^speed_mpn_mod_1_inv (struct speed_params *s)$/;"	f
speed_mpn_mod_1_tune	tune/tuneup.c	/^speed_mpn_mod_1_tune (struct speed_params *s)$/;"	f
speed_mpn_mod_1c	tune/common.c	/^speed_mpn_mod_1c (struct speed_params *s)$/;"	f
speed_mpn_mod_34lsub1	tune/common.c	/^speed_mpn_mod_34lsub1 (struct speed_params *s)$/;"	f
speed_mpn_modexact_1_odd	tune/common.c	/^speed_mpn_modexact_1_odd (struct speed_params *s)$/;"	f
speed_mpn_modexact_1c_odd	tune/common.c	/^speed_mpn_modexact_1c_odd (struct speed_params *s)$/;"	f
speed_mpn_mu_bdiv_q	tune/common.c	/^speed_mpn_mu_bdiv_q (struct speed_params *s)$/;"	f
speed_mpn_mu_bdiv_qr	tune/common.c	/^speed_mpn_mu_bdiv_qr (struct speed_params *s)$/;"	f
speed_mpn_mu_div_q	tune/common.c	/^speed_mpn_mu_div_q (struct speed_params *s)$/;"	f
speed_mpn_mu_div_qr	tune/common.c	/^speed_mpn_mu_div_qr (struct speed_params *s)$/;"	f
speed_mpn_mu_divappr_q	tune/common.c	/^speed_mpn_mu_divappr_q (struct speed_params *s)$/;"	f
speed_mpn_mul	tune/common.c	/^speed_mpn_mul (struct speed_params *s)$/;"	f
speed_mpn_mul_1	tune/common.c	/^speed_mpn_mul_1 (struct speed_params *s)$/;"	f
speed_mpn_mul_1_inplace	tune/common.c	/^speed_mpn_mul_1_inplace (struct speed_params *s)$/;"	f
speed_mpn_mul_2	tune/common.c	/^speed_mpn_mul_2 (struct speed_params *s)$/;"	f
speed_mpn_mul_3	tune/common.c	/^speed_mpn_mul_3 (struct speed_params *s)$/;"	f
speed_mpn_mul_4	tune/common.c	/^speed_mpn_mul_4 (struct speed_params *s)$/;"	f
speed_mpn_mul_5	tune/common.c	/^speed_mpn_mul_5 (struct speed_params *s)$/;"	f
speed_mpn_mul_6	tune/common.c	/^speed_mpn_mul_6 (struct speed_params *s)$/;"	f
speed_mpn_mul_basecase	tune/common.c	/^speed_mpn_mul_basecase (struct speed_params *s)$/;"	f
speed_mpn_mul_fft	tune/common.c	/^speed_mpn_mul_fft (struct speed_params *s)$/;"	f
speed_mpn_mul_fft_full	tune/common.c	/^speed_mpn_mul_fft_full (struct speed_params *s)$/;"	f
speed_mpn_mul_fft_full_sqr	tune/common.c	/^speed_mpn_mul_fft_full_sqr (struct speed_params *s)$/;"	f
speed_mpn_mul_fft_sqr	tune/common.c	/^speed_mpn_mul_fft_sqr (struct speed_params *s)$/;"	f
speed_mpn_mul_n	tune/common.c	/^speed_mpn_mul_n (struct speed_params *s)$/;"	f
speed_mpn_mul_n_sqr	tune/common.c	/^speed_mpn_mul_n_sqr (struct speed_params *s)$/;"	f
speed_mpn_mullo_basecase	tune/common.c	/^speed_mpn_mullo_basecase (struct speed_params *s)$/;"	f
speed_mpn_mullo_n	tune/common.c	/^speed_mpn_mullo_n (struct speed_params *s)$/;"	f
speed_mpn_mulmid	tune/common.c	/^speed_mpn_mulmid (struct speed_params *s)$/;"	f
speed_mpn_mulmid_basecase	tune/common.c	/^speed_mpn_mulmid_basecase (struct speed_params *s)$/;"	f
speed_mpn_mulmid_n	tune/common.c	/^speed_mpn_mulmid_n (struct speed_params *s)$/;"	f
speed_mpn_mulmod_bnm1	tune/common.c	/^speed_mpn_mulmod_bnm1 (struct speed_params *s)$/;"	f
speed_mpn_mulmod_bnm1_rounded	tune/common.c	/^speed_mpn_mulmod_bnm1_rounded (struct speed_params *s)$/;"	f
speed_mpn_mupi_div_qr	tune/common.c	/^speed_mpn_mupi_div_qr (struct speed_params *s)$/;"	f
speed_mpn_nand_n	tune/common.c	/^speed_mpn_nand_n (struct speed_params *s)$/;"	f
speed_mpn_neg	tune/common.c	/^speed_mpn_neg (struct speed_params *s)$/;"	f
speed_mpn_ni_invertappr	tune/common.c	/^speed_mpn_ni_invertappr (struct speed_params *s)$/;"	f
speed_mpn_nior_n	tune/common.c	/^speed_mpn_nior_n (struct speed_params *s)$/;"	f
speed_mpn_nussbaumer_mul	tune/common.c	/^speed_mpn_nussbaumer_mul (struct speed_params *s)$/;"	f
speed_mpn_nussbaumer_mul_sqr	tune/common.c	/^speed_mpn_nussbaumer_mul_sqr (struct speed_params *s)$/;"	f
speed_mpn_pi1_bdiv_q_1	tune/common.c	/^speed_mpn_pi1_bdiv_q_1 (struct speed_params *s)$/;"	f
speed_mpn_popcount	tune/common.c	/^speed_mpn_popcount (struct speed_params *s)$/;"	f
speed_mpn_pre_set_str	tune/tuneup.c	/^speed_mpn_pre_set_str (struct speed_params *s)$/;"	f
speed_mpn_preinv_divrem_1	tune/common.c	/^speed_mpn_preinv_divrem_1 (struct speed_params *s)$/;"	f
speed_mpn_preinv_divrem_1f	tune/common.c	/^speed_mpn_preinv_divrem_1f (struct speed_params *s)$/;"	f
speed_mpn_preinv_mod_1	tune/common.c	/^speed_mpn_preinv_mod_1 (struct speed_params *s)$/;"	f
speed_mpn_redc_1	tune/common.c	/^speed_mpn_redc_1 (struct speed_params *s)$/;"	f
speed_mpn_redc_2	tune/common.c	/^speed_mpn_redc_2 (struct speed_params *s)$/;"	f
speed_mpn_redc_n	tune/common.c	/^speed_mpn_redc_n (struct speed_params *s)$/;"	f
speed_mpn_root	tune/common.c	/^speed_mpn_root (struct speed_params *s)$/;"	f
speed_mpn_rootrem	tune/common.c	/^speed_mpn_rootrem (struct speed_params *s)$/;"	f
speed_mpn_rsblsh1_n	tune/common.c	/^speed_mpn_rsblsh1_n (struct speed_params *s)$/;"	f
speed_mpn_rsblsh2_n	tune/common.c	/^speed_mpn_rsblsh2_n (struct speed_params *s)$/;"	f
speed_mpn_rsblsh_n	tune/common.c	/^speed_mpn_rsblsh_n (struct speed_params *s)$/;"	f
speed_mpn_rsh1add_n	tune/common.c	/^speed_mpn_rsh1add_n (struct speed_params *s)$/;"	f
speed_mpn_rsh1sub_n	tune/common.c	/^speed_mpn_rsh1sub_n (struct speed_params *s)$/;"	f
speed_mpn_rshift	tune/common.c	/^speed_mpn_rshift (struct speed_params *s)$/;"	f
speed_mpn_sbordcpi1_div_qr	tune/tuneup.c	/^speed_mpn_sbordcpi1_div_qr (struct speed_params *s)$/;"	f	file:
speed_mpn_sbpi1_bdiv_q	tune/common.c	/^speed_mpn_sbpi1_bdiv_q (struct speed_params *s)$/;"	f
speed_mpn_sbpi1_bdiv_qr	tune/common.c	/^speed_mpn_sbpi1_bdiv_qr (struct speed_params *s)$/;"	f
speed_mpn_sbpi1_div_qr	tune/common.c	/^speed_mpn_sbpi1_div_qr (struct speed_params *s)$/;"	f
speed_mpn_sbpi1_divappr_q	tune/common.c	/^speed_mpn_sbpi1_divappr_q (struct speed_params *s)$/;"	f
speed_mpn_sec_invert	tune/common.c	/^speed_mpn_sec_invert (struct speed_params *s)$/;"	f
speed_mpn_sec_tabselect	tune/common.c	/^speed_mpn_sec_tabselect (struct speed_params *s)$/;"	f
speed_mpn_set_str	tune/common.c	/^speed_mpn_set_str (struct speed_params *s)$/;"	f
speed_mpn_sqr	tune/common.c	/^speed_mpn_sqr (struct speed_params *s)$/;"	f
speed_mpn_sqr_basecase	tune/common.c	/^speed_mpn_sqr_basecase (struct speed_params *s)$/;"	f
speed_mpn_sqr_diag_addlsh1	tune/common.c	/^speed_mpn_sqr_diag_addlsh1 (struct speed_params *s)$/;"	f
speed_mpn_sqr_diagonal	tune/common.c	/^speed_mpn_sqr_diagonal (struct speed_params *s)$/;"	f
speed_mpn_sqrlo	tune/common.c	/^speed_mpn_sqrlo (struct speed_params *s)$/;"	f
speed_mpn_sqrlo_basecase	tune/common.c	/^speed_mpn_sqrlo_basecase (struct speed_params *s)$/;"	f
speed_mpn_sqrmod_bnm1	tune/common.c	/^speed_mpn_sqrmod_bnm1 (struct speed_params *s)$/;"	f
speed_mpn_sqrt	tune/common.c	/^speed_mpn_sqrt (struct speed_params *s)$/;"	f
speed_mpn_sqrtrem	tune/common.c	/^speed_mpn_sqrtrem (struct speed_params *s)$/;"	f
speed_mpn_sub_1	tune/common.c	/^speed_mpn_sub_1 (struct speed_params *s)$/;"	f
speed_mpn_sub_1_inplace	tune/common.c	/^speed_mpn_sub_1_inplace (struct speed_params *s)$/;"	f
speed_mpn_sub_err1_n	tune/common.c	/^speed_mpn_sub_err1_n (struct speed_params *s)$/;"	f
speed_mpn_sub_err2_n	tune/common.c	/^speed_mpn_sub_err2_n (struct speed_params *s)$/;"	f
speed_mpn_sub_err3_n	tune/common.c	/^speed_mpn_sub_err3_n (struct speed_params *s)$/;"	f
speed_mpn_sub_n	tune/common.c	/^speed_mpn_sub_n (struct speed_params *s)$/;"	f
speed_mpn_sublsh1_n	tune/common.c	/^speed_mpn_sublsh1_n (struct speed_params *s)$/;"	f
speed_mpn_sublsh1_n_ip1	tune/common.c	/^speed_mpn_sublsh1_n_ip1 (struct speed_params *s)$/;"	f
speed_mpn_sublsh2_n	tune/common.c	/^speed_mpn_sublsh2_n (struct speed_params *s)$/;"	f
speed_mpn_sublsh2_n_ip1	tune/common.c	/^speed_mpn_sublsh2_n_ip1 (struct speed_params *s)$/;"	f
speed_mpn_sublsh_n	tune/common.c	/^speed_mpn_sublsh_n (struct speed_params *s)$/;"	f
speed_mpn_sublsh_n_ip1	tune/common.c	/^speed_mpn_sublsh_n_ip1 (struct speed_params *s)$/;"	f
speed_mpn_submul_1	tune/common.c	/^speed_mpn_submul_1 (struct speed_params *s)$/;"	f
speed_mpn_toom22_mul	tune/common.c	/^speed_mpn_toom22_mul (struct speed_params *s)$/;"	f
speed_mpn_toom2_sqr	tune/common.c	/^speed_mpn_toom2_sqr (struct speed_params *s)$/;"	f
speed_mpn_toom32_for_toom43_mul	tune/common.c	/^speed_mpn_toom32_for_toom43_mul (struct speed_params *s)$/;"	f
speed_mpn_toom32_for_toom53_mul	tune/common.c	/^speed_mpn_toom32_for_toom53_mul (struct speed_params *s)$/;"	f
speed_mpn_toom32_mul	tune/common.c	/^speed_mpn_toom32_mul (struct speed_params *s)$/;"	f
speed_mpn_toom33_mul	tune/common.c	/^speed_mpn_toom33_mul (struct speed_params *s)$/;"	f
speed_mpn_toom3_sqr	tune/common.c	/^speed_mpn_toom3_sqr (struct speed_params *s)$/;"	f
speed_mpn_toom42_for_toom53_mul	tune/common.c	/^speed_mpn_toom42_for_toom53_mul (struct speed_params *s)$/;"	f
speed_mpn_toom42_mul	tune/common.c	/^speed_mpn_toom42_mul (struct speed_params *s)$/;"	f
speed_mpn_toom42_mulmid	tune/common.c	/^speed_mpn_toom42_mulmid (struct speed_params *s)$/;"	f
speed_mpn_toom43_for_toom32_mul	tune/common.c	/^speed_mpn_toom43_for_toom32_mul (struct speed_params *s)$/;"	f
speed_mpn_toom43_for_toom54_mul	tune/common.c	/^speed_mpn_toom43_for_toom54_mul (struct speed_params *s)$/;"	f
speed_mpn_toom43_mul	tune/common.c	/^speed_mpn_toom43_mul (struct speed_params *s)$/;"	f
speed_mpn_toom44_mul	tune/common.c	/^speed_mpn_toom44_mul (struct speed_params *s)$/;"	f
speed_mpn_toom4_sqr	tune/common.c	/^speed_mpn_toom4_sqr (struct speed_params *s)$/;"	f
speed_mpn_toom53_for_toom32_mul	tune/common.c	/^speed_mpn_toom53_for_toom32_mul (struct speed_params *s)$/;"	f
speed_mpn_toom53_for_toom42_mul	tune/common.c	/^speed_mpn_toom53_for_toom42_mul (struct speed_params *s)$/;"	f
speed_mpn_toom54_for_toom43_mul	tune/common.c	/^speed_mpn_toom54_for_toom43_mul (struct speed_params *s)$/;"	f
speed_mpn_toom63_mul	tune/common.c	/^speed_mpn_toom63_mul (struct speed_params *s)$/;"	f
speed_mpn_toom6_sqr	tune/common.c	/^speed_mpn_toom6_sqr (struct speed_params *s)$/;"	f
speed_mpn_toom6h_mul	tune/common.c	/^speed_mpn_toom6h_mul (struct speed_params *s)$/;"	f
speed_mpn_toom8_sqr	tune/common.c	/^speed_mpn_toom8_sqr (struct speed_params *s)$/;"	f
speed_mpn_toom8h_mul	tune/common.c	/^speed_mpn_toom8h_mul (struct speed_params *s)$/;"	f
speed_mpn_udiv_qrnnd	tune/common.c	/^speed_mpn_udiv_qrnnd (struct speed_params *s)$/;"	f
speed_mpn_udiv_qrnnd_r	tune/common.c	/^speed_mpn_udiv_qrnnd_r (struct speed_params *s)$/;"	f
speed_mpn_umul_ppmm	tune/common.c	/^speed_mpn_umul_ppmm (struct speed_params *s)$/;"	f
speed_mpn_umul_ppmm_r	tune/common.c	/^speed_mpn_umul_ppmm_r (struct speed_params *s)$/;"	f
speed_mpn_xnor_n	tune/common.c	/^speed_mpn_xnor_n (struct speed_params *s)$/;"	f
speed_mpn_xor_n	tune/common.c	/^speed_mpn_xor_n (struct speed_params *s)$/;"	f
speed_mpq_init_clear	tune/common.c	/^speed_mpq_init_clear (struct speed_params *s)$/;"	f
speed_mpz_2fac_ui	tune/common.c	/^speed_mpz_2fac_ui (struct speed_params *s)$/;"	f
speed_mpz_add	tune/common.c	/^speed_mpz_add (struct speed_params *s)$/;"	f
speed_mpz_bin_ui	tune/common.c	/^speed_mpz_bin_ui (struct speed_params *s)$/;"	f
speed_mpz_bin_uiui	tune/common.c	/^speed_mpz_bin_uiui (struct speed_params *s)$/;"	f
speed_mpz_fac_ui	tune/common.c	/^speed_mpz_fac_ui (struct speed_params *s)$/;"	f
speed_mpz_fac_ui_tune	tune/tuneup.c	/^speed_mpz_fac_ui_tune (struct speed_params *s)$/;"	f
speed_mpz_fib2_ui	tune/common.c	/^speed_mpz_fib2_ui (struct speed_params *s)$/;"	f
speed_mpz_fib_ui	tune/common.c	/^speed_mpz_fib_ui (struct speed_params *s)$/;"	f
speed_mpz_init_clear	tune/common.c	/^speed_mpz_init_clear (struct speed_params *s)$/;"	f
speed_mpz_init_realloc_clear	tune/common.c	/^speed_mpz_init_realloc_clear (struct speed_params *s)$/;"	f
speed_mpz_jacobi	tune/common.c	/^speed_mpz_jacobi (struct speed_params *s)$/;"	f
speed_mpz_lucnum2_ui	tune/common.c	/^speed_mpz_lucnum2_ui (struct speed_params *s)$/;"	f
speed_mpz_lucnum_ui	tune/common.c	/^speed_mpz_lucnum_ui (struct speed_params *s)$/;"	f
speed_mpz_mod	tune/common.c	/^speed_mpz_mod (struct speed_params *s)$/;"	f
speed_mpz_powm	tune/common.c	/^speed_mpz_powm (struct speed_params *s)$/;"	f
speed_mpz_powm_mod	tune/common.c	/^speed_mpz_powm_mod (struct speed_params *s)$/;"	f
speed_mpz_powm_redc	tune/common.c	/^speed_mpz_powm_redc (struct speed_params *s)$/;"	f
speed_mpz_powm_sec	tune/common.c	/^speed_mpz_powm_sec (struct speed_params *s)$/;"	f
speed_mpz_powm_ui	tune/common.c	/^speed_mpz_powm_ui (struct speed_params *s)$/;"	f
speed_mpz_urandomb	tune/common.c	/^speed_mpz_urandomb (struct speed_params *s)$/;"	f
speed_noop	tune/common.c	/^speed_noop (struct speed_params *s)$/;"	f
speed_noop_wxs	tune/common.c	/^speed_noop_wxs (struct speed_params *s)$/;"	f
speed_noop_wxys	tune/common.c	/^speed_noop_wxys (struct speed_params *s)$/;"	f
speed_operand_dst	tune/common.c	/^speed_operand_dst (struct speed_params *s, mp_ptr ptr, mp_size_t size)$/;"	f
speed_operand_src	tune/common.c	/^speed_operand_src (struct speed_params *s, mp_ptr ptr, mp_size_t size)$/;"	f
speed_operator_div	tune/common.c	/^speed_operator_div (struct speed_params *s)$/;"	f
speed_operator_mod	tune/common.c	/^speed_operator_mod (struct speed_params *s)$/;"	f
speed_option_addrs	tune/common.c	/^int   speed_option_addrs = 0;$/;"	v
speed_option_cycles_broken	tune/common.c	/^int   speed_option_cycles_broken = 0;$/;"	v
speed_option_set	tune/common.c	/^speed_option_set (const char *s)$/;"	f
speed_option_verbose	tune/common.c	/^int   speed_option_verbose = 0;$/;"	v
speed_params	tune/speed.h	/^struct speed_params {$/;"	s
speed_precision	tune/time.c	/^int     speed_precision = 0;$/;"	v
speed_randinit	tune/common.c	/^speed_randinit (struct speed_params *s, gmp_randstate_ptr rstate)$/;"	f
speed_routine_count_zeros_setup	tune/common.c	/^speed_routine_count_zeros_setup (struct speed_params *s,$/;"	f
speed_starttime	tune/time.c	/^speed_starttime (void)$/;"	f
speed_time_init	tune/time.c	/^speed_time_init (void)$/;"	f
speed_time_string	tune/time.c	/^char    speed_time_string[256];$/;"	v
speed_udiv_qrnnd	tune/common.c	/^speed_udiv_qrnnd (struct speed_params *s)$/;"	f
speed_udiv_qrnnd_c	tune/common.c	/^speed_udiv_qrnnd_c (struct speed_params *s)$/;"	f
speed_umul_ppmm	tune/common.c	/^speed_umul_ppmm (struct speed_params *s)$/;"	f
speed_unittime	tune/time.c	/^double  speed_unittime;$/;"	v
spelling	demos/pexpr.c	/^  char *spelling;$/;"	m	struct:functions	file:
spinner	tests/spinner.c	/^spinner (void)$/;"	f
spinner_count	tests/spinner.c	/^unsigned long  spinner_count = 0;$/;"	v
spinner_init	tests/spinner.c	/^spinner_init (void)$/;"	f
spinner_signal	tests/spinner.c	/^spinner_signal (int signum)$/;"	f
spinner_tick	tests/spinner.c	/^int  spinner_tick = 1;     \/* 1 ready to print, 0 not *\/$/;"	v
spinner_wanted	tests/spinner.c	/^int  spinner_wanted = -1;  \/* -1 uninitialized, 1 wanted, 0 not *\/$/;"	v
sprintf	demos/perl/GMP.pm	/^sub sprintf {$/;"	s
sq_res_0x100	gen-psqr.c	/^mpz_t  *sq_res_0x100;          \/* table of limbs *\/$/;"	v
sq_res_0x100_fraction	gen-psqr.c	/^double sq_res_0x100_fraction;  \/* sq_res_0x100_num \/ 256 *\/$/;"	v
sq_res_0x100_num	gen-psqr.c	/^int    sq_res_0x100_num;       \/* squares in sq_res_0x100 *\/$/;"	v
sqr	tune/tuneup.c	/^  mp_size_t         sqr;$/;"	m	struct:fft_param_t	file:
sqr_basecase_threshold	tune/tuneup.c	/^mp_size_t  sqr_basecase_threshold       = MP_SIZE_T_MAX;$/;"	v
sqr_fft_modf_threshold	tune/tuneup.c	/^mp_size_t  sqr_fft_modf_threshold       = MP_SIZE_T_MAX;$/;"	v
sqr_fft_threshold	tune/tuneup.c	/^mp_size_t  sqr_fft_threshold            = MP_SIZE_T_MAX;$/;"	v
sqr_toom2_threshold	gmp-impl.h	/^  mp_size_t            sqr_toom2_threshold;$/;"	m	struct:cpuvec_t
sqr_toom2_threshold	tune/tuneup.c	/^mp_size_t  sqr_toom2_threshold$/;"	v
sqr_toom3_threshold	gmp-impl.h	/^  mp_size_t            sqr_toom3_threshold;$/;"	m	struct:cpuvec_t
sqr_toom3_threshold	tune/tuneup.c	/^mp_size_t  sqr_toom3_threshold          = SQR_TOOM3_THRESHOLD_LIMIT;$/;"	v
sqr_toom4_threshold	tune/tuneup.c	/^mp_size_t  sqr_toom4_threshold          = SQR_TOOM4_THRESHOLD_LIMIT;$/;"	v
sqr_toom6_threshold	tune/tuneup.c	/^mp_size_t  sqr_toom6_threshold          = SQR_TOOM6_THRESHOLD_LIMIT;$/;"	v
sqr_toom8_threshold	tune/tuneup.c	/^mp_size_t  sqr_toom8_threshold          = SQR_TOOM8_THRESHOLD_LIMIT;$/;"	v
sqrlo_basecase_threshold	tune/tuneup.c	/^mp_size_t  sqrlo_basecase_threshold     = MP_SIZE_T_MAX;$/;"	v
sqrlo_dc_threshold	tune/tuneup.c	/^mp_size_t  sqrlo_dc_threshold           = MP_SIZE_T_MAX;$/;"	v
sqrlo_sqr_threshold	tune/tuneup.c	/^mp_size_t  sqrlo_sqr_threshold          = MP_SIZE_T_MAX;$/;"	v
sqrmod_bnm1_threshold	tune/tuneup.c	/^mp_size_t  sqrmod_bnm1_threshold        = MP_SIZE_T_MAX;$/;"	v
sqrt_s0	gmp-impl.h	/^  unsigned long sqrt_s0;	   \/* misnomer for sqrt(s[SIEVESIZE-1]) *\/$/;"	m	struct:__anon14
sqrtrem_valid_p	mini-gmp/tests/t-sqrt.c	/^sqrtrem_valid_p (const mpz_t u, const mpz_t s, const mpz_t r)$/;"	f	file:
square_mask	gen-psqr.c	/^square_mask (mpz_t mask, int m)$/;"	f
src	tests/devel/try.c	/^  char  src[NUM_SOURCES];$/;"	m	struct:try_t	file:
src	tune/speed.h	/^  } src[5], dst[4];$/;"	m	struct:speed_params	typeref:struct:speed_params::__anon39
src_num	tune/speed.h	/^  unsigned   src_num, dst_num;$/;"	m	struct:speed_params
srcdir	mini-gmp/tests/Makefile	/^srcdir=.$/;"	m
srcptr_type	gmpxx.h	/^  typedef mpf_srcptr srcptr_type;$/;"	t	struct:__gmp_resolve_expr
srcptr_type	gmpxx.h	/^  typedef mpq_srcptr srcptr_type;$/;"	t	struct:__gmp_resolve_expr
srcptr_type	gmpxx.h	/^  typedef mpz_srcptr srcptr_type;$/;"	t	struct:__gmp_resolve_expr
srd	mpn/powerpc64/mode64/dive_1.asm	/^	srd	d, d, r0$/;"	d
srlx	mpn/sparc64/ultrasparct3/dive_1.asm	/^	srlx	d, %i4, d$/;"	d
srlx	mpn/sparc64/ultrasparct3/dive_1.asm	/^	srlx	d, 1, %g1$/;"	d
srlx	mpn/sparc64/ultrasparct3/invert_limb.asm	/^	srlx	d, 1, %g4$/;"	d
srlx	mpn/sparc64/ultrasparct3/invert_limb.asm	/^	srlx	d, 24, %g4$/;"	d
srlx	mpn/sparc64/ultrasparct3/invert_limb.asm	/^	srlx	d, 54, %g1$/;"	d
srlx	mpn/sparc64/ultrasparct3/mode1o.asm	/^	srlx	d, 1, %g1$/;"	d
stack	demos/calc/calc.c	/^mpz_t    stack[100];$/;"	v
stack_downwards_helper	demos/pexpr.c	/^stack_downwards_helper (char *xp)$/;"	f
stack_downwards_p	demos/pexpr.c	/^stack_downwards_p (void)$/;"	f
start	tune/speed.c	/^  mp_size_t start, end;$/;"	m	struct:size_array_t	file:
start_cgt	tune/time.c	/^static struct_timespec  start_cgt;$/;"	v	file:
start_cycles	tune/time.c	/^static unsigned         start_cycles[2];$/;"	v	file:
start_grus	tune/time.c	/^static struct_rusage    start_grus;$/;"	v	file:
start_gtod	tune/time.c	/^static struct_timeval   start_gtod;$/;"	v	file:
start_mftb	tune/time.c	/^static unsigned         start_mftb[2];$/;"	v	file:
start_rrt	tune/time.c	/^static timebasestruct_t start_rrt;$/;"	v	file:
start_sgi	tune/time.c	/^static unsigned         start_sgi;$/;"	v	file:
start_stck	tune/time.c	/^static stck_t           start_stck;$/;"	v	file:
start_times	tune/time.c	/^static struct_tms       start_times;$/;"	v	file:
stat_debug	tests/rand/stat.c	/^unsigned int stat_debug = 0;$/;"	v
state	gmpxx.h	/^  __gmp_randstate_struct *state;$/;"	m	class:__gmp_expr
state	gmpxx.h	/^  gmp_randstate_t state;$/;"	m	class:gmp_randclass
state	mini-gmp/tests/hex-random.c	/^static gmp_randstate_t state;$/;"	v	file:
statement	demos/calc/calc.y	/^statement:$/;"	l
statements	demos/calc/calc.y	/^statements:$/;"	l
status	tests/amd64check.c	/^  int  status;$/;"	m	struct:__anon29	file:
status	tests/x86check.c	/^  unsigned  status;$/;"	m	struct:__anon30	file:
stck_t	tune/time.c	/^typedef uint64_t  stck_t; \/* gcc for s390 is quite new, always has uint64_t *\/$/;"	t	file:
stck_t	tune/time.c	/^typedef unsigned long  stck_t;   \/* dummy *\/$/;"	t	file:
std	cxx/limits.cc	/^namespace std {$/;"	n	file:
std	gmpxx.h	/^namespace std {$/;"	n
step	gmp-impl.h	/^  gmp_doscan_step_t   step;$/;"	m	struct:gmp_doscan_funs_t
step	scanf/fscanffuns.c	/^step (FILE *fp, int n)$/;"	f	file:
step	scanf/sscanffuns.c	/^step (const char **sp, int n)$/;"	f	file:
step	tune/tuneup.c	/^  int               step;           \/* how much to step absolutely *\/$/;"	m	struct:param_t	file:
step_factor	tune/tuneup.c	/^  double            step_factor;    \/* how much to step relatively *\/$/;"	m	struct:param_t	file:
stop_factor	tune/tuneup.c	/^  double            stop_factor;$/;"	m	struct:param_t	file:
stop_since_change	tune/tuneup.c	/^  int               stop_since_change;$/;"	m	struct:param_t	file:
str	demos/calc/calc.c	/^  char  *str;$/;"	m	union:YYSTYPE	file:
str	demos/calc/calc.h	/^  char  *str;$/;"	m	union:YYSTYPE
str	demos/perl/test.pl	/^sub str {$/;"	s
str	gmp-impl.h	/^  char *str;$/;"	m	class:gmp_allocated_string
str	gmpxx.h	/^  char *str;$/;"	m	struct:__gmp_alloc_cstring
str	tests/tests.h	/^  string str() {$/;"	f	class:ostringstream
strchr	gmp-impl.h	287;"	d
strerror	tests/devel/try.c	/^strerror (int n)$/;"	f
strerror	tune/time.c	219;"	d	file:
string_urandomb	tests/mpz/convert.c	/^string_urandomb (char *bp, size_t len, int base, gmp_randstate_ptr rands)$/;"	f
strmatch_wild	tests/devel/try.c	/^strmatch_wild (const char *pattern, const char *str)$/;"	f
strnlen	printf/repl-vsnprintf.c	/^strnlen (const char *s, size_t n)$/;"	f	file:
strtoul	tune/speed.c	83;"	d	file:
strtoupper	tests/misc.c	/^strtoupper (char *s_orig)$/;"	f
struct_rusage	tune/time.c	347;"	d	file:
struct_rusage	tune/time.c	351;"	d	file:
struct_timespec	tune/time.c	337;"	d	file:
struct_timespec	tune/time.c	340;"	d	file:
struct_timeval	tune/time.c	356;"	d	file:
struct_timeval	tune/time.c	360;"	d	file:
struct_tms	tune/time.c	365;"	d	file:
struct_tms	tune/time.c	369;"	d	file:
sub	mpn/ia64/add_n_sub_n.asm	/^	sub	d0 = u0, v0		C				M I$/;"	d
sub	mpn/ia64/add_n_sub_n.asm	/^	sub	d1 = u1, v1		C				M I$/;"	d
sub	mpn/ia64/add_n_sub_n.asm	/^	sub	d2 = u2, v2		C				M I$/;"	d
sub	mpn/ia64/add_n_sub_n.asm	/^	sub	d3 = u3, v3		C				M I$/;"	d
sub	mpn/x86_64/div_qr_1n_pi1.asm	/^	sub	D, %rax$/;"	d
sub	mpn/x86_64/div_qr_1n_pi1.asm	/^	sub	D, B2md$/;"	d
sub	mpn/x86_64/divrem_1.asm	/^	sub	d, %rbp$/;"	d
sub	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^	sub	D, %rax$/;"	d
sub	mpn/x86_64/k8/div_qr_1n_pi1.asm	/^	sub	D, B2md$/;"	d
sub_ddmmss	longlong.h	1014;"	d
sub_ddmmss	longlong.h	1055;"	d
sub_ddmmss	longlong.h	1107;"	d
sub_ddmmss	longlong.h	1186;"	d
sub_ddmmss	longlong.h	1342;"	d
sub_ddmmss	longlong.h	1427;"	d
sub_ddmmss	longlong.h	1521;"	d
sub_ddmmss	longlong.h	1543;"	d
sub_ddmmss	longlong.h	1602;"	d
sub_ddmmss	longlong.h	1790;"	d
sub_ddmmss	longlong.h	1830;"	d
sub_ddmmss	longlong.h	1872;"	d
sub_ddmmss	longlong.h	1994;"	d
sub_ddmmss	longlong.h	314;"	d
sub_ddmmss	longlong.h	396;"	d
sub_ddmmss	longlong.h	430;"	d
sub_ddmmss	longlong.h	446;"	d
sub_ddmmss	longlong.h	548;"	d
sub_ddmmss	longlong.h	616;"	d
sub_ddmmss	longlong.h	639;"	d
sub_ddmmss	longlong.h	690;"	d
sub_ddmmss	longlong.h	709;"	d
sub_ddmmss	longlong.h	823;"	d
sub_ddmmss	longlong.h	873;"	d
submul	mpn/generic/hgcd_reduce.c	/^submul (mp_ptr rp, mp_size_t rn,$/;"	f	file:
submul	mpn/hgcd_reduce.c	/^submul (mp_ptr rp, mp_size_t rn,$/;"	f	file:
sumspills	gen-trialdivtab.c	/^sumspills (mpz_t ppp, mpz_t *a, int n)$/;"	f
t	gen-bases.c	/^mpz_t  t;$/;"	v
t	mpn/generic/toom42_mulmid.c	85;"	d	file:
t	mpn/toom42_mulmid.c	85;"	d	file:
t_rand	tests/devel/try.c	/^int  t_rand;$/;"	v
t_random	tests/devel/try.c	/^t_random (mp_ptr ptr, mp_size_t n)$/;"	f
table	demos/expr/expr-impl.h	/^  const struct mpexpr_operator_t  *table;$/;"	m	struct:mpexpr_parse_t	typeref:struct:mpexpr_parse_t::mpexpr_operator_t
table	gen-bases.c	/^table (int limb_bits, int nail_bits)$/;"	f
table	gen-fib.c	/^table (int numb_bits)$/;"	f
table_name	tune/tuneup.c	/^  const char        *table_name;$/;"	m	struct:fft_param_t	file:
tag	tests/amd64check.c	/^  int  tag;$/;"	m	struct:__anon29	file:
tag	tests/x86check.c	/^  unsigned  tag;$/;"	m	struct:__anon30	file:
tb_high	tune/time.c	/^  unsigned int    tb_high;$/;"	m	struct:timebasestruct_dummy	file:
tb_low	tune/time.c	/^  unsigned int    tb_low;$/;"	m	struct:timebasestruct_dummy	file:
tcnttab	mpz/bin_uiui.c	/^static const unsigned char tcnttab[] = {0, 1, 1, 2, 2, 4, 4, 6};$/;"	v	file:
temp1	tests/mpz/t-gcd.c	/^mpz_t gcd1, gcd2, s, temp1, temp2, temp3;$/;"	v
temp2	tests/mpz/t-gcd.c	/^mpz_t gcd1, gcd2, s, temp1, temp2, temp3;$/;"	v
temp3	tests/mpz/t-gcd.c	/^mpz_t gcd1, gcd2, s, temp1, temp2, temp3;$/;"	v
term	demos/pexpr.c	/^term (char *str, expr_t *e)$/;"	f
test	mpn/x86_64/divrem_1.asm	/^	test	d, d$/;"	d
test	tests/mpn/t-bdiv.c	/^static unsigned long test;$/;"	v	file:
test	tests/mpn/t-div.c	/^static signed long test;$/;"	v	file:
test_2by1	mini-gmp/tests/t-invert.c	/^test_2by1(const mpz_t u)$/;"	f	file:
test_3by2	mini-gmp/tests/t-invert.c	/^test_3by2(const mpz_t u)$/;"	f	file:
test_denorms	tests/mpf/t-get_d.c	/^test_denorms (int prc)$/;"	f
test_program	mini-gmp/tests/run-tests	/^test_program () {$/;"	f
test_small	mini-gmp/tests/t-str.c	/^test_small (void)$/;"	f	file:
test_sscanf_eof_ok	tests/misc/t-scanf.c	/^test_sscanf_eof_ok (void)$/;"	f
test_varargs_macros	configure	/^  test_varargs_macros ();$/;"	f
testfree	mini-gmp/tests/testutils.c	/^testfree (void *p)$/;"	f
testhalves	mini-gmp/tests/testutils.c	/^testhalves (int count, void (*tested_fun) (int))$/;"	f
testlogops	mini-gmp/tests/t-logops.c	/^testlogops (int count)$/;"	f
testmain	mini-gmp/tests/t-add.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-aorsmul.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-bitops.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-cmp_d.c	/^testmain (int argc, char *argv[])$/;"	f
testmain	mini-gmp/tests/t-comb.c	/^testmain (int argc, char *argv[])$/;"	f
testmain	mini-gmp/tests/t-cong.c	/^testmain (int argc, char *argv[])$/;"	f
testmain	mini-gmp/tests/t-div.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-div_2exp.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-double.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-gcd.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-import.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-invert.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-lcm.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-limbs.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-logops.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-mul.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-powm.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-pprime_p.c	/^testmain (int argc, char *argv[])$/;"	f
testmain	mini-gmp/tests/t-reuse.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-root.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-scan.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-signed.c	/^testmain (int argc, char *argv[])$/;"	f
testmain	mini-gmp/tests/t-sqrt.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-str.c	/^testmain (int argc, char **argv)$/;"	f
testmain	mini-gmp/tests/t-sub.c	/^testmain (int argc, char **argv)$/;"	f
tests	tests/mpz/t-perfpow.c	/^} static tests[] =$/;"	v	file:
tests_allocate	tests/memory.c	/^tests_allocate (size_t size)$/;"	f
tests_dbl_mant_bits	tests/misc.c	/^tests_dbl_mant_bits (void)$/;"	f
tests_end	tests/misc.c	/^tests_end (void)$/;"	f
tests_free	tests/memory.c	/^tests_free (void *ptr, size_t size)$/;"	f
tests_free_find	tests/memory.c	/^tests_free_find (void *ptr)$/;"	f
tests_free_nosize	tests/memory.c	/^tests_free_nosize (void *ptr)$/;"	f
tests_hardware_getround	tests/misc.c	/^tests_hardware_getround (void)$/;"	f
tests_hardware_setround	tests/misc.c	/^tests_hardware_setround (int mode)$/;"	f
tests_infinity_d	tests/misc.c	/^tests_infinity_d (void)$/;"	f
tests_isinf	tests/misc.c	/^tests_isinf (double d)$/;"	f
tests_memory_end	tests/memory.c	/^tests_memory_end (void)$/;"	f
tests_memory_find	tests/memory.c	/^tests_memory_find (void *ptr)$/;"	f
tests_memory_list	tests/memory.c	/^struct header  *tests_memory_list = NULL;$/;"	v	typeref:struct:header
tests_memory_start	tests/memory.c	/^tests_memory_start (void)$/;"	f
tests_memory_valid	tests/memory.c	/^tests_memory_valid (void *ptr)$/;"	f
tests_rand_end	tests/misc.c	/^tests_rand_end (void)$/;"	f
tests_rand_start	tests/misc.c	/^tests_rand_start (void)$/;"	f
tests_reallocate	tests/memory.c	/^tests_reallocate (void *ptr, size_t old_size, size_t new_size)$/;"	f
tests_setjmp_sigfpe	tests/tests.h	72;"	d
tests_sigfpe_done	tests/misc.c	/^tests_sigfpe_done (void)$/;"	f
tests_sigfpe_handler	tests/misc.c	/^tests_sigfpe_handler (int sig)$/;"	f
tests_sigfpe_target	tests/misc.c	/^jmp_buf    tests_sigfpe_target;$/;"	v
tests_start	tests/misc.c	/^tests_start (void)$/;"	f
this_fn	tests/mpn/t-instrument.c	/^  void  *this_fn;$/;"	m	struct:__anon28	file:
threshold_name	tune/tuneup.c	/^  const char        *threshold_name;$/;"	m	struct:fft_param_t	file:
throw	tests/cxx/clocale.c	/^  throw()$/;"	f
throw	tests/misc/t-locale.c	/^  throw()$/;"	f
throw_expr	tests/cxx/t-do-exceptions-work-at-all-with-this-compiler.cc	/^throw_expr ()$/;"	f
time	tune/speed.c	/^  double                  time;$/;"	m	struct:choice_t	file:
time	tune/tuneup.c	/^  double time;$/;"	m	struct:fft_cache	file:
time_base_to_time	tune/time.c	324;"	d	file:
time_divisor	tune/speed.h	/^  double     time_divisor; \/* optionally set by the speed routine *\/$/;"	m	struct:speed_params
timebasestruct_diff_secs	tune/time.c	/^timebasestruct_diff_secs (const timebasestruct_t *end,$/;"	f
timebasestruct_dummy	tune/time.c	/^struct timebasestruct_dummy {$/;"	s	file:
timebasestruct_t	tune/time.c	327;"	d	file:
times	tune/time.c	368;"	d	file:
times_tick_boundary	tune/time.c	/^times_tick_boundary (void)$/;"	f
times_unittime	tune/time.c	/^static double  times_unittime;$/;"	v	file:
timespec_diff_secs	tune/time.c	/^timespec_diff_secs (const struct_timespec *end, const struct_timespec *start)$/;"	f
timespec_dummy	tune/time.c	/^struct timespec_dummy {$/;"	s	file:
timeval_diff_secs	tune/time.c	/^timeval_diff_secs (const struct_timeval *end, const struct_timeval *start)$/;"	f
timeval_dummy	tune/time.c	/^struct timeval_dummy {$/;"	s	file:
timeval_tv_sec	tune/freq.c	699;"	d	file:
timeval_tv_sec	tune/time.c	642;"	d	file:
timeval_tv_sec	tune/time.c	826;"	d	file:
timeval_tv_usec	tune/freq.c	700;"	d	file:
timeval_tv_usec	tune/time.c	643;"	d	file:
timeval_tv_usec	tune/time.c	827;"	d	file:
tinyness_before	gmpxx.h	/^    static const bool tinyness_before = false;$/;"	m	class:std::numeric_limits
tmp_align_t	gmp-impl.h	/^union tmp_align_t {$/;"	u
tmp_debug_entry_t	gmp-impl.h	/^struct tmp_debug_entry_t {$/;"	s
tmp_debug_t	gmp-impl.h	/^struct tmp_debug_t {$/;"	s
tmp_marker	gmp-impl.h	/^struct tmp_marker$/;"	s
tmp_reentrant_t	gmp-impl.h	/^struct tmp_reentrant_t {$/;"	s
tmp_stack	tal-notreent.c	/^struct tmp_stack$/;"	s	file:
tmp_stack	tal-notreent.c	/^typedef struct tmp_stack tmp_stack;$/;"	t	typeref:struct:tmp_stack	file:
tms_dummy	tune/time.c	/^struct tms_dummy {$/;"	s	file:
tms_utime	tune/time.c	/^  long  tms_utime;$/;"	m	struct:tms_dummy	file:
token	demos/expr/expr-impl.h	/^  int                             token;$/;"	m	struct:mpexpr_parse_t
token_op	demos/expr/expr-impl.h	/^  const struct mpexpr_operator_t  *token_op;$/;"	m	struct:mpexpr_parse_t	typeref:struct:mpexpr_parse_t::mpexpr_operator_t
toom6_all_pos	gmp-impl.h	/^enum toom6_flags {toom6_all_pos = 0, toom6_vm1_neg = 1, toom6_vm2_neg = 2};$/;"	e	enum:toom6_flags
toom6_flags	gmp-impl.h	/^enum toom6_flags {toom6_all_pos = 0, toom6_vm1_neg = 1, toom6_vm2_neg = 2};$/;"	g
toom6_vm1_neg	gmp-impl.h	/^enum toom6_flags {toom6_all_pos = 0, toom6_vm1_neg = 1, toom6_vm2_neg = 2};$/;"	e	enum:toom6_flags
toom6_vm2_neg	gmp-impl.h	/^enum toom6_flags {toom6_all_pos = 0, toom6_vm1_neg = 1, toom6_vm2_neg = 2};$/;"	e	enum:toom6_flags
toom7_flags	gmp-impl.h	/^enum toom7_flags { toom7_w1_neg = 1, toom7_w3_neg = 2 };$/;"	g
toom7_w1_neg	gmp-impl.h	/^enum toom7_flags { toom7_w1_neg = 1, toom7_w3_neg = 2 };$/;"	e	enum:toom7_flags
toom7_w3_neg	gmp-impl.h	/^enum toom7_flags { toom7_w1_neg = 1, toom7_w3_neg = 2 };$/;"	e	enum:toom7_flags
top	demos/calc/calc.y	/^top:$/;"	l
total_alloc	mini-gmp/tests/testutils.c	/^static size_t total_alloc = 0;$/;"	v	file:
total_fraction	gen-psqr.c	/^double  total_fraction;    \/* of squares *\/$/;"	v
total_primes	demos/primes.c	/^unsigned long total_primes = 0;$/;"	v
tp	gmp-impl.h	/^  mp_ptr u0, u1, tp;$/;"	m	struct:gcdext_ctx
tp	mpn/generic/mu_bdiv_q.c	186;"	d	file:
tp	mpn/generic/mu_bdiv_q.c	195;"	d	file:
tp	mpn/generic/mu_bdiv_q.c	223;"	d	file:
tp	mpn/generic/mu_bdiv_q.c	94;"	d	file:
tp	mpn/generic/mu_bdiv_qr.c	179;"	d	file:
tp	mpn/generic/mu_bdiv_qr.c	188;"	d	file:
tp	mpn/generic/mu_bdiv_qr.c	241;"	d	file:
tp	mpn/generic/mu_bdiv_qr.c	93;"	d	file:
tp	mpn/generic/mu_div_qr.c	249;"	d	file:
tp	mpn/generic/mu_divappr_q.c	175;"	d	file:
tp	mpn/generic/toom44_mul.c	150;"	d	file:
tp	mpn/generic/toom4_sqr.c	113;"	d	file:
tp	mpn/mu_bdiv_q.c	186;"	d	file:
tp	mpn/mu_bdiv_q.c	195;"	d	file:
tp	mpn/mu_bdiv_q.c	223;"	d	file:
tp	mpn/mu_bdiv_q.c	94;"	d	file:
tp	mpn/mu_bdiv_qr.c	179;"	d	file:
tp	mpn/mu_bdiv_qr.c	188;"	d	file:
tp	mpn/mu_bdiv_qr.c	241;"	d	file:
tp	mpn/mu_bdiv_qr.c	93;"	d	file:
tp	mpn/mu_div_qr.c	249;"	d	file:
tp	mpn/mu_divappr_q.c	175;"	d	file:
tp	mpn/toom44_mul.c	150;"	d	file:
tp	mpn/toom4_sqr.c	113;"	d	file:
tr	tests/devel/try.c	/^struct try_t  *tr;$/;"	v	typeref:struct:try_t
trap	tests/devel/try.c	/^trap (int sig)$/;"	f
trap_location	tests/devel/try.c	/^int trap_location = TRAP_NOWHERE;$/;"	v
traps	gmpxx.h	/^    static const bool traps = false;$/;"	m	class:std::numeric_limits
try_2den	tests/mpz/t-jac.c	/^try_2den (mpz_srcptr a, mpz_srcptr b_orig, int answer)$/;"	f
try_2num	tests/mpz/t-jac.c	/^try_2num (mpz_srcptr a_orig, mpz_srcptr b, int answer)$/;"	f
try_all	tests/mpz/t-jac.c	/^try_all (mpz_t a, mpz_t b, int answer)$/;"	f
try_base	tests/mpz/t-jac.c	/^try_base (mp_limb_t a, mp_limb_t b, int answer)$/;"	f
try_each	tests/mpz/t-jac.c	/^try_each (mpz_srcptr a, mpz_srcptr b, int answer)$/;"	f
try_fits_slong_p	mini-gmp/tests/t-signed.c	/^try_fits_slong_p (void)$/;"	f
try_init	tests/devel/try.c	/^try_init (void)$/;"	f
try_many	tests/devel/try.c	/^try_many (void)$/;"	f
try_mpz_bin_ui	tests/mpz/t-bin.c	/^try_mpz_bin_ui (mpz_srcptr want, mpz_srcptr n, unsigned long k)$/;"	f
try_mpz_bin_uiui	mini-gmp/tests/t-comb.c	/^try_mpz_bin_uiui (mpz_srcptr want, unsigned long n, unsigned long k)$/;"	f
try_mpz_bin_uiui	tests/mpz/t-bin.c	/^try_mpz_bin_uiui (mpz_srcptr want, unsigned long n, unsigned long k)$/;"	f
try_name	tests/devel/try.c	/^try_name (const char *name)$/;"	f
try_one	tests/devel/try.c	/^try_one (void)$/;"	f
try_op_si	mini-gmp/tests/t-signed.c	/^try_op_si (int c)$/;"	f
try_pari	tests/mpz/t-jac.c	/^try_pari (mpz_srcptr a, mpz_srcptr b, int answer)$/;"	f
try_periodic_den	tests/mpz/t-jac.c	/^try_periodic_den (mpz_srcptr a, mpz_srcptr b_orig, int answer)$/;"	f
try_periodic_num	tests/mpz/t-jac.c	/^try_periodic_num (mpz_srcptr a_orig, mpz_srcptr b, int answer)$/;"	f
try_pn	tests/mpz/t-jac.c	/^try_pn (mpz_srcptr a, mpz_srcptr b_orig, int answer)$/;"	f
try_si_zi	tests/mpz/t-jac.c	/^try_si_zi (long a, mpz_srcptr b, int answer)$/;"	f
try_t	tests/devel/try.c	/^struct try_t {$/;"	s	file:
try_ui_zi	tests/mpz/t-jac.c	/^try_ui_zi (unsigned long a, mpz_srcptr b, int answer)$/;"	f
try_zi_si	tests/mpz/t-jac.c	/^try_zi_si (mpz_srcptr a, long b, int answer)$/;"	f
try_zi_ui	tests/mpz/t-jac.c	/^try_zi_ui (mpz_srcptr a, unsigned long b, int answer)$/;"	f
try_zi_zi	tests/mpz/t-jac.c	/^try_zi_zi (mpz_srcptr a, mpz_srcptr b, int answer)$/;"	f
tryfun_t	tests/devel/try.c	/^typedef mp_limb_t (*tryfun_t) (ANYARGS);$/;"	t	file:
tst	mpn/arm/dive_1.asm	/^	tst	d, #0xff$/;"	d
tst	mpn/arm/dive_1.asm	/^	tst	d, #1$/;"	d
tst	mpn/arm/v6/dive_1.asm	/^	tst	d, #1$/;"	d
tu_alloc	mini-gmp/tests/testutils.c	/^tu_alloc (size_t size)$/;"	f	file:
tu_free	mini-gmp/tests/testutils.c	/^tu_free (void *p, size_t old_size)$/;"	f	file:
tu_realloc	mini-gmp/tests/testutils.c	/^tu_realloc (void *p, size_t old_size, size_t new_size)$/;"	f	file:
tune_binvert	tune/tuneup.c	/^tune_binvert (void)$/;"	f
tune_dc_bdiv	tune/tuneup.c	/^tune_dc_bdiv (void)$/;"	f
tune_dc_div	tune/tuneup.c	/^tune_dc_div (void)$/;"	f
tune_div_qr_1	tune/tuneup.c	/^tune_div_qr_1 (void)$/;"	f
tune_div_qr_2	tune/tuneup.c	/^tune_div_qr_2 (void)$/;"	f
tune_divexact_1	tune/tuneup.c	/^tune_divexact_1 (void)$/;"	f
tune_divrem_1	tune/tuneup.c	/^tune_divrem_1 (void)$/;"	f
tune_divrem_2	tune/tuneup.c	/^tune_divrem_2 (void)$/;"	f
tune_fac_ui	tune/tuneup.c	/^tune_fac_ui (void)$/;"	f
tune_fft_mul	tune/tuneup.c	/^tune_fft_mul (void)$/;"	f
tune_fft_sqr	tune/tuneup.c	/^tune_fft_sqr (void)$/;"	f
tune_gcd_dc	tune/tuneup.c	/^tune_gcd_dc (void)$/;"	f
tune_gcdext_dc	tune/tuneup.c	/^tune_gcdext_dc (void)$/;"	f
tune_get_str	tune/tuneup.c	/^tune_get_str (void)$/;"	f
tune_hgcd	tune/tuneup.c	/^tune_hgcd (void)$/;"	f
tune_hgcd_appr	tune/tuneup.c	/^tune_hgcd_appr (void)$/;"	f
tune_hgcd_reduce	tune/tuneup.c	/^tune_hgcd_reduce (void)$/;"	f
tune_invert	tune/tuneup.c	/^tune_invert (void)$/;"	f
tune_invertappr	tune/tuneup.c	/^tune_invertappr (void)$/;"	f
tune_jacobi_base	tune/tuneup.c	/^tune_jacobi_base (void)$/;"	f
tune_matrix22_mul	tune/tuneup.c	/^tune_matrix22_mul (void)$/;"	f
tune_mod_1	tune/tuneup.c	/^tune_mod_1 (void)$/;"	f
tune_modexact_1_odd	tune/tuneup.c	/^tune_modexact_1_odd (void)$/;"	f
tune_mu_bdiv	tune/tuneup.c	/^tune_mu_bdiv (void)$/;"	f
tune_mu_div	tune/tuneup.c	/^tune_mu_div (void)$/;"	f
tune_mul	tune/tuneup.c	/^tune_mul (void)$/;"	f
tune_mul_n	tune/tuneup.c	/^tune_mul_n (void)$/;"	f
tune_mullo	tune/tuneup.c	/^tune_mullo (void)$/;"	f
tune_mulmid	tune/tuneup.c	/^tune_mulmid (void)$/;"	f
tune_mulmod_bnm1	tune/tuneup.c	/^tune_mulmod_bnm1 (void)$/;"	f
tune_powm_sec	tune/tuneup.c	/^tune_powm_sec (void)$/;"	f
tune_preinv_divrem_1	tune/tuneup.c	/^tune_preinv_divrem_1 (void)$/;"	f
tune_redc	tune/tuneup.c	/^tune_redc (void)$/;"	f
tune_set_str	tune/tuneup.c	/^tune_set_str (void)$/;"	f
tune_sqr	tune/tuneup.c	/^tune_sqr (void)$/;"	f
tune_sqrlo	tune/tuneup.c	/^tune_sqrlo (void)$/;"	f
tune_sqrmod_bnm1	tune/tuneup.c	/^tune_sqrmod_bnm1 (void)$/;"	f
tuned_speed_mpn_divrem_1	tune/tuneup.c	/^double (*tuned_speed_mpn_divrem_1) (struct speed_params *);$/;"	v
tuneup_measure	tune/tuneup.c	/^tuneup_measure (speed_function_t fun,$/;"	f
tv_nsec	tune/time.c	/^  long  tv_nsec;$/;"	m	struct:timespec_dummy	file:
tv_sec	tune/time.c	/^  long  tv_sec;$/;"	m	struct:timespec_dummy	file:
tv_sec	tune/time.c	/^  long  tv_sec;$/;"	m	struct:timeval_dummy	file:
tv_usec	tune/time.c	/^  long  tv_usec;$/;"	m	struct:timeval_dummy	file:
twos	tests/mpz/t-bin.c	/^twos (int count)$/;"	f
type	demos/expr/expr.h	/^  int          type;$/;"	m	struct:mpexpr_operator_t
type	gmpxx.h	/^    typedef __gmp_expr<T, T> type;$/;"	t	struct:std::common_type
type	gmpxx.h	/^    typedef __gmp_expr<X, X> type;$/;"	t	struct:std::common_type
type	scanf/doscan.c	/^  char	type;$/;"	m	struct:gmp_doscan_params_t	file:
type	tests/devel/try.c	/^  int         type;$/;"	m	struct:choice_t	file:
u	gmp-impl.h	/^  mp_limb_t u[2][2];$/;"	m	struct:hgcd_matrix1
u0	gmp-impl.h	/^  mp_ptr u0, u1, tp;$/;"	m	struct:gcdext_ctx
u1	gmp-impl.h	/^  mp_ptr u0, u1, tp;$/;"	m	struct:gcdext_ctx
udiv_qr_3by2	gmp-impl.h	3129;"	d
udiv_qr_4by2	mpn/div_qr_2.c	129;"	d	file:
udiv_qr_4by2	mpn/generic/div_qr_2.c	129;"	d	file:
udiv_qrnd_unnorm	mpn/generic/get_str.c	126;"	d	file:
udiv_qrnd_unnorm	mpn/generic/get_str.c	134;"	d	file:
udiv_qrnd_unnorm	mpn/get_str.c	126;"	d	file:
udiv_qrnd_unnorm	mpn/get_str.c	134;"	d	file:
udiv_qrnnd	longlong.h	1023;"	d
udiv_qrnnd	longlong.h	1070;"	d
udiv_qrnnd	longlong.h	1123;"	d
udiv_qrnnd	longlong.h	1207;"	d
udiv_qrnnd	longlong.h	1291;"	d
udiv_qrnnd	longlong.h	1623;"	d
udiv_qrnnd	longlong.h	1648;"	d
udiv_qrnnd	longlong.h	1666;"	d
udiv_qrnnd	longlong.h	1766;"	d
udiv_qrnnd	longlong.h	1957;"	d
udiv_qrnnd	longlong.h	1971;"	d
udiv_qrnnd	longlong.h	2111;"	d
udiv_qrnnd	longlong.h	2123;"	d
udiv_qrnnd	longlong.h	218;"	d
udiv_qrnnd	longlong.h	300;"	d
udiv_qrnnd	longlong.h	367;"	d
udiv_qrnnd	longlong.h	410;"	d
udiv_qrnnd	longlong.h	510;"	d
udiv_qrnnd	longlong.h	525;"	d
udiv_qrnnd	longlong.h	625;"	d
udiv_qrnnd	longlong.h	774;"	d
udiv_qrnnd	longlong.h	840;"	d
udiv_qrnnd	longlong.h	882;"	d
udiv_qrnnd_fun	tests/devel/try.c	/^udiv_qrnnd_fun (mp_limb_t *remptr, mp_limb_t n1, mp_limb_t n0, mp_limb_t d)$/;"	f
udiv_qrnnd_half_preinv	mpn/sparc64/sparc64.h	193;"	d
udiv_qrnnd_preinv	gmp-impl.h	3067;"	d
udiv_rnnd_preinv	gmp-impl.h	3099;"	d
uint_max_def	tests/t-constants.c	/^const char *uint_max_def = "defined";$/;"	v
uint_max_def	tests/t-constants.c	/^const char *uint_max_def = "not defined";$/;"	v
ulog2	gen-bases.c	/^ulog2 (unsigned int x)$/;"	f
ulong_max_def	tests/t-constants.c	/^const char *ulong_max_def = "defined";$/;"	v
ulong_max_def	tests/t-constants.c	/^const char *ulong_max_def = "not defined";$/;"	v
umul2low	mpn/generic/redc_2.c	58;"	d	file:
umul2low	mpn/generic/redc_2.c	73;"	d	file:
umul2low	mpn/redc_2.c	58;"	d	file:
umul2low	mpn/redc_2.c	73;"	d	file:
umul_ppmm	longlong.h	1019;"	d
umul_ppmm	longlong.h	1059;"	d
umul_ppmm	longlong.h	1118;"	d
umul_ppmm	longlong.h	1133;"	d
umul_ppmm	longlong.h	1198;"	d
umul_ppmm	longlong.h	1225;"	d
umul_ppmm	longlong.h	1233;"	d
umul_ppmm	longlong.h	1237;"	d
umul_ppmm	longlong.h	1247;"	d
umul_ppmm	longlong.h	1256;"	d
umul_ppmm	longlong.h	1262;"	d
umul_ppmm	longlong.h	1272;"	d
umul_ppmm	longlong.h	1277;"	d
umul_ppmm	longlong.h	1366;"	d
umul_ppmm	longlong.h	1374;"	d
umul_ppmm	longlong.h	1497;"	d
umul_ppmm	longlong.h	1527;"	d
umul_ppmm	longlong.h	1590;"	d
umul_ppmm	longlong.h	1619;"	d
umul_ppmm	longlong.h	1639;"	d
umul_ppmm	longlong.h	1663;"	d
umul_ppmm	longlong.h	1719;"	d
umul_ppmm	longlong.h	1809;"	d
umul_ppmm	longlong.h	1877;"	d
umul_ppmm	longlong.h	1899;"	d
umul_ppmm	longlong.h	191;"	d
umul_ppmm	longlong.h	1931;"	d
umul_ppmm	longlong.h	1944;"	d
umul_ppmm	longlong.h	198;"	d
umul_ppmm	longlong.h	2006;"	d
umul_ppmm	longlong.h	2027;"	d
umul_ppmm	longlong.h	210;"	d
umul_ppmm	longlong.h	276;"	d
umul_ppmm	longlong.h	293;"	d
umul_ppmm	longlong.h	328;"	d
umul_ppmm	longlong.h	359;"	d
umul_ppmm	longlong.h	400;"	d
umul_ppmm	longlong.h	488;"	d
umul_ppmm	longlong.h	519;"	d
umul_ppmm	longlong.h	553;"	d
umul_ppmm	longlong.h	565;"	d
umul_ppmm	longlong.h	590;"	d
umul_ppmm	longlong.h	621;"	d
umul_ppmm	longlong.h	644;"	d
umul_ppmm	longlong.h	721;"	d
umul_ppmm	longlong.h	744;"	d
umul_ppmm	longlong.h	830;"	d
umul_ppmm	longlong.h	878;"	d
umul_ppmm_fun	tests/devel/try.c	/^umul_ppmm_fun (mp_limb_t *lowptr, mp_limb_t m1, mp_limb_t m2)$/;"	f
umul_ppmm_half_lowequal	mpn/sparc64/sparc64.h	117;"	d
umul_ppmm_lowequal	mpn/sparc64/sparc64.h	79;"	d
umul_ppmm_s	mpn/sparc64/sparc64.h	144;"	d
un	gmp-impl.h	/^  mp_size_t un;$/;"	m	struct:gcdext_ctx
unget	gmp-impl.h	/^  gmp_doscan_unget_t  unget;$/;"	m	struct:gmp_doscan_funs_t
unget	scanf/sscanffuns.c	/^unget (int c, const char **sp)$/;"	f	file:
unittime_string	tune/time.c	/^unittime_string (double t)$/;"	f
unput	demos/calc/calclex.c	143;"	d	file:
up	gmp-impl.h	/^  mp_ptr up;$/;"	m	struct:gcdext_ctx
up	mpn/generic/sec_invert.c	176;"	d	file:
up	mpn/generic/sec_invert.c	92;"	d	file:
up	mpn/sec_invert.c	176;"	d	file:
up	mpn/sec_invert.c	92;"	d	file:
up	tune/tune-gcd-p.c	/^  mp_ptr up;$/;"	m	struct:bench_data	file:
urandom	tests/misc.c	/^urandom (void)$/;"	f
usage	tests/devel/try.c	/^usage (const char *prog)$/;"	f
usage	tune/speed.c	/^usage (void)$/;"	f
usage_error	test-driver	/^usage_error ()$/;"	f
use_cgt	tune/time.c	/^static int  use_cgt;$/;"	v	file:
use_cycles	tune/time.c	/^static int  use_cycles;$/;"	v	file:
use_grus	tune/time.c	/^static int  use_grus;$/;"	v	file:
use_gtod	tune/time.c	/^static int  use_gtod;$/;"	v	file:
use_mftb	tune/time.c	/^static int  use_mftb;$/;"	v	file:
use_rrt	tune/time.c	/^static int  use_rrt;$/;"	v	file:
use_sgi	tune/time.c	/^static int  use_sgi;$/;"	v	file:
use_stck	tune/time.c	/^static const int  use_stck = 0;$/;"	v	file:
use_stck	tune/time.c	/^static const int  use_stck = 1;  \/* always use when available *\/$/;"	v	file:
use_tick_boundary	tune/time.c	/^static int  use_tick_boundary;$/;"	v	file:
use_times	tune/time.c	/^static int  use_times;$/;"	v	file:
ushrt_max_def	tests/t-constants.c	/^const char *ushrt_max_def = "defined";$/;"	v
ushrt_max_def	tests/t-constants.c	/^const char *ushrt_max_def = "not defined";$/;"	v
usize	gmp-impl.h	/^  mp_size_t *usize;$/;"	m	struct:gcdext_ctx
v0	mpn/generic/toom22_mul.c	174;"	d	file:
v0	mpn/generic/toom2_sqr.c	113;"	d	file:
v0	mpn/generic/toom33_mul.c	249;"	d	file:
v0	mpn/generic/toom3_sqr.c	161;"	d	file:
v0	mpn/generic/toom42_mul.c	184;"	d	file:
v0	mpn/generic/toom43_mul.c	209;"	d	file:
v0	mpn/generic/toom43_mul.c	91;"	d	file:
v0	mpn/generic/toom44_mul.c	143;"	d	file:
v0	mpn/generic/toom4_sqr.c	106;"	d	file:
v0	mpn/generic/toom52_mul.c	232;"	d	file:
v0	mpn/generic/toom52_mul.c	94;"	d	file:
v0	mpn/generic/toom53_mul.c	242;"	d	file:
v0	mpn/generic/toom54_mul.c	136;"	d	file:
v0	mpn/generic/toom54_mul.c	87;"	d	file:
v0	mpn/generic/toom62_mul.c	244;"	d	file:
v0	mpn/generic/toom63_mul.c	128;"	d	file:
v0	mpn/generic/toom63_mul.c	225;"	d	file:
v0	mpn/generic/toom6_sqr.c	119;"	d	file:
v0	mpn/generic/toom6_sqr.c	159;"	d	file:
v0	mpn/generic/toom6h_mul.c	176;"	d	file:
v0	mpn/generic/toom6h_mul.c	229;"	d	file:
v0	mpn/generic/toom8_sqr.c	148;"	d	file:
v0	mpn/generic/toom8_sqr.c	200;"	d	file:
v0	mpn/generic/toom8h_mul.c	202;"	d	file:
v0	mpn/generic/toom8h_mul.c	270;"	d	file:
v0	mpn/generic/toom_interpolate_5pts.c	198;"	d	file:
v0	mpn/generic/toom_interpolate_5pts.c	59;"	d	file:
v0	mpn/toom22_mul.c	174;"	d	file:
v0	mpn/toom2_sqr.c	113;"	d	file:
v0	mpn/toom33_mul.c	249;"	d	file:
v0	mpn/toom3_sqr.c	161;"	d	file:
v0	mpn/toom42_mul.c	184;"	d	file:
v0	mpn/toom43_mul.c	209;"	d	file:
v0	mpn/toom43_mul.c	91;"	d	file:
v0	mpn/toom44_mul.c	143;"	d	file:
v0	mpn/toom4_sqr.c	106;"	d	file:
v0	mpn/toom52_mul.c	232;"	d	file:
v0	mpn/toom52_mul.c	94;"	d	file:
v0	mpn/toom53_mul.c	242;"	d	file:
v0	mpn/toom54_mul.c	136;"	d	file:
v0	mpn/toom54_mul.c	87;"	d	file:
v0	mpn/toom62_mul.c	244;"	d	file:
v0	mpn/toom63_mul.c	128;"	d	file:
v0	mpn/toom63_mul.c	225;"	d	file:
v0	mpn/toom6_sqr.c	119;"	d	file:
v0	mpn/toom6_sqr.c	159;"	d	file:
v0	mpn/toom6h_mul.c	176;"	d	file:
v0	mpn/toom6h_mul.c	229;"	d	file:
v0	mpn/toom8_sqr.c	148;"	d	file:
v0	mpn/toom8_sqr.c	200;"	d	file:
v0	mpn/toom8h_mul.c	202;"	d	file:
v0	mpn/toom8h_mul.c	270;"	d	file:
v0	mpn/toom_interpolate_5pts.c	198;"	d	file:
v0	mpn/toom_interpolate_5pts.c	59;"	d	file:
v1	mpn/generic/toom32_mul.c	100;"	d	file:
v1	mpn/generic/toom33_mul.c	250;"	d	file:
v1	mpn/generic/toom3_sqr.c	162;"	d	file:
v1	mpn/generic/toom42_mul.c	185;"	d	file:
v1	mpn/generic/toom43_mul.c	211;"	d	file:
v1	mpn/generic/toom43_mul.c	93;"	d	file:
v1	mpn/generic/toom44_mul.c	144;"	d	file:
v1	mpn/generic/toom4_sqr.c	107;"	d	file:
v1	mpn/generic/toom52_mul.c	234;"	d	file:
v1	mpn/generic/toom52_mul.c	96;"	d	file:
v1	mpn/generic/toom53_mul.c	243;"	d	file:
v1	mpn/generic/toom54_mul.c	137;"	d	file:
v1	mpn/generic/toom54_mul.c	88;"	d	file:
v1	mpn/generic/toom62_mul.c	245;"	d	file:
v1	mpn/generic/toom63_mul.c	129;"	d	file:
v1	mpn/generic/toom63_mul.c	226;"	d	file:
v1	mpn/generic/toom6h_mul.c	177;"	d	file:
v1	mpn/generic/toom6h_mul.c	230;"	d	file:
v1	mpn/generic/toom8h_mul.c	203;"	d	file:
v1	mpn/generic/toom8h_mul.c	271;"	d	file:
v1	mpn/toom32_mul.c	100;"	d	file:
v1	mpn/toom33_mul.c	250;"	d	file:
v1	mpn/toom3_sqr.c	162;"	d	file:
v1	mpn/toom42_mul.c	185;"	d	file:
v1	mpn/toom43_mul.c	211;"	d	file:
v1	mpn/toom43_mul.c	93;"	d	file:
v1	mpn/toom44_mul.c	144;"	d	file:
v1	mpn/toom4_sqr.c	107;"	d	file:
v1	mpn/toom52_mul.c	234;"	d	file:
v1	mpn/toom52_mul.c	96;"	d	file:
v1	mpn/toom53_mul.c	243;"	d	file:
v1	mpn/toom54_mul.c	137;"	d	file:
v1	mpn/toom54_mul.c	88;"	d	file:
v1	mpn/toom62_mul.c	245;"	d	file:
v1	mpn/toom63_mul.c	129;"	d	file:
v1	mpn/toom63_mul.c	226;"	d	file:
v1	mpn/toom6h_mul.c	177;"	d	file:
v1	mpn/toom6h_mul.c	230;"	d	file:
v1	mpn/toom8h_mul.c	203;"	d	file:
v1	mpn/toom8h_mul.c	271;"	d	file:
v2	mpn/generic/toom33_mul.c	253;"	d	file:
v2	mpn/generic/toom3_sqr.c	165;"	d	file:
v2	mpn/generic/toom42_mul.c	188;"	d	file:
v2	mpn/generic/toom43_mul.c	213;"	d	file:
v2	mpn/generic/toom43_mul.c	95;"	d	file:
v2	mpn/generic/toom44_mul.c	146;"	d	file:
v2	mpn/generic/toom4_sqr.c	109;"	d	file:
v2	mpn/generic/toom52_mul.c	236;"	d	file:
v2	mpn/generic/toom52_mul.c	98;"	d	file:
v2	mpn/generic/toom53_mul.c	245;"	d	file:
v2	mpn/generic/toom54_mul.c	138;"	d	file:
v2	mpn/generic/toom54_mul.c	89;"	d	file:
v2	mpn/generic/toom62_mul.c	247;"	d	file:
v2	mpn/generic/toom63_mul.c	130;"	d	file:
v2	mpn/generic/toom63_mul.c	227;"	d	file:
v2	mpn/generic/toom6_sqr.c	120;"	d	file:
v2	mpn/generic/toom6_sqr.c	160;"	d	file:
v2	mpn/generic/toom6h_mul.c	178;"	d	file:
v2	mpn/generic/toom6h_mul.c	231;"	d	file:
v2	mpn/generic/toom8_sqr.c	149;"	d	file:
v2	mpn/generic/toom8_sqr.c	201;"	d	file:
v2	mpn/generic/toom8h_mul.c	204;"	d	file:
v2	mpn/generic/toom8h_mul.c	272;"	d	file:
v2	mpn/toom33_mul.c	253;"	d	file:
v2	mpn/toom3_sqr.c	165;"	d	file:
v2	mpn/toom42_mul.c	188;"	d	file:
v2	mpn/toom43_mul.c	213;"	d	file:
v2	mpn/toom43_mul.c	95;"	d	file:
v2	mpn/toom44_mul.c	146;"	d	file:
v2	mpn/toom4_sqr.c	109;"	d	file:
v2	mpn/toom52_mul.c	236;"	d	file:
v2	mpn/toom52_mul.c	98;"	d	file:
v2	mpn/toom53_mul.c	245;"	d	file:
v2	mpn/toom54_mul.c	138;"	d	file:
v2	mpn/toom54_mul.c	89;"	d	file:
v2	mpn/toom62_mul.c	247;"	d	file:
v2	mpn/toom63_mul.c	130;"	d	file:
v2	mpn/toom63_mul.c	227;"	d	file:
v2	mpn/toom6_sqr.c	120;"	d	file:
v2	mpn/toom6_sqr.c	160;"	d	file:
v2	mpn/toom6h_mul.c	178;"	d	file:
v2	mpn/toom6h_mul.c	231;"	d	file:
v2	mpn/toom8_sqr.c	149;"	d	file:
v2	mpn/toom8_sqr.c	201;"	d	file:
v2	mpn/toom8h_mul.c	204;"	d	file:
v2	mpn/toom8h_mul.c	272;"	d	file:
v3	mpn/generic/toom54_mul.c	139;"	d	file:
v3	mpn/generic/toom54_mul.c	90;"	d	file:
v3	mpn/generic/toom63_mul.c	131;"	d	file:
v3	mpn/generic/toom63_mul.c	228;"	d	file:
v3	mpn/generic/toom6h_mul.c	179;"	d	file:
v3	mpn/generic/toom6h_mul.c	232;"	d	file:
v3	mpn/generic/toom8h_mul.c	205;"	d	file:
v3	mpn/generic/toom8h_mul.c	273;"	d	file:
v3	mpn/toom54_mul.c	139;"	d	file:
v3	mpn/toom54_mul.c	90;"	d	file:
v3	mpn/toom63_mul.c	131;"	d	file:
v3	mpn/toom63_mul.c	228;"	d	file:
v3	mpn/toom6h_mul.c	179;"	d	file:
v3	mpn/toom6h_mul.c	232;"	d	file:
v3	mpn/toom8h_mul.c	205;"	d	file:
v3	mpn/toom8h_mul.c	273;"	d	file:
va_copy	gmp-impl.h	305;"	d
va_copy	gmp-impl.h	308;"	d
va_equal	printf/doprnt.c	75;"	d	file:
val	demos/pexpr.c	/^    mpz_t val;$/;"	m	union:expr::__anon1	file:
val	gmpxx.h	/^  __gmp_expr<T, T> val;$/;"	m	class:__gmp_temp
val	gmpxx.h	/^  mpf_class val;$/;"	m	class:__gmp_temp
val	gmpxx.h	/^  typename __gmp_resolve_ref<T>::ref_type val;$/;"	m	struct:__gmp_unary_expr
val1	gmpxx.h	/^  typename __gmp_resolve_ref<T>::ref_type val1;$/;"	m	struct:__gmp_binary_expr
val1_type	gmpxx.h	/^  typedef U val1_type;$/;"	t	class:__gmp_expr
val1_type	gmpxx.h	/^  typedef __gmp_expr<T, T> val1_type;$/;"	t	class:__gmp_expr
val1_type	gmpxx.h	/^  typedef __gmp_expr<T, U> val1_type;$/;"	t	class:__gmp_expr
val1_type	gmpxx.h	/^  typedef __gmp_expr<U, V> val1_type;$/;"	t	class:__gmp_expr
val2	gmpxx.h	/^  typename __gmp_resolve_ref<U>::ref_type val2;$/;"	m	struct:__gmp_binary_expr
val2_type	gmpxx.h	/^  typedef U val2_type;$/;"	t	class:__gmp_expr
val2_type	gmpxx.h	/^  typedef V val2_type;$/;"	t	class:__gmp_expr
val2_type	gmpxx.h	/^  typedef __gmp_expr<T, T> val2_type;$/;"	t	class:__gmp_expr
val2_type	gmpxx.h	/^  typedef __gmp_expr<T, U> val2_type;$/;"	t	class:__gmp_expr
val2_type	gmpxx.h	/^  typedef __gmp_expr<T, V> val2_type;$/;"	t	class:__gmp_expr
val2_type	gmpxx.h	/^  typedef __gmp_expr<T, W> val2_type;$/;"	t	class:__gmp_expr
val2_type	gmpxx.h	/^  typedef __gmp_expr<U, V> val2_type;$/;"	t	class:__gmp_expr
val2_type	gmpxx.h	/^  typedef __gmp_expr<V, W> val2_type;$/;"	t	class:__gmp_expr
val_type	gmpxx.h	/^  typedef U val_type;$/;"	t	class:__gmp_expr
val_type	gmpxx.h	/^  typedef __gmp_expr<T, T> val_type;$/;"	t	class:__gmp_expr
val_type	gmpxx.h	/^  typedef __gmp_expr<T, U> val_type;$/;"	t	class:__gmp_expr
validate	tests/devel/try.c	/^  void        (*validate) (void);$/;"	m	struct:try_t	file:
validate_bdiv_q_1	tests/devel/try.c	/^validate_bdiv_q_1$/;"	f
validate_div_qr_1_pi1	tests/devel/try.c	/^validate_div_qr_1_pi1 (void)$/;"	f
validate_divexact_1	tests/devel/try.c	/^validate_divexact_1 (void)$/;"	f
validate_fail	tests/devel/try.c	/^validate_fail (void)$/;"	f
validate_mod_34lsub1	tests/devel/try.c	/^validate_mod_34lsub1 (void)$/;"	f
validate_modexact_1_odd	tests/devel/try.c	/^validate_modexact_1_odd (void)$/;"	f
validate_modexact_1c_odd	tests/devel/try.c	/^validate_modexact_1c_odd (void)$/;"	f
validate_name	tests/devel/try.c	/^  const char  *validate_name;$/;"	m	struct:try_t	file:
validate_sqrt	tests/devel/try.c	/^validate_sqrt (void)$/;"	f
validate_sqrtrem	tests/devel/try.c	/^validate_sqrtrem (void)$/;"	f
value	demos/calc/calc-common.h	/^  int   value;$/;"	m	struct:calc_keywords_t
value	tests/mpn/t-hgcd.c	/^struct value { int res; const char *a; const char *b; };$/;"	s	file:
value_type	gmpxx.h	/^  typedef mpf_t value_type;$/;"	t	class:__gmp_expr
value_type	gmpxx.h	/^  typedef mpf_t value_type;$/;"	t	struct:__gmp_resolve_expr
value_type	gmpxx.h	/^  typedef mpq_t value_type;$/;"	t	class:__gmp_expr
value_type	gmpxx.h	/^  typedef mpq_t value_type;$/;"	t	struct:__gmp_resolve_expr
value_type	gmpxx.h	/^  typedef mpz_t value_type;$/;"	t	class:__gmp_expr
value_type	gmpxx.h	/^  typedef mpz_t value_type;$/;"	t	struct:__gmp_resolve_expr
values	mini-gmp/tests/t-double.c	/^} values[] = {$/;"	v	typeref:struct:__anon20	file:
var	demos/calc/calc.c	/^  int   var;$/;"	m	union:YYSTYPE	file:
var	demos/calc/calc.h	/^  int   var;$/;"	m	union:YYSTYPE
var	demos/expr/expr-impl.h	/^  mpX_srcptr                      *var;$/;"	m	struct:mpexpr_parse_t
variable	demos/calc/calc.c	/^mpz_t  variable[26];$/;"	v
vendor	mpn/x86/fat/fat.c	/^  const char  *vendor;$/;"	m	struct:__anon21	file:
vendor	mpn/x86_64/fat/fat.c	/^  const char  *vendor;$/;"	m	struct:__anon22	file:
verbose_flag	tests/mpn/t-hgcd_appr.c	/^static int verbose_flag = 0;$/;"	v	file:
verify	tests/mpn/t-aors_1.c	/^verify (const char *name, int i,$/;"	f
very_large_prec	tests/cxx/t-prec.cc	/^small_prec = 64, medium_prec = 128, large_prec = 192, very_large_prec = 256;$/;"	v
vh	mpn/generic/toom44_mul.c	148;"	d	file:
vh	mpn/generic/toom4_sqr.c	111;"	d	file:
vh	mpn/generic/toom53_mul.c	247;"	d	file:
vh	mpn/generic/toom62_mul.c	249;"	d	file:
vh	mpn/toom44_mul.c	148;"	d	file:
vh	mpn/toom4_sqr.c	111;"	d	file:
vh	mpn/toom53_mul.c	247;"	d	file:
vh	mpn/toom62_mul.c	249;"	d	file:
via_printf	demos/perl/test.pl	/^sub via_printf {$/;"	s
vinf	mpn/generic/toom22_mul.c	175;"	d	file:
vinf	mpn/generic/toom2_sqr.c	114;"	d	file:
vinf	mpn/generic/toom33_mul.c	251;"	d	file:
vinf	mpn/generic/toom3_sqr.c	163;"	d	file:
vinf	mpn/generic/toom42_mul.c	186;"	d	file:
vinf	mpn/generic/toom43_mul.c	214;"	d	file:
vinf	mpn/generic/toom43_mul.c	96;"	d	file:
vinf	mpn/generic/toom44_mul.c	145;"	d	file:
vinf	mpn/generic/toom4_sqr.c	108;"	d	file:
vinf	mpn/generic/toom52_mul.c	237;"	d	file:
vinf	mpn/generic/toom52_mul.c	99;"	d	file:
vinf	mpn/generic/toom53_mul.c	244;"	d	file:
vinf	mpn/generic/toom62_mul.c	246;"	d	file:
vinf	mpn/toom22_mul.c	175;"	d	file:
vinf	mpn/toom2_sqr.c	114;"	d	file:
vinf	mpn/toom33_mul.c	251;"	d	file:
vinf	mpn/toom3_sqr.c	163;"	d	file:
vinf	mpn/toom42_mul.c	186;"	d	file:
vinf	mpn/toom43_mul.c	214;"	d	file:
vinf	mpn/toom43_mul.c	96;"	d	file:
vinf	mpn/toom44_mul.c	145;"	d	file:
vinf	mpn/toom4_sqr.c	108;"	d	file:
vinf	mpn/toom52_mul.c	237;"	d	file:
vinf	mpn/toom52_mul.c	99;"	d	file:
vinf	mpn/toom53_mul.c	244;"	d	file:
vinf	mpn/toom62_mul.c	246;"	d	file:
vm1	mpn/generic/toom22_mul.c	176;"	d	file:
vm1	mpn/generic/toom2_sqr.c	115;"	d	file:
vm1	mpn/generic/toom32_mul.c	101;"	d	file:
vm1	mpn/generic/toom33_mul.c	252;"	d	file:
vm1	mpn/generic/toom3_sqr.c	164;"	d	file:
vm1	mpn/generic/toom42_mul.c	187;"	d	file:
vm1	mpn/generic/toom43_mul.c	210;"	d	file:
vm1	mpn/generic/toom43_mul.c	92;"	d	file:
vm1	mpn/generic/toom44_mul.c	149;"	d	file:
vm1	mpn/generic/toom4_sqr.c	112;"	d	file:
vm1	mpn/generic/toom52_mul.c	233;"	d	file:
vm1	mpn/generic/toom52_mul.c	95;"	d	file:
vm1	mpn/generic/toom53_mul.c	248;"	d	file:
vm1	mpn/generic/toom62_mul.c	250;"	d	file:
vm1	mpn/toom22_mul.c	176;"	d	file:
vm1	mpn/toom2_sqr.c	115;"	d	file:
vm1	mpn/toom32_mul.c	101;"	d	file:
vm1	mpn/toom33_mul.c	252;"	d	file:
vm1	mpn/toom3_sqr.c	164;"	d	file:
vm1	mpn/toom42_mul.c	187;"	d	file:
vm1	mpn/toom43_mul.c	210;"	d	file:
vm1	mpn/toom43_mul.c	92;"	d	file:
vm1	mpn/toom44_mul.c	149;"	d	file:
vm1	mpn/toom4_sqr.c	112;"	d	file:
vm1	mpn/toom52_mul.c	233;"	d	file:
vm1	mpn/toom52_mul.c	95;"	d	file:
vm1	mpn/toom53_mul.c	248;"	d	file:
vm1	mpn/toom62_mul.c	250;"	d	file:
vm2	mpn/generic/toom43_mul.c	212;"	d	file:
vm2	mpn/generic/toom43_mul.c	94;"	d	file:
vm2	mpn/generic/toom44_mul.c	147;"	d	file:
vm2	mpn/generic/toom4_sqr.c	110;"	d	file:
vm2	mpn/generic/toom52_mul.c	235;"	d	file:
vm2	mpn/generic/toom52_mul.c	97;"	d	file:
vm2	mpn/generic/toom53_mul.c	246;"	d	file:
vm2	mpn/generic/toom62_mul.c	248;"	d	file:
vm2	mpn/toom43_mul.c	212;"	d	file:
vm2	mpn/toom43_mul.c	94;"	d	file:
vm2	mpn/toom44_mul.c	147;"	d	file:
vm2	mpn/toom4_sqr.c	110;"	d	file:
vm2	mpn/toom52_mul.c	235;"	d	file:
vm2	mpn/toom52_mul.c	97;"	d	file:
vm2	mpn/toom53_mul.c	246;"	d	file:
vm2	mpn/toom62_mul.c	248;"	d	file:
vp	tune/tune-gcd-p.c	/^  mp_ptr vp;$/;"	m	struct:bench_data	file:
vsnprintf	printf/snprntffuns.c	44;"	d	file:
vsnprintf	printf/vasprintf.c	40;"	d	file:
vz_dot	tests/rand/statlib.c	/^vz_dot (mpz_t rop, mpz_t V1[], mpz_t V2[], unsigned int n)$/;"	f
w0	mpn/generic/toom_interpolate_6pts.c	238;"	d	file:
w0	mpn/generic/toom_interpolate_6pts.c	89;"	d	file:
w0	mpn/generic/toom_interpolate_7pts.c	111;"	d	file:
w0	mpn/toom_interpolate_6pts.c	238;"	d	file:
w0	mpn/toom_interpolate_6pts.c	89;"	d	file:
w0	mpn/toom_interpolate_7pts.c	111;"	d	file:
w2	mpn/generic/toom_interpolate_7pts.c	112;"	d	file:
w2	mpn/toom_interpolate_7pts.c	112;"	d	file:
w3	mpn/generic/toom_interpolate_6pts.c	237;"	d	file:
w3	mpn/generic/toom_interpolate_6pts.c	88;"	d	file:
w3	mpn/toom_interpolate_6pts.c	237;"	d	file:
w3	mpn/toom_interpolate_6pts.c	88;"	d	file:
w5	mpn/generic/toom_interpolate_6pts.c	236;"	d	file:
w5	mpn/generic/toom_interpolate_6pts.c	87;"	d	file:
w5	mpn/toom_interpolate_6pts.c	236;"	d	file:
w5	mpn/toom_interpolate_6pts.c	87;"	d	file:
w6	mpn/generic/toom_interpolate_7pts.c	113;"	d	file:
w6	mpn/toom_interpolate_7pts.c	113;"	d	file:
want	demos/expr/t-expr.c	/^  const char  *want;$/;"	m	struct:data_t	file:
want	tests/mpz/t-mul_i.c	/^mpz_t got, want, x;$/;"	v
want	tests/mpz/t-perfpow.c	/^  char want;$/;"	m	struct:__anon37	file:
which_chunk	gmp-impl.h	/^  struct tmp_stack *which_chunk;$/;"	m	struct:tmp_marker	typeref:struct:tmp_marker::tmp_stack
width	gmp-impl.h	/^  int         width;         \/* width field *\/$/;"	m	struct:doprnt_params_t
width	scanf/doscan.c	/^  int	width;$/;"	m	struct:gmp_doscan_params_t	file:
win_size	mpn/generic/powlo.c	/^win_size (mp_bitcnt_t eb)$/;"	f	file:
win_size	mpn/generic/powm.c	/^win_size (mp_bitcnt_t eb)$/;"	f	file:
win_size	mpn/generic/sec_powm.c	/^win_size (mp_bitcnt_t enb)$/;"	f	file:
win_size	mpn/powlo.c	/^win_size (mp_bitcnt_t eb)$/;"	f	file:
win_size	mpn/powm.c	/^win_size (mp_bitcnt_t eb)$/;"	f	file:
win_size	mpn/sec_powm.c	/^win_size (mp_bitcnt_t enb)$/;"	f	file:
win_size	tune/tuneup.c	/^win_size (mp_bitcnt_t eb)$/;"	f
winsize	tune/tuneup.c	/^int winsize;$/;"	v
ws	mpn/generic/toom54_mul.c	142;"	d	file:
ws	mpn/generic/toom54_mul.c	93;"	d	file:
ws	mpn/generic/toom63_mul.c	134;"	d	file:
ws	mpn/generic/toom63_mul.c	231;"	d	file:
ws	mpn/toom54_mul.c	142;"	d	file:
ws	mpn/toom54_mul.c	93;"	d	file:
ws	mpn/toom63_mul.c	134;"	d	file:
ws	mpn/toom63_mul.c	231;"	d	file:
wse	mpn/generic/toom6_sqr.c	121;"	d	file:
wse	mpn/generic/toom6h_mul.c	181;"	d	file:
wse	mpn/generic/toom6h_mul.c	233;"	d	file:
wse	mpn/generic/toom8_sqr.c	150;"	d	file:
wse	mpn/generic/toom8_sqr.c	215;"	d	file:
wse	mpn/generic/toom8h_mul.c	207;"	d	file:
wse	mpn/generic/toom8h_mul.c	274;"	d	file:
wse	mpn/toom6_sqr.c	121;"	d	file:
wse	mpn/toom6h_mul.c	181;"	d	file:
wse	mpn/toom6h_mul.c	233;"	d	file:
wse	mpn/toom8_sqr.c	150;"	d	file:
wse	mpn/toom8_sqr.c	215;"	d	file:
wse	mpn/toom8h_mul.c	207;"	d	file:
wse	mpn/toom8h_mul.c	274;"	d	file:
wsi	mpn/generic/toom6h_mul.c	180;"	d	file:
wsi	mpn/generic/toom6h_mul.c	255;"	d	file:
wsi	mpn/generic/toom8h_mul.c	206;"	d	file:
wsi	mpn/generic/toom8h_mul.c	297;"	d	file:
wsi	mpn/toom6h_mul.c	180;"	d	file:
wsi	mpn/toom6h_mul.c	255;"	d	file:
wsi	mpn/toom8h_mul.c	206;"	d	file:
wsi	mpn/toom8h_mul.c	297;"	d	file:
x	tests/mpn/t-scan.c	/^mp_limb_t  x[SIZE+1];$/;"	v
x	tests/mpz/t-mul_i.c	/^mpz_t got, want, x;$/;"	v
x2	tests/rand/statlib.c	/^x2 (mpf_t V,			\/* result *\/$/;"	f
x2_table	tests/rand/statlib.c	/^x2_table (double t[],$/;"	f
x2_table_X	tests/rand/statlib.c	/^static double x2_table_X[][7] = {$/;"	v	file:
xmalloc	bootstrap.c	38;"	d	file:
xp	mpn/generic/invertappr.c	165;"	d	file:
xp	mpn/generic/invertappr.c	289;"	d	file:
xp	mpn/generic/mulmod_bnm1.c	153;"	d	file:
xp	mpn/generic/mulmod_bnm1.c	332;"	d	file:
xp	mpn/generic/sqrmod_bnm1.c	140;"	d	file:
xp	mpn/generic/sqrmod_bnm1.c	290;"	d	file:
xp	mpn/invertappr.c	165;"	d	file:
xp	mpn/invertappr.c	289;"	d	file:
xp	mpn/mulmod_bnm1.c	153;"	d	file:
xp	mpn/mulmod_bnm1.c	332;"	d	file:
xp	mpn/sqrmod_bnm1.c	140;"	d	file:
xp	mpn/sqrmod_bnm1.c	290;"	d	file:
xp	tune/speed.h	/^  mp_ptr     xp;	\/* first argument *\/$/;"	m	struct:speed_params
xp_block	tune/speed.h	/^  mp_ptr     xp_block;	\/* first special SPEED_BLOCK_SIZE block *\/$/;"	m	struct:speed_params
xxx	tal-notreent.c	/^static tmp_stack xxx = {&xxx, &xxx, 0};$/;"	v	file:
yp	tune/speed.h	/^  mp_ptr     yp;	\/* second argument *\/$/;"	m	struct:speed_params
yp_block	tune/speed.h	/^  mp_ptr     yp_block;	\/* second special SPEED_BLOCK_SIZE block *\/$/;"	m	struct:speed_params
yy_accept	demos/calc/calclex.c	/^static yyconst short int yy_accept[39] =$/;"	v	file:
yy_at_bol	demos/calc/calclex.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	demos/calc/calclex.c	/^static yyconst short int yy_base[43] =$/;"	v	file:
yy_buf_pos	demos/calc/calclex.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	demos/calc/calclex.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_state	demos/calc/calclex.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	demos/calc/calclex.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	demos/calc/calclex.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	demos/calc/calclex.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	demos/calc/calclex.c	/^static yyconst short int yy_chk[68] =$/;"	v	file:
yy_create_buffer	demos/calc/calclex.c	/^YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )$/;"	f
yy_current_buffer	demos/calc/calclex.c	/^static YY_BUFFER_STATE yy_current_buffer = 0;$/;"	v	file:
yy_def	demos/calc/calclex.c	/^static yyconst short int yy_def[43] =$/;"	v	file:
yy_delete_buffer	demos/calc/calclex.c	/^void yy_delete_buffer( YY_BUFFER_STATE b )$/;"	f
yy_did_buffer_switch_on_eof	demos/calc/calclex.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	demos/calc/calclex.c	/^static yyconst int yy_ec[256] =$/;"	v	file:
yy_fatal_error	demos/calc/calclex.c	/^static void yy_fatal_error( yyconst char msg[] )$/;"	f	file:
yy_fill_buffer	demos/calc/calclex.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_alloc	demos/calc/calclex.c	/^static void *yy_flex_alloc( yy_size_t size )$/;"	f	file:
yy_flex_free	demos/calc/calclex.c	/^static void yy_flex_free( void *ptr )$/;"	f	file:
yy_flex_realloc	demos/calc/calclex.c	/^static void *yy_flex_realloc( void *ptr, yy_size_t size )$/;"	f	file:
yy_flex_strlen	demos/calc/calclex.c	/^static int yy_flex_strlen( yyconst char *s )$/;"	f	file:
yy_flex_strncpy	demos/calc/calclex.c	/^static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )$/;"	f	file:
yy_flush_buffer	demos/calc/calclex.c	/^void yy_flush_buffer( YY_BUFFER_STATE b )$/;"	f
yy_get_next_buffer	demos/calc/calclex.c	/^static int yy_get_next_buffer(void)$/;"	f	file:
yy_get_previous_state	demos/calc/calclex.c	/^static yy_state_type yy_get_previous_state(void)$/;"	f	file:
yy_hold_char	demos/calc/calclex.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	demos/calc/calclex.c	/^static int yy_init = 1;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	demos/calc/calclex.c	/^void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )$/;"	f
yy_input_file	demos/calc/calclex.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	demos/calc/calclex.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	demos/calc/calclex.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	demos/calc/calclex.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	demos/calc/calclex.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	demos/calc/calclex.c	/^void yy_load_buffer_state( void )$/;"	f
yy_meta	demos/calc/calclex.c	/^static yyconst int yy_meta[19] =$/;"	v	file:
yy_n_chars	demos/calc/calclex.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	demos/calc/calclex.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	demos/calc/calclex.c	254;"	d	file:
yy_nxt	demos/calc/calclex.c	/^static yyconst short int yy_nxt[68] =$/;"	v	file:
yy_pop_state	demos/calc/calclex.c	/^static void yy_pop_state(void)$/;"	f	file:
yy_push_state	demos/calc/calclex.c	/^static void yy_push_state( int new_state )$/;"	f	file:
yy_reduce_print	demos/calc/calc.c	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_scan_buffer	demos/calc/calclex.c	/^YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )$/;"	f
yy_scan_bytes	demos/calc/calclex.c	/^YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )$/;"	f
yy_scan_string	demos/calc/calclex.c	/^YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )$/;"	f
yy_set_bol	demos/calc/calclex.c	263;"	d	file:
yy_set_interactive	demos/calc/calclex.c	256;"	d	file:
yy_size_t	demos/calc/calclex.c	/^typedef unsigned int yy_size_t;$/;"	t	file:
yy_stack_print	demos/calc/calc.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	demos/calc/calclex.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_start_stack	demos/calc/calclex.c	/^static int *yy_start_stack = 0;$/;"	v	file:
yy_start_stack_depth	demos/calc/calclex.c	/^static int yy_start_stack_depth = 0;$/;"	v	file:
yy_start_stack_ptr	demos/calc/calclex.c	/^static int yy_start_stack_ptr = 0;$/;"	v	file:
yy_state_type	demos/calc/calclex.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	demos/calc/calclex.c	/^void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )$/;"	f
yy_symbol_print	demos/calc/calc.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	demos/calc/calc.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_top_state	demos/calc/calclex.c	/^static int yy_top_state(void)$/;"	f	file:
yy_try_NUL_trans	demos/calc/calclex.c	/^static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )$/;"	f	file:
yyalloc	demos/calc/calc.c	/^union yyalloc$/;"	u	file:
yychar	demos/calc/calc.c	/^int yychar;$/;"	v
yycheck	demos/calc/calc.c	/^static const yytype_int8 yycheck[] =$/;"	v	file:
yyclearin	demos/calc/calc.c	919;"	d	file:
yyconst	demos/calc/calclex.c	61;"	d	file:
yyconst	demos/calc/calclex.c	63;"	d	file:
yydebug	demos/calc/calc.c	/^int yydebug;$/;"	v
yydefact	demos/calc/calc.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	demos/calc/calc.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydestruct	demos/calc/calc.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyerrok	demos/calc/calc.c	918;"	d	file:
yyerror	demos/calc/calc.c	/^yyerror (char *s)$/;"	f
yyin	demos/calc/calclex.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	demos/calc/calclex.c	/^static int yyinput()$/;"	f	file:
yyleng	demos/calc/calclex.c	/^int yyleng;$/;"	v
yyless	demos/calc/calclex.c	132;"	d	file:
yyless	demos/calc/calclex.c	1614;"	d	file:
yyless	demos/calc/calclex.c	1615;"	d	file:
yymore	demos/calc/calclex.c	388;"	d	file:
yynerrs	demos/calc/calc.c	/^int yynerrs;$/;"	v
yyout	demos/calc/calclex.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	demos/calc/calc.c	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact_value_is_default	demos/calc/calc.c	834;"	d	file:
yyparse	demos/calc/calc.c	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yypgoto	demos/calc/calc.c	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yyprhs	demos/calc/calc.c	/^static const yytype_uint8 yyprhs[] =$/;"	v	file:
yyr1	demos/calc/calc.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	demos/calc/calc.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrestart	demos/calc/calclex.c	/^void yyrestart( FILE *input_file )$/;"	f
yyrhs	demos/calc/calc.c	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	demos/calc/calc.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyss_alloc	demos/calc/calc.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	demos/calc/calc.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	demos/calc/calc.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	demos/calc/calc.c	1186;"	d	file:
yystrlen	demos/calc/calc.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	demos/calc/calc.c	1163;"	d	file:
yystype	demos/calc/calc.c	320;"	d	file:
yystype	demos/calc/calc.h	125;"	d
yysyntax_error	demos/calc/calc.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	demos/calc/calc.c	/^static const yytype_int8 yytable[] =$/;"	v	file:
yytable_value_is_error	demos/calc/calc.c	837;"	d	file:
yyterminate	demos/calc/calclex.c	557;"	d	file:
yytext	demos/calc/calclex.c	/^char *yytext;$/;"	v
yytext_ptr	demos/calc/calclex.c	276;"	d	file:
yytname	demos/calc/calc.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	demos/calc/calc.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	demos/calc/calc.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	demos/calc/calc.h	/^   enum yytokentype {$/;"	g
yytoknum	demos/calc/calc.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	demos/calc/calc.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	demos/calc/calc.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	demos/calc/calc.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	demos/calc/calc.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	demos/calc/calc.c	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	demos/calc/calc.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	demos/calc/calc.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	demos/calc/calc.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	demos/calc/calc.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	demos/calc/calc.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	demos/calc/calclex.c	/^static void yyunput( int c, char *yy_bp )$/;"	f	file:
yyvs_alloc	demos/calc/calc.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	demos/calc/calclex.c	/^yywrap ()$/;"	f
z	demos/expr/expr-impl.h	/^  mpz_t   z;$/;"	m	union:mpX_t
z1	tests/rand/t-rand.c	/^const char *z1[ENTS] = {"0", "1", "1", "1", "1", "0", "1", "1", "1", "1"};$/;"	v
z10	tests/rand/t-rand.c	/^const char *z10[ENTS] = {"29c", "213", "f1", "17f", "12b", "178", "383", "d3", "3a3", "281"};$/;"	v
z127	tests/rand/t-rand.c	/^const char *z127[ENTS] = {"2f66ba932aaf58a071fd8f0742a99a0c", "73cfa3c664c9c1753507ca60ec6b8425", "53ea074ca131dec12cd68b8aa8e20278", "3cf5ac8c343532f8a53cc0eb47581f73", "50c11d5869e208aa1b9aa317b8c2d0a9", "b23163c892876472b1ef19642eace09", "489f4c03d41f87509c8d6c90ce674f95", "2ab8748c96aa6762ea1932b44c9d7164", "98cb5591fc05ad31afbbc1d67b90edd", "77848bb991fd0be331adcf1457fbc672"};$/;"	v
z128	tests/rand/t-rand.c	/^const char *z128[ENTS] = {"af66ba932aaf58a071fd8f0742a99a0c", "73cfa3c664c9c1753507ca60ec6b8425", "53ea074ca131dec12cd68b8aa8e20278", "3cf5ac8c343532f8a53cc0eb47581f73", "50c11d5869e208aa1b9aa317b8c2d0a9", "8b23163c892876472b1ef19642eace09", "489f4c03d41f87509c8d6c90ce674f95", "aab8748c96aa6762ea1932b44c9d7164", "98cb5591fc05ad31afbbc1d67b90edd", "f7848bb991fd0be331adcf1457fbc672"};$/;"	v
z15	tests/rand/t-rand.c	/^const char *z15[ENTS] = {"29c", "1a13", "74f1", "257f", "592b", "4978", "4783", "7cd3", "5ba3", "4681"};$/;"	v
z16	tests/rand/t-rand.c	/^const char *z16[ENTS] = {"29c", "9a13", "74f1", "a57f", "d92b", "4978", "c783", "fcd3", "5ba3", "c681"};$/;"	v
z17	tests/rand/t-rand.c	/^const char *z17[ENTS] = {"51e", "f17a", "54ff", "1a335", "cf65", "5d6f", "583f", "618f", "1bc6", "98ff"};$/;"	v
z2	tests/rand/t-rand.c	/^const char *z2[ENTS] = {"0", "3", "1", "3", "3", "0", "3", "3", "3", "1"};$/;"	v
z3	tests/rand/t-rand.c	/^const char *z3[ENTS] = {"4", "3", "1", "7", "3", "0", "3", "3", "3", "1"};$/;"	v
z31	tests/rand/t-rand.c	/^const char *z31[ENTS] = {"3aecd515", "13ae8ec6", "518c8090", "81ca077", "70b7134", "7ee78d71", "323a7636", "2122cb1a", "19811941", "41fd605"};$/;"	v
z32	tests/rand/t-rand.c	/^const char *z32[ENTS] = {"baecd515", "13ae8ec6", "518c8090", "881ca077", "870b7134", "7ee78d71", "323a7636", "a122cb1a", "99811941", "841fd605"};$/;"	v
z33	tests/rand/t-rand.c	/^const char *z33[ENTS] = {"1faf4cca", "15d6ef83b", "9095fe72", "1b6a3dff6", "b17cbddd", "16e5209d4", "6f65b12c", "493bbbc6", "abf2a5d5", "6d491a3c"};$/;"	v
z4	tests/rand/t-rand.c	/^const char *z4[ENTS] = {"c", "3", "1", "f", "b", "8", "3", "3", "3", "1"};$/;"	v
z5	tests/rand/t-rand.c	/^const char *z5[ENTS] = {"1c", "13", "11", "1f", "b", "18", "3", "13", "3", "1"};$/;"	v
z63	tests/rand/t-rand.c	/^const char *z63[ENTS] = {"48a74f367fa7b5c8", "3ba9e9dc1b263076", "1e0ac84e7678e0fb", "11416581728b3e35", "36ab610523f0f1f7", "3e540e8e95c0eb4b", "439ae16057dbc9d3", "734fb260db243950", "7d3a317effc289bf", "1d80301fb3d1a0d1"};$/;"	v
z64	tests/rand/t-rand.c	/^const char *z64[ENTS] = {"48a74f367fa7b5c8", "bba9e9dc1b263076", "9e0ac84e7678e0fb", "11416581728b3e35", "b6ab610523f0f1f7", "be540e8e95c0eb4b", "439ae16057dbc9d3", "f34fb260db243950", "fd3a317effc289bf", "1d80301fb3d1a0d1"};$/;"	v
z65	tests/rand/t-rand.c	/^const char *z65[ENTS] = {"1ff77710d846d49f0", "1b1411701d709ee10", "31ffa81a208b6af4", "446638d431d3c681", "df5c569d5baa8b55", "197d99ea9bf28e5a0", "191ade09edd94cfae", "194acefa6dde5e18d", "1afc1167c56272d92", "d092994da72f206f"};$/;"	v
z_freq	tests/rand/stat.c	/^z_freq (const unsigned l1runs,$/;"	f	file:
zarr	tests/rand/t-rand.c	/^static struct rt zarr[] =$/;"	v	typeref:struct:rt	file:
zdiv_round	tests/rand/zdiv_round.c	/^zdiv_round (mpz_t rop, mpz_t n, mpz_t d)$/;"	f
zerotab	mpn/gcd_1.c	/^static const unsigned char zerotab[1 << MAXSHIFT] =$/;"	v	file:
zerotab	mpn/gcdext_1.c	/^static unsigned char zerotab[0x40] = {$/;"	v	file:
zerotab	mpn/generic/gcd_1.c	/^static const unsigned char zerotab[1 << MAXSHIFT] =$/;"	v	file:
zerotab	mpn/generic/gcdext_1.c	/^static unsigned char zerotab[0x40] = {$/;"	v	file:
~__gmp_alloc_cstring	gmpxx.h	/^  ~__gmp_alloc_cstring()$/;"	f	struct:__gmp_alloc_cstring
~__gmp_expr	gmpxx.h	/^  ~__gmp_expr() { mpf_clear(mp); }$/;"	f	class:__gmp_expr
~__gmp_expr	gmpxx.h	/^  ~__gmp_expr() { mpq_clear(mp); }$/;"	f	class:__gmp_expr
~__gmp_expr	gmpxx.h	/^  ~__gmp_expr() { mpz_clear(mp); }$/;"	f	class:__gmp_expr
~gmp_allocated_string	gmp-impl.h	/^  ~gmp_allocated_string()$/;"	f	class:gmp_allocated_string
~gmp_randclass	gmpxx.h	/^  ~gmp_randclass() { gmp_randclear(state); }$/;"	f	class:gmp_randclass
